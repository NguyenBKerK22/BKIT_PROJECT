
ModBus_RTU_Implement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006da8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe0  08006f30  08006f30  00007f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f10  08009f10  0000b234  2**0
                  CONTENTS
  4 .ARM          00000008  08009f10  08009f10  0000af10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f18  08009f18  0000b234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f18  08009f18  0000af18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f1c  08009f1c  0000af1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  08009f20  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b234  2**0
                  CONTENTS
 10 .bss          000006e8  20000234  20000234  0000b234  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000091c  2000091c  0000b234  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b234  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016cb8  00000000  00000000  0000b264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dfc  00000000  00000000  00021f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  00025d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f4f  00000000  00000000  00027100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000255bb  00000000  00000000  0002804f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b23c  00000000  00000000  0004d60a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd4e9  00000000  00000000  00068846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145d2f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050d8  00000000  00000000  00145d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0014ae4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000234 	.word	0x20000234
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006f18 	.word	0x08006f18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000238 	.word	0x20000238
 80001c4:	08006f18 	.word	0x08006f18

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <parserFrame>:
		uint8_t *Address,
		uint8_t *Function,
		uint8_t *Data,
		uint8_t *Datasize,
		uint16_t *Crc)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b087      	sub	sp, #28
 80004bc:	af00      	add	r7, sp, #0
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	607a      	str	r2, [r7, #4]
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	460b      	mov	r3, r1
 80004c6:	72fb      	strb	r3, [r7, #11]
	int i;
	*Address = pFrame[0];
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	781a      	ldrb	r2, [r3, #0]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	701a      	strb	r2, [r3, #0]
	*Function = pFrame[1];
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	785a      	ldrb	r2, [r3, #1]
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	701a      	strb	r2, [r3, #0]
	*Datasize = FrameSize - 4;
 80004d8:	7afb      	ldrb	r3, [r7, #11]
 80004da:	3b04      	subs	r3, #4
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004e0:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < *Datasize; i++){
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]
 80004e6:	e00b      	b.n	8000500 <parserFrame+0x48>
		Data[i] = *(pFrame + 2 + i);
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	3302      	adds	r3, #2
 80004ec:	68fa      	ldr	r2, [r7, #12]
 80004ee:	441a      	add	r2, r3
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	6a39      	ldr	r1, [r7, #32]
 80004f4:	440b      	add	r3, r1
 80004f6:	7812      	ldrb	r2, [r2, #0]
 80004f8:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < *Datasize; i++){
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	3301      	adds	r3, #1
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	4293      	cmp	r3, r2
 800050a:	dbed      	blt.n	80004e8 <parserFrame+0x30>
	}
	*Crc = 0;
 800050c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800050e:	2200      	movs	r2, #0
 8000510:	801a      	strh	r2, [r3, #0]
	*Crc |= ((uint16_t)(pFrame[FrameSize - 1]) << 8) | ((uint16_t)(pFrame[FrameSize - 2]) & 0x00FF);
 8000512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	b21a      	sxth	r2, r3
 8000518:	7afb      	ldrb	r3, [r7, #11]
 800051a:	3b01      	subs	r3, #1
 800051c:	68f9      	ldr	r1, [r7, #12]
 800051e:	440b      	add	r3, r1
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	021b      	lsls	r3, r3, #8
 8000524:	b219      	sxth	r1, r3
 8000526:	7afb      	ldrb	r3, [r7, #11]
 8000528:	3b02      	subs	r3, #2
 800052a:	68f8      	ldr	r0, [r7, #12]
 800052c:	4403      	add	r3, r0
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	b21b      	sxth	r3, r3
 8000532:	430b      	orrs	r3, r1
 8000534:	b21b      	sxth	r3, r3
 8000536:	4313      	orrs	r3, r2
 8000538:	b21b      	sxth	r3, r3
 800053a:	b29a      	uxth	r2, r3
 800053c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800053e:	801a      	strh	r2, [r3, #0]
}
 8000540:	bf00      	nop
 8000542:	371c      	adds	r7, #28
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <User_interface>:
void User_interface(){
 800054c:	b580      	push	{r7, lr}
 800054e:	b08e      	sub	sp, #56	@ 0x38
 8000550:	af02      	add	r7, sp, #8
	switch(User_behavior){
 8000552:	4bad      	ldr	r3, [pc, #692]	@ (8000808 <User_interface+0x2bc>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b05      	cmp	r3, #5
 8000558:	f000 812c 	beq.w	80007b4 <User_interface+0x268>
 800055c:	2b05      	cmp	r3, #5
 800055e:	f300 814a 	bgt.w	80007f6 <User_interface+0x2aa>
 8000562:	2b03      	cmp	r3, #3
 8000564:	d002      	beq.n	800056c <User_interface+0x20>
 8000566:	2b04      	cmp	r3, #4
 8000568:	d004      	beq.n	8000574 <User_interface+0x28>
//				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
//				Master_behavior = WAIT_FOR_REPLY;
			}
			break;
		default:
			break;
 800056a:	e144      	b.n	80007f6 <User_interface+0x2aa>
			User_behavior = SEND_MANUAL;
 800056c:	4ba6      	ldr	r3, [pc, #664]	@ (8000808 <User_interface+0x2bc>)
 800056e:	2204      	movs	r2, #4
 8000570:	701a      	strb	r2, [r3, #0]
			break;
 8000572:	e145      	b.n	8000800 <User_interface+0x2b4>
			if(isPress(0)){
 8000574:	2000      	movs	r0, #0
 8000576:	f000 fccf 	bl	8000f18 <isPress>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d003      	beq.n	8000588 <User_interface+0x3c>
				User_behavior = SEND_PERIOD;
 8000580:	4ba1      	ldr	r3, [pc, #644]	@ (8000808 <User_interface+0x2bc>)
 8000582:	2205      	movs	r2, #5
 8000584:	701a      	strb	r2, [r3, #0]
				break;
 8000586:	e13b      	b.n	8000800 <User_interface+0x2b4>
			if(isPress(1)){ // READ TEMPERATURE
 8000588:	2001      	movs	r0, #1
 800058a:	f000 fcc5 	bl	8000f18 <isPress>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <User_interface+0x70>
				uint8_t data[4] = {0x00,TEMPERATURE_REGISTER_ADDRESS,0x00,0x01};
 8000594:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000598:	62fb      	str	r3, [r7, #44]	@ 0x2c
				Modbus_PrepareData(&Master, SLAVE_ADDRESS, READ_HOLDING_REGISTER, data, 4);
 800059a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800059e:	2204      	movs	r2, #4
 80005a0:	9200      	str	r2, [sp, #0]
 80005a2:	2203      	movs	r2, #3
 80005a4:	2101      	movs	r1, #1
 80005a6:	4899      	ldr	r0, [pc, #612]	@ (800080c <User_interface+0x2c0>)
 80005a8:	f001 fcf6 	bl	8001f98 <Modbus_PrepareData>
				Modbus_Transmit(&Master, 5000);
 80005ac:	f241 3188 	movw	r1, #5000	@ 0x1388
 80005b0:	4896      	ldr	r0, [pc, #600]	@ (800080c <User_interface+0x2c0>)
 80005b2:	f001 fd41 	bl	8002038 <Modbus_Transmit>
				Master_behavior = PROCESSING_REPLY;
 80005b6:	4b96      	ldr	r3, [pc, #600]	@ (8000810 <User_interface+0x2c4>)
 80005b8:	2202      	movs	r2, #2
 80005ba:	701a      	strb	r2, [r3, #0]
			if(isPress(2)){ // READ HUMID
 80005bc:	2002      	movs	r0, #2
 80005be:	f000 fcab 	bl	8000f18 <isPress>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d012      	beq.n	80005ee <User_interface+0xa2>
				uint8_t data[4] = {0x00,CURRENT_REGISTER_ADDRESS,0x00,0x01};
 80005c8:	4b92      	ldr	r3, [pc, #584]	@ (8000814 <User_interface+0x2c8>)
 80005ca:	62bb      	str	r3, [r7, #40]	@ 0x28
				Modbus_PrepareData(&Master, SLAVE_ADDRESS, READ_HOLDING_REGISTER, data, 4);
 80005cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005d0:	2204      	movs	r2, #4
 80005d2:	9200      	str	r2, [sp, #0]
 80005d4:	2203      	movs	r2, #3
 80005d6:	2101      	movs	r1, #1
 80005d8:	488c      	ldr	r0, [pc, #560]	@ (800080c <User_interface+0x2c0>)
 80005da:	f001 fcdd 	bl	8001f98 <Modbus_PrepareData>
				Modbus_Transmit(&Master, 5000);
 80005de:	f241 3188 	movw	r1, #5000	@ 0x1388
 80005e2:	488a      	ldr	r0, [pc, #552]	@ (800080c <User_interface+0x2c0>)
 80005e4:	f001 fd28 	bl	8002038 <Modbus_Transmit>
				Master_behavior = PROCESSING_REPLY;
 80005e8:	4b89      	ldr	r3, [pc, #548]	@ (8000810 <User_interface+0x2c4>)
 80005ea:	2202      	movs	r2, #2
 80005ec:	701a      	strb	r2, [r3, #0]
			if(isPress(3)){ // READ HUMID
 80005ee:	2003      	movs	r0, #3
 80005f0:	f000 fc92 	bl	8000f18 <isPress>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d012      	beq.n	8000620 <User_interface+0xd4>
				uint8_t data[4] = {0x00,VOLTAGE_REGISTER_ADDRESS,0x00,0x01};
 80005fa:	4b87      	ldr	r3, [pc, #540]	@ (8000818 <User_interface+0x2cc>)
 80005fc:	627b      	str	r3, [r7, #36]	@ 0x24
				Modbus_PrepareData(&Master, SLAVE_ADDRESS, READ_HOLDING_REGISTER, data, 4);
 80005fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000602:	2204      	movs	r2, #4
 8000604:	9200      	str	r2, [sp, #0]
 8000606:	2203      	movs	r2, #3
 8000608:	2101      	movs	r1, #1
 800060a:	4880      	ldr	r0, [pc, #512]	@ (800080c <User_interface+0x2c0>)
 800060c:	f001 fcc4 	bl	8001f98 <Modbus_PrepareData>
				Modbus_Transmit(&Master, 5000);
 8000610:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000614:	487d      	ldr	r0, [pc, #500]	@ (800080c <User_interface+0x2c0>)
 8000616:	f001 fd0f 	bl	8002038 <Modbus_Transmit>
				Master_behavior = PROCESSING_REPLY;
 800061a:	4b7d      	ldr	r3, [pc, #500]	@ (8000810 <User_interface+0x2c4>)
 800061c:	2202      	movs	r2, #2
 800061e:	701a      	strb	r2, [r3, #0]
			if(isPress(4)){ // READ HUMID
 8000620:	2004      	movs	r0, #4
 8000622:	f000 fc79 	bl	8000f18 <isPress>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d012      	beq.n	8000652 <User_interface+0x106>
				uint8_t data[4] = {0x00,LIGHT_REGISTER_ADDRESS,0x00,0x01};
 800062c:	4b7b      	ldr	r3, [pc, #492]	@ (800081c <User_interface+0x2d0>)
 800062e:	623b      	str	r3, [r7, #32]
				Modbus_PrepareData(&Master, SLAVE_ADDRESS, READ_HOLDING_REGISTER, data, 4);
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	2204      	movs	r2, #4
 8000636:	9200      	str	r2, [sp, #0]
 8000638:	2203      	movs	r2, #3
 800063a:	2101      	movs	r1, #1
 800063c:	4873      	ldr	r0, [pc, #460]	@ (800080c <User_interface+0x2c0>)
 800063e:	f001 fcab 	bl	8001f98 <Modbus_PrepareData>
				Modbus_Transmit(&Master, 5000);
 8000642:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000646:	4871      	ldr	r0, [pc, #452]	@ (800080c <User_interface+0x2c0>)
 8000648:	f001 fcf6 	bl	8002038 <Modbus_Transmit>
				Master_behavior = PROCESSING_REPLY;
 800064c:	4b70      	ldr	r3, [pc, #448]	@ (8000810 <User_interface+0x2c4>)
 800064e:	2202      	movs	r2, #2
 8000650:	701a      	strb	r2, [r3, #0]
			if(isPress(5)){ // READ TEMPERATURE AND HUMID
 8000652:	2005      	movs	r0, #5
 8000654:	f000 fc60 	bl	8000f18 <isPress>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d012      	beq.n	8000684 <User_interface+0x138>
				uint8_t data[4] = {0x00,POTENTIOMETER_REGISTER_ADDRESS,0x00,0x01};
 800065e:	4b70      	ldr	r3, [pc, #448]	@ (8000820 <User_interface+0x2d4>)
 8000660:	61fb      	str	r3, [r7, #28]
				Modbus_PrepareData(&Master, SLAVE_ADDRESS, READ_HOLDING_REGISTER, data, 4);
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2204      	movs	r2, #4
 8000668:	9200      	str	r2, [sp, #0]
 800066a:	2203      	movs	r2, #3
 800066c:	2101      	movs	r1, #1
 800066e:	4867      	ldr	r0, [pc, #412]	@ (800080c <User_interface+0x2c0>)
 8000670:	f001 fc92 	bl	8001f98 <Modbus_PrepareData>
				Modbus_Transmit(&Master, 5000);
 8000674:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000678:	4864      	ldr	r0, [pc, #400]	@ (800080c <User_interface+0x2c0>)
 800067a:	f001 fcdd 	bl	8002038 <Modbus_Transmit>
				Master_behavior = PROCESSING_REPLY;
 800067e:	4b64      	ldr	r3, [pc, #400]	@ (8000810 <User_interface+0x2c4>)
 8000680:	2202      	movs	r2, #2
 8000682:	701a      	strb	r2, [r3, #0]
			if(isPress(6)){// READ MULTIPLE HOLDING REGISTER
 8000684:	2006      	movs	r0, #6
 8000686:	f000 fc47 	bl	8000f18 <isPress>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d013      	beq.n	80006b8 <User_interface+0x16c>
				uint8_t data[4] = {0x00,TEMPERATURE_REGISTER_ADDRESS,0x00,0x05};
 8000690:	f04f 63a0 	mov.w	r3, #83886080	@ 0x5000000
 8000694:	61bb      	str	r3, [r7, #24]
				Modbus_PrepareData(&Master, SLAVE_ADDRESS, READ_HOLDING_REGISTER, data, 4);
 8000696:	f107 0318 	add.w	r3, r7, #24
 800069a:	2204      	movs	r2, #4
 800069c:	9200      	str	r2, [sp, #0]
 800069e:	2203      	movs	r2, #3
 80006a0:	2101      	movs	r1, #1
 80006a2:	485a      	ldr	r0, [pc, #360]	@ (800080c <User_interface+0x2c0>)
 80006a4:	f001 fc78 	bl	8001f98 <Modbus_PrepareData>
				Modbus_Transmit(&Master, 5000);
 80006a8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80006ac:	4857      	ldr	r0, [pc, #348]	@ (800080c <User_interface+0x2c0>)
 80006ae:	f001 fcc3 	bl	8002038 <Modbus_Transmit>
				Master_behavior = PROCESSING_REPLY;
 80006b2:	4b57      	ldr	r3, [pc, #348]	@ (8000810 <User_interface+0x2c4>)
 80006b4:	2202      	movs	r2, #2
 80006b6:	701a      	strb	r2, [r3, #0]
			if(isPress(7)){// WRITE SINGLE HOLDING REGISTER
 80006b8:	2007      	movs	r0, #7
 80006ba:	f000 fc2d 	bl	8000f18 <isPress>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d013      	beq.n	80006ec <User_interface+0x1a0>
				uint8_t data[4] = {0x00,TEMPERATURE_REGISTER_ADDRESS,0x00,0x01};
 80006c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80006c8:	617b      	str	r3, [r7, #20]
				Modbus_PrepareData(&Master, SLAVE_ADDRESS, WRITE_SINGLE_HOLDING_REGISTER, data, 4);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	2204      	movs	r2, #4
 80006d0:	9200      	str	r2, [sp, #0]
 80006d2:	2206      	movs	r2, #6
 80006d4:	2101      	movs	r1, #1
 80006d6:	484d      	ldr	r0, [pc, #308]	@ (800080c <User_interface+0x2c0>)
 80006d8:	f001 fc5e 	bl	8001f98 <Modbus_PrepareData>
				Modbus_Transmit(&Master, 5000);
 80006dc:	f241 3188 	movw	r1, #5000	@ 0x1388
 80006e0:	484a      	ldr	r0, [pc, #296]	@ (800080c <User_interface+0x2c0>)
 80006e2:	f001 fca9 	bl	8002038 <Modbus_Transmit>
				Master_behavior = PROCESSING_REPLY;
 80006e6:	4b4a      	ldr	r3, [pc, #296]	@ (8000810 <User_interface+0x2c4>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	701a      	strb	r2, [r3, #0]
			if(isPress(8)){// WRITE SINGLE HOLDING REGISTER
 80006ec:	2008      	movs	r0, #8
 80006ee:	f000 fc13 	bl	8000f18 <isPress>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d012      	beq.n	800071e <User_interface+0x1d2>
				uint8_t data[4] = {0x00,CURRENT_REGISTER_ADDRESS,0x00,0x01};
 80006f8:	4b46      	ldr	r3, [pc, #280]	@ (8000814 <User_interface+0x2c8>)
 80006fa:	613b      	str	r3, [r7, #16]
				Modbus_PrepareData(&Master, SLAVE_ADDRESS, WRITE_SINGLE_HOLDING_REGISTER, data, 4);
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	2204      	movs	r2, #4
 8000702:	9200      	str	r2, [sp, #0]
 8000704:	2206      	movs	r2, #6
 8000706:	2101      	movs	r1, #1
 8000708:	4840      	ldr	r0, [pc, #256]	@ (800080c <User_interface+0x2c0>)
 800070a:	f001 fc45 	bl	8001f98 <Modbus_PrepareData>
				Modbus_Transmit(&Master, 5000);
 800070e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000712:	483e      	ldr	r0, [pc, #248]	@ (800080c <User_interface+0x2c0>)
 8000714:	f001 fc90 	bl	8002038 <Modbus_Transmit>
				Master_behavior = PROCESSING_REPLY;
 8000718:	4b3d      	ldr	r3, [pc, #244]	@ (8000810 <User_interface+0x2c4>)
 800071a:	2202      	movs	r2, #2
 800071c:	701a      	strb	r2, [r3, #0]
			if(isPress(9)){// WRITE SINGLE HOLDING REGISTER
 800071e:	2009      	movs	r0, #9
 8000720:	f000 fbfa 	bl	8000f18 <isPress>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d012      	beq.n	8000750 <User_interface+0x204>
				uint8_t data[4] = {0x00,VOLTAGE_REGISTER_ADDRESS,0x00,0x01};
 800072a:	4b3b      	ldr	r3, [pc, #236]	@ (8000818 <User_interface+0x2cc>)
 800072c:	60fb      	str	r3, [r7, #12]
				Modbus_PrepareData(&Master, SLAVE_ADDRESS, WRITE_SINGLE_HOLDING_REGISTER, data, 4);
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2204      	movs	r2, #4
 8000734:	9200      	str	r2, [sp, #0]
 8000736:	2206      	movs	r2, #6
 8000738:	2101      	movs	r1, #1
 800073a:	4834      	ldr	r0, [pc, #208]	@ (800080c <User_interface+0x2c0>)
 800073c:	f001 fc2c 	bl	8001f98 <Modbus_PrepareData>
				Modbus_Transmit(&Master, 5000);
 8000740:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000744:	4831      	ldr	r0, [pc, #196]	@ (800080c <User_interface+0x2c0>)
 8000746:	f001 fc77 	bl	8002038 <Modbus_Transmit>
				Master_behavior = PROCESSING_REPLY;
 800074a:	4b31      	ldr	r3, [pc, #196]	@ (8000810 <User_interface+0x2c4>)
 800074c:	2202      	movs	r2, #2
 800074e:	701a      	strb	r2, [r3, #0]
			if(isPress(10)){// WRITE SINGLE HOLDING REGISTER
 8000750:	200a      	movs	r0, #10
 8000752:	f000 fbe1 	bl	8000f18 <isPress>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d012      	beq.n	8000782 <User_interface+0x236>
				uint8_t data[4] = {0x00,LIGHT_REGISTER_ADDRESS,0x00,0x01};
 800075c:	4b2f      	ldr	r3, [pc, #188]	@ (800081c <User_interface+0x2d0>)
 800075e:	60bb      	str	r3, [r7, #8]
				Modbus_PrepareData(&Master, SLAVE_ADDRESS, WRITE_SINGLE_HOLDING_REGISTER, data, 4);
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2204      	movs	r2, #4
 8000766:	9200      	str	r2, [sp, #0]
 8000768:	2206      	movs	r2, #6
 800076a:	2101      	movs	r1, #1
 800076c:	4827      	ldr	r0, [pc, #156]	@ (800080c <User_interface+0x2c0>)
 800076e:	f001 fc13 	bl	8001f98 <Modbus_PrepareData>
				Modbus_Transmit(&Master, 5000);
 8000772:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000776:	4825      	ldr	r0, [pc, #148]	@ (800080c <User_interface+0x2c0>)
 8000778:	f001 fc5e 	bl	8002038 <Modbus_Transmit>
				Master_behavior = PROCESSING_REPLY;
 800077c:	4b24      	ldr	r3, [pc, #144]	@ (8000810 <User_interface+0x2c4>)
 800077e:	2202      	movs	r2, #2
 8000780:	701a      	strb	r2, [r3, #0]
			if(isPress(11)){// WRITE SINGLE HOLDING REGISTER
 8000782:	200b      	movs	r0, #11
 8000784:	f000 fbc8 	bl	8000f18 <isPress>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d035      	beq.n	80007fa <User_interface+0x2ae>
				uint8_t data[4] = {0x00,POTENTIOMETER_REGISTER_ADDRESS,0x00,0x01};
 800078e:	4b24      	ldr	r3, [pc, #144]	@ (8000820 <User_interface+0x2d4>)
 8000790:	607b      	str	r3, [r7, #4]
				Modbus_PrepareData(&Master, SLAVE_ADDRESS, WRITE_SINGLE_HOLDING_REGISTER, data, 4);
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2204      	movs	r2, #4
 8000796:	9200      	str	r2, [sp, #0]
 8000798:	2206      	movs	r2, #6
 800079a:	2101      	movs	r1, #1
 800079c:	481b      	ldr	r0, [pc, #108]	@ (800080c <User_interface+0x2c0>)
 800079e:	f001 fbfb 	bl	8001f98 <Modbus_PrepareData>
				Modbus_Transmit(&Master, 5000);
 80007a2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80007a6:	4819      	ldr	r0, [pc, #100]	@ (800080c <User_interface+0x2c0>)
 80007a8:	f001 fc46 	bl	8002038 <Modbus_Transmit>
				Master_behavior = PROCESSING_REPLY;
 80007ac:	4b18      	ldr	r3, [pc, #96]	@ (8000810 <User_interface+0x2c4>)
 80007ae:	2202      	movs	r2, #2
 80007b0:	701a      	strb	r2, [r3, #0]
			break;
 80007b2:	e022      	b.n	80007fa <User_interface+0x2ae>
			if(isPress(0)){
 80007b4:	2000      	movs	r0, #0
 80007b6:	f000 fbaf 	bl	8000f18 <isPress>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d002      	beq.n	80007c6 <User_interface+0x27a>
				User_behavior = SEND_MANUAL;
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <User_interface+0x2bc>)
 80007c2:	2204      	movs	r2, #4
 80007c4:	701a      	strb	r2, [r3, #0]
			if(timer4_flag){
 80007c6:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <User_interface+0x2d8>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d017      	beq.n	80007fe <User_interface+0x2b2>
				timer4_flag = 0;
 80007ce:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <User_interface+0x2d8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
				Modbus_PrepareData(&Master, SLAVE_ADDRESS, 0x03, data_manual, 4);
 80007d4:	2304      	movs	r3, #4
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <User_interface+0x2dc>)
 80007da:	2203      	movs	r2, #3
 80007dc:	2101      	movs	r1, #1
 80007de:	480b      	ldr	r0, [pc, #44]	@ (800080c <User_interface+0x2c0>)
 80007e0:	f001 fbda 	bl	8001f98 <Modbus_PrepareData>
				Modbus_Transmit(&Master, 5000);
 80007e4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80007e8:	4808      	ldr	r0, [pc, #32]	@ (800080c <User_interface+0x2c0>)
 80007ea:	f001 fc25 	bl	8002038 <Modbus_Transmit>
				Master_behavior = PROCESSING_REPLY;
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <User_interface+0x2c4>)
 80007f0:	2202      	movs	r2, #2
 80007f2:	701a      	strb	r2, [r3, #0]
			break;
 80007f4:	e003      	b.n	80007fe <User_interface+0x2b2>
			break;
 80007f6:	bf00      	nop
 80007f8:	e002      	b.n	8000800 <User_interface+0x2b4>
			break;
 80007fa:	bf00      	nop
 80007fc:	e000      	b.n	8000800 <User_interface+0x2b4>
			break;
 80007fe:	bf00      	nop
	}
}
 8000800:	bf00      	nop
 8000802:	3730      	adds	r7, #48	@ 0x30
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000004 	.word	0x20000004
 800080c:	20000530 	.word	0x20000530
 8000810:	20000358 	.word	0x20000358
 8000814:	01000400 	.word	0x01000400
 8000818:	01000600 	.word	0x01000600
 800081c:	01000200 	.word	0x01000200
 8000820:	01000800 	.word	0x01000800
 8000824:	20000750 	.word	0x20000750
 8000828:	20000000 	.word	0x20000000

0800082c <Master_Run>:
void Master_Run(Modbus_HandleTypeDef* hModbus){
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af04      	add	r7, sp, #16
 8000832:	6078      	str	r0, [r7, #4]
	switch(Master_behavior){
 8000834:	4b3f      	ldr	r3, [pc, #252]	@ (8000934 <Master_Run+0x108>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b03      	cmp	r3, #3
 800083a:	d06b      	beq.n	8000914 <Master_Run+0xe8>
 800083c:	2b03      	cmp	r3, #3
 800083e:	dc72      	bgt.n	8000926 <Master_Run+0xfa>
 8000840:	2b00      	cmp	r3, #0
 8000842:	d072      	beq.n	800092a <Master_Run+0xfe>
 8000844:	2b02      	cmp	r3, #2
 8000846:	d000      	beq.n	800084a <Master_Run+0x1e>
//				Master_behavior = WAIT_FOR_REPLY;
				Modbus_Transmit(&Master, 5000);
				Master_behavior = PROCESSING_REPLY;
			break;
		default:
			break;
 8000848:	e06d      	b.n	8000926 <Master_Run+0xfa>
				if(hModbus->Rx_size < 4){
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8000850:	2b03      	cmp	r3, #3
 8000852:	d803      	bhi.n	800085c <Master_Run+0x30>
					Master_behavior = PROCESSING_ERROR;
 8000854:	4b37      	ldr	r3, [pc, #220]	@ (8000934 <Master_Run+0x108>)
 8000856:	2203      	movs	r2, #3
 8000858:	701a      	strb	r2, [r3, #0]
					break;
 800085a:	e067      	b.n	800092c <Master_Run+0x100>
				parserFrame(hModbus->Rx_buf,hModbus->Rx_size ,&address, &function, data, &size, &crc_receive);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f503 7084 	add.w	r0, r3, #264	@ 0x108
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8000868:	b2d9      	uxtb	r1, r3
 800086a:	4b33      	ldr	r3, [pc, #204]	@ (8000938 <Master_Run+0x10c>)
 800086c:	9302      	str	r3, [sp, #8]
 800086e:	4b33      	ldr	r3, [pc, #204]	@ (800093c <Master_Run+0x110>)
 8000870:	9301      	str	r3, [sp, #4]
 8000872:	4b33      	ldr	r3, [pc, #204]	@ (8000940 <Master_Run+0x114>)
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	4b33      	ldr	r3, [pc, #204]	@ (8000944 <Master_Run+0x118>)
 8000878:	4a33      	ldr	r2, [pc, #204]	@ (8000948 <Master_Run+0x11c>)
 800087a:	f7ff fe1d 	bl	80004b8 <parserFrame>
				if(crc_receive == crc16(hModbus->Rx_buf, size + 2)){
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8000884:	4a2d      	ldr	r2, [pc, #180]	@ (800093c <Master_Run+0x110>)
 8000886:	7812      	ldrb	r2, [r2, #0]
 8000888:	3202      	adds	r2, #2
 800088a:	b292      	uxth	r2, r2
 800088c:	4611      	mov	r1, r2
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fb62 	bl	8000f58 <crc16>
 8000894:	4603      	mov	r3, r0
 8000896:	461a      	mov	r2, r3
 8000898:	4b27      	ldr	r3, [pc, #156]	@ (8000938 <Master_Run+0x10c>)
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	429a      	cmp	r2, r3
 800089e:	d135      	bne.n	800090c <Master_Run+0xe0>
					switch(function){
 80008a0:	4b28      	ldr	r3, [pc, #160]	@ (8000944 <Master_Run+0x118>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b10      	cmp	r3, #16
 80008a6:	d02a      	beq.n	80008fe <Master_Run+0xd2>
 80008a8:	2b10      	cmp	r3, #16
 80008aa:	dc2a      	bgt.n	8000902 <Master_Run+0xd6>
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	d001      	beq.n	80008b4 <Master_Run+0x88>
 80008b0:	2b05      	cmp	r3, #5
							break;
 80008b2:	e027      	b.n	8000904 <Master_Run+0xd8>
							uint8_t num_bytes = hModbus->Rx_buf[2];
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 80008ba:	72fb      	strb	r3, [r7, #11]
							uint16_t address = (((uint16_t)hModbus->Tx_buf[2]<<8)|(hModbus->Tx_buf[3]));
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	79db      	ldrb	r3, [r3, #7]
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	7a1b      	ldrb	r3, [r3, #8]
 80008c8:	b21b      	sxth	r3, r3
 80008ca:	4313      	orrs	r3, r2
 80008cc:	b21b      	sxth	r3, r3
 80008ce:	813b      	strh	r3, [r7, #8]
							for(int i=0;i<num_bytes;i++){
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	e00e      	b.n	80008f4 <Master_Run+0xc8>
								Holding_Register[i + address * SizeOfReg]  = hModbus->Rx_buf[i+3];
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	1cda      	adds	r2, r3, #3
 80008da:	893b      	ldrh	r3, [r7, #8]
 80008dc:	0059      	lsls	r1, r3, #1
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	440b      	add	r3, r1
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	440a      	add	r2, r1
 80008e6:	f892 1108 	ldrb.w	r1, [r2, #264]	@ 0x108
 80008ea:	4a18      	ldr	r2, [pc, #96]	@ (800094c <Master_Run+0x120>)
 80008ec:	54d1      	strb	r1, [r2, r3]
							for(int i=0;i<num_bytes;i++){
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	3301      	adds	r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	7afb      	ldrb	r3, [r7, #11]
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	dbec      	blt.n	80008d6 <Master_Run+0xaa>
							break;
 80008fc:	e002      	b.n	8000904 <Master_Run+0xd8>
							break;
 80008fe:	bf00      	nop
 8000900:	e000      	b.n	8000904 <Master_Run+0xd8>
							break;
 8000902:	bf00      	nop
					Master_behavior = IDLE;
 8000904:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <Master_Run+0x108>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
			break;
 800090a:	e00f      	b.n	800092c <Master_Run+0x100>
					Master_behavior = PROCESSING_ERROR;
 800090c:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <Master_Run+0x108>)
 800090e:	2203      	movs	r2, #3
 8000910:	701a      	strb	r2, [r3, #0]
			break;
 8000912:	e00b      	b.n	800092c <Master_Run+0x100>
				Modbus_Transmit(&Master, 5000);
 8000914:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000918:	480d      	ldr	r0, [pc, #52]	@ (8000950 <Master_Run+0x124>)
 800091a:	f001 fb8d 	bl	8002038 <Modbus_Transmit>
				Master_behavior = PROCESSING_REPLY;
 800091e:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <Master_Run+0x108>)
 8000920:	2202      	movs	r2, #2
 8000922:	701a      	strb	r2, [r3, #0]
			break;
 8000924:	e002      	b.n	800092c <Master_Run+0x100>
			break;
 8000926:	bf00      	nop
 8000928:	e000      	b.n	800092c <Master_Run+0x100>
			break;
 800092a:	bf00      	nop
	}
}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000358 	.word	0x20000358
 8000938:	20000356 	.word	0x20000356
 800093c:	20000354 	.word	0x20000354
 8000940:	20000254 	.word	0x20000254
 8000944:	20000251 	.word	0x20000251
 8000948:	20000250 	.word	0x20000250
 800094c:	2000035c 	.word	0x2000035c
 8000950:	20000530 	.word	0x20000530

08000954 <Master_get_temperature>:
float Master_get_temperature(){
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
	uint16_t res = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < SizeOfReg; i++){
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	e00d      	b.n	8000980 <Master_get_temperature+0x2c>
		res = (res<<8)|(Holding_Register[TEMPERATURE_REGISTER_ADDRESS*SizeOfReg + i]);
 8000964:	88fb      	ldrh	r3, [r7, #6]
 8000966:	021b      	lsls	r3, r3, #8
 8000968:	b21a      	sxth	r2, r3
 800096a:	4910      	ldr	r1, [pc, #64]	@ (80009ac <Master_get_temperature+0x58>)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	440b      	add	r3, r1
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b21b      	sxth	r3, r3
 8000974:	4313      	orrs	r3, r2
 8000976:	b21b      	sxth	r3, r3
 8000978:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < SizeOfReg; i++){
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	2b01      	cmp	r3, #1
 8000984:	ddee      	ble.n	8000964 <Master_get_temperature+0x10>
	}
	return (float)res/10;
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	ee07 3a90 	vmov	s15, r3
 800098c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000990:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000994:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000998:	eef0 7a66 	vmov.f32	s15, s13
}
 800099c:	eeb0 0a67 	vmov.f32	s0, s15
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	2000035c 	.word	0x2000035c

080009b0 <Master_get_current>:
float Master_get_current(){
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
	uint16_t res = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < SizeOfReg; i++){
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	e00d      	b.n	80009dc <Master_get_current+0x2c>
		res = (res<<8)|(Holding_Register[CURRENT_REGISTER_ADDRESS*SizeOfReg + i]);
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	021b      	lsls	r3, r3, #8
 80009c4:	b21a      	sxth	r2, r3
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	3308      	adds	r3, #8
 80009ca:	490f      	ldr	r1, [pc, #60]	@ (8000a08 <Master_get_current+0x58>)
 80009cc:	5ccb      	ldrb	r3, [r1, r3]
 80009ce:	b21b      	sxth	r3, r3
 80009d0:	4313      	orrs	r3, r2
 80009d2:	b21b      	sxth	r3, r3
 80009d4:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < SizeOfReg; i++){
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	ddee      	ble.n	80009c0 <Master_get_current+0x10>
	}
	return (float)res/10;
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	ee07 3a90 	vmov	s15, r3
 80009e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009ec:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80009f0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80009f4:	eef0 7a66 	vmov.f32	s15, s13
}
 80009f8:	eeb0 0a67 	vmov.f32	s0, s15
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	2000035c 	.word	0x2000035c

08000a0c <Master_get_voltage>:
float Master_get_voltage(){
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
	uint16_t res = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < SizeOfReg; i++){
 8000a16:	2300      	movs	r3, #0
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	e00d      	b.n	8000a38 <Master_get_voltage+0x2c>
		res = (res<<8)|(Holding_Register[VOLTAGE_REGISTER_ADDRESS*SizeOfReg + i]);
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	021b      	lsls	r3, r3, #8
 8000a20:	b21a      	sxth	r2, r3
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	330c      	adds	r3, #12
 8000a26:	490f      	ldr	r1, [pc, #60]	@ (8000a64 <Master_get_voltage+0x58>)
 8000a28:	5ccb      	ldrb	r3, [r1, r3]
 8000a2a:	b21b      	sxth	r3, r3
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	b21b      	sxth	r3, r3
 8000a30:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < SizeOfReg; i++){
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	3301      	adds	r3, #1
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	ddee      	ble.n	8000a1c <Master_get_voltage+0x10>
	}
	return (float)res/10;
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a48:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a4c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a50:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a54:	eeb0 0a67 	vmov.f32	s0, s15
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	2000035c 	.word	0x2000035c

08000a68 <Master_get_light>:
uint16_t Master_get_light(){
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
	uint16_t res = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < SizeOfReg; i++){
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	e00d      	b.n	8000a94 <Master_get_light+0x2c>
		res = (res<<8)|(Holding_Register[LIGHT_REGISTER_ADDRESS*SizeOfReg + i]);
 8000a78:	88fb      	ldrh	r3, [r7, #6]
 8000a7a:	021b      	lsls	r3, r3, #8
 8000a7c:	b21a      	sxth	r2, r3
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	3304      	adds	r3, #4
 8000a82:	490c      	ldr	r1, [pc, #48]	@ (8000ab4 <Master_get_light+0x4c>)
 8000a84:	5ccb      	ldrb	r3, [r1, r3]
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	b21b      	sxth	r3, r3
 8000a8c:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < SizeOfReg; i++){
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	ddee      	ble.n	8000a78 <Master_get_light+0x10>
	}
	return res/10;
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	4a06      	ldr	r2, [pc, #24]	@ (8000ab8 <Master_get_light+0x50>)
 8000a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa2:	08db      	lsrs	r3, r3, #3
 8000aa4:	b29b      	uxth	r3, r3
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	2000035c 	.word	0x2000035c
 8000ab8:	cccccccd 	.word	0xcccccccd

08000abc <Master_get_potention>:
uint16_t Master_get_potention(){
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
	uint16_t res = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < SizeOfReg; i++){
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	e00d      	b.n	8000ae8 <Master_get_potention+0x2c>
		res = (res<<8)|(Holding_Register[POTENTIOMETER_REGISTER_ADDRESS*SizeOfReg + i]);
 8000acc:	88fb      	ldrh	r3, [r7, #6]
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	b21a      	sxth	r2, r3
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	3310      	adds	r3, #16
 8000ad6:	490c      	ldr	r1, [pc, #48]	@ (8000b08 <Master_get_potention+0x4c>)
 8000ad8:	5ccb      	ldrb	r3, [r1, r3]
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < SizeOfReg; i++){
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	ddee      	ble.n	8000acc <Master_get_potention+0x10>
	}
	return res/10;
 8000aee:	88fb      	ldrh	r3, [r7, #6]
 8000af0:	4a06      	ldr	r2, [pc, #24]	@ (8000b0c <Master_get_potention+0x50>)
 8000af2:	fba2 2303 	umull	r2, r3, r2, r3
 8000af6:	08db      	lsrs	r3, r3, #3
 8000af8:	b29b      	uxth	r3, r3
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	2000035c 	.word	0x2000035c
 8000b0c:	cccccccd 	.word	0xcccccccd

08000b10 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b16:	463b      	mov	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b22:	4b39      	ldr	r3, [pc, #228]	@ (8000c08 <MX_ADC1_Init+0xf8>)
 8000b24:	4a39      	ldr	r2, [pc, #228]	@ (8000c0c <MX_ADC1_Init+0xfc>)
 8000b26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b28:	4b37      	ldr	r3, [pc, #220]	@ (8000c08 <MX_ADC1_Init+0xf8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b2e:	4b36      	ldr	r3, [pc, #216]	@ (8000c08 <MX_ADC1_Init+0xf8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b34:	4b34      	ldr	r3, [pc, #208]	@ (8000c08 <MX_ADC1_Init+0xf8>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b3a:	4b33      	ldr	r3, [pc, #204]	@ (8000c08 <MX_ADC1_Init+0xf8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b40:	4b31      	ldr	r3, [pc, #196]	@ (8000c08 <MX_ADC1_Init+0xf8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b48:	4b2f      	ldr	r3, [pc, #188]	@ (8000c08 <MX_ADC1_Init+0xf8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c08 <MX_ADC1_Init+0xf8>)
 8000b50:	4a2f      	ldr	r2, [pc, #188]	@ (8000c10 <MX_ADC1_Init+0x100>)
 8000b52:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b54:	4b2c      	ldr	r3, [pc, #176]	@ (8000c08 <MX_ADC1_Init+0xf8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c08 <MX_ADC1_Init+0xf8>)
 8000b5c:	2205      	movs	r2, #5
 8000b5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b60:	4b29      	ldr	r3, [pc, #164]	@ (8000c08 <MX_ADC1_Init+0xf8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b68:	4b27      	ldr	r3, [pc, #156]	@ (8000c08 <MX_ADC1_Init+0xf8>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b6e:	4826      	ldr	r0, [pc, #152]	@ (8000c08 <MX_ADC1_Init+0xf8>)
 8000b70:	f001 ffa8 	bl	8002ac4 <HAL_ADC_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b7a:	f001 f9e5 	bl	8001f48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b7e:	2308      	movs	r3, #8
 8000b80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000b86:	2301      	movs	r3, #1
 8000b88:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	481e      	ldr	r0, [pc, #120]	@ (8000c08 <MX_ADC1_Init+0xf8>)
 8000b90:	f002 f90a 	bl	8002da8 <HAL_ADC_ConfigChannel>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b9a:	f001 f9d5 	bl	8001f48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4818      	ldr	r0, [pc, #96]	@ (8000c08 <MX_ADC1_Init+0xf8>)
 8000ba8:	f002 f8fe 	bl	8002da8 <HAL_ADC_ConfigChannel>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000bb2:	f001 f9c9 	bl	8001f48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bba:	463b      	mov	r3, r7
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4812      	ldr	r0, [pc, #72]	@ (8000c08 <MX_ADC1_Init+0xf8>)
 8000bc0:	f002 f8f2 	bl	8002da8 <HAL_ADC_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8000bca:	f001 f9bd 	bl	8001f48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <MX_ADC1_Init+0xf8>)
 8000bd8:	f002 f8e6 	bl	8002da8 <HAL_ADC_ConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000be2:	f001 f9b1 	bl	8001f48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 8000be6:	2305      	movs	r3, #5
 8000be8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bea:	463b      	mov	r3, r7
 8000bec:	4619      	mov	r1, r3
 8000bee:	4806      	ldr	r0, [pc, #24]	@ (8000c08 <MX_ADC1_Init+0xf8>)
 8000bf0:	f002 f8da 	bl	8002da8 <HAL_ADC_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000bfa:	f001 f9a5 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000368 	.word	0x20000368
 8000c0c:	40012000 	.word	0x40012000
 8000c10:	0f000001 	.word	0x0f000001

08000c14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	@ 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a3c      	ldr	r2, [pc, #240]	@ (8000d24 <HAL_ADC_MspInit+0x110>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d171      	bne.n	8000d1a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d28 <HAL_ADC_MspInit+0x114>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3e:	4a3a      	ldr	r2, [pc, #232]	@ (8000d28 <HAL_ADC_MspInit+0x114>)
 8000c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c46:	4b38      	ldr	r3, [pc, #224]	@ (8000d28 <HAL_ADC_MspInit+0x114>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b34      	ldr	r3, [pc, #208]	@ (8000d28 <HAL_ADC_MspInit+0x114>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a33      	ldr	r2, [pc, #204]	@ (8000d28 <HAL_ADC_MspInit+0x114>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b31      	ldr	r3, [pc, #196]	@ (8000d28 <HAL_ADC_MspInit+0x114>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	4b2d      	ldr	r3, [pc, #180]	@ (8000d28 <HAL_ADC_MspInit+0x114>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a2c      	ldr	r2, [pc, #176]	@ (8000d28 <HAL_ADC_MspInit+0x114>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d28 <HAL_ADC_MspInit+0x114>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4823      	ldr	r0, [pc, #140]	@ (8000d2c <HAL_ADC_MspInit+0x118>)
 8000c9e:	f003 f837 	bl	8003d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	481e      	ldr	r0, [pc, #120]	@ (8000d30 <HAL_ADC_MspInit+0x11c>)
 8000cb6:	f003 f82b 	bl	8003d10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000cba:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <HAL_ADC_MspInit+0x120>)
 8000cbc:	4a1e      	ldr	r2, [pc, #120]	@ (8000d38 <HAL_ADC_MspInit+0x124>)
 8000cbe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <HAL_ADC_MspInit+0x120>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <HAL_ADC_MspInit+0x120>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ccc:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <HAL_ADC_MspInit+0x120>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <HAL_ADC_MspInit+0x120>)
 8000cd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cd8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cda:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <HAL_ADC_MspInit+0x120>)
 8000cdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ce0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <HAL_ADC_MspInit+0x120>)
 8000ce4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ce8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cea:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <HAL_ADC_MspInit+0x120>)
 8000cec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cf0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <HAL_ADC_MspInit+0x120>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <HAL_ADC_MspInit+0x120>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cfe:	480d      	ldr	r0, [pc, #52]	@ (8000d34 <HAL_ADC_MspInit+0x120>)
 8000d00:	f002 fc04 	bl	800350c <HAL_DMA_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000d0a:	f001 f91d 	bl	8001f48 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a08      	ldr	r2, [pc, #32]	@ (8000d34 <HAL_ADC_MspInit+0x120>)
 8000d12:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d14:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <HAL_ADC_MspInit+0x120>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	@ 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40012000 	.word	0x40012000
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020800 	.word	0x40020800
 8000d30:	40020400 	.word	0x40020400
 8000d34:	200003b0 	.word	0x200003b0
 8000d38:	40026410 	.word	0x40026410

08000d3c <button_scan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void button_scan() {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
	// Shift button input
	for (int i = 0; i < 16; i++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	e012      	b.n	8000d6e <button_scan+0x32>
	{
		button_count2[i] = button_count1[i];
 8000d48:	4a69      	ldr	r2, [pc, #420]	@ (8000ef0 <button_scan+0x1b4>)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d50:	4a68      	ldr	r2, [pc, #416]	@ (8000ef4 <button_scan+0x1b8>)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		button_count1[i] = button_count[i];
 8000d58:	4a67      	ldr	r2, [pc, #412]	@ (8000ef8 <button_scan+0x1bc>)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d60:	4a63      	ldr	r2, [pc, #396]	@ (8000ef0 <button_scan+0x1b4>)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 16; i++)
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	dde9      	ble.n	8000d48 <button_scan+0xc>
	}

	// Get new key input to button_count
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2108      	movs	r1, #8
 8000d78:	4860      	ldr	r0, [pc, #384]	@ (8000efc <button_scan+0x1c0>)
 8000d7a:	f003 f965 	bl	8004048 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2108      	movs	r1, #8
 8000d82:	485e      	ldr	r0, [pc, #376]	@ (8000efc <button_scan+0x1c0>)
 8000d84:	f003 f960 	bl	8004048 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 8000d88:	230a      	movs	r3, #10
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	495c      	ldr	r1, [pc, #368]	@ (8000f00 <button_scan+0x1c4>)
 8000d8e:	485d      	ldr	r0, [pc, #372]	@ (8000f04 <button_scan+0x1c8>)
 8000d90:	f003 fe6f 	bl	8004a72 <HAL_SPI_Receive>

	int button_index = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
	uint16_t mask = 0x8000;
 8000d98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d9c:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++) {
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	e03a      	b.n	8000e1a <button_scan+0xde>
		if (i >= 0 && i <= 3) {
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db06      	blt.n	8000db8 <button_scan+0x7c>
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	2b03      	cmp	r3, #3
 8000dae:	dc03      	bgt.n	8000db8 <button_scan+0x7c>
			button_index = i + 4;
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	3304      	adds	r3, #4
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	e018      	b.n	8000dea <button_scan+0xae>
		} else if (i >= 4 && i <= 7) {
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	dd07      	ble.n	8000dce <button_scan+0x92>
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	2b07      	cmp	r3, #7
 8000dc2:	dc04      	bgt.n	8000dce <button_scan+0x92>
			button_index = 7 - i;
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	e00d      	b.n	8000dea <button_scan+0xae>
		} else if (i >= 8 && i <= 11) {
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	2b07      	cmp	r3, #7
 8000dd2:	dd06      	ble.n	8000de2 <button_scan+0xa6>
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	2b0b      	cmp	r3, #11
 8000dd8:	dc03      	bgt.n	8000de2 <button_scan+0xa6>
			button_index = i + 4;
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	e003      	b.n	8000dea <button_scan+0xae>
		} else {
			button_index = 23 - i;
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	f1c3 0317 	rsb	r3, r3, #23
 8000de8:	613b      	str	r3, [r7, #16]
		}
		if (button_spi_buffer & mask)
 8000dea:	4b45      	ldr	r3, [pc, #276]	@ (8000f00 <button_scan+0x1c4>)
 8000dec:	881a      	ldrh	r2, [r3, #0]
 8000dee:	89fb      	ldrh	r3, [r7, #14]
 8000df0:	4013      	ands	r3, r2
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d005      	beq.n	8000e04 <button_scan+0xc8>
			button_count[button_index] = 0;
 8000df8:	4a3f      	ldr	r2, [pc, #252]	@ (8000ef8 <button_scan+0x1bc>)
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000e02:	e004      	b.n	8000e0e <button_scan+0xd2>
		else
			button_count[button_index] = 1;
 8000e04:	4a3c      	ldr	r2, [pc, #240]	@ (8000ef8 <button_scan+0x1bc>)
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	2101      	movs	r1, #1
 8000e0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 8000e0e:	89fb      	ldrh	r3, [r7, #14]
 8000e10:	085b      	lsrs	r3, r3, #1
 8000e12:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++) {
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	3301      	adds	r3, #1
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	ddc1      	ble.n	8000da4 <button_scan+0x68>
	}

	for (int i = 0; i < 16; i++)
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	e05b      	b.n	8000ede <button_scan+0x1a2>
	{
		if ((button_count[i] == button_count1[i]) && (button_count1[i] == button_count2[i]))
 8000e26:	4a34      	ldr	r2, [pc, #208]	@ (8000ef8 <button_scan+0x1bc>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e2e:	4930      	ldr	r1, [pc, #192]	@ (8000ef0 <button_scan+0x1b4>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d14e      	bne.n	8000ed8 <button_scan+0x19c>
 8000e3a:	4a2d      	ldr	r2, [pc, #180]	@ (8000ef0 <button_scan+0x1b4>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e42:	492c      	ldr	r1, [pc, #176]	@ (8000ef4 <button_scan+0x1b8>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d144      	bne.n	8000ed8 <button_scan+0x19c>
		{
			if (button_count2[i] != button_count3[i])
 8000e4e:	4a29      	ldr	r2, [pc, #164]	@ (8000ef4 <button_scan+0x1b8>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e56:	492c      	ldr	r1, [pc, #176]	@ (8000f08 <button_scan+0x1cc>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d019      	beq.n	8000e96 <button_scan+0x15a>
			{
				button_count3[i] = button_count2[i];
 8000e62:	4a24      	ldr	r2, [pc, #144]	@ (8000ef4 <button_scan+0x1b8>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000e6a:	4a27      	ldr	r2, [pc, #156]	@ (8000f08 <button_scan+0x1cc>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				if (button_count3[i] == 1) // PRESSED
 8000e72:	4a25      	ldr	r2, [pc, #148]	@ (8000f08 <button_scan+0x1cc>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d12c      	bne.n	8000ed8 <button_scan+0x19c>
				{
					timeOutForPress[i] = TIME_OUT_FOR_LONG_PRESS ;
 8000e7e:	4a23      	ldr	r2, [pc, #140]	@ (8000f0c <button_scan+0x1d0>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000e86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					isPressed[i] = 1;
 8000e8a:	4a21      	ldr	r2, [pc, #132]	@ (8000f10 <button_scan+0x1d4>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2101      	movs	r1, #1
 8000e90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000e94:	e020      	b.n	8000ed8 <button_scan+0x19c>
				}
			}
			else
			{
				timeOutForPress[i]--;
 8000e96:	4a1d      	ldr	r2, [pc, #116]	@ (8000f0c <button_scan+0x1d0>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	b299      	uxth	r1, r3
 8000ea2:	4a1a      	ldr	r2, [pc, #104]	@ (8000f0c <button_scan+0x1d0>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if (timeOutForPress[i] <= 0)
 8000eaa:	4a18      	ldr	r2, [pc, #96]	@ (8000f0c <button_scan+0x1d0>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d110      	bne.n	8000ed8 <button_scan+0x19c>
				{
					timeOutForPress[i] = TIME_OUT_FOR_LONG_PRESS;
 8000eb6:	4a15      	ldr	r2, [pc, #84]	@ (8000f0c <button_scan+0x1d0>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000ebe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (button_count3[i] == 1) // PRESSED
 8000ec2:	4a11      	ldr	r2, [pc, #68]	@ (8000f08 <button_scan+0x1cc>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d104      	bne.n	8000ed8 <button_scan+0x19c>
					{
						isLongPressed[i] = 1;
 8000ece:	4a11      	ldr	r2, [pc, #68]	@ (8000f14 <button_scan+0x1d8>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 16; i++)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3301      	adds	r3, #1
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	dda0      	ble.n	8000e26 <button_scan+0xea>
					}
				}
			}
		}
	}
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000490 	.word	0x20000490
 8000ef4:	20000470 	.word	0x20000470
 8000ef8:	200004b0 	.word	0x200004b0
 8000efc:	40020c00 	.word	0x40020c00
 8000f00:	200004d0 	.word	0x200004d0
 8000f04:	20000758 	.word	0x20000758
 8000f08:	20000450 	.word	0x20000450
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000410 	.word	0x20000410
 8000f14:	20000430 	.word	0x20000430

08000f18 <isPress>:

uint8_t isPress(uint8_t index)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index > 15) return 0;
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b0f      	cmp	r3, #15
 8000f26:	d901      	bls.n	8000f2c <isPress+0x14>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	e00d      	b.n	8000f48 <isPress+0x30>
	if (isPressed[index] == 1)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	4a09      	ldr	r2, [pc, #36]	@ (8000f54 <isPress+0x3c>)
 8000f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d106      	bne.n	8000f46 <isPress+0x2e>
	{
		isPressed[index] = 0;
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	4a06      	ldr	r2, [pc, #24]	@ (8000f54 <isPress+0x3c>)
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		return 1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <isPress+0x30>
	}
	return 0;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	20000410 	.word	0x20000410

08000f58 <crc16>:
    0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641,
    0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040
};

uint16_t crc16(const uint8_t *data, uint16_t num_bytes)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8000f64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f68:	82fb      	strh	r3, [r7, #22]
    const uint8_t *ptr = data;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	613b      	str	r3, [r7, #16]

    if (ptr != NULL)
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d018      	beq.n	8000fa6 <crc16+0x4e>
    {
        for (uint16_t i = 0; i < num_bytes; i++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	81fb      	strh	r3, [r7, #14]
 8000f78:	e011      	b.n	8000f9e <crc16+0x46>
        {
            crc = (crc >> 8) ^ crc16_lookup_table[(crc ^ (uint16_t)*ptr++) & 0x00FF];
 8000f7a:	8afb      	ldrh	r3, [r7, #22]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	8af9      	ldrh	r1, [r7, #22]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1c58      	adds	r0, r3, #1
 8000f86:	6138      	str	r0, [r7, #16]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	404b      	eors	r3, r1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	4909      	ldr	r1, [pc, #36]	@ (8000fb4 <crc16+0x5c>)
 8000f90:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f94:	4053      	eors	r3, r2
 8000f96:	82fb      	strh	r3, [r7, #22]
        for (uint16_t i = 0; i < num_bytes; i++)
 8000f98:	89fb      	ldrh	r3, [r7, #14]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	81fb      	strh	r3, [r7, #14]
 8000f9e:	89fa      	ldrh	r2, [r7, #14]
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d3e9      	bcc.n	8000f7a <crc16+0x22>
        }
    }

    return crc;
 8000fa6:	8afb      	ldrh	r3, [r7, #22]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	371c      	adds	r7, #28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	20000028 	.word	0x20000028

08000fb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <MX_DMA_Init+0x3c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff4 <MX_DMA_Init+0x3c>)
 8000fc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_DMA_Init+0x3c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2038      	movs	r0, #56	@ 0x38
 8000fe0:	f002 fa5d 	bl	800349e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000fe4:	2038      	movs	r0, #56	@ 0x38
 8000fe6:	f002 fa76 	bl	80034d6 <HAL_NVIC_EnableIRQ>

}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08e      	sub	sp, #56	@ 0x38
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]
 800100e:	615a      	str	r2, [r3, #20]
 8001010:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001012:	463b      	mov	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]
 8001022:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001024:	4b2f      	ldr	r3, [pc, #188]	@ (80010e4 <MX_FSMC_Init+0xec>)
 8001026:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800102a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800102c:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <MX_FSMC_Init+0xec>)
 800102e:	4a2e      	ldr	r2, [pc, #184]	@ (80010e8 <MX_FSMC_Init+0xf0>)
 8001030:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001032:	4b2c      	ldr	r3, [pc, #176]	@ (80010e4 <MX_FSMC_Init+0xec>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001038:	4b2a      	ldr	r3, [pc, #168]	@ (80010e4 <MX_FSMC_Init+0xec>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800103e:	4b29      	ldr	r3, [pc, #164]	@ (80010e4 <MX_FSMC_Init+0xec>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001044:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <MX_FSMC_Init+0xec>)
 8001046:	2210      	movs	r2, #16
 8001048:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800104a:	4b26      	ldr	r3, [pc, #152]	@ (80010e4 <MX_FSMC_Init+0xec>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001050:	4b24      	ldr	r3, [pc, #144]	@ (80010e4 <MX_FSMC_Init+0xec>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001056:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <MX_FSMC_Init+0xec>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800105c:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <MX_FSMC_Init+0xec>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001062:	4b20      	ldr	r3, [pc, #128]	@ (80010e4 <MX_FSMC_Init+0xec>)
 8001064:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001068:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800106a:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <MX_FSMC_Init+0xec>)
 800106c:	2200      	movs	r2, #0
 800106e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001070:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <MX_FSMC_Init+0xec>)
 8001072:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001076:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001078:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <MX_FSMC_Init+0xec>)
 800107a:	2200      	movs	r2, #0
 800107c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800107e:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <MX_FSMC_Init+0xec>)
 8001080:	2200      	movs	r2, #0
 8001082:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001084:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <MX_FSMC_Init+0xec>)
 8001086:	2200      	movs	r2, #0
 8001088:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800108a:	230f      	movs	r3, #15
 800108c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800108e:	230f      	movs	r3, #15
 8001090:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001092:	233c      	movs	r3, #60	@ 0x3c
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 800109a:	2310      	movs	r3, #16
 800109c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 800109e:	2311      	movs	r3, #17
 80010a0:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80010a2:	2300      	movs	r3, #0
 80010a4:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80010a6:	2308      	movs	r3, #8
 80010a8:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80010aa:	230f      	movs	r3, #15
 80010ac:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80010ae:	2309      	movs	r3, #9
 80010b0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80010b6:	2310      	movs	r3, #16
 80010b8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80010ba:	2311      	movs	r3, #17
 80010bc:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80010c2:	463a      	mov	r2, r7
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	@ (80010e4 <MX_FSMC_Init+0xec>)
 80010cc:	f004 f8d6 	bl	800527c <HAL_SRAM_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80010d6:	f000 ff37 	bl	8001f48 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80010da:	bf00      	nop
 80010dc:	3738      	adds	r7, #56	@ 0x38
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200004d4 	.word	0x200004d4
 80010e8:	a0000104 	.word	0xa0000104

080010ec <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001100:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <HAL_FSMC_MspInit+0x88>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d131      	bne.n	800116c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001108:	4b1a      	ldr	r3, [pc, #104]	@ (8001174 <HAL_FSMC_MspInit+0x88>)
 800110a:	2201      	movs	r2, #1
 800110c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <HAL_FSMC_MspInit+0x8c>)
 8001114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001116:	4a18      	ldr	r2, [pc, #96]	@ (8001178 <HAL_FSMC_MspInit+0x8c>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6393      	str	r3, [r2, #56]	@ 0x38
 800111e:	4b16      	ldr	r3, [pc, #88]	@ (8001178 <HAL_FSMC_MspInit+0x8c>)
 8001120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800112a:	f64f 7388 	movw	r3, #65416	@ 0xff88
 800112e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800113c:	230c      	movs	r3, #12
 800113e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	4619      	mov	r1, r3
 8001144:	480d      	ldr	r0, [pc, #52]	@ (800117c <HAL_FSMC_MspInit+0x90>)
 8001146:	f002 fde3 	bl	8003d10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800114a:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 800114e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800115c:	230c      	movs	r3, #12
 800115e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	4619      	mov	r1, r3
 8001164:	4806      	ldr	r0, [pc, #24]	@ (8001180 <HAL_FSMC_MspInit+0x94>)
 8001166:	f002 fdd3 	bl	8003d10 <HAL_GPIO_Init>
 800116a:	e000      	b.n	800116e <HAL_FSMC_MspInit+0x82>
    return;
 800116c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000524 	.word	0x20000524
 8001178:	40023800 	.word	0x40023800
 800117c:	40021000 	.word	0x40021000
 8001180:	40020c00 	.word	0x40020c00

08001184 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800118c:	f7ff ffae 	bl	80010ec <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	@ 0x30
 800119c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	4b63      	ldr	r3, [pc, #396]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	4a62      	ldr	r2, [pc, #392]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 80011b8:	f043 0310 	orr.w	r3, r3, #16
 80011bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011be:	4b60      	ldr	r3, [pc, #384]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	61bb      	str	r3, [r7, #24]
 80011c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b59      	ldr	r3, [pc, #356]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b55      	ldr	r3, [pc, #340]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a54      	ldr	r2, [pc, #336]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b52      	ldr	r3, [pc, #328]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b4e      	ldr	r3, [pc, #312]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a4d      	ldr	r2, [pc, #308]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b4b      	ldr	r3, [pc, #300]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	4b47      	ldr	r3, [pc, #284]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a46      	ldr	r2, [pc, #280]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b44      	ldr	r3, [pc, #272]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b40      	ldr	r3, [pc, #256]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a3f      	ldr	r2, [pc, #252]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 8001244:	f043 0308 	orr.w	r3, r3, #8
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b3d      	ldr	r3, [pc, #244]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	4b39      	ldr	r3, [pc, #228]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a38      	ldr	r2, [pc, #224]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 8001260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b36      	ldr	r3, [pc, #216]	@ (8001340 <MX_GPIO_Init+0x1a8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2110      	movs	r1, #16
 8001276:	4833      	ldr	r0, [pc, #204]	@ (8001344 <MX_GPIO_Init+0x1ac>)
 8001278:	f002 fee6 	bl	8004048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001282:	4831      	ldr	r0, [pc, #196]	@ (8001348 <MX_GPIO_Init+0x1b0>)
 8001284:	f002 fee0 	bl	8004048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2140      	movs	r1, #64	@ 0x40
 800128c:	482f      	ldr	r0, [pc, #188]	@ (800134c <MX_GPIO_Init+0x1b4>)
 800128e:	f002 fedb 	bl	8004048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FSMC_BLK_Pin|EN_RS485_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8001298:	482d      	ldr	r0, [pc, #180]	@ (8001350 <MX_GPIO_Init+0x1b8>)
 800129a:	f002 fed5 	bl	8004048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	2108      	movs	r1, #8
 80012a2:	482c      	ldr	r0, [pc, #176]	@ (8001354 <MX_GPIO_Init+0x1bc>)
 80012a4:	f002 fed0 	bl	8004048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012a8:	2310      	movs	r3, #16
 80012aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	4821      	ldr	r0, [pc, #132]	@ (8001344 <MX_GPIO_Init+0x1ac>)
 80012c0:	f002 fd26 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80012c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4619      	mov	r1, r3
 80012dc:	481a      	ldr	r0, [pc, #104]	@ (8001348 <MX_GPIO_Init+0x1b0>)
 80012de:	f002 fd17 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80012e2:	2340      	movs	r3, #64	@ 0x40
 80012e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	4814      	ldr	r0, [pc, #80]	@ (800134c <MX_GPIO_Init+0x1b4>)
 80012fa:	f002 fd09 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin|EN_RS485_Pin;
 80012fe:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8001302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	480e      	ldr	r0, [pc, #56]	@ (8001350 <MX_GPIO_Init+0x1b8>)
 8001318:	f002 fcfa 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800131c:	2308      	movs	r3, #8
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4808      	ldr	r0, [pc, #32]	@ (8001354 <MX_GPIO_Init+0x1bc>)
 8001334:	f002 fcec 	bl	8003d10 <HAL_GPIO_Init>

}
 8001338:	bf00      	nop
 800133a:	3730      	adds	r7, #48	@ 0x30
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	40021000 	.word	0x40021000
 8001348:	40020800 	.word	0x40020800
 800134c:	40021800 	.word	0x40021800
 8001350:	40020000 	.word	0x40020000
 8001354:	40020c00 	.word	0x40020c00

08001358 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 8001362:	4a04      	ldr	r2, [pc, #16]	@ (8001374 <LCD_WR_REG+0x1c>)
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	8013      	strh	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	600ffffe 	.word	0x600ffffe

08001378 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 8001382:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <LCD_WR_DATA+0x1c>)
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	8053      	strh	r3, [r2, #2]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	600ffffe 	.word	0x600ffffe

08001398 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 800139e:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <LCD_RD_DATA+0x20>)
 80013a0:	885b      	ldrh	r3, [r3, #2]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	80fb      	strh	r3, [r7, #6]
	return ram;
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	b29b      	uxth	r3, r3
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	600ffffe 	.word	0x600ffffe

080013bc <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4604      	mov	r4, r0
 80013c4:	4608      	mov	r0, r1
 80013c6:	4611      	mov	r1, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	4623      	mov	r3, r4
 80013cc:	80fb      	strh	r3, [r7, #6]
 80013ce:	4603      	mov	r3, r0
 80013d0:	80bb      	strh	r3, [r7, #4]
 80013d2:	460b      	mov	r3, r1
 80013d4:	807b      	strh	r3, [r7, #2]
 80013d6:	4613      	mov	r3, r2
 80013d8:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 80013da:	202a      	movs	r0, #42	@ 0x2a
 80013dc:	f7ff ffbc 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	0a1b      	lsrs	r3, r3, #8
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ffc6 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ffc0 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 80013f8:	887b      	ldrh	r3, [r7, #2]
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ffba 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 8001404:	887b      	ldrh	r3, [r7, #2]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	b29b      	uxth	r3, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ffb4 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 8001410:	202b      	movs	r0, #43	@ 0x2b
 8001412:	f7ff ffa1 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 8001416:	88bb      	ldrh	r3, [r7, #4]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	b29b      	uxth	r3, r3
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ffab 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 8001422:	88bb      	ldrh	r3, [r7, #4]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	b29b      	uxth	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ffa5 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 800142e:	883b      	ldrh	r3, [r7, #0]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	b29b      	uxth	r3, r3
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff9f 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 800143a:	883b      	ldrh	r3, [r7, #0]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	b29b      	uxth	r3, r3
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff99 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 8001446:	202c      	movs	r0, #44	@ 0x2c
 8001448:	f7ff ff86 	bl	8001358 <LCD_WR_REG>
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bd90      	pop	{r4, r7, pc}

08001454 <lcd_clear>:
/**
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 800145e:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <lcd_clear+0x60>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	b29a      	uxth	r2, r3
 8001466:	4b13      	ldr	r3, [pc, #76]	@ (80014b4 <lcd_clear+0x60>)
 8001468:	885b      	ldrh	r3, [r3, #2]
 800146a:	3b01      	subs	r3, #1
 800146c:	b29b      	uxth	r3, r3
 800146e:	2100      	movs	r1, #0
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff ffa3 	bl	80013bc <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 8001476:	2300      	movs	r3, #0
 8001478:	81fb      	strh	r3, [r7, #14]
 800147a:	e011      	b.n	80014a0 <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 800147c:	2300      	movs	r3, #0
 800147e:	81bb      	strh	r3, [r7, #12]
 8001480:	e006      	b.n	8001490 <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff77 	bl	8001378 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 800148a:	89bb      	ldrh	r3, [r7, #12]
 800148c:	3301      	adds	r3, #1
 800148e:	81bb      	strh	r3, [r7, #12]
 8001490:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <lcd_clear+0x60>)
 8001492:	885b      	ldrh	r3, [r3, #2]
 8001494:	89ba      	ldrh	r2, [r7, #12]
 8001496:	429a      	cmp	r2, r3
 8001498:	d3f3      	bcc.n	8001482 <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 800149a:	89fb      	ldrh	r3, [r7, #14]
 800149c:	3301      	adds	r3, #1
 800149e:	81fb      	strh	r3, [r7, #14]
 80014a0:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <lcd_clear+0x60>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	89fa      	ldrh	r2, [r7, #14]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d3e8      	bcc.n	800147c <lcd_clear+0x28>
		}
	}
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000528 	.word	0x20000528

080014b8 <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
 80014c2:	460b      	mov	r3, r1
 80014c4:	80bb      	strh	r3, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 80014ca:	88bb      	ldrh	r3, [r7, #4]
 80014cc:	88fa      	ldrh	r2, [r7, #6]
 80014ce:	88b9      	ldrh	r1, [r7, #4]
 80014d0:	88f8      	ldrh	r0, [r7, #6]
 80014d2:	f7ff ff73 	bl	80013bc <lcd_set_address>
	LCD_WR_DATA(color);
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff4d 	bl	8001378 <LCD_WR_DATA>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <lcd_show_char>:
	lcd_draw_line(x1, y2, x2, y2, color);
	lcd_draw_line(x2, y1, x2, y2, color);
}

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4604      	mov	r4, r0
 80014f0:	4608      	mov	r0, r1
 80014f2:	4611      	mov	r1, r2
 80014f4:	461a      	mov	r2, r3
 80014f6:	4623      	mov	r3, r4
 80014f8:	80fb      	strh	r3, [r7, #6]
 80014fa:	4603      	mov	r3, r0
 80014fc:	80bb      	strh	r3, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	70fb      	strb	r3, [r7, #3]
 8001502:	4613      	mov	r3, r2
 8001504:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 800150e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001512:	085b      	lsrs	r3, r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	08db      	lsrs	r3, r3, #3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	461a      	mov	r2, r3
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	bf14      	ite	ne
 800152a:	2301      	movne	r3, #1
 800152c:	2300      	moveq	r3, #0
 800152e:	b2db      	uxtb	r3, r3
 8001530:	4413      	add	r3, r2
 8001532:	b29a      	uxth	r2, r3
 8001534:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001538:	b29b      	uxth	r3, r3
 800153a:	fb12 f303 	smulbb	r3, r2, r3
 800153e:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	3b20      	subs	r3, #32
 8001544:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	b29a      	uxth	r2, r3
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	4413      	add	r3, r2
 800154e:	b29b      	uxth	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	b29c      	uxth	r4, r3
 8001554:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001558:	b29a      	uxth	r2, r3
 800155a:	88bb      	ldrh	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	b29b      	uxth	r3, r3
 8001560:	3b01      	subs	r3, #1
 8001562:	b29b      	uxth	r3, r3
 8001564:	88b9      	ldrh	r1, [r7, #4]
 8001566:	88f8      	ldrh	r0, [r7, #6]
 8001568:	4622      	mov	r2, r4
 800156a:	f7ff ff27 	bl	80013bc <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 800156e:	2300      	movs	r3, #0
 8001570:	827b      	strh	r3, [r7, #18]
 8001572:	e07a      	b.n	800166a <lcd_show_char+0x182>
		if (sizey == 12)
 8001574:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001578:	2b0c      	cmp	r3, #12
 800157a:	d028      	beq.n	80015ce <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 800157c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001580:	2b10      	cmp	r3, #16
 8001582:	d108      	bne.n	8001596 <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 8001584:	78fa      	ldrb	r2, [r7, #3]
 8001586:	8a7b      	ldrh	r3, [r7, #18]
 8001588:	493c      	ldr	r1, [pc, #240]	@ (800167c <lcd_show_char+0x194>)
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	440a      	add	r2, r1
 800158e:	4413      	add	r3, r2
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	75fb      	strb	r3, [r7, #23]
 8001594:	e01b      	b.n	80015ce <lcd_show_char+0xe6>
		else if (sizey == 24)
 8001596:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800159a:	2b18      	cmp	r3, #24
 800159c:	d10b      	bne.n	80015b6 <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 800159e:	78fa      	ldrb	r2, [r7, #3]
 80015a0:	8a79      	ldrh	r1, [r7, #18]
 80015a2:	4837      	ldr	r0, [pc, #220]	@ (8001680 <lcd_show_char+0x198>)
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	4403      	add	r3, r0
 80015ae:	440b      	add	r3, r1
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	75fb      	strb	r3, [r7, #23]
 80015b4:	e00b      	b.n	80015ce <lcd_show_char+0xe6>
		else if (sizey == 32)
 80015b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015ba:	2b20      	cmp	r3, #32
 80015bc:	d15a      	bne.n	8001674 <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 80015be:	78fa      	ldrb	r2, [r7, #3]
 80015c0:	8a7b      	ldrh	r3, [r7, #18]
 80015c2:	4930      	ldr	r1, [pc, #192]	@ (8001684 <lcd_show_char+0x19c>)
 80015c4:	0192      	lsls	r2, r2, #6
 80015c6:	440a      	add	r2, r1
 80015c8:	4413      	add	r3, r2
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 80015ce:	2300      	movs	r3, #0
 80015d0:	75bb      	strb	r3, [r7, #22]
 80015d2:	e044      	b.n	800165e <lcd_show_char+0x176>
			if (!mode) {
 80015d4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d120      	bne.n	800161e <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 80015dc:	7dfa      	ldrb	r2, [r7, #23]
 80015de:	7dbb      	ldrb	r3, [r7, #22]
 80015e0:	fa42 f303 	asr.w	r3, r2, r3
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d004      	beq.n	80015f6 <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 80015ec:	883b      	ldrh	r3, [r7, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fec2 	bl	8001378 <LCD_WR_DATA>
 80015f4:	e003      	b.n	80015fe <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 80015f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff febd 	bl	8001378 <LCD_WR_DATA>
				m++;
 80015fe:	7d7b      	ldrb	r3, [r7, #21]
 8001600:	3301      	adds	r3, #1
 8001602:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 8001604:	7d7b      	ldrb	r3, [r7, #21]
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	fbb3 f1f2 	udiv	r1, r3, r2
 800160c:	fb01 f202 	mul.w	r2, r1, r2
 8001610:	1a9b      	subs	r3, r3, r2
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d11f      	bne.n	8001658 <lcd_show_char+0x170>
					m = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	757b      	strb	r3, [r7, #21]
					break;
 800161c:	e022      	b.n	8001664 <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 800161e:	7dfa      	ldrb	r2, [r7, #23]
 8001620:	7dbb      	ldrb	r3, [r7, #22]
 8001622:	fa42 f303 	asr.w	r3, r2, r3
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d005      	beq.n	800163a <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 800162e:	883a      	ldrh	r2, [r7, #0]
 8001630:	88b9      	ldrh	r1, [r7, #4]
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff3f 	bl	80014b8 <lcd_draw_point>
				x++;
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	3301      	adds	r3, #1
 800163e:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 8001640:	88fa      	ldrh	r2, [r7, #6]
 8001642:	8a3b      	ldrh	r3, [r7, #16]
 8001644:	1ad2      	subs	r2, r2, r3
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	429a      	cmp	r2, r3
 800164a:	d105      	bne.n	8001658 <lcd_show_char+0x170>
					x = x0;
 800164c:	8a3b      	ldrh	r3, [r7, #16]
 800164e:	80fb      	strh	r3, [r7, #6]
					y++;
 8001650:	88bb      	ldrh	r3, [r7, #4]
 8001652:	3301      	adds	r3, #1
 8001654:	80bb      	strh	r3, [r7, #4]
					break;
 8001656:	e005      	b.n	8001664 <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 8001658:	7dbb      	ldrb	r3, [r7, #22]
 800165a:	3301      	adds	r3, #1
 800165c:	75bb      	strb	r3, [r7, #22]
 800165e:	7dbb      	ldrb	r3, [r7, #22]
 8001660:	2b07      	cmp	r3, #7
 8001662:	d9b7      	bls.n	80015d4 <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 8001664:	8a7b      	ldrh	r3, [r7, #18]
 8001666:	3301      	adds	r3, #1
 8001668:	827b      	strh	r3, [r7, #18]
 800166a:	8a7a      	ldrh	r2, [r7, #18]
 800166c:	89bb      	ldrh	r3, [r7, #12]
 800166e:	429a      	cmp	r2, r3
 8001670:	d380      	bcc.n	8001574 <lcd_show_char+0x8c>
 8001672:	e000      	b.n	8001676 <lcd_show_char+0x18e>
			return;
 8001674:	bf00      	nop
				}
			}
		}
	}
}
 8001676:	371c      	adds	r7, #28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd90      	pop	{r4, r7, pc}
 800167c:	08006f70 	.word	0x08006f70
 8001680:	08007560 	.word	0x08007560
 8001684:	08008730 	.word	0x08008730

08001688 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n) {
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	460a      	mov	r2, r1
 8001692:	71fb      	strb	r3, [r7, #7]
 8001694:	4613      	mov	r3, r2
 8001696:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8001698:	2301      	movs	r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
	while (n--)
 800169c:	e004      	b.n	80016a8 <mypow+0x20>
		result *= m;
 800169e:	79fa      	ldrb	r2, [r7, #7]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	fb02 f303 	mul.w	r3, r2, r3
 80016a6:	60fb      	str	r3, [r7, #12]
	while (n--)
 80016a8:	79bb      	ldrb	r3, [r7, #6]
 80016aa:	1e5a      	subs	r2, r3, #1
 80016ac:	71ba      	strb	r2, [r7, #6]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f5      	bne.n	800169e <mypow+0x16>
	return result;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <lcd_show_int_num>:

void lcd_show_int_num(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b089      	sub	sp, #36	@ 0x24
 80016c4:	af04      	add	r7, sp, #16
 80016c6:	4604      	mov	r4, r0
 80016c8:	4608      	mov	r0, r1
 80016ca:	4611      	mov	r1, r2
 80016cc:	461a      	mov	r2, r3
 80016ce:	4623      	mov	r3, r4
 80016d0:	80fb      	strh	r3, [r7, #6]
 80016d2:	4603      	mov	r3, r0
 80016d4:	80bb      	strh	r3, [r7, #4]
 80016d6:	460b      	mov	r3, r1
 80016d8:	807b      	strh	r3, [r7, #2]
 80016da:	4613      	mov	r3, r2
 80016dc:	707b      	strb	r3, [r7, #1]
	uint8_t t, temp;
	uint8_t enshow = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex = sizey / 2;
 80016e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	737b      	strb	r3, [r7, #13]
	for (t = 0; t < len; t++) {
 80016ea:	2300      	movs	r3, #0
 80016ec:	73fb      	strb	r3, [r7, #15]
 80016ee:	e059      	b.n	80017a4 <lcd_show_int_num+0xe4>
		temp = (num / mypow(10, len - t - 1)) % 10;
 80016f0:	887c      	ldrh	r4, [r7, #2]
 80016f2:	787a      	ldrb	r2, [r7, #1]
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	3b01      	subs	r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	4619      	mov	r1, r3
 8001700:	200a      	movs	r0, #10
 8001702:	f7ff ffc1 	bl	8001688 <mypow>
 8001706:	4603      	mov	r3, r0
 8001708:	fbb4 f1f3 	udiv	r1, r4, r3
 800170c:	4b2a      	ldr	r3, [pc, #168]	@ (80017b8 <lcd_show_int_num+0xf8>)
 800170e:	fba3 2301 	umull	r2, r3, r3, r1
 8001712:	08da      	lsrs	r2, r3, #3
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	1aca      	subs	r2, r1, r3
 800171e:	4613      	mov	r3, r2
 8001720:	733b      	strb	r3, [r7, #12]
		if (enshow == 0 && t < (len - 1)) {
 8001722:	7bbb      	ldrb	r3, [r7, #14]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d121      	bne.n	800176c <lcd_show_int_num+0xac>
 8001728:	7bfa      	ldrb	r2, [r7, #15]
 800172a:	787b      	ldrb	r3, [r7, #1]
 800172c:	3b01      	subs	r3, #1
 800172e:	429a      	cmp	r2, r3
 8001730:	da1c      	bge.n	800176c <lcd_show_int_num+0xac>
			if (temp == 0) {
 8001732:	7b3b      	ldrb	r3, [r7, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d117      	bne.n	8001768 <lcd_show_int_num+0xa8>
				lcd_show_char(x + t * sizex, y, ' ', fc, bc, sizey, 0);
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	b29a      	uxth	r2, r3
 800173c:	7b7b      	ldrb	r3, [r7, #13]
 800173e:	b29b      	uxth	r3, r3
 8001740:	fb12 f303 	smulbb	r3, r2, r3
 8001744:	b29a      	uxth	r2, r3
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	4413      	add	r3, r2
 800174a:	b298      	uxth	r0, r3
 800174c:	8c3a      	ldrh	r2, [r7, #32]
 800174e:	88b9      	ldrh	r1, [r7, #4]
 8001750:	2300      	movs	r3, #0
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	4613      	mov	r3, r2
 8001760:	2220      	movs	r2, #32
 8001762:	f7ff fec1 	bl	80014e8 <lcd_show_char>
				continue;
 8001766:	e01a      	b.n	800179e <lcd_show_int_num+0xde>
			} else
				enshow = 1;
 8001768:	2301      	movs	r3, #1
 800176a:	73bb      	strb	r3, [r7, #14]

		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	b29a      	uxth	r2, r3
 8001770:	7b7b      	ldrb	r3, [r7, #13]
 8001772:	b29b      	uxth	r3, r3
 8001774:	fb12 f303 	smulbb	r3, r2, r3
 8001778:	b29a      	uxth	r2, r3
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	4413      	add	r3, r2
 800177e:	b298      	uxth	r0, r3
 8001780:	7b3b      	ldrb	r3, [r7, #12]
 8001782:	3330      	adds	r3, #48	@ 0x30
 8001784:	b2da      	uxtb	r2, r3
 8001786:	8c3c      	ldrh	r4, [r7, #32]
 8001788:	88b9      	ldrh	r1, [r7, #4]
 800178a:	2300      	movs	r3, #0
 800178c:	9302      	str	r3, [sp, #8]
 800178e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	4623      	mov	r3, r4
 800179a:	f7ff fea5 	bl	80014e8 <lcd_show_char>
	for (t = 0; t < len; t++) {
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	3301      	adds	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
 80017a4:	7bfa      	ldrb	r2, [r7, #15]
 80017a6:	787b      	ldrb	r3, [r7, #1]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d3a1      	bcc.n	80016f0 <lcd_show_int_num+0x30>
	}
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd90      	pop	{r4, r7, pc}
 80017b6:	bf00      	nop
 80017b8:	cccccccd 	.word	0xcccccccd

080017bc <lcd_show_float_num>:

void lcd_show_float_num(uint16_t x, uint16_t y, float num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b08b      	sub	sp, #44	@ 0x2c
 80017c0:	af04      	add	r7, sp, #16
 80017c2:	4604      	mov	r4, r0
 80017c4:	4608      	mov	r0, r1
 80017c6:	ed87 0a02 	vstr	s0, [r7, #8]
 80017ca:	4611      	mov	r1, r2
 80017cc:	461a      	mov	r2, r3
 80017ce:	4623      	mov	r3, r4
 80017d0:	81fb      	strh	r3, [r7, #14]
 80017d2:	4603      	mov	r3, r0
 80017d4:	81bb      	strh	r3, [r7, #12]
 80017d6:	460b      	mov	r3, r1
 80017d8:	71fb      	strb	r3, [r7, #7]
 80017da:	4613      	mov	r3, r2
 80017dc:	80bb      	strh	r3, [r7, #4]
	uint8_t t, temp, sizex;
	uint16_t num1;
	sizex = sizey / 2;
 80017de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80017e2:	085b      	lsrs	r3, r3, #1
 80017e4:	75bb      	strb	r3, [r7, #22]
	num1 = num * 100;
 80017e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ea:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80018c4 <lcd_show_float_num+0x108>
 80017ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f6:	ee17 3a90 	vmov	r3, s15
 80017fa:	82bb      	strh	r3, [r7, #20]
	for (t = 0; t < len; t++) {
 80017fc:	2300      	movs	r3, #0
 80017fe:	75fb      	strb	r3, [r7, #23]
 8001800:	e057      	b.n	80018b2 <lcd_show_float_num+0xf6>
		temp = (num1 / mypow(10, len - t - 1)) % 10;
 8001802:	8abc      	ldrh	r4, [r7, #20]
 8001804:	79fa      	ldrb	r2, [r7, #7]
 8001806:	7dfb      	ldrb	r3, [r7, #23]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	b2db      	uxtb	r3, r3
 800180c:	3b01      	subs	r3, #1
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4619      	mov	r1, r3
 8001812:	200a      	movs	r0, #10
 8001814:	f7ff ff38 	bl	8001688 <mypow>
 8001818:	4603      	mov	r3, r0
 800181a:	fbb4 f1f3 	udiv	r1, r4, r3
 800181e:	4b2a      	ldr	r3, [pc, #168]	@ (80018c8 <lcd_show_float_num+0x10c>)
 8001820:	fba3 2301 	umull	r2, r3, r3, r1
 8001824:	08da      	lsrs	r2, r3, #3
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	1aca      	subs	r2, r1, r3
 8001830:	4613      	mov	r3, r2
 8001832:	74fb      	strb	r3, [r7, #19]
		if (t == (len - 2)) {
 8001834:	7dfa      	ldrb	r2, [r7, #23]
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	3b02      	subs	r3, #2
 800183a:	429a      	cmp	r2, r3
 800183c:	d11d      	bne.n	800187a <lcd_show_float_num+0xbe>
			lcd_show_char(x + (len - 2) * sizex, y, '.', fc, bc, sizey, 0);
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	3b02      	subs	r3, #2
 8001842:	b29a      	uxth	r2, r3
 8001844:	7dbb      	ldrb	r3, [r7, #22]
 8001846:	b29b      	uxth	r3, r3
 8001848:	fb12 f303 	smulbb	r3, r2, r3
 800184c:	b29a      	uxth	r2, r3
 800184e:	89fb      	ldrh	r3, [r7, #14]
 8001850:	4413      	add	r3, r2
 8001852:	b298      	uxth	r0, r3
 8001854:	88ba      	ldrh	r2, [r7, #4]
 8001856:	89b9      	ldrh	r1, [r7, #12]
 8001858:	2300      	movs	r3, #0
 800185a:	9302      	str	r3, [sp, #8]
 800185c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001860:	9301      	str	r3, [sp, #4]
 8001862:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	4613      	mov	r3, r2
 8001868:	222e      	movs	r2, #46	@ 0x2e
 800186a:	f7ff fe3d 	bl	80014e8 <lcd_show_char>
			t++;
 800186e:	7dfb      	ldrb	r3, [r7, #23]
 8001870:	3301      	adds	r3, #1
 8001872:	75fb      	strb	r3, [r7, #23]
			len += 1;
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	3301      	adds	r3, #1
 8001878:	71fb      	strb	r3, [r7, #7]
		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	b29a      	uxth	r2, r3
 800187e:	7dbb      	ldrb	r3, [r7, #22]
 8001880:	b29b      	uxth	r3, r3
 8001882:	fb12 f303 	smulbb	r3, r2, r3
 8001886:	b29a      	uxth	r2, r3
 8001888:	89fb      	ldrh	r3, [r7, #14]
 800188a:	4413      	add	r3, r2
 800188c:	b298      	uxth	r0, r3
 800188e:	7cfb      	ldrb	r3, [r7, #19]
 8001890:	3330      	adds	r3, #48	@ 0x30
 8001892:	b2da      	uxtb	r2, r3
 8001894:	88bc      	ldrh	r4, [r7, #4]
 8001896:	89b9      	ldrh	r1, [r7, #12]
 8001898:	2300      	movs	r3, #0
 800189a:	9302      	str	r3, [sp, #8]
 800189c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	4623      	mov	r3, r4
 80018a8:	f7ff fe1e 	bl	80014e8 <lcd_show_char>
	for (t = 0; t < len; t++) {
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	3301      	adds	r3, #1
 80018b0:	75fb      	strb	r3, [r7, #23]
 80018b2:	7dfa      	ldrb	r2, [r7, #23]
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d3a3      	bcc.n	8001802 <lcd_show_float_num+0x46>
	}
}
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
 80018be:	371c      	adds	r7, #28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd90      	pop	{r4, r7, pc}
 80018c4:	42c80000 	.word	0x42c80000
 80018c8:	cccccccd 	.word	0xcccccccd

080018cc <lcd_set_direction>:
			k++;
		}
	}
}

void lcd_set_direction(uint8_t dir) {
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	091b      	lsrs	r3, r3, #4
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d007      	beq.n	80018f6 <lcd_set_direction+0x2a>
		lcddev.width = 320;
 80018e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <lcd_set_direction+0x44>)
 80018e8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80018ec:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 80018ee:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <lcd_set_direction+0x44>)
 80018f0:	22f0      	movs	r2, #240	@ 0xf0
 80018f2:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 80018f4:	e006      	b.n	8001904 <lcd_set_direction+0x38>
		lcddev.width = 240;
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <lcd_set_direction+0x44>)
 80018f8:	22f0      	movs	r2, #240	@ 0xf0
 80018fa:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 80018fc:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <lcd_set_direction+0x44>)
 80018fe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001902:	805a      	strh	r2, [r3, #2]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	20000528 	.word	0x20000528

08001914 <lcd_init>:

void lcd_init(void) {
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800191e:	48aa      	ldr	r0, [pc, #680]	@ (8001bc8 <lcd_init+0x2b4>)
 8001920:	f002 fb92 	bl	8004048 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001924:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001928:	f001 f8a8 	bl	8002a7c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 800192c:	2201      	movs	r2, #1
 800192e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001932:	48a5      	ldr	r0, [pc, #660]	@ (8001bc8 <lcd_init+0x2b4>)
 8001934:	f002 fb88 	bl	8004048 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001938:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800193c:	f001 f89e 	bl	8002a7c <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff ffc3 	bl	80018cc <lcd_set_direction>
	LCD_WR_REG(0XD3);
 8001946:	20d3      	movs	r0, #211	@ 0xd3
 8001948:	f7ff fd06 	bl	8001358 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 800194c:	f7ff fd24 	bl	8001398 <LCD_RD_DATA>
 8001950:	4603      	mov	r3, r0
 8001952:	461a      	mov	r2, r3
 8001954:	4b9d      	ldr	r3, [pc, #628]	@ (8001bcc <lcd_init+0x2b8>)
 8001956:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001958:	f7ff fd1e 	bl	8001398 <LCD_RD_DATA>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	4b9a      	ldr	r3, [pc, #616]	@ (8001bcc <lcd_init+0x2b8>)
 8001962:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001964:	f7ff fd18 	bl	8001398 <LCD_RD_DATA>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	4b97      	ldr	r3, [pc, #604]	@ (8001bcc <lcd_init+0x2b8>)
 800196e:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8001970:	4b96      	ldr	r3, [pc, #600]	@ (8001bcc <lcd_init+0x2b8>)
 8001972:	889b      	ldrh	r3, [r3, #4]
 8001974:	021b      	lsls	r3, r3, #8
 8001976:	b29a      	uxth	r2, r3
 8001978:	4b94      	ldr	r3, [pc, #592]	@ (8001bcc <lcd_init+0x2b8>)
 800197a:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 800197c:	f7ff fd0c 	bl	8001398 <LCD_RD_DATA>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	4b91      	ldr	r3, [pc, #580]	@ (8001bcc <lcd_init+0x2b8>)
 8001986:	889b      	ldrh	r3, [r3, #4]
 8001988:	4313      	orrs	r3, r2
 800198a:	b29a      	uxth	r2, r3
 800198c:	4b8f      	ldr	r3, [pc, #572]	@ (8001bcc <lcd_init+0x2b8>)
 800198e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001990:	20cf      	movs	r0, #207	@ 0xcf
 8001992:	f7ff fce1 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff fcee 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800199c:	20c1      	movs	r0, #193	@ 0xc1
 800199e:	f7ff fceb 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80019a2:	2030      	movs	r0, #48	@ 0x30
 80019a4:	f7ff fce8 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80019a8:	20ed      	movs	r0, #237	@ 0xed
 80019aa:	f7ff fcd5 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80019ae:	2064      	movs	r0, #100	@ 0x64
 80019b0:	f7ff fce2 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f7ff fcdf 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80019ba:	2012      	movs	r0, #18
 80019bc:	f7ff fcdc 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80019c0:	2081      	movs	r0, #129	@ 0x81
 80019c2:	f7ff fcd9 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80019c6:	20e8      	movs	r0, #232	@ 0xe8
 80019c8:	f7ff fcc6 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80019cc:	2085      	movs	r0, #133	@ 0x85
 80019ce:	f7ff fcd3 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80019d2:	2010      	movs	r0, #16
 80019d4:	f7ff fcd0 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80019d8:	207a      	movs	r0, #122	@ 0x7a
 80019da:	f7ff fccd 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80019de:	20cb      	movs	r0, #203	@ 0xcb
 80019e0:	f7ff fcba 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80019e4:	2039      	movs	r0, #57	@ 0x39
 80019e6:	f7ff fcc7 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80019ea:	202c      	movs	r0, #44	@ 0x2c
 80019ec:	f7ff fcc4 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80019f0:	2000      	movs	r0, #0
 80019f2:	f7ff fcc1 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80019f6:	2034      	movs	r0, #52	@ 0x34
 80019f8:	f7ff fcbe 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80019fc:	2002      	movs	r0, #2
 80019fe:	f7ff fcbb 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001a02:	20f7      	movs	r0, #247	@ 0xf7
 8001a04:	f7ff fca8 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001a08:	2020      	movs	r0, #32
 8001a0a:	f7ff fcb5 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001a0e:	20ea      	movs	r0, #234	@ 0xea
 8001a10:	f7ff fca2 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff fcaf 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff fcac 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001a20:	20c0      	movs	r0, #192	@ 0xc0
 8001a22:	f7ff fc99 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001a26:	201b      	movs	r0, #27
 8001a28:	f7ff fca6 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001a2c:	20c1      	movs	r0, #193	@ 0xc1
 8001a2e:	f7ff fc93 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001a32:	2001      	movs	r0, #1
 8001a34:	f7ff fca0 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001a38:	20c5      	movs	r0, #197	@ 0xc5
 8001a3a:	f7ff fc8d 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001a3e:	2030      	movs	r0, #48	@ 0x30
 8001a40:	f7ff fc9a 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001a44:	2030      	movs	r0, #48	@ 0x30
 8001a46:	f7ff fc97 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001a4a:	20c7      	movs	r0, #199	@ 0xc7
 8001a4c:	f7ff fc84 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001a50:	20b7      	movs	r0, #183	@ 0xb7
 8001a52:	f7ff fc91 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001a56:	2036      	movs	r0, #54	@ 0x36
 8001a58:	f7ff fc7e 	bl	8001358 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8001a5c:	2008      	movs	r0, #8
 8001a5e:	f7ff fc8b 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001a62:	203a      	movs	r0, #58	@ 0x3a
 8001a64:	f7ff fc78 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001a68:	2055      	movs	r0, #85	@ 0x55
 8001a6a:	f7ff fc85 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001a6e:	20b1      	movs	r0, #177	@ 0xb1
 8001a70:	f7ff fc72 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001a74:	2000      	movs	r0, #0
 8001a76:	f7ff fc7f 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001a7a:	201a      	movs	r0, #26
 8001a7c:	f7ff fc7c 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001a80:	20b6      	movs	r0, #182	@ 0xb6
 8001a82:	f7ff fc69 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001a86:	200a      	movs	r0, #10
 8001a88:	f7ff fc76 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001a8c:	20a2      	movs	r0, #162	@ 0xa2
 8001a8e:	f7ff fc73 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001a92:	20f2      	movs	r0, #242	@ 0xf2
 8001a94:	f7ff fc60 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f7ff fc6d 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001a9e:	2026      	movs	r0, #38	@ 0x26
 8001aa0:	f7ff fc5a 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	f7ff fc67 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001aaa:	20e0      	movs	r0, #224	@ 0xe0
 8001aac:	f7ff fc54 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001ab0:	200f      	movs	r0, #15
 8001ab2:	f7ff fc61 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001ab6:	202a      	movs	r0, #42	@ 0x2a
 8001ab8:	f7ff fc5e 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001abc:	2028      	movs	r0, #40	@ 0x28
 8001abe:	f7ff fc5b 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001ac2:	2008      	movs	r0, #8
 8001ac4:	f7ff fc58 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001ac8:	200e      	movs	r0, #14
 8001aca:	f7ff fc55 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001ace:	2008      	movs	r0, #8
 8001ad0:	f7ff fc52 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001ad4:	2054      	movs	r0, #84	@ 0x54
 8001ad6:	f7ff fc4f 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001ada:	20a9      	movs	r0, #169	@ 0xa9
 8001adc:	f7ff fc4c 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001ae0:	2043      	movs	r0, #67	@ 0x43
 8001ae2:	f7ff fc49 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001ae6:	200a      	movs	r0, #10
 8001ae8:	f7ff fc46 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001aec:	200f      	movs	r0, #15
 8001aee:	f7ff fc43 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001af2:	2000      	movs	r0, #0
 8001af4:	f7ff fc40 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7ff fc3d 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7ff fc3a 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f7ff fc37 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001b0a:	20e1      	movs	r0, #225	@ 0xe1
 8001b0c:	f7ff fc24 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff fc31 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001b16:	2015      	movs	r0, #21
 8001b18:	f7ff fc2e 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001b1c:	2017      	movs	r0, #23
 8001b1e:	f7ff fc2b 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001b22:	2007      	movs	r0, #7
 8001b24:	f7ff fc28 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001b28:	2011      	movs	r0, #17
 8001b2a:	f7ff fc25 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001b2e:	2006      	movs	r0, #6
 8001b30:	f7ff fc22 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001b34:	202b      	movs	r0, #43	@ 0x2b
 8001b36:	f7ff fc1f 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001b3a:	2056      	movs	r0, #86	@ 0x56
 8001b3c:	f7ff fc1c 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001b40:	203c      	movs	r0, #60	@ 0x3c
 8001b42:	f7ff fc19 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001b46:	2005      	movs	r0, #5
 8001b48:	f7ff fc16 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001b4c:	2010      	movs	r0, #16
 8001b4e:	f7ff fc13 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001b52:	200f      	movs	r0, #15
 8001b54:	f7ff fc10 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001b58:	203f      	movs	r0, #63	@ 0x3f
 8001b5a:	f7ff fc0d 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001b5e:	203f      	movs	r0, #63	@ 0x3f
 8001b60:	f7ff fc0a 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001b64:	200f      	movs	r0, #15
 8001b66:	f7ff fc07 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001b6a:	202b      	movs	r0, #43	@ 0x2b
 8001b6c:	f7ff fbf4 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b70:	2000      	movs	r0, #0
 8001b72:	f7ff fc01 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b76:	2000      	movs	r0, #0
 8001b78:	f7ff fbfe 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f7ff fbfb 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001b82:	203f      	movs	r0, #63	@ 0x3f
 8001b84:	f7ff fbf8 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001b88:	202a      	movs	r0, #42	@ 0x2a
 8001b8a:	f7ff fbe5 	bl	8001358 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f7ff fbf2 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b94:	2000      	movs	r0, #0
 8001b96:	f7ff fbef 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f7ff fbec 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001ba0:	20ef      	movs	r0, #239	@ 0xef
 8001ba2:	f7ff fbe9 	bl	8001378 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 8001ba6:	2011      	movs	r0, #17
 8001ba8:	f7ff fbd6 	bl	8001358 <LCD_WR_REG>
	HAL_Delay(120);
 8001bac:	2078      	movs	r0, #120	@ 0x78
 8001bae:	f000 ff65 	bl	8002a7c <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 8001bb2:	2029      	movs	r0, #41	@ 0x29
 8001bb4:	f7ff fbd0 	bl	8001358 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bbe:	4804      	ldr	r0, [pc, #16]	@ (8001bd0 <lcd_init+0x2bc>)
 8001bc0:	f002 fa42 	bl	8004048 <HAL_GPIO_WritePin>
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40020800 	.word	0x40020800
 8001bcc:	20000528 	.word	0x20000528
 8001bd0:	40020000 	.word	0x40020000

08001bd4 <lcd_show_string>:
		}
	}
}

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b08b      	sub	sp, #44	@ 0x2c
 8001bd8:	af04      	add	r7, sp, #16
 8001bda:	60ba      	str	r2, [r7, #8]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4603      	mov	r3, r0
 8001be0:	81fb      	strh	r3, [r7, #14]
 8001be2:	460b      	mov	r3, r1
 8001be4:	81bb      	strh	r3, [r7, #12]
 8001be6:	4613      	mov	r3, r2
 8001be8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 8001bea:	89fb      	ldrh	r3, [r7, #14]
 8001bec:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 8001bf2:	e048      	b.n	8001c86 <lcd_show_string+0xb2>
		if (!bHz) {
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d145      	bne.n	8001c86 <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 8001bfa:	89fa      	ldrh	r2, [r7, #14]
 8001bfc:	4b26      	ldr	r3, [pc, #152]	@ (8001c98 <lcd_show_string+0xc4>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c06:	085b      	lsrs	r3, r3, #1
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	1acb      	subs	r3, r1, r3
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	dc3f      	bgt.n	8001c90 <lcd_show_string+0xbc>
 8001c10:	89ba      	ldrh	r2, [r7, #12]
 8001c12:	4b21      	ldr	r3, [pc, #132]	@ (8001c98 <lcd_show_string+0xc4>)
 8001c14:	885b      	ldrh	r3, [r3, #2]
 8001c16:	4619      	mov	r1, r3
 8001c18:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c1c:	1acb      	subs	r3, r1, r3
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dc36      	bgt.n	8001c90 <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b80      	cmp	r3, #128	@ 0x80
 8001c28:	d902      	bls.n	8001c30 <lcd_show_string+0x5c>
				bHz = 1;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	75fb      	strb	r3, [r7, #23]
 8001c2e:	e02a      	b.n	8001c86 <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b0d      	cmp	r3, #13
 8001c36:	d10b      	bne.n	8001c50 <lcd_show_string+0x7c>
					y += sizey;
 8001c38:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	89bb      	ldrh	r3, [r7, #12]
 8001c40:	4413      	add	r3, r2
 8001c42:	81bb      	strh	r3, [r7, #12]
					x = x0;
 8001c44:	8abb      	ldrh	r3, [r7, #20]
 8001c46:	81fb      	strh	r3, [r7, #14]
					str++;
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	e017      	b.n	8001c80 <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	781a      	ldrb	r2, [r3, #0]
 8001c54:	88fc      	ldrh	r4, [r7, #6]
 8001c56:	89b9      	ldrh	r1, [r7, #12]
 8001c58:	89f8      	ldrh	r0, [r7, #14]
 8001c5a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001c5e:	9302      	str	r3, [sp, #8]
 8001c60:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	4623      	mov	r3, r4
 8001c6c:	f7ff fc3c 	bl	80014e8 <lcd_show_char>
					x += sizey / 2;
 8001c70:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c74:	085b      	lsrs	r3, r3, #1
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	89fb      	ldrh	r3, [r7, #14]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	3301      	adds	r3, #1
 8001c84:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1b2      	bne.n	8001bf4 <lcd_show_string+0x20>
 8001c8e:	e000      	b.n	8001c92 <lcd_show_string+0xbe>
				return;
 8001c90:	bf00      	nop
			}
		}
	}
}
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd90      	pop	{r4, r7, pc}
 8001c98:	20000528 	.word	0x20000528

08001c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca0:	f000 fe7a 	bl	8002998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ca4:	f000 f842 	bl	8001d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ca8:	f7ff fa76 	bl	8001198 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cac:	f7ff f984 	bl	8000fb8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001cb0:	f000 fd62 	bl	8002778 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001cb4:	f000 fd36 	bl	8002724 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001cb8:	f000 fd0a 	bl	80026d0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001cbc:	f7fe ff28 	bl	8000b10 <MX_ADC1_Init>
  MX_FSMC_Init();
 8001cc0:	f7ff f99a 	bl	8000ff8 <MX_FSMC_Init>
  MX_TIM2_Init();
 8001cc4:	f000 fc26 	bl	8002514 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001cc8:	f000 fb14 	bl	80022f4 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001ccc:	f000 fc6e 	bl	80025ac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001cd0:	f7ff fe20 	bl	8001914 <lcd_init>
  sensor_init();
 8001cd4:	f000 fa68 	bl	80021a8 <sensor_init>
  Modbus_Init(&Master,&huart3);
 8001cd8:	4911      	ldr	r1, [pc, #68]	@ (8001d20 <main+0x84>)
 8001cda:	4812      	ldr	r0, [pc, #72]	@ (8001d24 <main+0x88>)
 8001cdc:	f000 fa16 	bl	800210c <Modbus_Init>
  lcd_clear(BLACK);
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f7ff fbb7 	bl	8001454 <lcd_clear>
  timer2_init();
 8001ce6:	f000 fa6d 	bl	80021c4 <timer2_init>
  timer2_set(50);
 8001cea:	2032      	movs	r0, #50	@ 0x32
 8001cec:	f000 fa7e 	bl	80021ec <timer2_set>
  timer4_init();
 8001cf0:	f000 fa72 	bl	80021d8 <timer4_init>
  timer4_set(500);
 8001cf4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001cf8:	f000 fa94 	bl	8002224 <timer4_set>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(timer2_flag){
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <main+0x8c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d004      	beq.n	8001d0e <main+0x72>
		  button_scan();
 8001d04:	f7ff f81a 	bl	8000d3c <button_scan>
		  timer2_flag = 0;
 8001d08:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <main+0x8c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
	  }
	  lcd_run();
 8001d0e:	f000 f877 	bl	8001e00 <lcd_run>
	  User_interface();
 8001d12:	f7fe fc1b 	bl	800054c <User_interface>
	  Master_Run(&Master);
 8001d16:	4803      	ldr	r0, [pc, #12]	@ (8001d24 <main+0x88>)
 8001d18:	f7fe fd88 	bl	800082c <Master_Run>
	  if(timer2_flag){
 8001d1c:	e7ee      	b.n	8001cfc <main+0x60>
 8001d1e:	bf00      	nop
 8001d20:	200008d0 	.word	0x200008d0
 8001d24:	20000530 	.word	0x20000530
 8001d28:	2000074a 	.word	0x2000074a

08001d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b094      	sub	sp, #80	@ 0x50
 8001d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d32:	f107 0320 	add.w	r3, r7, #32
 8001d36:	2230      	movs	r2, #48	@ 0x30
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f005 f8c0 	bl	8006ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d50:	2300      	movs	r3, #0
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	4b28      	ldr	r3, [pc, #160]	@ (8001df8 <SystemClock_Config+0xcc>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	4a27      	ldr	r2, [pc, #156]	@ (8001df8 <SystemClock_Config+0xcc>)
 8001d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d60:	4b25      	ldr	r3, [pc, #148]	@ (8001df8 <SystemClock_Config+0xcc>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	4b22      	ldr	r3, [pc, #136]	@ (8001dfc <SystemClock_Config+0xd0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a21      	ldr	r2, [pc, #132]	@ (8001dfc <SystemClock_Config+0xd0>)
 8001d76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <SystemClock_Config+0xd0>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d90:	2310      	movs	r3, #16
 8001d92:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d94:	2302      	movs	r3, #2
 8001d96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001da0:	23a8      	movs	r3, #168	@ 0xa8
 8001da2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001da4:	2302      	movs	r3, #2
 8001da6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001da8:	2304      	movs	r3, #4
 8001daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dac:	f107 0320 	add.w	r3, r7, #32
 8001db0:	4618      	mov	r0, r3
 8001db2:	f002 f97d 	bl	80040b0 <HAL_RCC_OscConfig>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001dbc:	f000 f8c4 	bl	8001f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc0:	230f      	movs	r3, #15
 8001dc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dcc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001dd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001dd2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001dd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	2105      	movs	r1, #5
 8001dde:	4618      	mov	r0, r3
 8001de0:	f002 fbde 	bl	80045a0 <HAL_RCC_ClockConfig>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001dea:	f000 f8ad 	bl	8001f48 <Error_Handler>
  }
}
 8001dee:	bf00      	nop
 8001df0:	3750      	adds	r7, #80	@ 0x50
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40007000 	.word	0x40007000

08001e00 <lcd_run>:
		lcd_show_string(10, 180, "Temperature:", RED, BLACK, 16, 0);
		lcd_show_float_num(130, 180, sensor_get_temperature(), 4, RED, BLACK,
				16);
	}
}
void lcd_run(){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af04      	add	r7, sp, #16
	lcd_show_string(10, 100, "Temperature:", RED, BLACK, 16, 0);
 8001e06:	2300      	movs	r3, #0
 8001e08:	9302      	str	r3, [sp, #8]
 8001e0a:	2310      	movs	r3, #16
 8001e0c:	9301      	str	r3, [sp, #4]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e16:	4a47      	ldr	r2, [pc, #284]	@ (8001f34 <lcd_run+0x134>)
 8001e18:	2164      	movs	r1, #100	@ 0x64
 8001e1a:	200a      	movs	r0, #10
 8001e1c:	f7ff feda 	bl	8001bd4 <lcd_show_string>
	lcd_show_float_num(130, 100, Master_get_temperature(), 4, RED, BLACK, 16);
 8001e20:	f7fe fd98 	bl	8000954 <Master_get_temperature>
 8001e24:	eef0 7a40 	vmov.f32	s15, s0
 8001e28:	2310      	movs	r3, #16
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e34:	2204      	movs	r2, #4
 8001e36:	eeb0 0a67 	vmov.f32	s0, s15
 8001e3a:	2164      	movs	r1, #100	@ 0x64
 8001e3c:	2082      	movs	r0, #130	@ 0x82
 8001e3e:	f7ff fcbd 	bl	80017bc <lcd_show_float_num>
	lcd_show_string(10, 120, "Current:", RED, BLACK, 16, 0);
 8001e42:	2300      	movs	r3, #0
 8001e44:	9302      	str	r3, [sp, #8]
 8001e46:	2310      	movs	r3, #16
 8001e48:	9301      	str	r3, [sp, #4]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e52:	4a39      	ldr	r2, [pc, #228]	@ (8001f38 <lcd_run+0x138>)
 8001e54:	2178      	movs	r1, #120	@ 0x78
 8001e56:	200a      	movs	r0, #10
 8001e58:	f7ff febc 	bl	8001bd4 <lcd_show_string>
	lcd_show_float_num(130, 120, Master_get_current(), 4, RED, BLACK, 16);
 8001e5c:	f7fe fda8 	bl	80009b0 <Master_get_current>
 8001e60:	eef0 7a40 	vmov.f32	s15, s0
 8001e64:	2310      	movs	r3, #16
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e70:	2204      	movs	r2, #4
 8001e72:	eeb0 0a67 	vmov.f32	s0, s15
 8001e76:	2178      	movs	r1, #120	@ 0x78
 8001e78:	2082      	movs	r0, #130	@ 0x82
 8001e7a:	f7ff fc9f 	bl	80017bc <lcd_show_float_num>
	lcd_show_string(10, 140, "Voltage:", RED, BLACK, 16, 0);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	9302      	str	r3, [sp, #8]
 8001e82:	2310      	movs	r3, #16
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	2300      	movs	r3, #0
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e8e:	4a2b      	ldr	r2, [pc, #172]	@ (8001f3c <lcd_run+0x13c>)
 8001e90:	218c      	movs	r1, #140	@ 0x8c
 8001e92:	200a      	movs	r0, #10
 8001e94:	f7ff fe9e 	bl	8001bd4 <lcd_show_string>
	lcd_show_float_num(130, 140, Master_get_voltage(), 4, RED, BLACK, 16);
 8001e98:	f7fe fdb8 	bl	8000a0c <Master_get_voltage>
 8001e9c:	eef0 7a40 	vmov.f32	s15, s0
 8001ea0:	2310      	movs	r3, #16
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001eac:	2204      	movs	r2, #4
 8001eae:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb2:	218c      	movs	r1, #140	@ 0x8c
 8001eb4:	2082      	movs	r0, #130	@ 0x82
 8001eb6:	f7ff fc81 	bl	80017bc <lcd_show_float_num>
	lcd_show_string(10, 160, "Light:", RED, BLACK, 16, 0);
 8001eba:	2300      	movs	r3, #0
 8001ebc:	9302      	str	r3, [sp, #8]
 8001ebe:	2310      	movs	r3, #16
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001eca:	4a1d      	ldr	r2, [pc, #116]	@ (8001f40 <lcd_run+0x140>)
 8001ecc:	21a0      	movs	r1, #160	@ 0xa0
 8001ece:	200a      	movs	r0, #10
 8001ed0:	f7ff fe80 	bl	8001bd4 <lcd_show_string>
	lcd_show_int_num(130, 160, Master_get_light(), 4, RED, BLACK, 16);
 8001ed4:	f7fe fdc8 	bl	8000a68 <Master_get_light>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	2310      	movs	r3, #16
 8001ede:	9302      	str	r3, [sp, #8]
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	9301      	str	r3, [sp, #4]
 8001ee4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2304      	movs	r3, #4
 8001eec:	21a0      	movs	r1, #160	@ 0xa0
 8001eee:	2082      	movs	r0, #130	@ 0x82
 8001ef0:	f7ff fbe6 	bl	80016c0 <lcd_show_int_num>
	lcd_show_string(10, 180, "Potentiometer:", RED, BLACK, 16, 0);
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	9302      	str	r3, [sp, #8]
 8001ef8:	2310      	movs	r3, #16
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	2300      	movs	r3, #0
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f04:	4a0f      	ldr	r2, [pc, #60]	@ (8001f44 <lcd_run+0x144>)
 8001f06:	21b4      	movs	r1, #180	@ 0xb4
 8001f08:	200a      	movs	r0, #10
 8001f0a:	f7ff fe63 	bl	8001bd4 <lcd_show_string>
	lcd_show_int_num(130, 180, Master_get_potention(), 4, RED, BLACK,16);
 8001f0e:	f7fe fdd5 	bl	8000abc <Master_get_potention>
 8001f12:	4603      	mov	r3, r0
 8001f14:	461a      	mov	r2, r3
 8001f16:	2310      	movs	r3, #16
 8001f18:	9302      	str	r3, [sp, #8]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	2304      	movs	r3, #4
 8001f26:	21b4      	movs	r1, #180	@ 0xb4
 8001f28:	2082      	movs	r0, #130	@ 0x82
 8001f2a:	f7ff fbc9 	bl	80016c0 <lcd_show_int_num>
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	08006f60 	.word	0x08006f60
 8001f38:	08006f3c 	.word	0x08006f3c
 8001f3c:	08006f30 	.word	0x08006f30
 8001f40:	08006f48 	.word	0x08006f48
 8001f44:	08006f50 	.word	0x08006f50

08001f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f4c:	b672      	cpsid	i
}
 8001f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <Error_Handler+0x8>

08001f54 <Modbus_Send>:
#include "rs485.h"
unsigned char Receive_Flag = 0;
unsigned char Status_Modbus = 0;
User_Mode USER = INIT;
Modbus_Mode MODBUS = IDLE;
Modbus_Status Modbus_Send(Modbus_HandleTypeDef* hModbus){
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,SET);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f62:	480c      	ldr	r0, [pc, #48]	@ (8001f94 <Modbus_Send+0x40>)
 8001f64:	f002 f870 	bl	8004048 <HAL_GPIO_WritePin>
	if(HAL_UART_Transmit(hModbus->huart,hModbus->Tx_buf,hModbus->Tx_size,HAL_MAX_DELAY) == HAL_OK){
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	1d59      	adds	r1, r3, #5
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	f003 fe8d 	bl	8005c98 <HAL_UART_Transmit>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <Modbus_Send+0x34>
			return MODBUS_OKE;
 8001f84:	2302      	movs	r3, #2
 8001f86:	e000      	b.n	8001f8a <Modbus_Send+0x36>
	}
	return MODBUS_ERROR;
 8001f88:	2301      	movs	r3, #1
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40020000 	.word	0x40020000

08001f98 <Modbus_PrepareData>:
	uint16_t high_crc = hModbus->Rx_buf[hModbus->Rx_size - 1];
	uint16_t low_crc =  hModbus->Rx_buf[hModbus->Rx_size - 2];
	uint16_t receive_crc = (high_crc<<8)|(low_crc);
	return (receive_crc == rx_crc);
}
void Modbus_PrepareData(Modbus_HandleTypeDef* hModbus, uint8_t Address, uint8_t Function, uint8_t* Data, uint8_t Size){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	72fb      	strb	r3, [r7, #11]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	72bb      	strb	r3, [r7, #10]
	hModbus->Tx_buf[0] = Address;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	7afa      	ldrb	r2, [r7, #11]
 8001fae:	715a      	strb	r2, [r3, #5]
	hModbus->Tx_buf[1] = Function;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	7aba      	ldrb	r2, [r7, #10]
 8001fb4:	719a      	strb	r2, [r3, #6]
	int i;
	uint16_t crc = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	827b      	strh	r3, [r7, #18]
	for(i=0; i<Size; i++){
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e00c      	b.n	8001fda <Modbus_PrepareData+0x42>
		hModbus->Tx_buf[i+2] = *(Data + i);
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	441a      	add	r2, r3
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	3302      	adds	r3, #2
 8001fca:	7811      	ldrb	r1, [r2, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	460a      	mov	r2, r1
 8001fd2:	715a      	strb	r2, [r3, #5]
	for(i=0; i<Size; i++){
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	dbed      	blt.n	8001fc0 <Modbus_PrepareData+0x28>
	}
	crc = crc16(hModbus->Tx_buf, i+2);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1d5a      	adds	r2, r3, #5
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3302      	adds	r3, #2
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	f7fe ffb0 	bl	8000f58 <crc16>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	827b      	strh	r3, [r7, #18]
	hModbus->Tx_buf[i+2] = crc & 0x00FF; // LOW
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	3302      	adds	r3, #2
 8002000:	8a7a      	ldrh	r2, [r7, #18]
 8002002:	b2d1      	uxtb	r1, r2
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	460a      	mov	r2, r1
 800200a:	715a      	strb	r2, [r3, #5]
	hModbus->Tx_buf[i+3] = crc >> 8; //HIGH
 800200c:	8a7b      	ldrh	r3, [r7, #18]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	b29a      	uxth	r2, r3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3303      	adds	r3, #3
 8002016:	b2d1      	uxtb	r1, r2
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4413      	add	r3, r2
 800201c:	460a      	mov	r2, r1
 800201e:	715a      	strb	r2, [r3, #5]
	hModbus->Tx_size = Size + 4;
 8002020:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002024:	b29b      	uxth	r3, r3
 8002026:	3304      	adds	r3, #4
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
}
 8002030:	bf00      	nop
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <Modbus_Transmit>:
Modbus_Status Modbus_Transmit(Modbus_HandleTypeDef* hModbus, uint32_t Timeout){
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
	Modbus_Send(hModbus);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff ff86 	bl	8001f54 <Modbus_Send>
	HAL_Delay(5);
 8002048:	2005      	movs	r0, #5
 800204a:	f000 fd17 	bl	8002a7c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
 800204e:	2200      	movs	r2, #0
 8002050:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002054:	480f      	ldr	r0, [pc, #60]	@ (8002094 <Modbus_Transmit+0x5c>)
 8002056:	f001 fff7 	bl	8004048 <HAL_GPIO_WritePin>

	uint32_t tickStart = HAL_GetTick();
 800205a:	f000 fd03 	bl	8002a64 <HAL_GetTick>
 800205e:	60f8      	str	r0, [r7, #12]
	while(!Receive_Flag){
 8002060:	e009      	b.n	8002076 <Modbus_Transmit+0x3e>
		if(HAL_GetTick()- tickStart >= Timeout){
 8002062:	f000 fcff 	bl	8002a64 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d801      	bhi.n	8002076 <Modbus_Transmit+0x3e>
				return MODBUS_TIMEOUT;
 8002072:	2300      	movs	r3, #0
 8002074:	e00a      	b.n	800208c <Modbus_Transmit+0x54>
	while(!Receive_Flag){
 8002076:	4b08      	ldr	r3, [pc, #32]	@ (8002098 <Modbus_Transmit+0x60>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f1      	beq.n	8002062 <Modbus_Transmit+0x2a>
		}
	}
	Receive_Flag = 0;
 800207e:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <Modbus_Transmit+0x60>)
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002084:	2005      	movs	r0, #5
 8002086:	f000 fcf9 	bl	8002a7c <HAL_Delay>
	return MODBUS_OKE;
 800208a:	2302      	movs	r3, #2
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020000 	.word	0x40020000
 8002098:	2000073c 	.word	0x2000073c

0800209c <Modbus_CallBack>:
Modbus_Status Modbus_Receive(Modbus_HandleTypeDef* hModbus){ //Thieu timeout
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
	HAL_UARTEx_ReceiveToIdle_IT(hModbus->huart, hModbus->Rx_buf, MAX_SIZE);
	return MODBUS_OKE;
}
void Modbus_CallBack(Modbus_HandleTypeDef* hModbus, UART_HandleTypeDef* huart, uint16_t Size){
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	4613      	mov	r3, r2
 80020a8:	80fb      	strh	r3, [r7, #6]
	if(huart->Instance == hModbus->huart->Instance){
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d11f      	bne.n	80020f8 <Modbus_CallBack+0x5c>
		Receive_Flag = 1;
 80020b8:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <Modbus_CallBack+0x64>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
		hModbus->Rx_size = Size;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	88fa      	ldrh	r2, [r7, #6]
 80020c2:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 80020c6:	2110      	movs	r1, #16
 80020c8:	480e      	ldr	r0, [pc, #56]	@ (8002104 <Modbus_CallBack+0x68>)
 80020ca:	f001 ffd6 	bl	800407a <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart1, hModbus->Rx_buf, hModbus->Rx_size, HAL_MAX_DELAY);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f503 7184 	add.w	r1, r3, #264	@ 0x108
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f8b3 2208 	ldrh.w	r2, [r3, #520]	@ 0x208
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
 80020de:	480a      	ldr	r0, [pc, #40]	@ (8002108 <Modbus_CallBack+0x6c>)
 80020e0:	f003 fdda 	bl	8005c98 <HAL_UART_Transmit>
		HAL_UARTEx_ReceiveToIdle_IT(hModbus->huart, hModbus->Rx_buf, MAX_SIZE);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80020ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020f2:	4619      	mov	r1, r3
 80020f4:	f003 fe5b 	bl	8005dae <HAL_UARTEx_ReceiveToIdle_IT>
	}

}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	2000073c 	.word	0x2000073c
 8002104:	40021000 	.word	0x40021000
 8002108:	20000840 	.word	0x20000840

0800210c <Modbus_Init>:
void Modbus_Init(Modbus_HandleTypeDef* hModbus, UART_HandleTypeDef* huart){
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
	hModbus->huart = huart;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	601a      	str	r2, [r3, #0]
	hModbus->Address = 0;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	711a      	strb	r2, [r3, #4]
	memset(hModbus->Rx_buf,0,sizeof(hModbus->Rx_buf));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002128:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f004 fec6 	bl	8006ec0 <memset>
	hModbus->Rx_size = 256;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800213a:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	memset(hModbus->Tx_buf,0,sizeof(hModbus->Tx_buf));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3305      	adds	r3, #5
 8002142:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002146:	2100      	movs	r1, #0
 8002148:	4618      	mov	r0, r3
 800214a:	f004 feb9 	bl	8006ec0 <memset>
	hModbus->Tx_size = 0;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
 8002156:	2200      	movs	r2, #0
 8002158:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800215c:	4808      	ldr	r0, [pc, #32]	@ (8002180 <Modbus_Init+0x74>)
 800215e:	f001 ff73 	bl	8004048 <HAL_GPIO_WritePin>
	HAL_UARTEx_ReceiveToIdle_IT(hModbus->huart, hModbus->Rx_buf, MAX_SIZE);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800216c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002170:	4619      	mov	r1, r3
 8002172:	f003 fe1c 	bl	8005dae <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40020000 	.word	0x40020000

08002184 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
	Modbus_CallBack(&Master, huart, Size);
 8002190:	887b      	ldrh	r3, [r7, #2]
 8002192:	461a      	mov	r2, r3
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4803      	ldr	r0, [pc, #12]	@ (80021a4 <HAL_UARTEx_RxEventCallback+0x20>)
 8002198:	f7ff ff80 	bl	800209c <Modbus_CallBack>
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000530 	.word	0x20000530

080021a8 <sensor_init>:

/* Variables */
uint16_t adc_receive[5];

/* Functions */
void sensor_init() {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (void*) adc_receive, 5);
 80021ac:	2205      	movs	r2, #5
 80021ae:	4903      	ldr	r1, [pc, #12]	@ (80021bc <sensor_init+0x14>)
 80021b0:	4803      	ldr	r0, [pc, #12]	@ (80021c0 <sensor_init+0x18>)
 80021b2:	f000 fccb 	bl	8002b4c <HAL_ADC_Start_DMA>
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000740 	.word	0x20000740
 80021c0:	20000368 	.word	0x20000368

080021c4 <timer2_init>:
/**
 * @brief  	Init timer interrupt
 * @param  	None
 * @retval 	None
 */
void timer2_init(void) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80021c8:	4802      	ldr	r0, [pc, #8]	@ (80021d4 <timer2_init+0x10>)
 80021ca:	f003 f8ef 	bl	80053ac <HAL_TIM_Base_Start_IT>
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200007b0 	.word	0x200007b0

080021d8 <timer4_init>:
void timer4_init(void) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 80021dc:	4802      	ldr	r0, [pc, #8]	@ (80021e8 <timer4_init+0x10>)
 80021de:	f003 f8e5 	bl	80053ac <HAL_TIM_Base_Start_IT>
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200007f8 	.word	0x200007f8

080021ec <timer2_set>:
/**
 * @brief	Set duration of software timer interrupt
 * @param	duration Duration of software timer interrupt
 * @retval 	None
 */
void timer2_set(int ms) {
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	timer2_mul = ms / TIMER_CYCLE_2;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <timer2_set+0x2c>)
 80021fa:	801a      	strh	r2, [r3, #0]
	timer2_counter = timer2_mul;
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <timer2_set+0x2c>)
 80021fe:	881a      	ldrh	r2, [r3, #0]
 8002200:	4b06      	ldr	r3, [pc, #24]	@ (800221c <timer2_set+0x30>)
 8002202:	801a      	strh	r2, [r3, #0]
	timer2_flag = 0;
 8002204:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <timer2_set+0x34>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	2000074e 	.word	0x2000074e
 800221c:	2000074c 	.word	0x2000074c
 8002220:	2000074a 	.word	0x2000074a

08002224 <timer4_set>:

void timer4_set(int ms) {
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	timer4_mul = ms / TIMER_CYCLE_4;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	b29a      	uxth	r2, r3
 8002230:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <timer4_set+0x2c>)
 8002232:	801a      	strh	r2, [r3, #0]
	timer4_counter = timer4_mul;
 8002234:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <timer4_set+0x2c>)
 8002236:	881a      	ldrh	r2, [r3, #0]
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <timer4_set+0x30>)
 800223a:	801a      	strh	r2, [r3, #0]
	timer4_flag = 0;
 800223c:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <timer4_set+0x34>)
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000754 	.word	0x20000754
 8002254:	20000752 	.word	0x20000752
 8002258:	20000750 	.word	0x20000750

0800225c <HAL_TIM_PeriodElapsedCallback>:
 * @brief  	Timer interrupt routine
 * @param  	htim TIM Base handle
 * @note	This callback function is called by system
 * @retval 	None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800226c:	d114      	bne.n	8002298 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (timer2_counter > 0) {
 800226e:	4b1a      	ldr	r3, [pc, #104]	@ (80022d8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d010      	beq.n	8002298 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002276:	4b18      	ldr	r3, [pc, #96]	@ (80022d8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	3b01      	subs	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	4b16      	ldr	r3, [pc, #88]	@ (80022d8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002280:	801a      	strh	r2, [r3, #0]
			if (timer2_counter == 0) {
 8002282:	4b15      	ldr	r3, [pc, #84]	@ (80022d8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_TIM_PeriodElapsedCallback+0x3c>
				timer2_flag = 1;
 800228a:	4b14      	ldr	r3, [pc, #80]	@ (80022dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
				timer2_counter = timer2_mul;
 8002290:	4b13      	ldr	r3, [pc, #76]	@ (80022e0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002292:	881a      	ldrh	r2, [r3, #0]
 8002294:	4b10      	ldr	r3, [pc, #64]	@ (80022d8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002296:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	if(htim->Instance == TIM4){
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a11      	ldr	r2, [pc, #68]	@ (80022e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d114      	bne.n	80022cc <HAL_TIM_PeriodElapsedCallback+0x70>
		if (timer4_counter > 0) {
 80022a2:	4b11      	ldr	r3, [pc, #68]	@ (80022e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d010      	beq.n	80022cc <HAL_TIM_PeriodElapsedCallback+0x70>
			timer4_counter--;
 80022aa:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	4b0d      	ldr	r3, [pc, #52]	@ (80022e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022b4:	801a      	strh	r2, [r3, #0]
			if (timer4_counter == 0) {
 80022b6:	4b0c      	ldr	r3, [pc, #48]	@ (80022e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <HAL_TIM_PeriodElapsedCallback+0x70>
				timer4_flag = 1;
 80022be:	4b0b      	ldr	r3, [pc, #44]	@ (80022ec <HAL_TIM_PeriodElapsedCallback+0x90>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
				timer4_counter = timer4_mul;
 80022c4:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80022c6:	881a      	ldrh	r2, [r3, #0]
 80022c8:	4b07      	ldr	r3, [pc, #28]	@ (80022e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022ca:	801a      	strh	r2, [r3, #0]
			}
		}
	}
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	2000074c 	.word	0x2000074c
 80022dc:	2000074a 	.word	0x2000074a
 80022e0:	2000074e 	.word	0x2000074e
 80022e4:	40000800 	.word	0x40000800
 80022e8:	20000752 	.word	0x20000752
 80022ec:	20000750 	.word	0x20000750
 80022f0:	20000754 	.word	0x20000754

080022f4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80022f8:	4b17      	ldr	r3, [pc, #92]	@ (8002358 <MX_SPI1_Init+0x64>)
 80022fa:	4a18      	ldr	r2, [pc, #96]	@ (800235c <MX_SPI1_Init+0x68>)
 80022fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022fe:	4b16      	ldr	r3, [pc, #88]	@ (8002358 <MX_SPI1_Init+0x64>)
 8002300:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002304:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002306:	4b14      	ldr	r3, [pc, #80]	@ (8002358 <MX_SPI1_Init+0x64>)
 8002308:	2200      	movs	r2, #0
 800230a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800230c:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <MX_SPI1_Init+0x64>)
 800230e:	2200      	movs	r2, #0
 8002310:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002312:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <MX_SPI1_Init+0x64>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002318:	4b0f      	ldr	r3, [pc, #60]	@ (8002358 <MX_SPI1_Init+0x64>)
 800231a:	2200      	movs	r2, #0
 800231c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800231e:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <MX_SPI1_Init+0x64>)
 8002320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002324:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002326:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <MX_SPI1_Init+0x64>)
 8002328:	2200      	movs	r2, #0
 800232a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800232c:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <MX_SPI1_Init+0x64>)
 800232e:	2200      	movs	r2, #0
 8002330:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002332:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <MX_SPI1_Init+0x64>)
 8002334:	2200      	movs	r2, #0
 8002336:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002338:	4b07      	ldr	r3, [pc, #28]	@ (8002358 <MX_SPI1_Init+0x64>)
 800233a:	2200      	movs	r2, #0
 800233c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800233e:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <MX_SPI1_Init+0x64>)
 8002340:	220a      	movs	r2, #10
 8002342:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002344:	4804      	ldr	r0, [pc, #16]	@ (8002358 <MX_SPI1_Init+0x64>)
 8002346:	f002 fb0b 	bl	8004960 <HAL_SPI_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002350:	f7ff fdfa 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000758 	.word	0x20000758
 800235c:	40013000 	.word	0x40013000

08002360 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	@ 0x28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a19      	ldr	r2, [pc, #100]	@ (80023e4 <HAL_SPI_MspInit+0x84>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d12b      	bne.n	80023da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	4b18      	ldr	r3, [pc, #96]	@ (80023e8 <HAL_SPI_MspInit+0x88>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238a:	4a17      	ldr	r2, [pc, #92]	@ (80023e8 <HAL_SPI_MspInit+0x88>)
 800238c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002390:	6453      	str	r3, [r2, #68]	@ 0x44
 8002392:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <HAL_SPI_MspInit+0x88>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <HAL_SPI_MspInit+0x88>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	4a10      	ldr	r2, [pc, #64]	@ (80023e8 <HAL_SPI_MspInit+0x88>)
 80023a8:	f043 0302 	orr.w	r3, r3, #2
 80023ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ae:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <HAL_SPI_MspInit+0x88>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80023ba:	2338      	movs	r3, #56	@ 0x38
 80023bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c6:	2303      	movs	r3, #3
 80023c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023ca:	2305      	movs	r3, #5
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	4619      	mov	r1, r3
 80023d4:	4805      	ldr	r0, [pc, #20]	@ (80023ec <HAL_SPI_MspInit+0x8c>)
 80023d6:	f001 fc9b 	bl	8003d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80023da:	bf00      	nop
 80023dc:	3728      	adds	r7, #40	@ 0x28
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40013000 	.word	0x40013000
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40020400 	.word	0x40020400

080023f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	607b      	str	r3, [r7, #4]
 80023fa:	4b10      	ldr	r3, [pc, #64]	@ (800243c <HAL_MspInit+0x4c>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	4a0f      	ldr	r2, [pc, #60]	@ (800243c <HAL_MspInit+0x4c>)
 8002400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002404:	6453      	str	r3, [r2, #68]	@ 0x44
 8002406:	4b0d      	ldr	r3, [pc, #52]	@ (800243c <HAL_MspInit+0x4c>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	603b      	str	r3, [r7, #0]
 8002416:	4b09      	ldr	r3, [pc, #36]	@ (800243c <HAL_MspInit+0x4c>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	4a08      	ldr	r2, [pc, #32]	@ (800243c <HAL_MspInit+0x4c>)
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002420:	6413      	str	r3, [r2, #64]	@ 0x40
 8002422:	4b06      	ldr	r3, [pc, #24]	@ (800243c <HAL_MspInit+0x4c>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800

08002440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <NMI_Handler+0x4>

08002448 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <HardFault_Handler+0x4>

08002450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <MemManage_Handler+0x4>

08002458 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <BusFault_Handler+0x4>

08002460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <UsageFault_Handler+0x4>

08002468 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002496:	f000 fad1 	bl	8002a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024a4:	4802      	ldr	r0, [pc, #8]	@ (80024b0 <TIM2_IRQHandler+0x10>)
 80024a6:	f002 fff1 	bl	800548c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200007b0 	.word	0x200007b0

080024b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024b8:	4802      	ldr	r0, [pc, #8]	@ (80024c4 <TIM4_IRQHandler+0x10>)
 80024ba:	f002 ffe7 	bl	800548c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	200007f8 	.word	0x200007f8

080024c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024cc:	4802      	ldr	r0, [pc, #8]	@ (80024d8 <USART3_IRQHandler+0x10>)
 80024ce:	f003 fccb 	bl	8005e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200008d0 	.word	0x200008d0

080024dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024e0:	4802      	ldr	r0, [pc, #8]	@ (80024ec <DMA2_Stream0_IRQHandler+0x10>)
 80024e2:	f001 f9ab 	bl	800383c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200003b0 	.word	0x200003b0

080024f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024f4:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <SystemInit+0x20>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fa:	4a05      	ldr	r2, [pc, #20]	@ (8002510 <SystemInit+0x20>)
 80024fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002500:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800251a:	f107 0308 	add.w	r3, r7, #8
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002528:	463b      	mov	r3, r7
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002530:	4b1d      	ldr	r3, [pc, #116]	@ (80025a8 <MX_TIM2_Init+0x94>)
 8002532:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002536:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8002538:	4b1b      	ldr	r3, [pc, #108]	@ (80025a8 <MX_TIM2_Init+0x94>)
 800253a:	f240 3247 	movw	r2, #839	@ 0x347
 800253e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002540:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <MX_TIM2_Init+0x94>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002546:	4b18      	ldr	r3, [pc, #96]	@ (80025a8 <MX_TIM2_Init+0x94>)
 8002548:	2263      	movs	r2, #99	@ 0x63
 800254a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254c:	4b16      	ldr	r3, [pc, #88]	@ (80025a8 <MX_TIM2_Init+0x94>)
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002552:	4b15      	ldr	r3, [pc, #84]	@ (80025a8 <MX_TIM2_Init+0x94>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002558:	4813      	ldr	r0, [pc, #76]	@ (80025a8 <MX_TIM2_Init+0x94>)
 800255a:	f002 fed7 	bl	800530c <HAL_TIM_Base_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002564:	f7ff fcf0 	bl	8001f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002568:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800256c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800256e:	f107 0308 	add.w	r3, r7, #8
 8002572:	4619      	mov	r1, r3
 8002574:	480c      	ldr	r0, [pc, #48]	@ (80025a8 <MX_TIM2_Init+0x94>)
 8002576:	f003 f879 	bl	800566c <HAL_TIM_ConfigClockSource>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002580:	f7ff fce2 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002584:	2300      	movs	r3, #0
 8002586:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002588:	2300      	movs	r3, #0
 800258a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800258c:	463b      	mov	r3, r7
 800258e:	4619      	mov	r1, r3
 8002590:	4805      	ldr	r0, [pc, #20]	@ (80025a8 <MX_TIM2_Init+0x94>)
 8002592:	f003 faa1 	bl	8005ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800259c:	f7ff fcd4 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025a0:	bf00      	nop
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	200007b0 	.word	0x200007b0

080025ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b2:	f107 0308 	add.w	r3, r7, #8
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c0:	463b      	mov	r3, r7
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002640 <MX_TIM4_Init+0x94>)
 80025ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002644 <MX_TIM4_Init+0x98>)
 80025cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 839;
 80025ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002640 <MX_TIM4_Init+0x94>)
 80025d0:	f240 3247 	movw	r2, #839	@ 0x347
 80025d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002640 <MX_TIM4_Init+0x94>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80025dc:	4b18      	ldr	r3, [pc, #96]	@ (8002640 <MX_TIM4_Init+0x94>)
 80025de:	2263      	movs	r2, #99	@ 0x63
 80025e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e2:	4b17      	ldr	r3, [pc, #92]	@ (8002640 <MX_TIM4_Init+0x94>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e8:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <MX_TIM4_Init+0x94>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025ee:	4814      	ldr	r0, [pc, #80]	@ (8002640 <MX_TIM4_Init+0x94>)
 80025f0:	f002 fe8c 	bl	800530c <HAL_TIM_Base_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80025fa:	f7ff fca5 	bl	8001f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002602:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002604:	f107 0308 	add.w	r3, r7, #8
 8002608:	4619      	mov	r1, r3
 800260a:	480d      	ldr	r0, [pc, #52]	@ (8002640 <MX_TIM4_Init+0x94>)
 800260c:	f003 f82e 	bl	800566c <HAL_TIM_ConfigClockSource>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002616:	f7ff fc97 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002622:	463b      	mov	r3, r7
 8002624:	4619      	mov	r1, r3
 8002626:	4806      	ldr	r0, [pc, #24]	@ (8002640 <MX_TIM4_Init+0x94>)
 8002628:	f003 fa56 	bl	8005ad8 <HAL_TIMEx_MasterConfigSynchronization>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002632:	f7ff fc89 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002636:	bf00      	nop
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200007f8 	.word	0x200007f8
 8002644:	40000800 	.word	0x40000800

08002648 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002658:	d116      	bne.n	8002688 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	4b1a      	ldr	r3, [pc, #104]	@ (80026c8 <HAL_TIM_Base_MspInit+0x80>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	4a19      	ldr	r2, [pc, #100]	@ (80026c8 <HAL_TIM_Base_MspInit+0x80>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6413      	str	r3, [r2, #64]	@ 0x40
 800266a:	4b17      	ldr	r3, [pc, #92]	@ (80026c8 <HAL_TIM_Base_MspInit+0x80>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2100      	movs	r1, #0
 800267a:	201c      	movs	r0, #28
 800267c:	f000 ff0f 	bl	800349e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002680:	201c      	movs	r0, #28
 8002682:	f000 ff28 	bl	80034d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002686:	e01a      	b.n	80026be <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0f      	ldr	r2, [pc, #60]	@ (80026cc <HAL_TIM_Base_MspInit+0x84>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d115      	bne.n	80026be <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	4b0c      	ldr	r3, [pc, #48]	@ (80026c8 <HAL_TIM_Base_MspInit+0x80>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	4a0b      	ldr	r2, [pc, #44]	@ (80026c8 <HAL_TIM_Base_MspInit+0x80>)
 800269c:	f043 0304 	orr.w	r3, r3, #4
 80026a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026a2:	4b09      	ldr	r3, [pc, #36]	@ (80026c8 <HAL_TIM_Base_MspInit+0x80>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	201e      	movs	r0, #30
 80026b4:	f000 fef3 	bl	800349e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80026b8:	201e      	movs	r0, #30
 80026ba:	f000 ff0c 	bl	80034d6 <HAL_NVIC_EnableIRQ>
}
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40000800 	.word	0x40000800

080026d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026d4:	4b11      	ldr	r3, [pc, #68]	@ (800271c <MX_USART1_UART_Init+0x4c>)
 80026d6:	4a12      	ldr	r2, [pc, #72]	@ (8002720 <MX_USART1_UART_Init+0x50>)
 80026d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80026da:	4b10      	ldr	r3, [pc, #64]	@ (800271c <MX_USART1_UART_Init+0x4c>)
 80026dc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80026e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	@ (800271c <MX_USART1_UART_Init+0x4c>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026e8:	4b0c      	ldr	r3, [pc, #48]	@ (800271c <MX_USART1_UART_Init+0x4c>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026ee:	4b0b      	ldr	r3, [pc, #44]	@ (800271c <MX_USART1_UART_Init+0x4c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026f4:	4b09      	ldr	r3, [pc, #36]	@ (800271c <MX_USART1_UART_Init+0x4c>)
 80026f6:	220c      	movs	r2, #12
 80026f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fa:	4b08      	ldr	r3, [pc, #32]	@ (800271c <MX_USART1_UART_Init+0x4c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002700:	4b06      	ldr	r3, [pc, #24]	@ (800271c <MX_USART1_UART_Init+0x4c>)
 8002702:	2200      	movs	r2, #0
 8002704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002706:	4805      	ldr	r0, [pc, #20]	@ (800271c <MX_USART1_UART_Init+0x4c>)
 8002708:	f003 fa76 	bl	8005bf8 <HAL_UART_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002712:	f7ff fc19 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000840 	.word	0x20000840
 8002720:	40011000 	.word	0x40011000

08002724 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002728:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <MX_USART2_UART_Init+0x4c>)
 800272a:	4a12      	ldr	r2, [pc, #72]	@ (8002774 <MX_USART2_UART_Init+0x50>)
 800272c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800272e:	4b10      	ldr	r3, [pc, #64]	@ (8002770 <MX_USART2_UART_Init+0x4c>)
 8002730:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002736:	4b0e      	ldr	r3, [pc, #56]	@ (8002770 <MX_USART2_UART_Init+0x4c>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800273c:	4b0c      	ldr	r3, [pc, #48]	@ (8002770 <MX_USART2_UART_Init+0x4c>)
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002742:	4b0b      	ldr	r3, [pc, #44]	@ (8002770 <MX_USART2_UART_Init+0x4c>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002748:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <MX_USART2_UART_Init+0x4c>)
 800274a:	220c      	movs	r2, #12
 800274c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274e:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <MX_USART2_UART_Init+0x4c>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002754:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <MX_USART2_UART_Init+0x4c>)
 8002756:	2200      	movs	r2, #0
 8002758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800275a:	4805      	ldr	r0, [pc, #20]	@ (8002770 <MX_USART2_UART_Init+0x4c>)
 800275c:	f003 fa4c 	bl	8005bf8 <HAL_UART_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002766:	f7ff fbef 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000888 	.word	0x20000888
 8002774:	40004400 	.word	0x40004400

08002778 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800277c:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <MX_USART3_UART_Init+0x4c>)
 800277e:	4a12      	ldr	r2, [pc, #72]	@ (80027c8 <MX_USART3_UART_Init+0x50>)
 8002780:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 4800;
 8002782:	4b10      	ldr	r3, [pc, #64]	@ (80027c4 <MX_USART3_UART_Init+0x4c>)
 8002784:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8002788:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800278a:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <MX_USART3_UART_Init+0x4c>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002790:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <MX_USART3_UART_Init+0x4c>)
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002796:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <MX_USART3_UART_Init+0x4c>)
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800279c:	4b09      	ldr	r3, [pc, #36]	@ (80027c4 <MX_USART3_UART_Init+0x4c>)
 800279e:	220c      	movs	r2, #12
 80027a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027a2:	4b08      	ldr	r3, [pc, #32]	@ (80027c4 <MX_USART3_UART_Init+0x4c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a8:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <MX_USART3_UART_Init+0x4c>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027ae:	4805      	ldr	r0, [pc, #20]	@ (80027c4 <MX_USART3_UART_Init+0x4c>)
 80027b0:	f003 fa22 	bl	8005bf8 <HAL_UART_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80027ba:	f7ff fbc5 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200008d0 	.word	0x200008d0
 80027c8:	40004800 	.word	0x40004800

080027cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08e      	sub	sp, #56	@ 0x38
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a50      	ldr	r2, [pc, #320]	@ (800292c <HAL_UART_MspInit+0x160>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d12d      	bne.n	800284a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]
 80027f2:	4b4f      	ldr	r3, [pc, #316]	@ (8002930 <HAL_UART_MspInit+0x164>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f6:	4a4e      	ldr	r2, [pc, #312]	@ (8002930 <HAL_UART_MspInit+0x164>)
 80027f8:	f043 0310 	orr.w	r3, r3, #16
 80027fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002930 <HAL_UART_MspInit+0x164>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	623b      	str	r3, [r7, #32]
 8002808:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	4b48      	ldr	r3, [pc, #288]	@ (8002930 <HAL_UART_MspInit+0x164>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	4a47      	ldr	r2, [pc, #284]	@ (8002930 <HAL_UART_MspInit+0x164>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	6313      	str	r3, [r2, #48]	@ 0x30
 800281a:	4b45      	ldr	r3, [pc, #276]	@ (8002930 <HAL_UART_MspInit+0x164>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	61fb      	str	r3, [r7, #28]
 8002824:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002826:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002834:	2303      	movs	r3, #3
 8002836:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002838:	2307      	movs	r3, #7
 800283a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002840:	4619      	mov	r1, r3
 8002842:	483c      	ldr	r0, [pc, #240]	@ (8002934 <HAL_UART_MspInit+0x168>)
 8002844:	f001 fa64 	bl	8003d10 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002848:	e06b      	b.n	8002922 <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a3a      	ldr	r2, [pc, #232]	@ (8002938 <HAL_UART_MspInit+0x16c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d12c      	bne.n	80028ae <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002854:	2300      	movs	r3, #0
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	4b35      	ldr	r3, [pc, #212]	@ (8002930 <HAL_UART_MspInit+0x164>)
 800285a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285c:	4a34      	ldr	r2, [pc, #208]	@ (8002930 <HAL_UART_MspInit+0x164>)
 800285e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002862:	6413      	str	r3, [r2, #64]	@ 0x40
 8002864:	4b32      	ldr	r3, [pc, #200]	@ (8002930 <HAL_UART_MspInit+0x164>)
 8002866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	4b2e      	ldr	r3, [pc, #184]	@ (8002930 <HAL_UART_MspInit+0x164>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002878:	4a2d      	ldr	r2, [pc, #180]	@ (8002930 <HAL_UART_MspInit+0x164>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002880:	4b2b      	ldr	r3, [pc, #172]	@ (8002930 <HAL_UART_MspInit+0x164>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800288c:	230c      	movs	r3, #12
 800288e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002890:	2302      	movs	r3, #2
 8002892:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002898:	2303      	movs	r3, #3
 800289a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800289c:	2307      	movs	r3, #7
 800289e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028a4:	4619      	mov	r1, r3
 80028a6:	4823      	ldr	r0, [pc, #140]	@ (8002934 <HAL_UART_MspInit+0x168>)
 80028a8:	f001 fa32 	bl	8003d10 <HAL_GPIO_Init>
}
 80028ac:	e039      	b.n	8002922 <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART3)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a22      	ldr	r2, [pc, #136]	@ (800293c <HAL_UART_MspInit+0x170>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d134      	bne.n	8002922 <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028b8:	2300      	movs	r3, #0
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002930 <HAL_UART_MspInit+0x164>)
 80028be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002930 <HAL_UART_MspInit+0x164>)
 80028c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80028c8:	4b19      	ldr	r3, [pc, #100]	@ (8002930 <HAL_UART_MspInit+0x164>)
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	4b15      	ldr	r3, [pc, #84]	@ (8002930 <HAL_UART_MspInit+0x164>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028dc:	4a14      	ldr	r2, [pc, #80]	@ (8002930 <HAL_UART_MspInit+0x164>)
 80028de:	f043 0304 	orr.w	r3, r3, #4
 80028e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e4:	4b12      	ldr	r3, [pc, #72]	@ (8002930 <HAL_UART_MspInit+0x164>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028f0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80028f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	2302      	movs	r3, #2
 80028f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fe:	2303      	movs	r3, #3
 8002900:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002902:	2307      	movs	r3, #7
 8002904:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800290a:	4619      	mov	r1, r3
 800290c:	480c      	ldr	r0, [pc, #48]	@ (8002940 <HAL_UART_MspInit+0x174>)
 800290e:	f001 f9ff 	bl	8003d10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	2027      	movs	r0, #39	@ 0x27
 8002918:	f000 fdc1 	bl	800349e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800291c:	2027      	movs	r0, #39	@ 0x27
 800291e:	f000 fdda 	bl	80034d6 <HAL_NVIC_EnableIRQ>
}
 8002922:	bf00      	nop
 8002924:	3738      	adds	r7, #56	@ 0x38
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40011000 	.word	0x40011000
 8002930:	40023800 	.word	0x40023800
 8002934:	40020000 	.word	0x40020000
 8002938:	40004400 	.word	0x40004400
 800293c:	40004800 	.word	0x40004800
 8002940:	40020800 	.word	0x40020800

08002944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800297c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002948:	f7ff fdd2 	bl	80024f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800294c:	480c      	ldr	r0, [pc, #48]	@ (8002980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800294e:	490d      	ldr	r1, [pc, #52]	@ (8002984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002950:	4a0d      	ldr	r2, [pc, #52]	@ (8002988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002954:	e002      	b.n	800295c <LoopCopyDataInit>

08002956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800295a:	3304      	adds	r3, #4

0800295c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800295c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800295e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002960:	d3f9      	bcc.n	8002956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002962:	4a0a      	ldr	r2, [pc, #40]	@ (800298c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002964:	4c0a      	ldr	r4, [pc, #40]	@ (8002990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002968:	e001      	b.n	800296e <LoopFillZerobss>

0800296a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800296a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800296c:	3204      	adds	r2, #4

0800296e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800296e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002970:	d3fb      	bcc.n	800296a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002972:	f004 faad 	bl	8006ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002976:	f7ff f991 	bl	8001c9c <main>
  bx  lr    
 800297a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800297c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002984:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8002988:	08009f20 	.word	0x08009f20
  ldr r2, =_sbss
 800298c:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8002990:	2000091c 	.word	0x2000091c

08002994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002994:	e7fe      	b.n	8002994 <ADC_IRQHandler>
	...

08002998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800299c:	4b0e      	ldr	r3, [pc, #56]	@ (80029d8 <HAL_Init+0x40>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0d      	ldr	r2, [pc, #52]	@ (80029d8 <HAL_Init+0x40>)
 80029a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029a8:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <HAL_Init+0x40>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0a      	ldr	r2, [pc, #40]	@ (80029d8 <HAL_Init+0x40>)
 80029ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029b4:	4b08      	ldr	r3, [pc, #32]	@ (80029d8 <HAL_Init+0x40>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a07      	ldr	r2, [pc, #28]	@ (80029d8 <HAL_Init+0x40>)
 80029ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c0:	2003      	movs	r0, #3
 80029c2:	f000 fd61 	bl	8003488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029c6:	200f      	movs	r0, #15
 80029c8:	f000 f808 	bl	80029dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029cc:	f7ff fd10 	bl	80023f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40023c00 	.word	0x40023c00

080029dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029e4:	4b12      	ldr	r3, [pc, #72]	@ (8002a30 <HAL_InitTick+0x54>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b12      	ldr	r3, [pc, #72]	@ (8002a34 <HAL_InitTick+0x58>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	4619      	mov	r1, r3
 80029ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fd79 	bl	80034f2 <HAL_SYSTICK_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00e      	b.n	8002a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b0f      	cmp	r3, #15
 8002a0e:	d80a      	bhi.n	8002a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a10:	2200      	movs	r2, #0
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	f000 fd41 	bl	800349e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a1c:	4a06      	ldr	r2, [pc, #24]	@ (8002a38 <HAL_InitTick+0x5c>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000228 	.word	0x20000228
 8002a34:	20000230 	.word	0x20000230
 8002a38:	2000022c 	.word	0x2000022c

08002a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a40:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <HAL_IncTick+0x20>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <HAL_IncTick+0x24>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a04      	ldr	r2, [pc, #16]	@ (8002a60 <HAL_IncTick+0x24>)
 8002a4e:	6013      	str	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000230 	.word	0x20000230
 8002a60:	20000918 	.word	0x20000918

08002a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return uwTick;
 8002a68:	4b03      	ldr	r3, [pc, #12]	@ (8002a78 <HAL_GetTick+0x14>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000918 	.word	0x20000918

08002a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a84:	f7ff ffee 	bl	8002a64 <HAL_GetTick>
 8002a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d005      	beq.n	8002aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac0 <HAL_Delay+0x44>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aa2:	bf00      	nop
 8002aa4:	f7ff ffde 	bl	8002a64 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d8f7      	bhi.n	8002aa4 <HAL_Delay+0x28>
  {
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000230 	.word	0x20000230

08002ac4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e033      	b.n	8002b42 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe f896 	bl	8000c14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d118      	bne.n	8002b34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b0a:	f023 0302 	bic.w	r3, r3, #2
 8002b0e:	f043 0202 	orr.w	r2, r3, #2
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fa68 	bl	8002fec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	f023 0303 	bic.w	r3, r3, #3
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b32:	e001      	b.n	8002b38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_Start_DMA+0x1e>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e0e9      	b.n	8002d3e <HAL_ADC_Start_DMA+0x1f2>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d018      	beq.n	8002bb2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b90:	4b6d      	ldr	r3, [pc, #436]	@ (8002d48 <HAL_ADC_Start_DMA+0x1fc>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a6d      	ldr	r2, [pc, #436]	@ (8002d4c <HAL_ADC_Start_DMA+0x200>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	0c9a      	lsrs	r2, r3, #18
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002ba4:	e002      	b.n	8002bac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f9      	bne.n	8002ba6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bc0:	d107      	bne.n	8002bd2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bd0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	f040 80a1 	bne.w	8002d24 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002bea:	f023 0301 	bic.w	r3, r3, #1
 8002bee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c0c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c20:	d106      	bne.n	8002c30 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c26:	f023 0206 	bic.w	r2, r3, #6
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c2e:	e002      	b.n	8002c36 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c3e:	4b44      	ldr	r3, [pc, #272]	@ (8002d50 <HAL_ADC_Start_DMA+0x204>)
 8002c40:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c46:	4a43      	ldr	r2, [pc, #268]	@ (8002d54 <HAL_ADC_Start_DMA+0x208>)
 8002c48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4e:	4a42      	ldr	r2, [pc, #264]	@ (8002d58 <HAL_ADC_Start_DMA+0x20c>)
 8002c50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c56:	4a41      	ldr	r2, [pc, #260]	@ (8002d5c <HAL_ADC_Start_DMA+0x210>)
 8002c58:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002c62:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002c72:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c82:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	334c      	adds	r3, #76	@ 0x4c
 8002c8e:	4619      	mov	r1, r3
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f000 fce8 	bl	8003668 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d12a      	bne.n	8002cfa <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a2d      	ldr	r2, [pc, #180]	@ (8002d60 <HAL_ADC_Start_DMA+0x214>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d015      	beq.n	8002cda <HAL_ADC_Start_DMA+0x18e>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a2c      	ldr	r2, [pc, #176]	@ (8002d64 <HAL_ADC_Start_DMA+0x218>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d105      	bne.n	8002cc4 <HAL_ADC_Start_DMA+0x178>
 8002cb8:	4b25      	ldr	r3, [pc, #148]	@ (8002d50 <HAL_ADC_Start_DMA+0x204>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a27      	ldr	r2, [pc, #156]	@ (8002d68 <HAL_ADC_Start_DMA+0x21c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d136      	bne.n	8002d3c <HAL_ADC_Start_DMA+0x1f0>
 8002cce:	4b20      	ldr	r3, [pc, #128]	@ (8002d50 <HAL_ADC_Start_DMA+0x204>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d130      	bne.n	8002d3c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d129      	bne.n	8002d3c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	e020      	b.n	8002d3c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a18      	ldr	r2, [pc, #96]	@ (8002d60 <HAL_ADC_Start_DMA+0x214>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d11b      	bne.n	8002d3c <HAL_ADC_Start_DMA+0x1f0>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d114      	bne.n	8002d3c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	e00b      	b.n	8002d3c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d28:	f043 0210 	orr.w	r2, r3, #16
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d34:	f043 0201 	orr.w	r2, r3, #1
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000228 	.word	0x20000228
 8002d4c:	431bde83 	.word	0x431bde83
 8002d50:	40012300 	.word	0x40012300
 8002d54:	080031e5 	.word	0x080031e5
 8002d58:	0800329f 	.word	0x0800329f
 8002d5c:	080032bb 	.word	0x080032bb
 8002d60:	40012000 	.word	0x40012000
 8002d64:	40012100 	.word	0x40012100
 8002d68:	40012200 	.word	0x40012200

08002d6c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x1c>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e105      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x228>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b09      	cmp	r3, #9
 8002dd2:	d925      	bls.n	8002e20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68d9      	ldr	r1, [r3, #12]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	3b1e      	subs	r3, #30
 8002dea:	2207      	movs	r2, #7
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43da      	mvns	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	400a      	ands	r2, r1
 8002df8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68d9      	ldr	r1, [r3, #12]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4403      	add	r3, r0
 8002e12:	3b1e      	subs	r3, #30
 8002e14:	409a      	lsls	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	e022      	b.n	8002e66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6919      	ldr	r1, [r3, #16]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	2207      	movs	r2, #7
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	400a      	ands	r2, r1
 8002e42:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6919      	ldr	r1, [r3, #16]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	4618      	mov	r0, r3
 8002e56:	4603      	mov	r3, r0
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4403      	add	r3, r0
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d824      	bhi.n	8002eb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3b05      	subs	r3, #5
 8002e80:	221f      	movs	r2, #31
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43da      	mvns	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	400a      	ands	r2, r1
 8002e8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3b05      	subs	r3, #5
 8002eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002eb6:	e04c      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b0c      	cmp	r3, #12
 8002ebe:	d824      	bhi.n	8002f0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	3b23      	subs	r3, #35	@ 0x23
 8002ed2:	221f      	movs	r2, #31
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43da      	mvns	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	400a      	ands	r2, r1
 8002ee0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	4618      	mov	r0, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	3b23      	subs	r3, #35	@ 0x23
 8002efc:	fa00 f203 	lsl.w	r2, r0, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f08:	e023      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	3b41      	subs	r3, #65	@ 0x41
 8002f1c:	221f      	movs	r2, #31
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	400a      	ands	r2, r1
 8002f2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	3b41      	subs	r3, #65	@ 0x41
 8002f46:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f52:	4b22      	ldr	r3, [pc, #136]	@ (8002fdc <HAL_ADC_ConfigChannel+0x234>)
 8002f54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a21      	ldr	r2, [pc, #132]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x238>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d109      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x1cc>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b12      	cmp	r3, #18
 8002f66:	d105      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a19      	ldr	r2, [pc, #100]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x238>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d123      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x21e>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b10      	cmp	r3, #16
 8002f84:	d003      	beq.n	8002f8e <HAL_ADC_ConfigChannel+0x1e6>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b11      	cmp	r3, #17
 8002f8c:	d11b      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b10      	cmp	r3, #16
 8002fa0:	d111      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fa2:	4b10      	ldr	r3, [pc, #64]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x23c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a10      	ldr	r2, [pc, #64]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x240>)
 8002fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fac:	0c9a      	lsrs	r2, r3, #18
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fb8:	e002      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f9      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	40012300 	.word	0x40012300
 8002fe0:	40012000 	.word	0x40012000
 8002fe4:	20000228 	.word	0x20000228
 8002fe8:	431bde83 	.word	0x431bde83

08002fec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ff4:	4b79      	ldr	r3, [pc, #484]	@ (80031dc <ADC_Init+0x1f0>)
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	431a      	orrs	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	021a      	lsls	r2, r3, #8
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003044:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6899      	ldr	r1, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307e:	4a58      	ldr	r2, [pc, #352]	@ (80031e0 <ADC_Init+0x1f4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d022      	beq.n	80030ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003092:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6899      	ldr	r1, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6899      	ldr	r1, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	e00f      	b.n	80030ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0202 	bic.w	r2, r2, #2
 80030f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6899      	ldr	r1, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	7e1b      	ldrb	r3, [r3, #24]
 8003104:	005a      	lsls	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01b      	beq.n	8003150 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003126:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003136:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003142:	3b01      	subs	r3, #1
 8003144:	035a      	lsls	r2, r3, #13
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	e007      	b.n	8003160 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800315e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800316e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	3b01      	subs	r3, #1
 800317c:	051a      	lsls	r2, r3, #20
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003194:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6899      	ldr	r1, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80031a2:	025a      	lsls	r2, r3, #9
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6899      	ldr	r1, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	029a      	lsls	r2, r3, #10
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	40012300 	.word	0x40012300
 80031e0:	0f000001 	.word	0x0f000001

080031e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d13c      	bne.n	8003278 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d12b      	bne.n	8003270 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800321c:	2b00      	cmp	r3, #0
 800321e:	d127      	bne.n	8003270 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003226:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800322a:	2b00      	cmp	r3, #0
 800322c:	d006      	beq.n	800323c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003238:	2b00      	cmp	r3, #0
 800323a:	d119      	bne.n	8003270 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0220 	bic.w	r2, r2, #32
 800324a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003250:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d105      	bne.n	8003270 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	f043 0201 	orr.w	r2, r3, #1
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f7ff fd7b 	bl	8002d6c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003276:	e00e      	b.n	8003296 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f7ff fd85 	bl	8002d94 <HAL_ADC_ErrorCallback>
}
 800328a:	e004      	b.n	8003296 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	4798      	blx	r3
}
 8003296:	bf00      	nop
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032aa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f7ff fd67 	bl	8002d80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032b2:	bf00      	nop
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2240      	movs	r2, #64	@ 0x40
 80032cc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d2:	f043 0204 	orr.w	r2, r3, #4
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f7ff fd5a 	bl	8002d94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032e0:	bf00      	nop
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032f8:	4b0c      	ldr	r3, [pc, #48]	@ (800332c <__NVIC_SetPriorityGrouping+0x44>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003304:	4013      	ands	r3, r2
 8003306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003310:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331a:	4a04      	ldr	r2, [pc, #16]	@ (800332c <__NVIC_SetPriorityGrouping+0x44>)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	60d3      	str	r3, [r2, #12]
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003334:	4b04      	ldr	r3, [pc, #16]	@ (8003348 <__NVIC_GetPriorityGrouping+0x18>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	0a1b      	lsrs	r3, r3, #8
 800333a:	f003 0307 	and.w	r3, r3, #7
}
 800333e:	4618      	mov	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	2b00      	cmp	r3, #0
 800335c:	db0b      	blt.n	8003376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	f003 021f 	and.w	r2, r3, #31
 8003364:	4907      	ldr	r1, [pc, #28]	@ (8003384 <__NVIC_EnableIRQ+0x38>)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	2001      	movs	r0, #1
 800336e:	fa00 f202 	lsl.w	r2, r0, r2
 8003372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000e100 	.word	0xe000e100

08003388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	6039      	str	r1, [r7, #0]
 8003392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003398:	2b00      	cmp	r3, #0
 800339a:	db0a      	blt.n	80033b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	490c      	ldr	r1, [pc, #48]	@ (80033d4 <__NVIC_SetPriority+0x4c>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	0112      	lsls	r2, r2, #4
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	440b      	add	r3, r1
 80033ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b0:	e00a      	b.n	80033c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	4908      	ldr	r1, [pc, #32]	@ (80033d8 <__NVIC_SetPriority+0x50>)
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	3b04      	subs	r3, #4
 80033c0:	0112      	lsls	r2, r2, #4
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	440b      	add	r3, r1
 80033c6:	761a      	strb	r2, [r3, #24]
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000e100 	.word	0xe000e100
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033dc:	b480      	push	{r7}
 80033de:	b089      	sub	sp, #36	@ 0x24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f1c3 0307 	rsb	r3, r3, #7
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	bf28      	it	cs
 80033fa:	2304      	movcs	r3, #4
 80033fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3304      	adds	r3, #4
 8003402:	2b06      	cmp	r3, #6
 8003404:	d902      	bls.n	800340c <NVIC_EncodePriority+0x30>
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3b03      	subs	r3, #3
 800340a:	e000      	b.n	800340e <NVIC_EncodePriority+0x32>
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003410:	f04f 32ff 	mov.w	r2, #4294967295
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43da      	mvns	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	401a      	ands	r2, r3
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003424:	f04f 31ff 	mov.w	r1, #4294967295
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	fa01 f303 	lsl.w	r3, r1, r3
 800342e:	43d9      	mvns	r1, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003434:	4313      	orrs	r3, r2
         );
}
 8003436:	4618      	mov	r0, r3
 8003438:	3724      	adds	r7, #36	@ 0x24
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
	...

08003444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3b01      	subs	r3, #1
 8003450:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003454:	d301      	bcc.n	800345a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003456:	2301      	movs	r3, #1
 8003458:	e00f      	b.n	800347a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800345a:	4a0a      	ldr	r2, [pc, #40]	@ (8003484 <SysTick_Config+0x40>)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3b01      	subs	r3, #1
 8003460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003462:	210f      	movs	r1, #15
 8003464:	f04f 30ff 	mov.w	r0, #4294967295
 8003468:	f7ff ff8e 	bl	8003388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800346c:	4b05      	ldr	r3, [pc, #20]	@ (8003484 <SysTick_Config+0x40>)
 800346e:	2200      	movs	r2, #0
 8003470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003472:	4b04      	ldr	r3, [pc, #16]	@ (8003484 <SysTick_Config+0x40>)
 8003474:	2207      	movs	r2, #7
 8003476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	e000e010 	.word	0xe000e010

08003488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff ff29 	bl	80032e8 <__NVIC_SetPriorityGrouping>
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4603      	mov	r3, r0
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b0:	f7ff ff3e 	bl	8003330 <__NVIC_GetPriorityGrouping>
 80034b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	6978      	ldr	r0, [r7, #20]
 80034bc:	f7ff ff8e 	bl	80033dc <NVIC_EncodePriority>
 80034c0:	4602      	mov	r2, r0
 80034c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c6:	4611      	mov	r1, r2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff ff5d 	bl	8003388 <__NVIC_SetPriority>
}
 80034ce:	bf00      	nop
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	4603      	mov	r3, r0
 80034de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff ff31 	bl	800334c <__NVIC_EnableIRQ>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff ffa2 	bl	8003444 <SysTick_Config>
 8003500:	4603      	mov	r3, r0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003518:	f7ff faa4 	bl	8002a64 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e099      	b.n	800365c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0201 	bic.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003548:	e00f      	b.n	800356a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800354a:	f7ff fa8b 	bl	8002a64 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b05      	cmp	r3, #5
 8003556:	d908      	bls.n	800356a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2203      	movs	r2, #3
 8003562:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e078      	b.n	800365c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e8      	bne.n	800354a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4b38      	ldr	r3, [pc, #224]	@ (8003664 <HAL_DMA_Init+0x158>)
 8003584:	4013      	ands	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003596:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d107      	bne.n	80035d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035cc:	4313      	orrs	r3, r2
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f023 0307 	bic.w	r3, r3, #7
 80035ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d117      	bne.n	800362e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00e      	beq.n	800362e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fb01 	bl	8003c18 <DMA_CheckFifoParam>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2240      	movs	r2, #64	@ 0x40
 8003620:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800362a:	2301      	movs	r3, #1
 800362c:	e016      	b.n	800365c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fab8 	bl	8003bac <DMA_CalcBaseAndBitshift>
 800363c:	4603      	mov	r3, r0
 800363e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003644:	223f      	movs	r2, #63	@ 0x3f
 8003646:	409a      	lsls	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	f010803f 	.word	0xf010803f

08003668 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_DMA_Start_IT+0x26>
 800368a:	2302      	movs	r3, #2
 800368c:	e040      	b.n	8003710 <HAL_DMA_Start_IT+0xa8>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d12f      	bne.n	8003702 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2202      	movs	r2, #2
 80036a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fa4a 	bl	8003b50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c0:	223f      	movs	r2, #63	@ 0x3f
 80036c2:	409a      	lsls	r2, r3
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0216 	orr.w	r2, r2, #22
 80036d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0208 	orr.w	r2, r2, #8
 80036ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	e005      	b.n	800370e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800370a:	2302      	movs	r3, #2
 800370c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800370e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003724:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003726:	f7ff f99d 	bl	8002a64 <HAL_GetTick>
 800372a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d008      	beq.n	800374a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2280      	movs	r2, #128	@ 0x80
 800373c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e052      	b.n	80037f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0216 	bic.w	r2, r2, #22
 8003758:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003768:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d103      	bne.n	800377a <HAL_DMA_Abort+0x62>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003776:	2b00      	cmp	r3, #0
 8003778:	d007      	beq.n	800378a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0208 	bic.w	r2, r2, #8
 8003788:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800379a:	e013      	b.n	80037c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800379c:	f7ff f962 	bl	8002a64 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b05      	cmp	r3, #5
 80037a8:	d90c      	bls.n	80037c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2203      	movs	r2, #3
 80037b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e015      	b.n	80037f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1e4      	bne.n	800379c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d6:	223f      	movs	r2, #63	@ 0x3f
 80037d8:	409a      	lsls	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d004      	beq.n	8003816 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2280      	movs	r2, #128	@ 0x80
 8003810:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e00c      	b.n	8003830 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2205      	movs	r2, #5
 800381a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0201 	bic.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003848:	4b8e      	ldr	r3, [pc, #568]	@ (8003a84 <HAL_DMA_IRQHandler+0x248>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a8e      	ldr	r2, [pc, #568]	@ (8003a88 <HAL_DMA_IRQHandler+0x24c>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	0a9b      	lsrs	r3, r3, #10
 8003854:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003866:	2208      	movs	r2, #8
 8003868:	409a      	lsls	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4013      	ands	r3, r2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d01a      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d013      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0204 	bic.w	r2, r2, #4
 800388e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003894:	2208      	movs	r2, #8
 8003896:	409a      	lsls	r2, r3
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a0:	f043 0201 	orr.w	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ac:	2201      	movs	r2, #1
 80038ae:	409a      	lsls	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d012      	beq.n	80038de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00b      	beq.n	80038de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ca:	2201      	movs	r2, #1
 80038cc:	409a      	lsls	r2, r3
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d6:	f043 0202 	orr.w	r2, r3, #2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e2:	2204      	movs	r2, #4
 80038e4:	409a      	lsls	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d012      	beq.n	8003914 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00b      	beq.n	8003914 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003900:	2204      	movs	r2, #4
 8003902:	409a      	lsls	r2, r3
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390c:	f043 0204 	orr.w	r2, r3, #4
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003918:	2210      	movs	r2, #16
 800391a:	409a      	lsls	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d043      	beq.n	80039ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d03c      	beq.n	80039ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003936:	2210      	movs	r2, #16
 8003938:	409a      	lsls	r2, r3
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d018      	beq.n	800397e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d108      	bne.n	800396c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d024      	beq.n	80039ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	4798      	blx	r3
 800396a:	e01f      	b.n	80039ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01b      	beq.n	80039ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	4798      	blx	r3
 800397c:	e016      	b.n	80039ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d107      	bne.n	800399c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0208 	bic.w	r2, r2, #8
 800399a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b0:	2220      	movs	r2, #32
 80039b2:	409a      	lsls	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 808f 	beq.w	8003adc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 8087 	beq.w	8003adc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d2:	2220      	movs	r2, #32
 80039d4:	409a      	lsls	r2, r3
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b05      	cmp	r3, #5
 80039e4:	d136      	bne.n	8003a54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0216 	bic.w	r2, r2, #22
 80039f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695a      	ldr	r2, [r3, #20]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d103      	bne.n	8003a16 <HAL_DMA_IRQHandler+0x1da>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d007      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0208 	bic.w	r2, r2, #8
 8003a24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2a:	223f      	movs	r2, #63	@ 0x3f
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d07e      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	4798      	blx	r3
        }
        return;
 8003a52:	e079      	b.n	8003b48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d01d      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10d      	bne.n	8003a8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d031      	beq.n	8003adc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	4798      	blx	r3
 8003a80:	e02c      	b.n	8003adc <HAL_DMA_IRQHandler+0x2a0>
 8003a82:	bf00      	nop
 8003a84:	20000228 	.word	0x20000228
 8003a88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d023      	beq.n	8003adc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4798      	blx	r3
 8003a9c:	e01e      	b.n	8003adc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10f      	bne.n	8003acc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0210 	bic.w	r2, r2, #16
 8003aba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d032      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d022      	beq.n	8003b36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2205      	movs	r2, #5
 8003af4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0201 	bic.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d307      	bcc.n	8003b24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f2      	bne.n	8003b08 <HAL_DMA_IRQHandler+0x2cc>
 8003b22:	e000      	b.n	8003b26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	4798      	blx	r3
 8003b46:	e000      	b.n	8003b4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b48:	bf00      	nop
    }
  }
}
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b40      	cmp	r3, #64	@ 0x40
 8003b7c:	d108      	bne.n	8003b90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b8e:	e007      	b.n	8003ba0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	60da      	str	r2, [r3, #12]
}
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	3b10      	subs	r3, #16
 8003bbc:	4a14      	ldr	r2, [pc, #80]	@ (8003c10 <DMA_CalcBaseAndBitshift+0x64>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	091b      	lsrs	r3, r3, #4
 8003bc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bc6:	4a13      	ldr	r2, [pc, #76]	@ (8003c14 <DMA_CalcBaseAndBitshift+0x68>)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4413      	add	r3, r2
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d909      	bls.n	8003bee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003be2:	f023 0303 	bic.w	r3, r3, #3
 8003be6:	1d1a      	adds	r2, r3, #4
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	659a      	str	r2, [r3, #88]	@ 0x58
 8003bec:	e007      	b.n	8003bfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003bf6:	f023 0303 	bic.w	r3, r3, #3
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	aaaaaaab 	.word	0xaaaaaaab
 8003c14:	08009f08 	.word	0x08009f08

08003c18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d11f      	bne.n	8003c72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d856      	bhi.n	8003ce6 <DMA_CheckFifoParam+0xce>
 8003c38:	a201      	add	r2, pc, #4	@ (adr r2, 8003c40 <DMA_CheckFifoParam+0x28>)
 8003c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3e:	bf00      	nop
 8003c40:	08003c51 	.word	0x08003c51
 8003c44:	08003c63 	.word	0x08003c63
 8003c48:	08003c51 	.word	0x08003c51
 8003c4c:	08003ce7 	.word	0x08003ce7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d046      	beq.n	8003cea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c60:	e043      	b.n	8003cea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c66:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c6a:	d140      	bne.n	8003cee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c70:	e03d      	b.n	8003cee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c7a:	d121      	bne.n	8003cc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d837      	bhi.n	8003cf2 <DMA_CheckFifoParam+0xda>
 8003c82:	a201      	add	r2, pc, #4	@ (adr r2, 8003c88 <DMA_CheckFifoParam+0x70>)
 8003c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c88:	08003c99 	.word	0x08003c99
 8003c8c:	08003c9f 	.word	0x08003c9f
 8003c90:	08003c99 	.word	0x08003c99
 8003c94:	08003cb1 	.word	0x08003cb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c9c:	e030      	b.n	8003d00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d025      	beq.n	8003cf6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cae:	e022      	b.n	8003cf6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003cb8:	d11f      	bne.n	8003cfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cbe:	e01c      	b.n	8003cfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d903      	bls.n	8003cce <DMA_CheckFifoParam+0xb6>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d003      	beq.n	8003cd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ccc:	e018      	b.n	8003d00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd2:	e015      	b.n	8003d00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00e      	beq.n	8003cfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce4:	e00b      	b.n	8003cfe <DMA_CheckFifoParam+0xe6>
      break;
 8003ce6:	bf00      	nop
 8003ce8:	e00a      	b.n	8003d00 <DMA_CheckFifoParam+0xe8>
      break;
 8003cea:	bf00      	nop
 8003cec:	e008      	b.n	8003d00 <DMA_CheckFifoParam+0xe8>
      break;
 8003cee:	bf00      	nop
 8003cf0:	e006      	b.n	8003d00 <DMA_CheckFifoParam+0xe8>
      break;
 8003cf2:	bf00      	nop
 8003cf4:	e004      	b.n	8003d00 <DMA_CheckFifoParam+0xe8>
      break;
 8003cf6:	bf00      	nop
 8003cf8:	e002      	b.n	8003d00 <DMA_CheckFifoParam+0xe8>
      break;   
 8003cfa:	bf00      	nop
 8003cfc:	e000      	b.n	8003d00 <DMA_CheckFifoParam+0xe8>
      break;
 8003cfe:	bf00      	nop
    }
  } 
  
  return status; 
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop

08003d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b089      	sub	sp, #36	@ 0x24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	e16b      	b.n	8004004 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	f040 815a 	bne.w	8003ffe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d005      	beq.n	8003d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d130      	bne.n	8003dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d98:	2201      	movs	r2, #1
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 0201 	and.w	r2, r3, #1
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d017      	beq.n	8003e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	2203      	movs	r2, #3
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 0303 	and.w	r3, r3, #3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d123      	bne.n	8003e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	08da      	lsrs	r2, r3, #3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3208      	adds	r2, #8
 8003e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	220f      	movs	r2, #15
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	08da      	lsrs	r2, r3, #3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3208      	adds	r2, #8
 8003e4e:	69b9      	ldr	r1, [r7, #24]
 8003e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	2203      	movs	r2, #3
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	43db      	mvns	r3, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0203 	and.w	r2, r3, #3
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 80b4 	beq.w	8003ffe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	4b60      	ldr	r3, [pc, #384]	@ (800401c <HAL_GPIO_Init+0x30c>)
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	4a5f      	ldr	r2, [pc, #380]	@ (800401c <HAL_GPIO_Init+0x30c>)
 8003ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ea6:	4b5d      	ldr	r3, [pc, #372]	@ (800401c <HAL_GPIO_Init+0x30c>)
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eb2:	4a5b      	ldr	r2, [pc, #364]	@ (8004020 <HAL_GPIO_Init+0x310>)
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	089b      	lsrs	r3, r3, #2
 8003eb8:	3302      	adds	r3, #2
 8003eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	220f      	movs	r2, #15
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a52      	ldr	r2, [pc, #328]	@ (8004024 <HAL_GPIO_Init+0x314>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d02b      	beq.n	8003f36 <HAL_GPIO_Init+0x226>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a51      	ldr	r2, [pc, #324]	@ (8004028 <HAL_GPIO_Init+0x318>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d025      	beq.n	8003f32 <HAL_GPIO_Init+0x222>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a50      	ldr	r2, [pc, #320]	@ (800402c <HAL_GPIO_Init+0x31c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01f      	beq.n	8003f2e <HAL_GPIO_Init+0x21e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a4f      	ldr	r2, [pc, #316]	@ (8004030 <HAL_GPIO_Init+0x320>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d019      	beq.n	8003f2a <HAL_GPIO_Init+0x21a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a4e      	ldr	r2, [pc, #312]	@ (8004034 <HAL_GPIO_Init+0x324>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <HAL_GPIO_Init+0x216>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a4d      	ldr	r2, [pc, #308]	@ (8004038 <HAL_GPIO_Init+0x328>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00d      	beq.n	8003f22 <HAL_GPIO_Init+0x212>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a4c      	ldr	r2, [pc, #304]	@ (800403c <HAL_GPIO_Init+0x32c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d007      	beq.n	8003f1e <HAL_GPIO_Init+0x20e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a4b      	ldr	r2, [pc, #300]	@ (8004040 <HAL_GPIO_Init+0x330>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d101      	bne.n	8003f1a <HAL_GPIO_Init+0x20a>
 8003f16:	2307      	movs	r3, #7
 8003f18:	e00e      	b.n	8003f38 <HAL_GPIO_Init+0x228>
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	e00c      	b.n	8003f38 <HAL_GPIO_Init+0x228>
 8003f1e:	2306      	movs	r3, #6
 8003f20:	e00a      	b.n	8003f38 <HAL_GPIO_Init+0x228>
 8003f22:	2305      	movs	r3, #5
 8003f24:	e008      	b.n	8003f38 <HAL_GPIO_Init+0x228>
 8003f26:	2304      	movs	r3, #4
 8003f28:	e006      	b.n	8003f38 <HAL_GPIO_Init+0x228>
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e004      	b.n	8003f38 <HAL_GPIO_Init+0x228>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e002      	b.n	8003f38 <HAL_GPIO_Init+0x228>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <HAL_GPIO_Init+0x228>
 8003f36:	2300      	movs	r3, #0
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	f002 0203 	and.w	r2, r2, #3
 8003f3e:	0092      	lsls	r2, r2, #2
 8003f40:	4093      	lsls	r3, r2
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f48:	4935      	ldr	r1, [pc, #212]	@ (8004020 <HAL_GPIO_Init+0x310>)
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	089b      	lsrs	r3, r3, #2
 8003f4e:	3302      	adds	r3, #2
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f56:	4b3b      	ldr	r3, [pc, #236]	@ (8004044 <HAL_GPIO_Init+0x334>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4013      	ands	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f7a:	4a32      	ldr	r2, [pc, #200]	@ (8004044 <HAL_GPIO_Init+0x334>)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f80:	4b30      	ldr	r3, [pc, #192]	@ (8004044 <HAL_GPIO_Init+0x334>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fa4:	4a27      	ldr	r2, [pc, #156]	@ (8004044 <HAL_GPIO_Init+0x334>)
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003faa:	4b26      	ldr	r3, [pc, #152]	@ (8004044 <HAL_GPIO_Init+0x334>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fce:	4a1d      	ldr	r2, [pc, #116]	@ (8004044 <HAL_GPIO_Init+0x334>)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8004044 <HAL_GPIO_Init+0x334>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ff8:	4a12      	ldr	r2, [pc, #72]	@ (8004044 <HAL_GPIO_Init+0x334>)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3301      	adds	r3, #1
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2b0f      	cmp	r3, #15
 8004008:	f67f ae90 	bls.w	8003d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	3724      	adds	r7, #36	@ 0x24
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40023800 	.word	0x40023800
 8004020:	40013800 	.word	0x40013800
 8004024:	40020000 	.word	0x40020000
 8004028:	40020400 	.word	0x40020400
 800402c:	40020800 	.word	0x40020800
 8004030:	40020c00 	.word	0x40020c00
 8004034:	40021000 	.word	0x40021000
 8004038:	40021400 	.word	0x40021400
 800403c:	40021800 	.word	0x40021800
 8004040:	40021c00 	.word	0x40021c00
 8004044:	40013c00 	.word	0x40013c00

08004048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	807b      	strh	r3, [r7, #2]
 8004054:	4613      	mov	r3, r2
 8004056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004058:	787b      	ldrb	r3, [r7, #1]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800405e:	887a      	ldrh	r2, [r7, #2]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004064:	e003      	b.n	800406e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004066:	887b      	ldrh	r3, [r7, #2]
 8004068:	041a      	lsls	r2, r3, #16
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	619a      	str	r2, [r3, #24]
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800407a:	b480      	push	{r7}
 800407c:	b085      	sub	sp, #20
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	460b      	mov	r3, r1
 8004084:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800408c:	887a      	ldrh	r2, [r7, #2]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4013      	ands	r3, r2
 8004092:	041a      	lsls	r2, r3, #16
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	43d9      	mvns	r1, r3
 8004098:	887b      	ldrh	r3, [r7, #2]
 800409a:	400b      	ands	r3, r1
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	619a      	str	r2, [r3, #24]
}
 80040a2:	bf00      	nop
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
	...

080040b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e267      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d075      	beq.n	80041ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040ce:	4b88      	ldr	r3, [pc, #544]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d00c      	beq.n	80040f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040da:	4b85      	ldr	r3, [pc, #532]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d112      	bne.n	800410c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040e6:	4b82      	ldr	r3, [pc, #520]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040f2:	d10b      	bne.n	800410c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f4:	4b7e      	ldr	r3, [pc, #504]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d05b      	beq.n	80041b8 <HAL_RCC_OscConfig+0x108>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d157      	bne.n	80041b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e242      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004114:	d106      	bne.n	8004124 <HAL_RCC_OscConfig+0x74>
 8004116:	4b76      	ldr	r3, [pc, #472]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a75      	ldr	r2, [pc, #468]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 800411c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e01d      	b.n	8004160 <HAL_RCC_OscConfig+0xb0>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800412c:	d10c      	bne.n	8004148 <HAL_RCC_OscConfig+0x98>
 800412e:	4b70      	ldr	r3, [pc, #448]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a6f      	ldr	r2, [pc, #444]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004134:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	4b6d      	ldr	r3, [pc, #436]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a6c      	ldr	r2, [pc, #432]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	e00b      	b.n	8004160 <HAL_RCC_OscConfig+0xb0>
 8004148:	4b69      	ldr	r3, [pc, #420]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a68      	ldr	r2, [pc, #416]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 800414e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	4b66      	ldr	r3, [pc, #408]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a65      	ldr	r2, [pc, #404]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 800415a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800415e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d013      	beq.n	8004190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7fe fc7c 	bl	8002a64 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004170:	f7fe fc78 	bl	8002a64 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	@ 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e207      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004182:	4b5b      	ldr	r3, [pc, #364]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0xc0>
 800418e:	e014      	b.n	80041ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004190:	f7fe fc68 	bl	8002a64 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004198:	f7fe fc64 	bl	8002a64 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	@ 0x64
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e1f3      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041aa:	4b51      	ldr	r3, [pc, #324]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0xe8>
 80041b6:	e000      	b.n	80041ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d063      	beq.n	800428e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041c6:	4b4a      	ldr	r3, [pc, #296]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00b      	beq.n	80041ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041d2:	4b47      	ldr	r3, [pc, #284]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d11c      	bne.n	8004218 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041de:	4b44      	ldr	r3, [pc, #272]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d116      	bne.n	8004218 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ea:	4b41      	ldr	r3, [pc, #260]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_RCC_OscConfig+0x152>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d001      	beq.n	8004202 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e1c7      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004202:	4b3b      	ldr	r3, [pc, #236]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4937      	ldr	r1, [pc, #220]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004212:	4313      	orrs	r3, r2
 8004214:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004216:	e03a      	b.n	800428e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d020      	beq.n	8004262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004220:	4b34      	ldr	r3, [pc, #208]	@ (80042f4 <HAL_RCC_OscConfig+0x244>)
 8004222:	2201      	movs	r2, #1
 8004224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004226:	f7fe fc1d 	bl	8002a64 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800422e:	f7fe fc19 	bl	8002a64 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e1a8      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004240:	4b2b      	ldr	r3, [pc, #172]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0f0      	beq.n	800422e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424c:	4b28      	ldr	r3, [pc, #160]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4925      	ldr	r1, [pc, #148]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 800425c:	4313      	orrs	r3, r2
 800425e:	600b      	str	r3, [r1, #0]
 8004260:	e015      	b.n	800428e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004262:	4b24      	ldr	r3, [pc, #144]	@ (80042f4 <HAL_RCC_OscConfig+0x244>)
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fe fbfc 	bl	8002a64 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004270:	f7fe fbf8 	bl	8002a64 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e187      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004282:	4b1b      	ldr	r3, [pc, #108]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d036      	beq.n	8004308 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d016      	beq.n	80042d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042a2:	4b15      	ldr	r3, [pc, #84]	@ (80042f8 <HAL_RCC_OscConfig+0x248>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a8:	f7fe fbdc 	bl	8002a64 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b0:	f7fe fbd8 	bl	8002a64 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e167      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c2:	4b0b      	ldr	r3, [pc, #44]	@ (80042f0 <HAL_RCC_OscConfig+0x240>)
 80042c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0f0      	beq.n	80042b0 <HAL_RCC_OscConfig+0x200>
 80042ce:	e01b      	b.n	8004308 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042d0:	4b09      	ldr	r3, [pc, #36]	@ (80042f8 <HAL_RCC_OscConfig+0x248>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d6:	f7fe fbc5 	bl	8002a64 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042dc:	e00e      	b.n	80042fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042de:	f7fe fbc1 	bl	8002a64 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d907      	bls.n	80042fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e150      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
 80042f0:	40023800 	.word	0x40023800
 80042f4:	42470000 	.word	0x42470000
 80042f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042fc:	4b88      	ldr	r3, [pc, #544]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 80042fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1ea      	bne.n	80042de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8097 	beq.w	8004444 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004316:	2300      	movs	r3, #0
 8004318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800431a:	4b81      	ldr	r3, [pc, #516]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10f      	bne.n	8004346 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	4b7d      	ldr	r3, [pc, #500]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	4a7c      	ldr	r2, [pc, #496]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 8004330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004334:	6413      	str	r3, [r2, #64]	@ 0x40
 8004336:	4b7a      	ldr	r3, [pc, #488]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800433e:	60bb      	str	r3, [r7, #8]
 8004340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004342:	2301      	movs	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004346:	4b77      	ldr	r3, [pc, #476]	@ (8004524 <HAL_RCC_OscConfig+0x474>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434e:	2b00      	cmp	r3, #0
 8004350:	d118      	bne.n	8004384 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004352:	4b74      	ldr	r3, [pc, #464]	@ (8004524 <HAL_RCC_OscConfig+0x474>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a73      	ldr	r2, [pc, #460]	@ (8004524 <HAL_RCC_OscConfig+0x474>)
 8004358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800435c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800435e:	f7fe fb81 	bl	8002a64 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004366:	f7fe fb7d 	bl	8002a64 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e10c      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004378:	4b6a      	ldr	r3, [pc, #424]	@ (8004524 <HAL_RCC_OscConfig+0x474>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d106      	bne.n	800439a <HAL_RCC_OscConfig+0x2ea>
 800438c:	4b64      	ldr	r3, [pc, #400]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 800438e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004390:	4a63      	ldr	r2, [pc, #396]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 8004392:	f043 0301 	orr.w	r3, r3, #1
 8004396:	6713      	str	r3, [r2, #112]	@ 0x70
 8004398:	e01c      	b.n	80043d4 <HAL_RCC_OscConfig+0x324>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2b05      	cmp	r3, #5
 80043a0:	d10c      	bne.n	80043bc <HAL_RCC_OscConfig+0x30c>
 80043a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a6:	4a5e      	ldr	r2, [pc, #376]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 80043a8:	f043 0304 	orr.w	r3, r3, #4
 80043ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ba:	e00b      	b.n	80043d4 <HAL_RCC_OscConfig+0x324>
 80043bc:	4b58      	ldr	r3, [pc, #352]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c0:	4a57      	ldr	r2, [pc, #348]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 80043c2:	f023 0301 	bic.w	r3, r3, #1
 80043c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80043c8:	4b55      	ldr	r3, [pc, #340]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043cc:	4a54      	ldr	r2, [pc, #336]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 80043ce:	f023 0304 	bic.w	r3, r3, #4
 80043d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d015      	beq.n	8004408 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043dc:	f7fe fb42 	bl	8002a64 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e4:	f7fe fb3e 	bl	8002a64 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e0cb      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fa:	4b49      	ldr	r3, [pc, #292]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0ee      	beq.n	80043e4 <HAL_RCC_OscConfig+0x334>
 8004406:	e014      	b.n	8004432 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004408:	f7fe fb2c 	bl	8002a64 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800440e:	e00a      	b.n	8004426 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004410:	f7fe fb28 	bl	8002a64 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800441e:	4293      	cmp	r3, r2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e0b5      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004426:	4b3e      	ldr	r3, [pc, #248]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1ee      	bne.n	8004410 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004432:	7dfb      	ldrb	r3, [r7, #23]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d105      	bne.n	8004444 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004438:	4b39      	ldr	r3, [pc, #228]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 800443a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443c:	4a38      	ldr	r2, [pc, #224]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 800443e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004442:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80a1 	beq.w	8004590 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800444e:	4b34      	ldr	r3, [pc, #208]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b08      	cmp	r3, #8
 8004458:	d05c      	beq.n	8004514 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d141      	bne.n	80044e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004462:	4b31      	ldr	r3, [pc, #196]	@ (8004528 <HAL_RCC_OscConfig+0x478>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fe fafc 	bl	8002a64 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004470:	f7fe faf8 	bl	8002a64 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e087      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004482:	4b27      	ldr	r3, [pc, #156]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69da      	ldr	r2, [r3, #28]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449c:	019b      	lsls	r3, r3, #6
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a4:	085b      	lsrs	r3, r3, #1
 80044a6:	3b01      	subs	r3, #1
 80044a8:	041b      	lsls	r3, r3, #16
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b0:	061b      	lsls	r3, r3, #24
 80044b2:	491b      	ldr	r1, [pc, #108]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004528 <HAL_RCC_OscConfig+0x478>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044be:	f7fe fad1 	bl	8002a64 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c6:	f7fe facd 	bl	8002a64 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e05c      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d8:	4b11      	ldr	r3, [pc, #68]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f0      	beq.n	80044c6 <HAL_RCC_OscConfig+0x416>
 80044e4:	e054      	b.n	8004590 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e6:	4b10      	ldr	r3, [pc, #64]	@ (8004528 <HAL_RCC_OscConfig+0x478>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7fe faba 	bl	8002a64 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fe fab6 	bl	8002a64 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e045      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004506:	4b06      	ldr	r3, [pc, #24]	@ (8004520 <HAL_RCC_OscConfig+0x470>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0x444>
 8004512:	e03d      	b.n	8004590 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d107      	bne.n	800452c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e038      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
 8004520:	40023800 	.word	0x40023800
 8004524:	40007000 	.word	0x40007000
 8004528:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800452c:	4b1b      	ldr	r3, [pc, #108]	@ (800459c <HAL_RCC_OscConfig+0x4ec>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d028      	beq.n	800458c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004544:	429a      	cmp	r2, r3
 8004546:	d121      	bne.n	800458c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004552:	429a      	cmp	r2, r3
 8004554:	d11a      	bne.n	800458c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800455c:	4013      	ands	r3, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004562:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004564:	4293      	cmp	r3, r2
 8004566:	d111      	bne.n	800458c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004572:	085b      	lsrs	r3, r3, #1
 8004574:	3b01      	subs	r3, #1
 8004576:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004578:	429a      	cmp	r2, r3
 800457a:	d107      	bne.n	800458c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004586:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004588:	429a      	cmp	r2, r3
 800458a:	d001      	beq.n	8004590 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40023800 	.word	0x40023800

080045a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0cc      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045b4:	4b68      	ldr	r3, [pc, #416]	@ (8004758 <HAL_RCC_ClockConfig+0x1b8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d90c      	bls.n	80045dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c2:	4b65      	ldr	r3, [pc, #404]	@ (8004758 <HAL_RCC_ClockConfig+0x1b8>)
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ca:	4b63      	ldr	r3, [pc, #396]	@ (8004758 <HAL_RCC_ClockConfig+0x1b8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0b8      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d020      	beq.n	800462a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045f4:	4b59      	ldr	r3, [pc, #356]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	4a58      	ldr	r2, [pc, #352]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800460c:	4b53      	ldr	r3, [pc, #332]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	4a52      	ldr	r2, [pc, #328]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004618:	4b50      	ldr	r3, [pc, #320]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	494d      	ldr	r1, [pc, #308]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	4313      	orrs	r3, r2
 8004628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d044      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d107      	bne.n	800464e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800463e:	4b47      	ldr	r3, [pc, #284]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d119      	bne.n	800467e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e07f      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d003      	beq.n	800465e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800465a:	2b03      	cmp	r3, #3
 800465c:	d107      	bne.n	800466e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465e:	4b3f      	ldr	r3, [pc, #252]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d109      	bne.n	800467e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e06f      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466e:	4b3b      	ldr	r3, [pc, #236]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e067      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800467e:	4b37      	ldr	r3, [pc, #220]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f023 0203 	bic.w	r2, r3, #3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	4934      	ldr	r1, [pc, #208]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 800468c:	4313      	orrs	r3, r2
 800468e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004690:	f7fe f9e8 	bl	8002a64 <HAL_GetTick>
 8004694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004696:	e00a      	b.n	80046ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004698:	f7fe f9e4 	bl	8002a64 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e04f      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ae:	4b2b      	ldr	r3, [pc, #172]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 020c 	and.w	r2, r3, #12
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	429a      	cmp	r2, r3
 80046be:	d1eb      	bne.n	8004698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046c0:	4b25      	ldr	r3, [pc, #148]	@ (8004758 <HAL_RCC_ClockConfig+0x1b8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d20c      	bcs.n	80046e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ce:	4b22      	ldr	r3, [pc, #136]	@ (8004758 <HAL_RCC_ClockConfig+0x1b8>)
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d6:	4b20      	ldr	r3, [pc, #128]	@ (8004758 <HAL_RCC_ClockConfig+0x1b8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e032      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d008      	beq.n	8004706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046f4:	4b19      	ldr	r3, [pc, #100]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	4916      	ldr	r1, [pc, #88]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	4313      	orrs	r3, r2
 8004704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004712:	4b12      	ldr	r3, [pc, #72]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	490e      	ldr	r1, [pc, #56]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004726:	f000 f821 	bl	800476c <HAL_RCC_GetSysClockFreq>
 800472a:	4602      	mov	r2, r0
 800472c:	4b0b      	ldr	r3, [pc, #44]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	091b      	lsrs	r3, r3, #4
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	490a      	ldr	r1, [pc, #40]	@ (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 8004738:	5ccb      	ldrb	r3, [r1, r3]
 800473a:	fa22 f303 	lsr.w	r3, r2, r3
 800473e:	4a09      	ldr	r2, [pc, #36]	@ (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 8004740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004742:	4b09      	ldr	r3, [pc, #36]	@ (8004768 <HAL_RCC_ClockConfig+0x1c8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f7fe f948 	bl	80029dc <HAL_InitTick>

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40023c00 	.word	0x40023c00
 800475c:	40023800 	.word	0x40023800
 8004760:	08009ef0 	.word	0x08009ef0
 8004764:	20000228 	.word	0x20000228
 8004768:	2000022c 	.word	0x2000022c

0800476c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800476c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004770:	b090      	sub	sp, #64	@ 0x40
 8004772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004784:	4b59      	ldr	r3, [pc, #356]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x180>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 030c 	and.w	r3, r3, #12
 800478c:	2b08      	cmp	r3, #8
 800478e:	d00d      	beq.n	80047ac <HAL_RCC_GetSysClockFreq+0x40>
 8004790:	2b08      	cmp	r3, #8
 8004792:	f200 80a1 	bhi.w	80048d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x34>
 800479a:	2b04      	cmp	r3, #4
 800479c:	d003      	beq.n	80047a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800479e:	e09b      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047a0:	4b53      	ldr	r3, [pc, #332]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80047a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047a4:	e09b      	b.n	80048de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047a6:	4b53      	ldr	r3, [pc, #332]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80047a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047aa:	e098      	b.n	80048de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047ac:	4b4f      	ldr	r3, [pc, #316]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x180>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047b6:	4b4d      	ldr	r3, [pc, #308]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x180>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d028      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047c2:	4b4a      	ldr	r3, [pc, #296]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x180>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	099b      	lsrs	r3, r3, #6
 80047c8:	2200      	movs	r2, #0
 80047ca:	623b      	str	r3, [r7, #32]
 80047cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80047d4:	2100      	movs	r1, #0
 80047d6:	4b47      	ldr	r3, [pc, #284]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80047d8:	fb03 f201 	mul.w	r2, r3, r1
 80047dc:	2300      	movs	r3, #0
 80047de:	fb00 f303 	mul.w	r3, r0, r3
 80047e2:	4413      	add	r3, r2
 80047e4:	4a43      	ldr	r2, [pc, #268]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80047e6:	fba0 1202 	umull	r1, r2, r0, r2
 80047ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047ec:	460a      	mov	r2, r1
 80047ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80047f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047f2:	4413      	add	r3, r2
 80047f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f8:	2200      	movs	r2, #0
 80047fa:	61bb      	str	r3, [r7, #24]
 80047fc:	61fa      	str	r2, [r7, #28]
 80047fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004802:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004806:	f7fb fcdf 	bl	80001c8 <__aeabi_uldivmod>
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	4613      	mov	r3, r2
 8004810:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004812:	e053      	b.n	80048bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004814:	4b35      	ldr	r3, [pc, #212]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x180>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	099b      	lsrs	r3, r3, #6
 800481a:	2200      	movs	r2, #0
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	617a      	str	r2, [r7, #20]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004826:	f04f 0b00 	mov.w	fp, #0
 800482a:	4652      	mov	r2, sl
 800482c:	465b      	mov	r3, fp
 800482e:	f04f 0000 	mov.w	r0, #0
 8004832:	f04f 0100 	mov.w	r1, #0
 8004836:	0159      	lsls	r1, r3, #5
 8004838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800483c:	0150      	lsls	r0, r2, #5
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	ebb2 080a 	subs.w	r8, r2, sl
 8004846:	eb63 090b 	sbc.w	r9, r3, fp
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004856:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800485a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800485e:	ebb2 0408 	subs.w	r4, r2, r8
 8004862:	eb63 0509 	sbc.w	r5, r3, r9
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	00eb      	lsls	r3, r5, #3
 8004870:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004874:	00e2      	lsls	r2, r4, #3
 8004876:	4614      	mov	r4, r2
 8004878:	461d      	mov	r5, r3
 800487a:	eb14 030a 	adds.w	r3, r4, sl
 800487e:	603b      	str	r3, [r7, #0]
 8004880:	eb45 030b 	adc.w	r3, r5, fp
 8004884:	607b      	str	r3, [r7, #4]
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004892:	4629      	mov	r1, r5
 8004894:	028b      	lsls	r3, r1, #10
 8004896:	4621      	mov	r1, r4
 8004898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800489c:	4621      	mov	r1, r4
 800489e:	028a      	lsls	r2, r1, #10
 80048a0:	4610      	mov	r0, r2
 80048a2:	4619      	mov	r1, r3
 80048a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a6:	2200      	movs	r2, #0
 80048a8:	60bb      	str	r3, [r7, #8]
 80048aa:	60fa      	str	r2, [r7, #12]
 80048ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048b0:	f7fb fc8a 	bl	80001c8 <__aeabi_uldivmod>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4613      	mov	r3, r2
 80048ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80048bc:	4b0b      	ldr	r3, [pc, #44]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x180>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	0c1b      	lsrs	r3, r3, #16
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	3301      	adds	r3, #1
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80048cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80048ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048d6:	e002      	b.n	80048de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048d8:	4b05      	ldr	r3, [pc, #20]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80048da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3740      	adds	r7, #64	@ 0x40
 80048e4:	46bd      	mov	sp, r7
 80048e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ea:	bf00      	nop
 80048ec:	40023800 	.word	0x40023800
 80048f0:	00f42400 	.word	0x00f42400
 80048f4:	017d7840 	.word	0x017d7840

080048f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048fc:	4b03      	ldr	r3, [pc, #12]	@ (800490c <HAL_RCC_GetHCLKFreq+0x14>)
 80048fe:	681b      	ldr	r3, [r3, #0]
}
 8004900:	4618      	mov	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20000228 	.word	0x20000228

08004910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004914:	f7ff fff0 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
 8004918:	4602      	mov	r2, r0
 800491a:	4b05      	ldr	r3, [pc, #20]	@ (8004930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	0a9b      	lsrs	r3, r3, #10
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	4903      	ldr	r1, [pc, #12]	@ (8004934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004926:	5ccb      	ldrb	r3, [r1, r3]
 8004928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800492c:	4618      	mov	r0, r3
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40023800 	.word	0x40023800
 8004934:	08009f00 	.word	0x08009f00

08004938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800493c:	f7ff ffdc 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	4b05      	ldr	r3, [pc, #20]	@ (8004958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	0b5b      	lsrs	r3, r3, #13
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	4903      	ldr	r1, [pc, #12]	@ (800495c <HAL_RCC_GetPCLK2Freq+0x24>)
 800494e:	5ccb      	ldrb	r3, [r1, r3]
 8004950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004954:	4618      	mov	r0, r3
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40023800 	.word	0x40023800
 800495c:	08009f00 	.word	0x08009f00

08004960 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e07b      	b.n	8004a6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004976:	2b00      	cmp	r3, #0
 8004978:	d108      	bne.n	800498c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004982:	d009      	beq.n	8004998 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	61da      	str	r2, [r3, #28]
 800498a:	e005      	b.n	8004998 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fd fcd4 	bl	8002360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1c:	ea42 0103 	orr.w	r1, r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	0c1b      	lsrs	r3, r3, #16
 8004a36:	f003 0104 	and.w	r1, r3, #4
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	f003 0210 	and.w	r2, r3, #16
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69da      	ldr	r2, [r3, #28]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b088      	sub	sp, #32
 8004a76:	af02      	add	r7, sp, #8
 8004a78:	60f8      	str	r0, [r7, #12]
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	603b      	str	r3, [r7, #0]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d001      	beq.n	8004a92 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e104      	b.n	8004c9c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a9a:	d112      	bne.n	8004ac2 <HAL_SPI_Receive+0x50>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10e      	bne.n	8004ac2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2204      	movs	r2, #4
 8004aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004aac:	88fa      	ldrh	r2, [r7, #6]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f8f3 	bl	8004ca4 <HAL_SPI_TransmitReceive>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	e0ec      	b.n	8004c9c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ac2:	f7fd ffcf 	bl	8002a64 <HAL_GetTick>
 8004ac6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_SPI_Receive+0x62>
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0e1      	b.n	8004c9c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_SPI_Receive+0x74>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e0da      	b.n	8004c9c <HAL_SPI_Receive+0x22a>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2204      	movs	r2, #4
 8004af2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	88fa      	ldrh	r2, [r7, #6]
 8004b06:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	88fa      	ldrh	r2, [r7, #6]
 8004b0c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b34:	d10f      	bne.n	8004b56 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b54:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b60:	2b40      	cmp	r3, #64	@ 0x40
 8004b62:	d007      	beq.n	8004b74 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b72:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d170      	bne.n	8004c5e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b7c:	e035      	b.n	8004bea <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d115      	bne.n	8004bb8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f103 020c 	add.w	r2, r3, #12
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b98:	7812      	ldrb	r2, [r2, #0]
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bb6:	e018      	b.n	8004bea <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bb8:	f7fd ff54 	bl	8002a64 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d803      	bhi.n	8004bd0 <HAL_SPI_Receive+0x15e>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bce:	d102      	bne.n	8004bd6 <HAL_SPI_Receive+0x164>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e058      	b.n	8004c9c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1c4      	bne.n	8004b7e <HAL_SPI_Receive+0x10c>
 8004bf4:	e038      	b.n	8004c68 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d113      	bne.n	8004c2c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0e:	b292      	uxth	r2, r2
 8004c10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c16:	1c9a      	adds	r2, r3, #2
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c2a:	e018      	b.n	8004c5e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c2c:	f7fd ff1a 	bl	8002a64 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d803      	bhi.n	8004c44 <HAL_SPI_Receive+0x1d2>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c42:	d102      	bne.n	8004c4a <HAL_SPI_Receive+0x1d8>
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e01e      	b.n	8004c9c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1c6      	bne.n	8004bf6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	6839      	ldr	r1, [r7, #0]
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 fa4b 	bl	8005108 <SPI_EndRxTransaction>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
  }
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08a      	sub	sp, #40	@ 0x28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cb6:	f7fd fed5 	bl	8002a64 <HAL_GetTick>
 8004cba:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cc2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004cca:	887b      	ldrh	r3, [r7, #2]
 8004ccc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cce:	7ffb      	ldrb	r3, [r7, #31]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d00c      	beq.n	8004cee <HAL_SPI_TransmitReceive+0x4a>
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cda:	d106      	bne.n	8004cea <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d102      	bne.n	8004cea <HAL_SPI_TransmitReceive+0x46>
 8004ce4:	7ffb      	ldrb	r3, [r7, #31]
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d001      	beq.n	8004cee <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004cea:	2302      	movs	r3, #2
 8004cec:	e17f      	b.n	8004fee <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <HAL_SPI_TransmitReceive+0x5c>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <HAL_SPI_TransmitReceive+0x5c>
 8004cfa:	887b      	ldrh	r3, [r7, #2]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e174      	b.n	8004fee <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_SPI_TransmitReceive+0x6e>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e16d      	b.n	8004fee <HAL_SPI_TransmitReceive+0x34a>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d003      	beq.n	8004d2e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2205      	movs	r2, #5
 8004d2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	887a      	ldrh	r2, [r7, #2]
 8004d3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	887a      	ldrh	r2, [r7, #2]
 8004d44:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	887a      	ldrh	r2, [r7, #2]
 8004d50:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	887a      	ldrh	r2, [r7, #2]
 8004d56:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d6e:	2b40      	cmp	r3, #64	@ 0x40
 8004d70:	d007      	beq.n	8004d82 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d8a:	d17e      	bne.n	8004e8a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <HAL_SPI_TransmitReceive+0xf6>
 8004d94:	8afb      	ldrh	r3, [r7, #22]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d16c      	bne.n	8004e74 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9e:	881a      	ldrh	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004daa:	1c9a      	adds	r2, r3, #2
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dbe:	e059      	b.n	8004e74 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d11b      	bne.n	8004e06 <HAL_SPI_TransmitReceive+0x162>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d016      	beq.n	8004e06 <HAL_SPI_TransmitReceive+0x162>
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d113      	bne.n	8004e06 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de2:	881a      	ldrh	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dee:	1c9a      	adds	r2, r3, #2
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d119      	bne.n	8004e48 <HAL_SPI_TransmitReceive+0x1a4>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d014      	beq.n	8004e48 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e28:	b292      	uxth	r2, r2
 8004e2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e30:	1c9a      	adds	r2, r3, #2
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e44:	2301      	movs	r3, #1
 8004e46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e48:	f7fd fe0c 	bl	8002a64 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d80d      	bhi.n	8004e74 <HAL_SPI_TransmitReceive+0x1d0>
 8004e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5e:	d009      	beq.n	8004e74 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e0bc      	b.n	8004fee <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1a0      	bne.n	8004dc0 <HAL_SPI_TransmitReceive+0x11c>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d19b      	bne.n	8004dc0 <HAL_SPI_TransmitReceive+0x11c>
 8004e88:	e082      	b.n	8004f90 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <HAL_SPI_TransmitReceive+0x1f4>
 8004e92:	8afb      	ldrh	r3, [r7, #22]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d171      	bne.n	8004f7c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	330c      	adds	r3, #12
 8004ea2:	7812      	ldrb	r2, [r2, #0]
 8004ea4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ebe:	e05d      	b.n	8004f7c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d11c      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x264>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d017      	beq.n	8004f08 <HAL_SPI_TransmitReceive+0x264>
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d114      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	330c      	adds	r3, #12
 8004ee8:	7812      	ldrb	r2, [r2, #0]
 8004eea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d119      	bne.n	8004f4a <HAL_SPI_TransmitReceive+0x2a6>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d014      	beq.n	8004f4a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f46:	2301      	movs	r3, #1
 8004f48:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f4a:	f7fd fd8b 	bl	8002a64 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d803      	bhi.n	8004f62 <HAL_SPI_TransmitReceive+0x2be>
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f60:	d102      	bne.n	8004f68 <HAL_SPI_TransmitReceive+0x2c4>
 8004f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d109      	bne.n	8004f7c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e038      	b.n	8004fee <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d19c      	bne.n	8004ec0 <HAL_SPI_TransmitReceive+0x21c>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d197      	bne.n	8004ec0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f90:	6a3a      	ldr	r2, [r7, #32]
 8004f92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f91d 	bl	80051d4 <SPI_EndRxTxTransaction>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d008      	beq.n	8004fb2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e01d      	b.n	8004fee <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10a      	bne.n	8004fd0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fba:	2300      	movs	r3, #0
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	613b      	str	r3, [r7, #16]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	613b      	str	r3, [r7, #16]
 8004fce:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e000      	b.n	8004fee <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004fec:	2300      	movs	r3, #0
  }
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3728      	adds	r7, #40	@ 0x28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	4613      	mov	r3, r2
 8005006:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005008:	f7fd fd2c 	bl	8002a64 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	4413      	add	r3, r2
 8005016:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005018:	f7fd fd24 	bl	8002a64 <HAL_GetTick>
 800501c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800501e:	4b39      	ldr	r3, [pc, #228]	@ (8005104 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	015b      	lsls	r3, r3, #5
 8005024:	0d1b      	lsrs	r3, r3, #20
 8005026:	69fa      	ldr	r2, [r7, #28]
 8005028:	fb02 f303 	mul.w	r3, r2, r3
 800502c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800502e:	e054      	b.n	80050da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d050      	beq.n	80050da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005038:	f7fd fd14 	bl	8002a64 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	429a      	cmp	r2, r3
 8005046:	d902      	bls.n	800504e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d13d      	bne.n	80050ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800505c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005066:	d111      	bne.n	800508c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005070:	d004      	beq.n	800507c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800507a:	d107      	bne.n	800508c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800508a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005090:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005094:	d10f      	bne.n	80050b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e017      	b.n	80050fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4013      	ands	r3, r2
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	bf0c      	ite	eq
 80050ea:	2301      	moveq	r3, #1
 80050ec:	2300      	movne	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	461a      	mov	r2, r3
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d19b      	bne.n	8005030 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3720      	adds	r7, #32
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20000228 	.word	0x20000228

08005108 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af02      	add	r7, sp, #8
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800511c:	d111      	bne.n	8005142 <SPI_EndRxTransaction+0x3a>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005126:	d004      	beq.n	8005132 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005130:	d107      	bne.n	8005142 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005140:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800514a:	d12a      	bne.n	80051a2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005154:	d012      	beq.n	800517c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2200      	movs	r2, #0
 800515e:	2180      	movs	r1, #128	@ 0x80
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f7ff ff49 	bl	8004ff8 <SPI_WaitFlagStateUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d02d      	beq.n	80051c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005170:	f043 0220 	orr.w	r2, r3, #32
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e026      	b.n	80051ca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2200      	movs	r2, #0
 8005184:	2101      	movs	r1, #1
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f7ff ff36 	bl	8004ff8 <SPI_WaitFlagStateUntilTimeout>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d01a      	beq.n	80051c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005196:	f043 0220 	orr.w	r2, r3, #32
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e013      	b.n	80051ca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2200      	movs	r2, #0
 80051aa:	2101      	movs	r1, #1
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f7ff ff23 	bl	8004ff8 <SPI_WaitFlagStateUntilTimeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d007      	beq.n	80051c8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051bc:	f043 0220 	orr.w	r2, r3, #32
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e000      	b.n	80051ca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af02      	add	r7, sp, #8
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2201      	movs	r2, #1
 80051e8:	2102      	movs	r1, #2
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f7ff ff04 	bl	8004ff8 <SPI_WaitFlagStateUntilTimeout>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d007      	beq.n	8005206 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fa:	f043 0220 	orr.w	r2, r3, #32
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e032      	b.n	800526c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005206:	4b1b      	ldr	r3, [pc, #108]	@ (8005274 <SPI_EndRxTxTransaction+0xa0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1b      	ldr	r2, [pc, #108]	@ (8005278 <SPI_EndRxTxTransaction+0xa4>)
 800520c:	fba2 2303 	umull	r2, r3, r2, r3
 8005210:	0d5b      	lsrs	r3, r3, #21
 8005212:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005216:	fb02 f303 	mul.w	r3, r2, r3
 800521a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005224:	d112      	bne.n	800524c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2200      	movs	r2, #0
 800522e:	2180      	movs	r1, #128	@ 0x80
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f7ff fee1 	bl	8004ff8 <SPI_WaitFlagStateUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d016      	beq.n	800526a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005240:	f043 0220 	orr.w	r2, r3, #32
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e00f      	b.n	800526c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	3b01      	subs	r3, #1
 8005256:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005262:	2b80      	cmp	r3, #128	@ 0x80
 8005264:	d0f2      	beq.n	800524c <SPI_EndRxTxTransaction+0x78>
 8005266:	e000      	b.n	800526a <SPI_EndRxTxTransaction+0x96>
        break;
 8005268:	bf00      	nop
  }

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20000228 	.word	0x20000228
 8005278:	165e9f81 	.word	0x165e9f81

0800527c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e038      	b.n	8005304 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f7fb ff6c 	bl	8001184 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3308      	adds	r3, #8
 80052b4:	4619      	mov	r1, r3
 80052b6:	4610      	mov	r0, r2
 80052b8:	f001 fd2a 	bl	8006d10 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	461a      	mov	r2, r3
 80052c6:	68b9      	ldr	r1, [r7, #8]
 80052c8:	f001 fd8c 	bl	8006de4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6858      	ldr	r0, [r3, #4]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	f001 fdb9 	bl	8006e50 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	6892      	ldr	r2, [r2, #8]
 80052e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	6892      	ldr	r2, [r2, #8]
 80052f2:	f041 0101 	orr.w	r1, r1, #1
 80052f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e041      	b.n	80053a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d106      	bne.n	8005338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fd f988 	bl	8002648 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3304      	adds	r3, #4
 8005348:	4619      	mov	r1, r3
 800534a:	4610      	mov	r0, r2
 800534c:	f000 fa7e 	bl	800584c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d001      	beq.n	80053c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e04e      	b.n	8005462 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a23      	ldr	r2, [pc, #140]	@ (8005470 <HAL_TIM_Base_Start_IT+0xc4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d022      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x80>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ee:	d01d      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x80>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005474 <HAL_TIM_Base_Start_IT+0xc8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d018      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x80>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005478 <HAL_TIM_Base_Start_IT+0xcc>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d013      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x80>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a1c      	ldr	r2, [pc, #112]	@ (800547c <HAL_TIM_Base_Start_IT+0xd0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00e      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x80>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a1b      	ldr	r2, [pc, #108]	@ (8005480 <HAL_TIM_Base_Start_IT+0xd4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d009      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x80>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a19      	ldr	r2, [pc, #100]	@ (8005484 <HAL_TIM_Base_Start_IT+0xd8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d004      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x80>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a18      	ldr	r2, [pc, #96]	@ (8005488 <HAL_TIM_Base_Start_IT+0xdc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d111      	bne.n	8005450 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b06      	cmp	r3, #6
 800543c:	d010      	beq.n	8005460 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f042 0201 	orr.w	r2, r2, #1
 800544c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544e:	e007      	b.n	8005460 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0201 	orr.w	r2, r2, #1
 800545e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	40010000 	.word	0x40010000
 8005474:	40000400 	.word	0x40000400
 8005478:	40000800 	.word	0x40000800
 800547c:	40000c00 	.word	0x40000c00
 8005480:	40010400 	.word	0x40010400
 8005484:	40014000 	.word	0x40014000
 8005488:	40001800 	.word	0x40001800

0800548c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d020      	beq.n	80054f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01b      	beq.n	80054f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0202 	mvn.w	r2, #2
 80054c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f999 	bl	800580e <HAL_TIM_IC_CaptureCallback>
 80054dc:	e005      	b.n	80054ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f98b 	bl	80057fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f99c 	bl	8005822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f003 0304 	and.w	r3, r3, #4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d020      	beq.n	800553c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d01b      	beq.n	800553c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f06f 0204 	mvn.w	r2, #4
 800550c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2202      	movs	r2, #2
 8005512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f973 	bl	800580e <HAL_TIM_IC_CaptureCallback>
 8005528:	e005      	b.n	8005536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f965 	bl	80057fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f976 	bl	8005822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b00      	cmp	r3, #0
 8005544:	d020      	beq.n	8005588 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f003 0308 	and.w	r3, r3, #8
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01b      	beq.n	8005588 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f06f 0208 	mvn.w	r2, #8
 8005558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2204      	movs	r2, #4
 800555e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f94d 	bl	800580e <HAL_TIM_IC_CaptureCallback>
 8005574:	e005      	b.n	8005582 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f93f 	bl	80057fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f950 	bl	8005822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	2b00      	cmp	r3, #0
 8005590:	d020      	beq.n	80055d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f003 0310 	and.w	r3, r3, #16
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01b      	beq.n	80055d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0210 	mvn.w	r2, #16
 80055a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2208      	movs	r2, #8
 80055aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f927 	bl	800580e <HAL_TIM_IC_CaptureCallback>
 80055c0:	e005      	b.n	80055ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f919 	bl	80057fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f92a 	bl	8005822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00c      	beq.n	80055f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d007      	beq.n	80055f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f06f 0201 	mvn.w	r2, #1
 80055f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fc fe32 	bl	800225c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00c      	beq.n	800561c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fae4 	bl	8005be4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00c      	beq.n	8005640 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f8fb 	bl	8005836 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00c      	beq.n	8005664 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	2b00      	cmp	r3, #0
 8005652:	d007      	beq.n	8005664 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0220 	mvn.w	r2, #32
 800565c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fab6 	bl	8005bd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005664:	bf00      	nop
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005676:	2300      	movs	r3, #0
 8005678:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_TIM_ConfigClockSource+0x1c>
 8005684:	2302      	movs	r3, #2
 8005686:	e0b4      	b.n	80057f2 <HAL_TIM_ConfigClockSource+0x186>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80056a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056c0:	d03e      	beq.n	8005740 <HAL_TIM_ConfigClockSource+0xd4>
 80056c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056c6:	f200 8087 	bhi.w	80057d8 <HAL_TIM_ConfigClockSource+0x16c>
 80056ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ce:	f000 8086 	beq.w	80057de <HAL_TIM_ConfigClockSource+0x172>
 80056d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056d6:	d87f      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x16c>
 80056d8:	2b70      	cmp	r3, #112	@ 0x70
 80056da:	d01a      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0xa6>
 80056dc:	2b70      	cmp	r3, #112	@ 0x70
 80056de:	d87b      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x16c>
 80056e0:	2b60      	cmp	r3, #96	@ 0x60
 80056e2:	d050      	beq.n	8005786 <HAL_TIM_ConfigClockSource+0x11a>
 80056e4:	2b60      	cmp	r3, #96	@ 0x60
 80056e6:	d877      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x16c>
 80056e8:	2b50      	cmp	r3, #80	@ 0x50
 80056ea:	d03c      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0xfa>
 80056ec:	2b50      	cmp	r3, #80	@ 0x50
 80056ee:	d873      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x16c>
 80056f0:	2b40      	cmp	r3, #64	@ 0x40
 80056f2:	d058      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0x13a>
 80056f4:	2b40      	cmp	r3, #64	@ 0x40
 80056f6:	d86f      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x16c>
 80056f8:	2b30      	cmp	r3, #48	@ 0x30
 80056fa:	d064      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0x15a>
 80056fc:	2b30      	cmp	r3, #48	@ 0x30
 80056fe:	d86b      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005700:	2b20      	cmp	r3, #32
 8005702:	d060      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005704:	2b20      	cmp	r3, #32
 8005706:	d867      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005708:	2b00      	cmp	r3, #0
 800570a:	d05c      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0x15a>
 800570c:	2b10      	cmp	r3, #16
 800570e:	d05a      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005710:	e062      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005722:	f000 f9b9 	bl	8005a98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005734:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	609a      	str	r2, [r3, #8]
      break;
 800573e:	e04f      	b.n	80057e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005750:	f000 f9a2 	bl	8005a98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005762:	609a      	str	r2, [r3, #8]
      break;
 8005764:	e03c      	b.n	80057e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005772:	461a      	mov	r2, r3
 8005774:	f000 f916 	bl	80059a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2150      	movs	r1, #80	@ 0x50
 800577e:	4618      	mov	r0, r3
 8005780:	f000 f96f 	bl	8005a62 <TIM_ITRx_SetConfig>
      break;
 8005784:	e02c      	b.n	80057e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005792:	461a      	mov	r2, r3
 8005794:	f000 f935 	bl	8005a02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2160      	movs	r1, #96	@ 0x60
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 f95f 	bl	8005a62 <TIM_ITRx_SetConfig>
      break;
 80057a4:	e01c      	b.n	80057e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057b2:	461a      	mov	r2, r3
 80057b4:	f000 f8f6 	bl	80059a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2140      	movs	r1, #64	@ 0x40
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 f94f 	bl	8005a62 <TIM_ITRx_SetConfig>
      break;
 80057c4:	e00c      	b.n	80057e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4619      	mov	r1, r3
 80057d0:	4610      	mov	r0, r2
 80057d2:	f000 f946 	bl	8005a62 <TIM_ITRx_SetConfig>
      break;
 80057d6:	e003      	b.n	80057e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	73fb      	strb	r3, [r7, #15]
      break;
 80057dc:	e000      	b.n	80057e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800582a:	bf00      	nop
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005836:	b480      	push	{r7}
 8005838:	b083      	sub	sp, #12
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800583e:	bf00      	nop
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
	...

0800584c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a46      	ldr	r2, [pc, #280]	@ (8005978 <TIM_Base_SetConfig+0x12c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d013      	beq.n	800588c <TIM_Base_SetConfig+0x40>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800586a:	d00f      	beq.n	800588c <TIM_Base_SetConfig+0x40>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a43      	ldr	r2, [pc, #268]	@ (800597c <TIM_Base_SetConfig+0x130>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00b      	beq.n	800588c <TIM_Base_SetConfig+0x40>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a42      	ldr	r2, [pc, #264]	@ (8005980 <TIM_Base_SetConfig+0x134>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d007      	beq.n	800588c <TIM_Base_SetConfig+0x40>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a41      	ldr	r2, [pc, #260]	@ (8005984 <TIM_Base_SetConfig+0x138>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d003      	beq.n	800588c <TIM_Base_SetConfig+0x40>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a40      	ldr	r2, [pc, #256]	@ (8005988 <TIM_Base_SetConfig+0x13c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d108      	bne.n	800589e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a35      	ldr	r2, [pc, #212]	@ (8005978 <TIM_Base_SetConfig+0x12c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d02b      	beq.n	80058fe <TIM_Base_SetConfig+0xb2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ac:	d027      	beq.n	80058fe <TIM_Base_SetConfig+0xb2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a32      	ldr	r2, [pc, #200]	@ (800597c <TIM_Base_SetConfig+0x130>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d023      	beq.n	80058fe <TIM_Base_SetConfig+0xb2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a31      	ldr	r2, [pc, #196]	@ (8005980 <TIM_Base_SetConfig+0x134>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d01f      	beq.n	80058fe <TIM_Base_SetConfig+0xb2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a30      	ldr	r2, [pc, #192]	@ (8005984 <TIM_Base_SetConfig+0x138>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d01b      	beq.n	80058fe <TIM_Base_SetConfig+0xb2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a2f      	ldr	r2, [pc, #188]	@ (8005988 <TIM_Base_SetConfig+0x13c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d017      	beq.n	80058fe <TIM_Base_SetConfig+0xb2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a2e      	ldr	r2, [pc, #184]	@ (800598c <TIM_Base_SetConfig+0x140>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d013      	beq.n	80058fe <TIM_Base_SetConfig+0xb2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005990 <TIM_Base_SetConfig+0x144>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00f      	beq.n	80058fe <TIM_Base_SetConfig+0xb2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a2c      	ldr	r2, [pc, #176]	@ (8005994 <TIM_Base_SetConfig+0x148>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00b      	beq.n	80058fe <TIM_Base_SetConfig+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005998 <TIM_Base_SetConfig+0x14c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d007      	beq.n	80058fe <TIM_Base_SetConfig+0xb2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a2a      	ldr	r2, [pc, #168]	@ (800599c <TIM_Base_SetConfig+0x150>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d003      	beq.n	80058fe <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a29      	ldr	r2, [pc, #164]	@ (80059a0 <TIM_Base_SetConfig+0x154>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d108      	bne.n	8005910 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4313      	orrs	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a10      	ldr	r2, [pc, #64]	@ (8005978 <TIM_Base_SetConfig+0x12c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d003      	beq.n	8005944 <TIM_Base_SetConfig+0xf8>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a12      	ldr	r2, [pc, #72]	@ (8005988 <TIM_Base_SetConfig+0x13c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d103      	bne.n	800594c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	691a      	ldr	r2, [r3, #16]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b01      	cmp	r3, #1
 800595c:	d105      	bne.n	800596a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f023 0201 	bic.w	r2, r3, #1
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	611a      	str	r2, [r3, #16]
  }
}
 800596a:	bf00      	nop
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40010000 	.word	0x40010000
 800597c:	40000400 	.word	0x40000400
 8005980:	40000800 	.word	0x40000800
 8005984:	40000c00 	.word	0x40000c00
 8005988:	40010400 	.word	0x40010400
 800598c:	40014000 	.word	0x40014000
 8005990:	40014400 	.word	0x40014400
 8005994:	40014800 	.word	0x40014800
 8005998:	40001800 	.word	0x40001800
 800599c:	40001c00 	.word	0x40001c00
 80059a0:	40002000 	.word	0x40002000

080059a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	f023 0201 	bic.w	r2, r3, #1
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f023 030a 	bic.w	r3, r3, #10
 80059e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	621a      	str	r2, [r3, #32]
}
 80059f6:	bf00      	nop
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b087      	sub	sp, #28
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	60f8      	str	r0, [r7, #12]
 8005a0a:	60b9      	str	r1, [r7, #8]
 8005a0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	f023 0210 	bic.w	r2, r3, #16
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	031b      	lsls	r3, r3, #12
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	621a      	str	r2, [r3, #32]
}
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b085      	sub	sp, #20
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f043 0307 	orr.w	r3, r3, #7
 8005a84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	609a      	str	r2, [r3, #8]
}
 8005a8c:	bf00      	nop
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ab2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	021a      	lsls	r2, r3, #8
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	609a      	str	r2, [r3, #8]
}
 8005acc:	bf00      	nop
 8005ace:	371c      	adds	r7, #28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e05a      	b.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a21      	ldr	r2, [pc, #132]	@ (8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d022      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b3c:	d01d      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a1d      	ldr	r2, [pc, #116]	@ (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d018      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a1a      	ldr	r2, [pc, #104]	@ (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00e      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a18      	ldr	r2, [pc, #96]	@ (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d009      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a17      	ldr	r2, [pc, #92]	@ (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d004      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a15      	ldr	r2, [pc, #84]	@ (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d10c      	bne.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40010000 	.word	0x40010000
 8005bb8:	40000400 	.word	0x40000400
 8005bbc:	40000800 	.word	0x40000800
 8005bc0:	40000c00 	.word	0x40000c00
 8005bc4:	40010400 	.word	0x40010400
 8005bc8:	40014000 	.word	0x40014000
 8005bcc:	40001800 	.word	0x40001800

08005bd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e042      	b.n	8005c90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d106      	bne.n	8005c24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7fc fdd4 	bl	80027cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2224      	movs	r2, #36	@ 0x24
 8005c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fdf3 	bl	8006828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	695a      	ldr	r2, [r3, #20]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	@ 0x28
 8005c9c:	af02      	add	r7, sp, #8
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b20      	cmp	r3, #32
 8005cb6:	d175      	bne.n	8005da4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <HAL_UART_Transmit+0x2c>
 8005cbe:	88fb      	ldrh	r3, [r7, #6]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e06e      	b.n	8005da6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2221      	movs	r2, #33	@ 0x21
 8005cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cd6:	f7fc fec5 	bl	8002a64 <HAL_GetTick>
 8005cda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	88fa      	ldrh	r2, [r7, #6]
 8005ce0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	88fa      	ldrh	r2, [r7, #6]
 8005ce6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cf0:	d108      	bne.n	8005d04 <HAL_UART_Transmit+0x6c>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d104      	bne.n	8005d04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	61bb      	str	r3, [r7, #24]
 8005d02:	e003      	b.n	8005d0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d0c:	e02e      	b.n	8005d6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2200      	movs	r2, #0
 8005d16:	2180      	movs	r1, #128	@ 0x80
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 fb55 	bl	80063c8 <UART_WaitOnFlagUntilTimeout>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e03a      	b.n	8005da6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10b      	bne.n	8005d4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	3302      	adds	r3, #2
 8005d4a:	61bb      	str	r3, [r7, #24]
 8005d4c:	e007      	b.n	8005d5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	781a      	ldrb	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1cb      	bne.n	8005d0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	2140      	movs	r1, #64	@ 0x40
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 fb21 	bl	80063c8 <UART_WaitOnFlagUntilTimeout>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e006      	b.n	8005da6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	e000      	b.n	8005da6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005da4:	2302      	movs	r3, #2
  }
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3720      	adds	r7, #32
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b08c      	sub	sp, #48	@ 0x30
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	4613      	mov	r3, r2
 8005dba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d14a      	bne.n	8005e5e <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e043      	b.n	8005e60 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005de4:	88fb      	ldrh	r3, [r7, #6]
 8005de6:	461a      	mov	r2, r3
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 fb45 	bl	800647a <UART_Start_Receive_IT>
 8005df0:	4603      	mov	r3, r0
 8005df2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005df6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d12c      	bne.n	8005e58 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d125      	bne.n	8005e52 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e06:	2300      	movs	r3, #0
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	330c      	adds	r3, #12
 8005e22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	e853 3f00 	ldrex	r3, [r3]
 8005e2a:	617b      	str	r3, [r7, #20]
   return(result);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f043 0310 	orr.w	r3, r3, #16
 8005e32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	330c      	adds	r3, #12
 8005e3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e40:	6a39      	ldr	r1, [r7, #32]
 8005e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e44:	e841 2300 	strex	r3, r2, [r1]
 8005e48:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1e5      	bne.n	8005e1c <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8005e50:	e002      	b.n	8005e58 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005e58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e5c:	e000      	b.n	8005e60 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005e5e:	2302      	movs	r3, #2
  }
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3730      	adds	r7, #48	@ 0x30
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b0ba      	sub	sp, #232	@ 0xe8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10f      	bne.n	8005ece <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d009      	beq.n	8005ece <HAL_UART_IRQHandler+0x66>
 8005eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fbf0 	bl	80066ac <UART_Receive_IT>
      return;
 8005ecc:	e25b      	b.n	8006386 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 80de 	beq.w	8006094 <HAL_UART_IRQHandler+0x22c>
 8005ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d106      	bne.n	8005ef2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ee8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 80d1 	beq.w	8006094 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00b      	beq.n	8005f16 <HAL_UART_IRQHandler+0xae>
 8005efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f0e:	f043 0201 	orr.w	r2, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f1a:	f003 0304 	and.w	r3, r3, #4
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00b      	beq.n	8005f3a <HAL_UART_IRQHandler+0xd2>
 8005f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d005      	beq.n	8005f3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f32:	f043 0202 	orr.w	r2, r3, #2
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00b      	beq.n	8005f5e <HAL_UART_IRQHandler+0xf6>
 8005f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f56:	f043 0204 	orr.w	r2, r3, #4
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d011      	beq.n	8005f8e <HAL_UART_IRQHandler+0x126>
 8005f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d105      	bne.n	8005f82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d005      	beq.n	8005f8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f86:	f043 0208 	orr.w	r2, r3, #8
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 81f2 	beq.w	800637c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d008      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x14e>
 8005fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa8:	f003 0320 	and.w	r3, r3, #32
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fb7b 	bl	80066ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc0:	2b40      	cmp	r3, #64	@ 0x40
 8005fc2:	bf0c      	ite	eq
 8005fc4:	2301      	moveq	r3, #1
 8005fc6:	2300      	movne	r3, #0
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d103      	bne.n	8005fe2 <HAL_UART_IRQHandler+0x17a>
 8005fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d04f      	beq.n	8006082 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fa83 	bl	80064ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff2:	2b40      	cmp	r3, #64	@ 0x40
 8005ff4:	d141      	bne.n	800607a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3314      	adds	r3, #20
 8005ffc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800600c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006010:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006014:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3314      	adds	r3, #20
 800601e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006022:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800602e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800603a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1d9      	bne.n	8005ff6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006046:	2b00      	cmp	r3, #0
 8006048:	d013      	beq.n	8006072 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800604e:	4a7e      	ldr	r2, [pc, #504]	@ (8006248 <HAL_UART_IRQHandler+0x3e0>)
 8006050:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006056:	4618      	mov	r0, r3
 8006058:	f7fd fbce 	bl	80037f8 <HAL_DMA_Abort_IT>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d016      	beq.n	8006090 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800606c:	4610      	mov	r0, r2
 800606e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006070:	e00e      	b.n	8006090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f99e 	bl	80063b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006078:	e00a      	b.n	8006090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f99a 	bl	80063b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006080:	e006      	b.n	8006090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f996 	bl	80063b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800608e:	e175      	b.n	800637c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006090:	bf00      	nop
    return;
 8006092:	e173      	b.n	800637c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006098:	2b01      	cmp	r3, #1
 800609a:	f040 814f 	bne.w	800633c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800609e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 8148 	beq.w	800633c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8141 	beq.w	800633c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060ba:	2300      	movs	r3, #0
 80060bc:	60bb      	str	r3, [r7, #8]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60bb      	str	r3, [r7, #8]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	60bb      	str	r3, [r7, #8]
 80060ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060da:	2b40      	cmp	r3, #64	@ 0x40
 80060dc:	f040 80b6 	bne.w	800624c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8145 	beq.w	8006380 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060fe:	429a      	cmp	r2, r3
 8006100:	f080 813e 	bcs.w	8006380 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800610a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006116:	f000 8088 	beq.w	800622a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	330c      	adds	r3, #12
 8006120:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006130:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006138:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	330c      	adds	r3, #12
 8006142:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006146:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800614a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006152:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800615e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1d9      	bne.n	800611a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3314      	adds	r3, #20
 800616c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006176:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006178:	f023 0301 	bic.w	r3, r3, #1
 800617c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3314      	adds	r3, #20
 8006186:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800618a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800618e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006190:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006192:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800619c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e1      	bne.n	8006166 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3314      	adds	r3, #20
 80061a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80061b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3314      	adds	r3, #20
 80061c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80061c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80061c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80061cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80061d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e3      	bne.n	80061a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	330c      	adds	r3, #12
 80061ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80061f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061fa:	f023 0310 	bic.w	r3, r3, #16
 80061fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	330c      	adds	r3, #12
 8006208:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800620c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800620e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006210:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006212:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006214:	e841 2300 	strex	r3, r2, [r1]
 8006218:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800621a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1e3      	bne.n	80061e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006224:	4618      	mov	r0, r3
 8006226:	f7fd fa77 	bl	8003718 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2202      	movs	r2, #2
 800622e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006238:	b29b      	uxth	r3, r3
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	b29b      	uxth	r3, r3
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7fb ff9f 	bl	8002184 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006246:	e09b      	b.n	8006380 <HAL_UART_IRQHandler+0x518>
 8006248:	080065b5 	.word	0x080065b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006254:	b29b      	uxth	r3, r3
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006260:	b29b      	uxth	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 808e 	beq.w	8006384 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 8089 	beq.w	8006384 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	330c      	adds	r3, #12
 8006278:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800627c:	e853 3f00 	ldrex	r3, [r3]
 8006280:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006288:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	330c      	adds	r3, #12
 8006292:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006296:	647a      	str	r2, [r7, #68]	@ 0x44
 8006298:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800629c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800629e:	e841 2300 	strex	r3, r2, [r1]
 80062a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1e3      	bne.n	8006272 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3314      	adds	r3, #20
 80062b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b4:	e853 3f00 	ldrex	r3, [r3]
 80062b8:	623b      	str	r3, [r7, #32]
   return(result);
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	f023 0301 	bic.w	r3, r3, #1
 80062c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3314      	adds	r3, #20
 80062ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80062ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80062d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062d6:	e841 2300 	strex	r3, r2, [r1]
 80062da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1e3      	bne.n	80062aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	330c      	adds	r3, #12
 80062f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 0310 	bic.w	r3, r3, #16
 8006306:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	330c      	adds	r3, #12
 8006310:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006314:	61fa      	str	r2, [r7, #28]
 8006316:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006318:	69b9      	ldr	r1, [r7, #24]
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	e841 2300 	strex	r3, r2, [r1]
 8006320:	617b      	str	r3, [r7, #20]
   return(result);
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e3      	bne.n	80062f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800632e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7fb ff25 	bl	8002184 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800633a:	e023      	b.n	8006384 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800633c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006344:	2b00      	cmp	r3, #0
 8006346:	d009      	beq.n	800635c <HAL_UART_IRQHandler+0x4f4>
 8006348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800634c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f941 	bl	80065dc <UART_Transmit_IT>
    return;
 800635a:	e014      	b.n	8006386 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800635c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00e      	beq.n	8006386 <HAL_UART_IRQHandler+0x51e>
 8006368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800636c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	d008      	beq.n	8006386 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f981 	bl	800667c <UART_EndTransmit_IT>
    return;
 800637a:	e004      	b.n	8006386 <HAL_UART_IRQHandler+0x51e>
    return;
 800637c:	bf00      	nop
 800637e:	e002      	b.n	8006386 <HAL_UART_IRQHandler+0x51e>
      return;
 8006380:	bf00      	nop
 8006382:	e000      	b.n	8006386 <HAL_UART_IRQHandler+0x51e>
      return;
 8006384:	bf00      	nop
  }
}
 8006386:	37e8      	adds	r7, #232	@ 0xe8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	603b      	str	r3, [r7, #0]
 80063d4:	4613      	mov	r3, r2
 80063d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d8:	e03b      	b.n	8006452 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e0:	d037      	beq.n	8006452 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063e2:	f7fc fb3f 	bl	8002a64 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	6a3a      	ldr	r2, [r7, #32]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d302      	bcc.n	80063f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e03a      	b.n	8006472 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f003 0304 	and.w	r3, r3, #4
 8006406:	2b00      	cmp	r3, #0
 8006408:	d023      	beq.n	8006452 <UART_WaitOnFlagUntilTimeout+0x8a>
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2b80      	cmp	r3, #128	@ 0x80
 800640e:	d020      	beq.n	8006452 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b40      	cmp	r3, #64	@ 0x40
 8006414:	d01d      	beq.n	8006452 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0308 	and.w	r3, r3, #8
 8006420:	2b08      	cmp	r3, #8
 8006422:	d116      	bne.n	8006452 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006424:	2300      	movs	r3, #0
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 f857 	bl	80064ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2208      	movs	r2, #8
 8006444:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e00f      	b.n	8006472 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4013      	ands	r3, r2
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	429a      	cmp	r2, r3
 8006460:	bf0c      	ite	eq
 8006462:	2301      	moveq	r3, #1
 8006464:	2300      	movne	r3, #0
 8006466:	b2db      	uxtb	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	79fb      	ldrb	r3, [r7, #7]
 800646c:	429a      	cmp	r2, r3
 800646e:	d0b4      	beq.n	80063da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	60b9      	str	r1, [r7, #8]
 8006484:	4613      	mov	r3, r2
 8006486:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	88fa      	ldrh	r2, [r7, #6]
 8006492:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	88fa      	ldrh	r2, [r7, #6]
 8006498:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2222      	movs	r2, #34	@ 0x22
 80064a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d007      	beq.n	80064c0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064be:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695a      	ldr	r2, [r3, #20]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0201 	orr.w	r2, r2, #1
 80064ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0220 	orr.w	r2, r2, #32
 80064de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b095      	sub	sp, #84	@ 0x54
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	330c      	adds	r3, #12
 80064fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006500:	e853 3f00 	ldrex	r3, [r3]
 8006504:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006508:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800650c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	330c      	adds	r3, #12
 8006514:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006516:	643a      	str	r2, [r7, #64]	@ 0x40
 8006518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800651c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800651e:	e841 2300 	strex	r3, r2, [r1]
 8006522:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1e5      	bne.n	80064f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3314      	adds	r3, #20
 8006530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	61fb      	str	r3, [r7, #28]
   return(result);
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	f023 0301 	bic.w	r3, r3, #1
 8006540:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	3314      	adds	r3, #20
 8006548:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800654a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800654c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006550:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e5      	bne.n	800652a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006562:	2b01      	cmp	r3, #1
 8006564:	d119      	bne.n	800659a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	330c      	adds	r3, #12
 800656c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	60bb      	str	r3, [r7, #8]
   return(result);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	f023 0310 	bic.w	r3, r3, #16
 800657c:	647b      	str	r3, [r7, #68]	@ 0x44
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	330c      	adds	r3, #12
 8006584:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006586:	61ba      	str	r2, [r7, #24]
 8006588:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	6979      	ldr	r1, [r7, #20]
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	613b      	str	r3, [r7, #16]
   return(result);
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e5      	bne.n	8006566 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2220      	movs	r2, #32
 800659e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80065a8:	bf00      	nop
 80065aa:	3754      	adds	r7, #84	@ 0x54
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f7ff fef0 	bl	80063b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065d4:	bf00      	nop
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b21      	cmp	r3, #33	@ 0x21
 80065ee:	d13e      	bne.n	800666e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065f8:	d114      	bne.n	8006624 <UART_Transmit_IT+0x48>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d110      	bne.n	8006624 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006616:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	1c9a      	adds	r2, r3, #2
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	621a      	str	r2, [r3, #32]
 8006622:	e008      	b.n	8006636 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	1c59      	adds	r1, r3, #1
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6211      	str	r1, [r2, #32]
 800662e:	781a      	ldrb	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29b      	uxth	r3, r3
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	4619      	mov	r1, r3
 8006644:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10f      	bne.n	800666a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006658:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68da      	ldr	r2, [r3, #12]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006668:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	e000      	b.n	8006670 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800666e:	2302      	movs	r3, #2
  }
}
 8006670:	4618      	mov	r0, r3
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68da      	ldr	r2, [r3, #12]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006692:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2220      	movs	r2, #32
 8006698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff fe75 	bl	800638c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08c      	sub	sp, #48	@ 0x30
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b22      	cmp	r3, #34	@ 0x22
 80066be:	f040 80ae 	bne.w	800681e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ca:	d117      	bne.n	80066fc <UART_Receive_IT+0x50>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d113      	bne.n	80066fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f4:	1c9a      	adds	r2, r3, #2
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80066fa:	e026      	b.n	800674a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006700:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006702:	2300      	movs	r3, #0
 8006704:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800670e:	d007      	beq.n	8006720 <UART_Receive_IT+0x74>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <UART_Receive_IT+0x82>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d106      	bne.n	800672e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	b2da      	uxtb	r2, r3
 8006728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800672a:	701a      	strb	r2, [r3, #0]
 800672c:	e008      	b.n	8006740 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	b2db      	uxtb	r3, r3
 8006736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800673a:	b2da      	uxtb	r2, r3
 800673c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	b29b      	uxth	r3, r3
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	4619      	mov	r1, r3
 8006758:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800675a:	2b00      	cmp	r3, #0
 800675c:	d15d      	bne.n	800681a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0220 	bic.w	r2, r2, #32
 800676c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800677c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	695a      	ldr	r2, [r3, #20]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 0201 	bic.w	r2, r2, #1
 800678c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2220      	movs	r2, #32
 8006792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d135      	bne.n	8006810 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	330c      	adds	r3, #12
 80067b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	613b      	str	r3, [r7, #16]
   return(result);
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f023 0310 	bic.w	r3, r3, #16
 80067c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	330c      	adds	r3, #12
 80067c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067ca:	623a      	str	r2, [r7, #32]
 80067cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	69f9      	ldr	r1, [r7, #28]
 80067d0:	6a3a      	ldr	r2, [r7, #32]
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e5      	bne.n	80067aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	2b10      	cmp	r3, #16
 80067ea:	d10a      	bne.n	8006802 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067ec:	2300      	movs	r3, #0
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006806:	4619      	mov	r1, r3
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7fb fcbb 	bl	8002184 <HAL_UARTEx_RxEventCallback>
 800680e:	e002      	b.n	8006816 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff fdc5 	bl	80063a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	e002      	b.n	8006820 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	e000      	b.n	8006820 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800681e:	2302      	movs	r3, #2
  }
}
 8006820:	4618      	mov	r0, r3
 8006822:	3730      	adds	r7, #48	@ 0x30
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800682c:	b0c0      	sub	sp, #256	@ 0x100
 800682e:	af00      	add	r7, sp, #0
 8006830:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006844:	68d9      	ldr	r1, [r3, #12]
 8006846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	ea40 0301 	orr.w	r3, r0, r1
 8006850:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	431a      	orrs	r2, r3
 8006860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	431a      	orrs	r2, r3
 8006868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	4313      	orrs	r3, r2
 8006870:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006880:	f021 010c 	bic.w	r1, r1, #12
 8006884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800688e:	430b      	orrs	r3, r1
 8006890:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800689e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a2:	6999      	ldr	r1, [r3, #24]
 80068a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	ea40 0301 	orr.w	r3, r0, r1
 80068ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	4b8f      	ldr	r3, [pc, #572]	@ (8006af4 <UART_SetConfig+0x2cc>)
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d005      	beq.n	80068c8 <UART_SetConfig+0xa0>
 80068bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	4b8d      	ldr	r3, [pc, #564]	@ (8006af8 <UART_SetConfig+0x2d0>)
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d104      	bne.n	80068d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068c8:	f7fe f836 	bl	8004938 <HAL_RCC_GetPCLK2Freq>
 80068cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80068d0:	e003      	b.n	80068da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068d2:	f7fe f81d 	bl	8004910 <HAL_RCC_GetPCLK1Freq>
 80068d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068e4:	f040 810c 	bne.w	8006b00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068ec:	2200      	movs	r2, #0
 80068ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80068f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80068f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80068fa:	4622      	mov	r2, r4
 80068fc:	462b      	mov	r3, r5
 80068fe:	1891      	adds	r1, r2, r2
 8006900:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006902:	415b      	adcs	r3, r3
 8006904:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006906:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800690a:	4621      	mov	r1, r4
 800690c:	eb12 0801 	adds.w	r8, r2, r1
 8006910:	4629      	mov	r1, r5
 8006912:	eb43 0901 	adc.w	r9, r3, r1
 8006916:	f04f 0200 	mov.w	r2, #0
 800691a:	f04f 0300 	mov.w	r3, #0
 800691e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800692a:	4690      	mov	r8, r2
 800692c:	4699      	mov	r9, r3
 800692e:	4623      	mov	r3, r4
 8006930:	eb18 0303 	adds.w	r3, r8, r3
 8006934:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006938:	462b      	mov	r3, r5
 800693a:	eb49 0303 	adc.w	r3, r9, r3
 800693e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800694e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006952:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006956:	460b      	mov	r3, r1
 8006958:	18db      	adds	r3, r3, r3
 800695a:	653b      	str	r3, [r7, #80]	@ 0x50
 800695c:	4613      	mov	r3, r2
 800695e:	eb42 0303 	adc.w	r3, r2, r3
 8006962:	657b      	str	r3, [r7, #84]	@ 0x54
 8006964:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006968:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800696c:	f7f9 fc2c 	bl	80001c8 <__aeabi_uldivmod>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	4b61      	ldr	r3, [pc, #388]	@ (8006afc <UART_SetConfig+0x2d4>)
 8006976:	fba3 2302 	umull	r2, r3, r3, r2
 800697a:	095b      	lsrs	r3, r3, #5
 800697c:	011c      	lsls	r4, r3, #4
 800697e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006982:	2200      	movs	r2, #0
 8006984:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006988:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800698c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006990:	4642      	mov	r2, r8
 8006992:	464b      	mov	r3, r9
 8006994:	1891      	adds	r1, r2, r2
 8006996:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006998:	415b      	adcs	r3, r3
 800699a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800699c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80069a0:	4641      	mov	r1, r8
 80069a2:	eb12 0a01 	adds.w	sl, r2, r1
 80069a6:	4649      	mov	r1, r9
 80069a8:	eb43 0b01 	adc.w	fp, r3, r1
 80069ac:	f04f 0200 	mov.w	r2, #0
 80069b0:	f04f 0300 	mov.w	r3, #0
 80069b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069c0:	4692      	mov	sl, r2
 80069c2:	469b      	mov	fp, r3
 80069c4:	4643      	mov	r3, r8
 80069c6:	eb1a 0303 	adds.w	r3, sl, r3
 80069ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80069ce:	464b      	mov	r3, r9
 80069d0:	eb4b 0303 	adc.w	r3, fp, r3
 80069d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80069d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80069e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80069ec:	460b      	mov	r3, r1
 80069ee:	18db      	adds	r3, r3, r3
 80069f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80069f2:	4613      	mov	r3, r2
 80069f4:	eb42 0303 	adc.w	r3, r2, r3
 80069f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80069fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80069fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006a02:	f7f9 fbe1 	bl	80001c8 <__aeabi_uldivmod>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8006afc <UART_SetConfig+0x2d4>)
 8006a0e:	fba3 2301 	umull	r2, r3, r3, r1
 8006a12:	095b      	lsrs	r3, r3, #5
 8006a14:	2264      	movs	r2, #100	@ 0x64
 8006a16:	fb02 f303 	mul.w	r3, r2, r3
 8006a1a:	1acb      	subs	r3, r1, r3
 8006a1c:	00db      	lsls	r3, r3, #3
 8006a1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006a22:	4b36      	ldr	r3, [pc, #216]	@ (8006afc <UART_SetConfig+0x2d4>)
 8006a24:	fba3 2302 	umull	r2, r3, r3, r2
 8006a28:	095b      	lsrs	r3, r3, #5
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006a30:	441c      	add	r4, r3
 8006a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006a40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006a44:	4642      	mov	r2, r8
 8006a46:	464b      	mov	r3, r9
 8006a48:	1891      	adds	r1, r2, r2
 8006a4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006a4c:	415b      	adcs	r3, r3
 8006a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006a54:	4641      	mov	r1, r8
 8006a56:	1851      	adds	r1, r2, r1
 8006a58:	6339      	str	r1, [r7, #48]	@ 0x30
 8006a5a:	4649      	mov	r1, r9
 8006a5c:	414b      	adcs	r3, r1
 8006a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a60:	f04f 0200 	mov.w	r2, #0
 8006a64:	f04f 0300 	mov.w	r3, #0
 8006a68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006a6c:	4659      	mov	r1, fp
 8006a6e:	00cb      	lsls	r3, r1, #3
 8006a70:	4651      	mov	r1, sl
 8006a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a76:	4651      	mov	r1, sl
 8006a78:	00ca      	lsls	r2, r1, #3
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	4603      	mov	r3, r0
 8006a80:	4642      	mov	r2, r8
 8006a82:	189b      	adds	r3, r3, r2
 8006a84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a88:	464b      	mov	r3, r9
 8006a8a:	460a      	mov	r2, r1
 8006a8c:	eb42 0303 	adc.w	r3, r2, r3
 8006a90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006aa0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006aa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	18db      	adds	r3, r3, r3
 8006aac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aae:	4613      	mov	r3, r2
 8006ab0:	eb42 0303 	adc.w	r3, r2, r3
 8006ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006aba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006abe:	f7f9 fb83 	bl	80001c8 <__aeabi_uldivmod>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8006afc <UART_SetConfig+0x2d4>)
 8006ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8006acc:	095b      	lsrs	r3, r3, #5
 8006ace:	2164      	movs	r1, #100	@ 0x64
 8006ad0:	fb01 f303 	mul.w	r3, r1, r3
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	3332      	adds	r3, #50	@ 0x32
 8006ada:	4a08      	ldr	r2, [pc, #32]	@ (8006afc <UART_SetConfig+0x2d4>)
 8006adc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae0:	095b      	lsrs	r3, r3, #5
 8006ae2:	f003 0207 	and.w	r2, r3, #7
 8006ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4422      	add	r2, r4
 8006aee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006af0:	e106      	b.n	8006d00 <UART_SetConfig+0x4d8>
 8006af2:	bf00      	nop
 8006af4:	40011000 	.word	0x40011000
 8006af8:	40011400 	.word	0x40011400
 8006afc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b04:	2200      	movs	r2, #0
 8006b06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006b0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006b12:	4642      	mov	r2, r8
 8006b14:	464b      	mov	r3, r9
 8006b16:	1891      	adds	r1, r2, r2
 8006b18:	6239      	str	r1, [r7, #32]
 8006b1a:	415b      	adcs	r3, r3
 8006b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b22:	4641      	mov	r1, r8
 8006b24:	1854      	adds	r4, r2, r1
 8006b26:	4649      	mov	r1, r9
 8006b28:	eb43 0501 	adc.w	r5, r3, r1
 8006b2c:	f04f 0200 	mov.w	r2, #0
 8006b30:	f04f 0300 	mov.w	r3, #0
 8006b34:	00eb      	lsls	r3, r5, #3
 8006b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b3a:	00e2      	lsls	r2, r4, #3
 8006b3c:	4614      	mov	r4, r2
 8006b3e:	461d      	mov	r5, r3
 8006b40:	4643      	mov	r3, r8
 8006b42:	18e3      	adds	r3, r4, r3
 8006b44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b48:	464b      	mov	r3, r9
 8006b4a:	eb45 0303 	adc.w	r3, r5, r3
 8006b4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b62:	f04f 0200 	mov.w	r2, #0
 8006b66:	f04f 0300 	mov.w	r3, #0
 8006b6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006b6e:	4629      	mov	r1, r5
 8006b70:	008b      	lsls	r3, r1, #2
 8006b72:	4621      	mov	r1, r4
 8006b74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b78:	4621      	mov	r1, r4
 8006b7a:	008a      	lsls	r2, r1, #2
 8006b7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006b80:	f7f9 fb22 	bl	80001c8 <__aeabi_uldivmod>
 8006b84:	4602      	mov	r2, r0
 8006b86:	460b      	mov	r3, r1
 8006b88:	4b60      	ldr	r3, [pc, #384]	@ (8006d0c <UART_SetConfig+0x4e4>)
 8006b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b8e:	095b      	lsrs	r3, r3, #5
 8006b90:	011c      	lsls	r4, r3, #4
 8006b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b96:	2200      	movs	r2, #0
 8006b98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ba0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006ba4:	4642      	mov	r2, r8
 8006ba6:	464b      	mov	r3, r9
 8006ba8:	1891      	adds	r1, r2, r2
 8006baa:	61b9      	str	r1, [r7, #24]
 8006bac:	415b      	adcs	r3, r3
 8006bae:	61fb      	str	r3, [r7, #28]
 8006bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bb4:	4641      	mov	r1, r8
 8006bb6:	1851      	adds	r1, r2, r1
 8006bb8:	6139      	str	r1, [r7, #16]
 8006bba:	4649      	mov	r1, r9
 8006bbc:	414b      	adcs	r3, r1
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	f04f 0200 	mov.w	r2, #0
 8006bc4:	f04f 0300 	mov.w	r3, #0
 8006bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bcc:	4659      	mov	r1, fp
 8006bce:	00cb      	lsls	r3, r1, #3
 8006bd0:	4651      	mov	r1, sl
 8006bd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bd6:	4651      	mov	r1, sl
 8006bd8:	00ca      	lsls	r2, r1, #3
 8006bda:	4610      	mov	r0, r2
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4603      	mov	r3, r0
 8006be0:	4642      	mov	r2, r8
 8006be2:	189b      	adds	r3, r3, r2
 8006be4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006be8:	464b      	mov	r3, r9
 8006bea:	460a      	mov	r2, r1
 8006bec:	eb42 0303 	adc.w	r3, r2, r3
 8006bf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006bfe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	f04f 0300 	mov.w	r3, #0
 8006c08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	008b      	lsls	r3, r1, #2
 8006c10:	4641      	mov	r1, r8
 8006c12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c16:	4641      	mov	r1, r8
 8006c18:	008a      	lsls	r2, r1, #2
 8006c1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006c1e:	f7f9 fad3 	bl	80001c8 <__aeabi_uldivmod>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	4611      	mov	r1, r2
 8006c28:	4b38      	ldr	r3, [pc, #224]	@ (8006d0c <UART_SetConfig+0x4e4>)
 8006c2a:	fba3 2301 	umull	r2, r3, r3, r1
 8006c2e:	095b      	lsrs	r3, r3, #5
 8006c30:	2264      	movs	r2, #100	@ 0x64
 8006c32:	fb02 f303 	mul.w	r3, r2, r3
 8006c36:	1acb      	subs	r3, r1, r3
 8006c38:	011b      	lsls	r3, r3, #4
 8006c3a:	3332      	adds	r3, #50	@ 0x32
 8006c3c:	4a33      	ldr	r2, [pc, #204]	@ (8006d0c <UART_SetConfig+0x4e4>)
 8006c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c42:	095b      	lsrs	r3, r3, #5
 8006c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c48:	441c      	add	r4, r3
 8006c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c4e:	2200      	movs	r2, #0
 8006c50:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c52:	677a      	str	r2, [r7, #116]	@ 0x74
 8006c54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006c58:	4642      	mov	r2, r8
 8006c5a:	464b      	mov	r3, r9
 8006c5c:	1891      	adds	r1, r2, r2
 8006c5e:	60b9      	str	r1, [r7, #8]
 8006c60:	415b      	adcs	r3, r3
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c68:	4641      	mov	r1, r8
 8006c6a:	1851      	adds	r1, r2, r1
 8006c6c:	6039      	str	r1, [r7, #0]
 8006c6e:	4649      	mov	r1, r9
 8006c70:	414b      	adcs	r3, r1
 8006c72:	607b      	str	r3, [r7, #4]
 8006c74:	f04f 0200 	mov.w	r2, #0
 8006c78:	f04f 0300 	mov.w	r3, #0
 8006c7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c80:	4659      	mov	r1, fp
 8006c82:	00cb      	lsls	r3, r1, #3
 8006c84:	4651      	mov	r1, sl
 8006c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c8a:	4651      	mov	r1, sl
 8006c8c:	00ca      	lsls	r2, r1, #3
 8006c8e:	4610      	mov	r0, r2
 8006c90:	4619      	mov	r1, r3
 8006c92:	4603      	mov	r3, r0
 8006c94:	4642      	mov	r2, r8
 8006c96:	189b      	adds	r3, r3, r2
 8006c98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c9a:	464b      	mov	r3, r9
 8006c9c:	460a      	mov	r2, r1
 8006c9e:	eb42 0303 	adc.w	r3, r2, r3
 8006ca2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cae:	667a      	str	r2, [r7, #100]	@ 0x64
 8006cb0:	f04f 0200 	mov.w	r2, #0
 8006cb4:	f04f 0300 	mov.w	r3, #0
 8006cb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006cbc:	4649      	mov	r1, r9
 8006cbe:	008b      	lsls	r3, r1, #2
 8006cc0:	4641      	mov	r1, r8
 8006cc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cc6:	4641      	mov	r1, r8
 8006cc8:	008a      	lsls	r2, r1, #2
 8006cca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006cce:	f7f9 fa7b 	bl	80001c8 <__aeabi_uldivmod>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d0c <UART_SetConfig+0x4e4>)
 8006cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8006cdc:	095b      	lsrs	r3, r3, #5
 8006cde:	2164      	movs	r1, #100	@ 0x64
 8006ce0:	fb01 f303 	mul.w	r3, r1, r3
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	011b      	lsls	r3, r3, #4
 8006ce8:	3332      	adds	r3, #50	@ 0x32
 8006cea:	4a08      	ldr	r2, [pc, #32]	@ (8006d0c <UART_SetConfig+0x4e4>)
 8006cec:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf0:	095b      	lsrs	r3, r3, #5
 8006cf2:	f003 020f 	and.w	r2, r3, #15
 8006cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4422      	add	r2, r4
 8006cfe:	609a      	str	r2, [r3, #8]
}
 8006d00:	bf00      	nop
 8006d02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006d06:	46bd      	mov	sp, r7
 8006d08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d0c:	51eb851f 	.word	0x51eb851f

08006d10 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	6812      	ldr	r2, [r2, #0]
 8006d28:	f023 0101 	bic.w	r1, r3, #1
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	2b08      	cmp	r3, #8
 8006d38:	d102      	bne.n	8006d40 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006d3a:	2340      	movs	r3, #64	@ 0x40
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	e001      	b.n	8006d44 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006d40:	2300      	movs	r3, #0
 8006d42:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006d50:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006d56:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006d5c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006d62:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006d68:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006d6e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8006d74:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8006d7a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8006d80:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8006d86:	4313      	orrs	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8006d9e:	4b10      	ldr	r3, [pc, #64]	@ (8006de0 <FSMC_NORSRAM_Init+0xd0>)
 8006da0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006da8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006db0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	43db      	mvns	r3, r3
 8006dc0:	ea02 0103 	and.w	r1, r2, r3
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	4319      	orrs	r1, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	371c      	adds	r7, #28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	0008fb7f 	.word	0x0008fb7f

08006de4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dfa:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	021b      	lsls	r3, r3, #8
 8006e10:	431a      	orrs	r2, r3
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	041b      	lsls	r3, r3, #16
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	051b      	lsls	r3, r3, #20
 8006e22:	431a      	orrs	r2, r3
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	3b02      	subs	r3, #2
 8006e2a:	061b      	lsls	r3, r3, #24
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	3201      	adds	r2, #1
 8006e38:	4319      	orrs	r1, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
	...

08006e50 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
 8006e5c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e64:	d11d      	bne.n	8006ea2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e6e:	4b13      	ldr	r3, [pc, #76]	@ (8006ebc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006e70:	4013      	ands	r3, r2
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	6811      	ldr	r1, [r2, #0]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	6852      	ldr	r2, [r2, #4]
 8006e7a:	0112      	lsls	r2, r2, #4
 8006e7c:	4311      	orrs	r1, r2
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	6892      	ldr	r2, [r2, #8]
 8006e82:	0212      	lsls	r2, r2, #8
 8006e84:	4311      	orrs	r1, r2
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	6992      	ldr	r2, [r2, #24]
 8006e8a:	4311      	orrs	r1, r2
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	68d2      	ldr	r2, [r2, #12]
 8006e90:	0412      	lsls	r2, r2, #16
 8006e92:	430a      	orrs	r2, r1
 8006e94:	ea43 0102 	orr.w	r1, r3, r2
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006ea0:	e005      	b.n	8006eae <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8006eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	cff00000 	.word	0xcff00000

08006ec0 <memset>:
 8006ec0:	4402      	add	r2, r0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d100      	bne.n	8006eca <memset+0xa>
 8006ec8:	4770      	bx	lr
 8006eca:	f803 1b01 	strb.w	r1, [r3], #1
 8006ece:	e7f9      	b.n	8006ec4 <memset+0x4>

08006ed0 <__libc_init_array>:
 8006ed0:	b570      	push	{r4, r5, r6, lr}
 8006ed2:	4d0d      	ldr	r5, [pc, #52]	@ (8006f08 <__libc_init_array+0x38>)
 8006ed4:	4c0d      	ldr	r4, [pc, #52]	@ (8006f0c <__libc_init_array+0x3c>)
 8006ed6:	1b64      	subs	r4, r4, r5
 8006ed8:	10a4      	asrs	r4, r4, #2
 8006eda:	2600      	movs	r6, #0
 8006edc:	42a6      	cmp	r6, r4
 8006ede:	d109      	bne.n	8006ef4 <__libc_init_array+0x24>
 8006ee0:	4d0b      	ldr	r5, [pc, #44]	@ (8006f10 <__libc_init_array+0x40>)
 8006ee2:	4c0c      	ldr	r4, [pc, #48]	@ (8006f14 <__libc_init_array+0x44>)
 8006ee4:	f000 f818 	bl	8006f18 <_init>
 8006ee8:	1b64      	subs	r4, r4, r5
 8006eea:	10a4      	asrs	r4, r4, #2
 8006eec:	2600      	movs	r6, #0
 8006eee:	42a6      	cmp	r6, r4
 8006ef0:	d105      	bne.n	8006efe <__libc_init_array+0x2e>
 8006ef2:	bd70      	pop	{r4, r5, r6, pc}
 8006ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef8:	4798      	blx	r3
 8006efa:	3601      	adds	r6, #1
 8006efc:	e7ee      	b.n	8006edc <__libc_init_array+0xc>
 8006efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f02:	4798      	blx	r3
 8006f04:	3601      	adds	r6, #1
 8006f06:	e7f2      	b.n	8006eee <__libc_init_array+0x1e>
 8006f08:	08009f18 	.word	0x08009f18
 8006f0c:	08009f18 	.word	0x08009f18
 8006f10:	08009f18 	.word	0x08009f18
 8006f14:	08009f1c 	.word	0x08009f1c

08006f18 <_init>:
 8006f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1a:	bf00      	nop
 8006f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1e:	bc08      	pop	{r3}
 8006f20:	469e      	mov	lr, r3
 8006f22:	4770      	bx	lr

08006f24 <_fini>:
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	bf00      	nop
 8006f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2a:	bc08      	pop	{r3}
 8006f2c:	469e      	mov	lr, r3
 8006f2e:	4770      	bx	lr
