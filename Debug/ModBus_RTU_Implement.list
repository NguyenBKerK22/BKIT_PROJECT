
ModBus_RTU_Implement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007430  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe0  080075b8  080075b8  000175b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a598  0800a598  00020230  2**0
                  CONTENTS
  4 .ARM          00000008  0800a598  0800a598  0001a598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5a0  0800a5a0  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5a0  0800a5a0  0001a5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a5a4  0800a5a4  0001a5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000230  20000000  0800a5a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020230  2**0
                  CONTENTS
 10 .bss          000007f8  20000230  20000230  00020230  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a28  20000a28  00020230  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001636d  00000000  00000000  000202a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003daa  00000000  00000000  00036610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001448  00000000  00000000  0003a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f94  00000000  00000000  0003b808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000253ef  00000000  00000000  0003c79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001aa3d  00000000  00000000  00061b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dd8db  00000000  00000000  0007c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005330  00000000  00000000  00159ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0015f1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000230 	.word	0x20000230
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080075a0 	.word	0x080075a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000234 	.word	0x20000234
 80001c4:	080075a0 	.word	0x080075a0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b970 	b.w	8000cfc <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	460d      	mov	r5, r1
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	460f      	mov	r7, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d14a      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4694      	mov	ip, r2
 8000a48:	d965      	bls.n	8000b16 <__udivmoddi4+0xe2>
 8000a4a:	fab2 f382 	clz	r3, r2
 8000a4e:	b143      	cbz	r3, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a54:	f1c3 0220 	rsb	r2, r3, #32
 8000a58:	409f      	lsls	r7, r3
 8000a5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a5e:	4317      	orrs	r7, r2
 8000a60:	409c      	lsls	r4, r3
 8000a62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a66:	fa1f f58c 	uxth.w	r5, ip
 8000a6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a6e:	0c22      	lsrs	r2, r4, #16
 8000a70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a78:	fb01 f005 	mul.w	r0, r1, r5
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	d90a      	bls.n	8000a96 <__udivmoddi4+0x62>
 8000a80:	eb1c 0202 	adds.w	r2, ip, r2
 8000a84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a88:	f080 811c 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000a8c:	4290      	cmp	r0, r2
 8000a8e:	f240 8119 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000a92:	3902      	subs	r1, #2
 8000a94:	4462      	add	r2, ip
 8000a96:	1a12      	subs	r2, r2, r0
 8000a98:	b2a4      	uxth	r4, r4
 8000a9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aa2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aa6:	fb00 f505 	mul.w	r5, r0, r5
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	d90a      	bls.n	8000ac4 <__udivmoddi4+0x90>
 8000aae:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ab6:	f080 8107 	bcs.w	8000cc8 <__udivmoddi4+0x294>
 8000aba:	42a5      	cmp	r5, r4
 8000abc:	f240 8104 	bls.w	8000cc8 <__udivmoddi4+0x294>
 8000ac0:	4464      	add	r4, ip
 8000ac2:	3802      	subs	r0, #2
 8000ac4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ac8:	1b64      	subs	r4, r4, r5
 8000aca:	2100      	movs	r1, #0
 8000acc:	b11e      	cbz	r6, 8000ad6 <__udivmoddi4+0xa2>
 8000ace:	40dc      	lsrs	r4, r3
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0xbc>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80ed 	beq.w	8000cbe <__udivmoddi4+0x28a>
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	e9c6 0500 	strd	r0, r5, [r6]
 8000aea:	4608      	mov	r0, r1
 8000aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af0:	fab3 f183 	clz	r1, r3
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d149      	bne.n	8000b8c <__udivmoddi4+0x158>
 8000af8:	42ab      	cmp	r3, r5
 8000afa:	d302      	bcc.n	8000b02 <__udivmoddi4+0xce>
 8000afc:	4282      	cmp	r2, r0
 8000afe:	f200 80f8 	bhi.w	8000cf2 <__udivmoddi4+0x2be>
 8000b02:	1a84      	subs	r4, r0, r2
 8000b04:	eb65 0203 	sbc.w	r2, r5, r3
 8000b08:	2001      	movs	r0, #1
 8000b0a:	4617      	mov	r7, r2
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d0e2      	beq.n	8000ad6 <__udivmoddi4+0xa2>
 8000b10:	e9c6 4700 	strd	r4, r7, [r6]
 8000b14:	e7df      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000b16:	b902      	cbnz	r2, 8000b1a <__udivmoddi4+0xe6>
 8000b18:	deff      	udf	#255	; 0xff
 8000b1a:	fab2 f382 	clz	r3, r2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f040 8090 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b24:	1a8a      	subs	r2, r1, r2
 8000b26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2a:	fa1f fe8c 	uxth.w	lr, ip
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b34:	fb07 2015 	mls	r0, r7, r5, r2
 8000b38:	0c22      	lsrs	r2, r4, #16
 8000b3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b3e:	fb0e f005 	mul.w	r0, lr, r5
 8000b42:	4290      	cmp	r0, r2
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b46:	eb1c 0202 	adds.w	r2, ip, r2
 8000b4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4290      	cmp	r0, r2
 8000b52:	f200 80cb 	bhi.w	8000cec <__udivmoddi4+0x2b8>
 8000b56:	4645      	mov	r5, r8
 8000b58:	1a12      	subs	r2, r2, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b60:	fb07 2210 	mls	r2, r7, r0, r2
 8000b64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b68:	fb0e fe00 	mul.w	lr, lr, r0
 8000b6c:	45a6      	cmp	lr, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x14e>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b78:	d202      	bcs.n	8000b80 <__udivmoddi4+0x14c>
 8000b7a:	45a6      	cmp	lr, r4
 8000b7c:	f200 80bb 	bhi.w	8000cf6 <__udivmoddi4+0x2c2>
 8000b80:	4610      	mov	r0, r2
 8000b82:	eba4 040e 	sub.w	r4, r4, lr
 8000b86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b8a:	e79f      	b.n	8000acc <__udivmoddi4+0x98>
 8000b8c:	f1c1 0720 	rsb	r7, r1, #32
 8000b90:	408b      	lsls	r3, r1
 8000b92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ba2:	40fd      	lsrs	r5, r7
 8000ba4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ba8:	4323      	orrs	r3, r4
 8000baa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bae:	fa1f fe8c 	uxth.w	lr, ip
 8000bb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bb6:	0c1c      	lsrs	r4, r3, #16
 8000bb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bbc:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc0:	42a5      	cmp	r5, r4
 8000bc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bd4:	f080 8088 	bcs.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bd8:	42a5      	cmp	r5, r4
 8000bda:	f240 8085 	bls.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bde:	f1a8 0802 	sub.w	r8, r8, #2
 8000be2:	4464      	add	r4, ip
 8000be4:	1b64      	subs	r4, r4, r5
 8000be6:	b29d      	uxth	r5, r3
 8000be8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bec:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bf4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c04:	d26c      	bcs.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c06:	45a6      	cmp	lr, r4
 8000c08:	d96a      	bls.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c0a:	3b02      	subs	r3, #2
 8000c0c:	4464      	add	r4, ip
 8000c0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c12:	fba3 9502 	umull	r9, r5, r3, r2
 8000c16:	eba4 040e 	sub.w	r4, r4, lr
 8000c1a:	42ac      	cmp	r4, r5
 8000c1c:	46c8      	mov	r8, r9
 8000c1e:	46ae      	mov	lr, r5
 8000c20:	d356      	bcc.n	8000cd0 <__udivmoddi4+0x29c>
 8000c22:	d053      	beq.n	8000ccc <__udivmoddi4+0x298>
 8000c24:	b156      	cbz	r6, 8000c3c <__udivmoddi4+0x208>
 8000c26:	ebb0 0208 	subs.w	r2, r0, r8
 8000c2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c32:	40ca      	lsrs	r2, r1
 8000c34:	40cc      	lsrs	r4, r1
 8000c36:	4317      	orrs	r7, r2
 8000c38:	e9c6 7400 	strd	r7, r4, [r6]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c44:	f1c3 0120 	rsb	r1, r3, #32
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c50:	fa25 f101 	lsr.w	r1, r5, r1
 8000c54:	409d      	lsls	r5, r3
 8000c56:	432a      	orrs	r2, r5
 8000c58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c64:	fb07 1510 	mls	r5, r7, r0, r1
 8000c68:	0c11      	lsrs	r1, r2, #16
 8000c6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c72:	428d      	cmp	r5, r1
 8000c74:	fa04 f403 	lsl.w	r4, r4, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x258>
 8000c7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c82:	d22f      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c84:	428d      	cmp	r5, r1
 8000c86:	d92d      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	4461      	add	r1, ip
 8000c8c:	1b49      	subs	r1, r1, r5
 8000c8e:	b292      	uxth	r2, r2
 8000c90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c94:	fb07 1115 	mls	r1, r7, r5, r1
 8000c98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca0:	4291      	cmp	r1, r2
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x282>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cac:	d216      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000cae:	4291      	cmp	r1, r2
 8000cb0:	d914      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000cb2:	3d02      	subs	r5, #2
 8000cb4:	4462      	add	r2, ip
 8000cb6:	1a52      	subs	r2, r2, r1
 8000cb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cbc:	e738      	b.n	8000b30 <__udivmoddi4+0xfc>
 8000cbe:	4631      	mov	r1, r6
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	e708      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	e6e6      	b.n	8000a96 <__udivmoddi4+0x62>
 8000cc8:	4610      	mov	r0, r2
 8000cca:	e6fb      	b.n	8000ac4 <__udivmoddi4+0x90>
 8000ccc:	4548      	cmp	r0, r9
 8000cce:	d2a9      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000cd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	e7a3      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cdc:	4645      	mov	r5, r8
 8000cde:	e7ea      	b.n	8000cb6 <__udivmoddi4+0x282>
 8000ce0:	462b      	mov	r3, r5
 8000ce2:	e794      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce4:	4640      	mov	r0, r8
 8000ce6:	e7d1      	b.n	8000c8c <__udivmoddi4+0x258>
 8000ce8:	46d0      	mov	r8, sl
 8000cea:	e77b      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cec:	3d02      	subs	r5, #2
 8000cee:	4462      	add	r2, ip
 8000cf0:	e732      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e70a      	b.n	8000b0c <__udivmoddi4+0xd8>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	e742      	b.n	8000b82 <__udivmoddi4+0x14e>

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <_f_splitfloat_def>:
uint8_t rx_size;
uint8_t tx_size; // for dummy

/*PRIVATE FUNCTION START DEFINE-----------------------------------------------------------------------------------------------------------*/
static void _f_splitfloat_def(float _input, uint8_t *data)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d0a:	6038      	str	r0, [r7, #0]
	data[0] = *(((uint8_t*)&_input) + 0);
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	781a      	ldrb	r2, [r3, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	701a      	strb	r2, [r3, #0]
	data[1] = *(((uint8_t*)&_input) + 1);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	797a      	ldrb	r2, [r7, #5]
 8000d1a:	701a      	strb	r2, [r3, #0]
	data[2] = *(((uint8_t*)&_input) + 2);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	3302      	adds	r3, #2
 8000d20:	79ba      	ldrb	r2, [r7, #6]
 8000d22:	701a      	strb	r2, [r3, #0]
	data[3] = *(((uint8_t*)&_input) + 3);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	3303      	adds	r3, #3
 8000d28:	79fa      	ldrb	r2, [r7, #7]
 8000d2a:	701a      	strb	r2, [r3, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <_f_splituint16_def>:

static void _f_splituint16_def(uint16_t input, uint8_t *higherByte, uint8_t *lowerByte)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
 8000d44:	81fb      	strh	r3, [r7, #14]
    *higherByte = (input >> 8) & 0xFF; // Lấy 8 bit cao
 8000d46:	89fb      	ldrh	r3, [r7, #14]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	701a      	strb	r2, [r3, #0]
    *lowerByte = input & 0xFF;        // Lấy 8 bit thấp
 8000d52:	89fb      	ldrh	r3, [r7, #14]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	701a      	strb	r2, [r3, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <_f_slave_read_multiple_holding_register_handler_def>:

static void _f_slave_read_multiple_holding_register_handler_def(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
	uint16_t startReg = (uint16_t)(rx_buf[2]) << 8 | (uint16_t)(rx_buf[3]);
 8000d6e:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <_f_slave_read_multiple_holding_register_handler_def+0x90>)
 8000d70:	789b      	ldrb	r3, [r3, #2]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <_f_slave_read_multiple_holding_register_handler_def+0x90>)
 8000d78:	78db      	ldrb	r3, [r3, #3]
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	807b      	strh	r3, [r7, #2]
	uint16_t numberOfReg = (uint16_t)(rx_buf[4]) << 8 | (uint16_t)(rx_buf[5]);
 8000d82:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <_f_slave_read_multiple_holding_register_handler_def+0x90>)
 8000d84:	791b      	ldrb	r3, [r3, #4]
 8000d86:	021b      	lsls	r3, r3, #8
 8000d88:	b21a      	sxth	r2, r3
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <_f_slave_read_multiple_holding_register_handler_def+0x90>)
 8000d8c:	795b      	ldrb	r3, [r3, #5]
 8000d8e:	b21b      	sxth	r3, r3
 8000d90:	4313      	orrs	r3, r2
 8000d92:	b21b      	sxth	r3, r3
 8000d94:	803b      	strh	r3, [r7, #0]
	tx_buf[0] = _address_def;
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <_f_slave_read_multiple_holding_register_handler_def+0x94>)
 8000d98:	781a      	ldrb	r2, [r3, #0]
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <_f_slave_read_multiple_holding_register_handler_def+0x98>)
 8000d9c:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = rx_buf[1];
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <_f_slave_read_multiple_holding_register_handler_def+0x90>)
 8000da0:	785a      	ldrb	r2, [r3, #1]
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <_f_slave_read_multiple_holding_register_handler_def+0x98>)
 8000da4:	705a      	strb	r2, [r3, #1]
	tx_buf[2] = numberOfReg * 2;
 8000da6:	883b      	ldrh	r3, [r7, #0]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <_f_slave_read_multiple_holding_register_handler_def+0x98>)
 8000db0:	709a      	strb	r2, [r3, #2]
	int i;
	for(i = 0; i < numberOfReg * 2; i++){
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	e009      	b.n	8000dcc <_f_slave_read_multiple_holding_register_handler_def+0x64>
		tx_buf[i + 3] = _register_def[startReg];
 8000db8:	887a      	ldrh	r2, [r7, #2]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3303      	adds	r3, #3
 8000dbe:	4911      	ldr	r1, [pc, #68]	; (8000e04 <_f_slave_read_multiple_holding_register_handler_def+0x9c>)
 8000dc0:	5c89      	ldrb	r1, [r1, r2]
 8000dc2:	4a0f      	ldr	r2, [pc, #60]	; (8000e00 <_f_slave_read_multiple_holding_register_handler_def+0x98>)
 8000dc4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < numberOfReg * 2; i++){
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	883b      	ldrh	r3, [r7, #0]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	dbf0      	blt.n	8000db8 <_f_slave_read_multiple_holding_register_handler_def+0x50>
	}
	tx_size = i + 3;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	3303      	adds	r3, #3
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <_f_slave_read_multiple_holding_register_handler_def+0xa0>)
 8000de0:	701a      	strb	r2, [r3, #0]
	f_rs485_send_cmd(tx_buf, tx_size);
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <_f_slave_read_multiple_holding_register_handler_def+0xa0>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <_f_slave_read_multiple_holding_register_handler_def+0x98>)
 8000dea:	f001 fba1 	bl	8002530 <f_rs485_send_cmd>

	//	Modbus_Transmit_Slave(&slave, hDev->Address, slave.Rx_buf[1], &hDev->Register[startReg], numberOfReg * 2, 100);

	return;
 8000dee:	bf00      	nop

}
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000364 	.word	0x20000364
 8000dfc:	20000260 	.word	0x20000260
 8000e00:	20000264 	.word	0x20000264
 8000e04:	2000024c 	.word	0x2000024c
 8000e08:	20000466 	.word	0x20000466

08000e0c <_f_slave_read_holding_register_handler_def>:

static void _f_slave_read_holding_register_handler_def(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
	return;
 8000e10:	bf00      	nop
}
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <_f_slave_write_holding_register_handler_def>:

static void _f_slave_write_holding_register_handler_def(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	f_rs485_send_cmd(rx_buf, rx_size);
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <_f_slave_write_holding_register_handler_def+0x24>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	4807      	ldr	r0, [pc, #28]	; (8000e44 <_f_slave_write_holding_register_handler_def+0x28>)
 8000e28:	f001 fb82 	bl	8002530 <f_rs485_send_cmd>
	_register_def[LED_REGISTER_ADDRESS] = rx_buf[4];
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <_f_slave_write_holding_register_handler_def+0x28>)
 8000e2e:	791a      	ldrb	r2, [r3, #4]
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <_f_slave_write_holding_register_handler_def+0x2c>)
 8000e32:	709a      	strb	r2, [r3, #2]
	_register_def[LED_REGISTER_ADDRESS + 1] = rx_buf[5];
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <_f_slave_write_holding_register_handler_def+0x28>)
 8000e36:	795a      	ldrb	r2, [r3, #5]
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <_f_slave_write_holding_register_handler_def+0x2c>)
 8000e3a:	70da      	strb	r2, [r3, #3]
//	uint8_t CoilState = _register_def[LED_REGISTER_ADDRESS + 1];
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000465 	.word	0x20000465
 8000e44:	20000364 	.word	0x20000364
 8000e48:	2000024c 	.word	0x2000024c

08000e4c <_f_slave_commandparser_handler_def>:

static void _f_slave_commandparser_handler_def(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
	switch(1){
	case SIGNAL_READ_COIL:
	{
		break;
 8000e50:	bf00      	nop
		break;
	}
	default:
		break;
	}
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <_f_read_data_def>:

static void _f_read_data_def(void){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
	float tempCur = sensor_get_current();
 8000e62:	f001 fd71 	bl	8002948 <sensor_get_current>
 8000e66:	ed87 0a03 	vstr	s0, [r7, #12]
	uint16_t tempLt = sensor_get_light();
 8000e6a:	f001 fd19 	bl	80028a0 <sensor_get_light>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	817b      	strh	r3, [r7, #10]
	uint16_t tempPt =sensor_get_potentiometer();
 8000e72:	f001 fd21 	bl	80028b8 <sensor_get_potentiometer>
 8000e76:	4603      	mov	r3, r0
 8000e78:	813b      	strh	r3, [r7, #8]
	float tempT = sensor_get_temperature();
 8000e7a:	f001 fdc1 	bl	8002a00 <sensor_get_temperature>
 8000e7e:	ed87 0a01 	vstr	s0, [r7, #4]
	float tempVol = sensor_get_voltage();
 8000e82:	f001 fd25 	bl	80028d0 <sensor_get_voltage>
 8000e86:	ed87 0a00 	vstr	s0, [r7]

	// Current
	_f_splitfloat_def(tempCur, &_register_def[CURRENT_REGISTER_ADDRESS]);
 8000e8a:	480f      	ldr	r0, [pc, #60]	; (8000ec8 <_f_read_data_def+0x6c>)
 8000e8c:	ed97 0a03 	vldr	s0, [r7, #12]
 8000e90:	f7ff ff36 	bl	8000d00 <_f_splitfloat_def>
	// Temperature
	_f_splitfloat_def(tempT, &_register_def[TEMPERATURE_REGISTER_ADDRESS]);
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <_f_read_data_def+0x70>)
 8000e96:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e9a:	f7ff ff31 	bl	8000d00 <_f_splitfloat_def>
	// Voltage
	_f_splitfloat_def(tempVol, &_register_def[VOLTAGE_REGISTER_ADDRESS]);
 8000e9e:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <_f_read_data_def+0x74>)
 8000ea0:	ed97 0a00 	vldr	s0, [r7]
 8000ea4:	f7ff ff2c 	bl	8000d00 <_f_splitfloat_def>
	// Light
	_f_splituint16_def(tempLt, &_register_def[LIGHT_REGISTER_ADDRESS], &_register_def[LIGHT_REGISTER_ADDRESS + 1]);
 8000ea8:	897b      	ldrh	r3, [r7, #10]
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <_f_read_data_def+0x78>)
 8000eac:	490a      	ldr	r1, [pc, #40]	; (8000ed8 <_f_read_data_def+0x7c>)
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ff42 	bl	8000d38 <_f_splituint16_def>
	// Potentiometer
	_f_splituint16_def(tempPt, &_register_def[POTENTIOMETER_REGISTER_ADDRESS], &_register_def[POTENTIOMETER_REGISTER_ADDRESS + 1]);
 8000eb4:	893b      	ldrh	r3, [r7, #8]
 8000eb6:	4a09      	ldr	r2, [pc, #36]	; (8000edc <_f_read_data_def+0x80>)
 8000eb8:	4909      	ldr	r1, [pc, #36]	; (8000ee0 <_f_read_data_def+0x84>)
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff3c 	bl	8000d38 <_f_splituint16_def>
}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000256 	.word	0x20000256
 8000ecc:	20000252 	.word	0x20000252
 8000ed0:	2000025a 	.word	0x2000025a
 8000ed4:	20000251 	.word	0x20000251
 8000ed8:	20000250 	.word	0x20000250
 8000edc:	2000024d 	.word	0x2000024d
 8000ee0:	2000024c 	.word	0x2000024c

08000ee4 <_f_is_flag_def>:

static uint8_t _f_is_flag_def(void){
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
	if(flag_rx){
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <_f_is_flag_def+0x24>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d004      	beq.n	8000efa <_f_is_flag_def+0x16>
		flag_rx = 0;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <_f_is_flag_def+0x24>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
		return 1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e000      	b.n	8000efc <_f_is_flag_def+0x18>
	}
	return 0;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000464 	.word	0x20000464

08000f0c <f_slave_init_def>:
/*PRIVATE FUNCTION END DEFINE-----------------------------------------------------------------------------------------------------------*/


/*PUBLIC FUNCTION START DEFINE-----------------------------------------------------------------------------------------------------------*/
void f_slave_init_def(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	_slave_signal_def = 0;
 8000f10:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <f_slave_init_def+0x30>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
	_slave_state_def = STATE_IDLE;
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <f_slave_init_def+0x34>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
	_address_def = SLAVE_ADDRESS;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <f_slave_init_def+0x38>)
 8000f1e:	2202      	movs	r2, #2
 8000f20:	701a      	strb	r2, [r3, #0]
	memset(_register_def, 0, sizeof(_register_def));
 8000f22:	2214      	movs	r2, #20
 8000f24:	2100      	movs	r1, #0
 8000f26:	4808      	ldr	r0, [pc, #32]	; (8000f48 <f_slave_init_def+0x3c>)
 8000f28:	f006 fb0e 	bl	8007548 <memset>
	f_rs485_init(&huart3, rx_buf, &flag_rx, &rx_size);
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <f_slave_init_def+0x40>)
 8000f2e:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <f_slave_init_def+0x44>)
 8000f30:	4908      	ldr	r1, [pc, #32]	; (8000f54 <f_slave_init_def+0x48>)
 8000f32:	4809      	ldr	r0, [pc, #36]	; (8000f58 <f_slave_init_def+0x4c>)
 8000f34:	f001 fada 	bl	80024ec <f_rs485_init>
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000261 	.word	0x20000261
 8000f40:	20000262 	.word	0x20000262
 8000f44:	20000260 	.word	0x20000260
 8000f48:	2000024c 	.word	0x2000024c
 8000f4c:	20000465 	.word	0x20000465
 8000f50:	20000464 	.word	0x20000464
 8000f54:	20000364 	.word	0x20000364
 8000f58:	200009dc 	.word	0x200009dc

08000f5c <f_slave_behavior_def>:

void f_slave_behavior_def(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	switch(_slave_state_def)
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <f_slave_behavior_def+0x80>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b05      	cmp	r3, #5
 8000f66:	d833      	bhi.n	8000fd0 <f_slave_behavior_def+0x74>
 8000f68:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <f_slave_behavior_def+0x14>)
 8000f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6e:	bf00      	nop
 8000f70:	08000f89 	.word	0x08000f89
 8000f74:	08000f91 	.word	0x08000f91
 8000f78:	08000fa7 	.word	0x08000fa7
 8000f7c:	08000fad 	.word	0x08000fad
 8000f80:	08000fb9 	.word	0x08000fb9
 8000f84:	08000fc5 	.word	0x08000fc5
	{
	case STATE_IDLE:
	{
		if(1){
			_slave_state_def = STATE_WAITTING_FOR_CMD;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <f_slave_behavior_def+0x80>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000f8e:	e022      	b.n	8000fd6 <f_slave_behavior_def+0x7a>
	}
	case STATE_WAITTING_FOR_CMD:
	{
		_f_read_data_def();
 8000f90:	f7ff ff64 	bl	8000e5c <_f_read_data_def>
		if(_f_is_flag_def()){
 8000f94:	f7ff ffa6 	bl	8000ee4 <_f_is_flag_def>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d01a      	beq.n	8000fd4 <f_slave_behavior_def+0x78>
			_slave_state_def = STATE_COMMAND_PARSER;
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <f_slave_behavior_def+0x80>)
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000fa4:	e016      	b.n	8000fd4 <f_slave_behavior_def+0x78>
	}
	case STATE_COMMAND_PARSER:
	{
		_f_slave_commandparser_handler_def();
 8000fa6:	f7ff ff51 	bl	8000e4c <_f_slave_commandparser_handler_def>
		break;
 8000faa:	e014      	b.n	8000fd6 <f_slave_behavior_def+0x7a>
	}
	case STATE_READ_MULTIPLE_HOLDING_REGISTER_HANDLER:
	{
		_f_slave_read_multiple_holding_register_handler_def();
 8000fac:	f7ff fedc 	bl	8000d68 <_f_slave_read_multiple_holding_register_handler_def>
		if(1){
			_slave_state_def = STATE_IDLE;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <f_slave_behavior_def+0x80>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000fb6:	e00e      	b.n	8000fd6 <f_slave_behavior_def+0x7a>
	}
	case STATE_READ_HOLDING_REGISTER_HANDLER:
	{
		_f_slave_read_holding_register_handler_def();
 8000fb8:	f7ff ff28 	bl	8000e0c <_f_slave_read_holding_register_handler_def>
		if(1){
			_slave_state_def = STATE_IDLE;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <f_slave_behavior_def+0x80>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000fc2:	e008      	b.n	8000fd6 <f_slave_behavior_def+0x7a>
	}
	case STATE_WRITE_HOLDING_REGISTER_HANDLER:
	{
		_f_slave_write_holding_register_handler_def();
 8000fc4:	f7ff ff2a 	bl	8000e1c <_f_slave_write_holding_register_handler_def>
		if(1){
			_slave_state_def = STATE_IDLE;
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <f_slave_behavior_def+0x80>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000fce:	e002      	b.n	8000fd6 <f_slave_behavior_def+0x7a>
	}
	default:
		break;
 8000fd0:	bf00      	nop
 8000fd2:	e000      	b.n	8000fd6 <f_slave_behavior_def+0x7a>
		break;
 8000fd4:	bf00      	nop
	}
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000262 	.word	0x20000262

08000fe0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ff2:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <MX_ADC1_Init+0xf8>)
 8000ff4:	4a39      	ldr	r2, [pc, #228]	; (80010dc <MX_ADC1_Init+0xfc>)
 8000ff6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ff8:	4b37      	ldr	r3, [pc, #220]	; (80010d8 <MX_ADC1_Init+0xf8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ffe:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <MX_ADC1_Init+0xf8>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <MX_ADC1_Init+0xf8>)
 8001006:	2201      	movs	r2, #1
 8001008:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800100a:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <MX_ADC1_Init+0xf8>)
 800100c:	2200      	movs	r2, #0
 800100e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001010:	4b31      	ldr	r3, [pc, #196]	; (80010d8 <MX_ADC1_Init+0xf8>)
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <MX_ADC1_Init+0xf8>)
 800101a:	2200      	movs	r2, #0
 800101c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <MX_ADC1_Init+0xf8>)
 8001020:	4a2f      	ldr	r2, [pc, #188]	; (80010e0 <MX_ADC1_Init+0x100>)
 8001022:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001024:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <MX_ADC1_Init+0xf8>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800102a:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <MX_ADC1_Init+0xf8>)
 800102c:	2205      	movs	r2, #5
 800102e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001030:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <MX_ADC1_Init+0xf8>)
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <MX_ADC1_Init+0xf8>)
 800103a:	2201      	movs	r2, #1
 800103c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800103e:	4826      	ldr	r0, [pc, #152]	; (80010d8 <MX_ADC1_Init+0xf8>)
 8001040:	f002 f8ca 	bl	80031d8 <HAL_ADC_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800104a:	f001 f9ed 	bl	8002428 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800104e:	2308      	movs	r3, #8
 8001050:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001052:	2301      	movs	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001056:	2301      	movs	r3, #1
 8001058:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	481e      	ldr	r0, [pc, #120]	; (80010d8 <MX_ADC1_Init+0xf8>)
 8001060:	f002 fa2c 	bl	80034bc <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800106a:	f001 f9dd 	bl	8002428 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 800106e:	2302      	movs	r3, #2
 8001070:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	4818      	ldr	r0, [pc, #96]	; (80010d8 <MX_ADC1_Init+0xf8>)
 8001078:	f002 fa20 	bl	80034bc <HAL_ADC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001082:	f001 f9d1 	bl	8002428 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8001086:	2303      	movs	r3, #3
 8001088:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108a:	463b      	mov	r3, r7
 800108c:	4619      	mov	r1, r3
 800108e:	4812      	ldr	r0, [pc, #72]	; (80010d8 <MX_ADC1_Init+0xf8>)
 8001090:	f002 fa14 	bl	80034bc <HAL_ADC_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800109a:	f001 f9c5 	bl	8002428 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 800109e:	2304      	movs	r3, #4
 80010a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	480c      	ldr	r0, [pc, #48]	; (80010d8 <MX_ADC1_Init+0xf8>)
 80010a8:	f002 fa08 	bl	80034bc <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80010b2:	f001 f9b9 	bl	8002428 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 80010b6:	2305      	movs	r3, #5
 80010b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ba:	463b      	mov	r3, r7
 80010bc:	4619      	mov	r1, r3
 80010be:	4806      	ldr	r0, [pc, #24]	; (80010d8 <MX_ADC1_Init+0xf8>)
 80010c0:	f002 f9fc 	bl	80034bc <HAL_ADC_ConfigChannel>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80010ca:	f001 f9ad 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000468 	.word	0x20000468
 80010dc:	40012000 	.word	0x40012000
 80010e0:	0f000001 	.word	0x0f000001

080010e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a3c      	ldr	r2, [pc, #240]	; (80011f4 <HAL_ADC_MspInit+0x110>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d171      	bne.n	80011ea <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b3b      	ldr	r3, [pc, #236]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a3a      	ldr	r2, [pc, #232]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 8001110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b34      	ldr	r3, [pc, #208]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a33      	ldr	r2, [pc, #204]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b31      	ldr	r3, [pc, #196]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a2c      	ldr	r2, [pc, #176]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800115a:	2307      	movs	r3, #7
 800115c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800115e:	2303      	movs	r3, #3
 8001160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	4823      	ldr	r0, [pc, #140]	; (80011fc <HAL_ADC_MspInit+0x118>)
 800116e:	f003 f959 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001172:	2303      	movs	r3, #3
 8001174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001176:	2303      	movs	r3, #3
 8001178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	481e      	ldr	r0, [pc, #120]	; (8001200 <HAL_ADC_MspInit+0x11c>)
 8001186:	f003 f94d 	bl	8004424 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800118a:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <HAL_ADC_MspInit+0x120>)
 800118c:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <HAL_ADC_MspInit+0x124>)
 800118e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <HAL_ADC_MspInit+0x120>)
 8001192:	2200      	movs	r2, #0
 8001194:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_ADC_MspInit+0x120>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_ADC_MspInit+0x120>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_ADC_MspInit+0x120>)
 80011a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_ADC_MspInit+0x120>)
 80011ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <HAL_ADC_MspInit+0x120>)
 80011b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_ADC_MspInit+0x120>)
 80011bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_ADC_MspInit+0x120>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_ADC_MspInit+0x120>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011ce:	480d      	ldr	r0, [pc, #52]	; (8001204 <HAL_ADC_MspInit+0x120>)
 80011d0:	f002 fd26 	bl	8003c20 <HAL_DMA_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80011da:	f001 f925 	bl	8002428 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a08      	ldr	r2, [pc, #32]	; (8001204 <HAL_ADC_MspInit+0x120>)
 80011e2:	639a      	str	r2, [r3, #56]	; 0x38
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_ADC_MspInit+0x120>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ea:	bf00      	nop
 80011ec:	3728      	adds	r7, #40	; 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40012000 	.word	0x40012000
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020800 	.word	0x40020800
 8001200:	40020400 	.word	0x40020400
 8001204:	200004b0 	.word	0x200004b0
 8001208:	40026410 	.word	0x40026410

0800120c <button_scan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void button_scan() {
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
	// Shift button input
	for (int i = 0; i < 16; i++)
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	e012      	b.n	800123e <button_scan+0x32>
	{
		button_count2[i] = button_count1[i];
 8001218:	4a68      	ldr	r2, [pc, #416]	; (80013bc <button_scan+0x1b0>)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001220:	4a67      	ldr	r2, [pc, #412]	; (80013c0 <button_scan+0x1b4>)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		button_count1[i] = button_count[i];
 8001228:	4a66      	ldr	r2, [pc, #408]	; (80013c4 <button_scan+0x1b8>)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001230:	4a62      	ldr	r2, [pc, #392]	; (80013bc <button_scan+0x1b0>)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 16; i++)
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	3301      	adds	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	dde9      	ble.n	8001218 <button_scan+0xc>
	}

	// Get new key input to button_count
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	2108      	movs	r1, #8
 8001248:	485f      	ldr	r0, [pc, #380]	; (80013c8 <button_scan+0x1bc>)
 800124a:	f003 fa87 	bl	800475c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800124e:	2201      	movs	r2, #1
 8001250:	2108      	movs	r1, #8
 8001252:	485d      	ldr	r0, [pc, #372]	; (80013c8 <button_scan+0x1bc>)
 8001254:	f003 fa82 	bl	800475c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 8001258:	230a      	movs	r3, #10
 800125a:	2202      	movs	r2, #2
 800125c:	495b      	ldr	r1, [pc, #364]	; (80013cc <button_scan+0x1c0>)
 800125e:	485c      	ldr	r0, [pc, #368]	; (80013d0 <button_scan+0x1c4>)
 8001260:	f003 ff77 	bl	8005152 <HAL_SPI_Receive>

	int button_index = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
	uint16_t mask = 0x8000;
 8001268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800126c:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++) {
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	e03a      	b.n	80012ea <button_scan+0xde>
		if (i >= 0 && i <= 3) {
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db06      	blt.n	8001288 <button_scan+0x7c>
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	2b03      	cmp	r3, #3
 800127e:	dc03      	bgt.n	8001288 <button_scan+0x7c>
			button_index = i + 4;
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	3304      	adds	r3, #4
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	e018      	b.n	80012ba <button_scan+0xae>
		} else if (i >= 4 && i <= 7) {
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	2b03      	cmp	r3, #3
 800128c:	dd07      	ble.n	800129e <button_scan+0x92>
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	2b07      	cmp	r3, #7
 8001292:	dc04      	bgt.n	800129e <button_scan+0x92>
			button_index = 7 - i;
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	e00d      	b.n	80012ba <button_scan+0xae>
		} else if (i >= 8 && i <= 11) {
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	2b07      	cmp	r3, #7
 80012a2:	dd06      	ble.n	80012b2 <button_scan+0xa6>
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b0b      	cmp	r3, #11
 80012a8:	dc03      	bgt.n	80012b2 <button_scan+0xa6>
			button_index = i + 4;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	3304      	adds	r3, #4
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	e003      	b.n	80012ba <button_scan+0xae>
		} else {
			button_index = 23 - i;
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	f1c3 0317 	rsb	r3, r3, #23
 80012b8:	613b      	str	r3, [r7, #16]
		}
		if (button_spi_buffer & mask)
 80012ba:	4b44      	ldr	r3, [pc, #272]	; (80013cc <button_scan+0x1c0>)
 80012bc:	881a      	ldrh	r2, [r3, #0]
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	4013      	ands	r3, r2
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <button_scan+0xc8>
			button_count[button_index] = 0;
 80012c8:	4a3e      	ldr	r2, [pc, #248]	; (80013c4 <button_scan+0x1b8>)
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	2100      	movs	r1, #0
 80012ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80012d2:	e004      	b.n	80012de <button_scan+0xd2>
		else
			button_count[button_index] = 1;
 80012d4:	4a3b      	ldr	r2, [pc, #236]	; (80013c4 <button_scan+0x1b8>)
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	2101      	movs	r1, #1
 80012da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 80012de:	89fb      	ldrh	r3, [r7, #14]
 80012e0:	085b      	lsrs	r3, r3, #1
 80012e2:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++) {
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	3301      	adds	r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	ddc1      	ble.n	8001274 <button_scan+0x68>
	}

	for (int i = 0; i < 16; i++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	e059      	b.n	80013aa <button_scan+0x19e>
	{
		if ((button_count[i] == button_count1[i]) && (button_count1[i] == button_count2[i]))
 80012f6:	4a33      	ldr	r2, [pc, #204]	; (80013c4 <button_scan+0x1b8>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012fe:	492f      	ldr	r1, [pc, #188]	; (80013bc <button_scan+0x1b0>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001306:	429a      	cmp	r2, r3
 8001308:	d14c      	bne.n	80013a4 <button_scan+0x198>
 800130a:	4a2c      	ldr	r2, [pc, #176]	; (80013bc <button_scan+0x1b0>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001312:	492b      	ldr	r1, [pc, #172]	; (80013c0 <button_scan+0x1b4>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800131a:	429a      	cmp	r2, r3
 800131c:	d142      	bne.n	80013a4 <button_scan+0x198>
		{
			if (button_count2[i] != button_count3[i])
 800131e:	4a28      	ldr	r2, [pc, #160]	; (80013c0 <button_scan+0x1b4>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001326:	492b      	ldr	r1, [pc, #172]	; (80013d4 <button_scan+0x1c8>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800132e:	429a      	cmp	r2, r3
 8001330:	d018      	beq.n	8001364 <button_scan+0x158>
			{
				button_count3[i] = button_count2[i];
 8001332:	4a23      	ldr	r2, [pc, #140]	; (80013c0 <button_scan+0x1b4>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800133a:	4a26      	ldr	r2, [pc, #152]	; (80013d4 <button_scan+0x1c8>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				if (button_count3[i] == 1) // PRESSED
 8001342:	4a24      	ldr	r2, [pc, #144]	; (80013d4 <button_scan+0x1c8>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d12a      	bne.n	80013a4 <button_scan+0x198>
				{
					timeOutForPress[i] = TIME_OUT_FOR_LONG_PRESS / TI_BUTTON_SCAN_TIME;
 800134e:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <button_scan+0x1cc>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2119      	movs	r1, #25
 8001354:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					isPressed[i] = 1;
 8001358:	4a20      	ldr	r2, [pc, #128]	; (80013dc <button_scan+0x1d0>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2101      	movs	r1, #1
 800135e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001362:	e01f      	b.n	80013a4 <button_scan+0x198>
				}
			}
			else
			{
				timeOutForPress[i]--;
 8001364:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <button_scan+0x1cc>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800136c:	3b01      	subs	r3, #1
 800136e:	b299      	uxth	r1, r3
 8001370:	4a19      	ldr	r2, [pc, #100]	; (80013d8 <button_scan+0x1cc>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if (timeOutForPress[i] <= 0)
 8001378:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <button_scan+0x1cc>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10f      	bne.n	80013a4 <button_scan+0x198>
				{
					timeOutForPress[i] = TIME_OUT_FOR_LONG_PRESS / TI_BUTTON_SCAN_TIME;
 8001384:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <button_scan+0x1cc>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2119      	movs	r1, #25
 800138a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (button_count3[i] == 1) // PRESSED
 800138e:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <button_scan+0x1c8>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d104      	bne.n	80013a4 <button_scan+0x198>
					{
						isLongPressed[i] = 1;
 800139a:	4a11      	ldr	r2, [pc, #68]	; (80013e0 <button_scan+0x1d4>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2101      	movs	r1, #1
 80013a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 16; i++)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3301      	adds	r3, #1
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	dda2      	ble.n	80012f6 <button_scan+0xea>
					}
				}
			}
		}
	}
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000590 	.word	0x20000590
 80013c0:	20000570 	.word	0x20000570
 80013c4:	200005b0 	.word	0x200005b0
 80013c8:	40020c00 	.word	0x40020c00
 80013cc:	200005d0 	.word	0x200005d0
 80013d0:	2000085c 	.word	0x2000085c
 80013d4:	20000550 	.word	0x20000550
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000510 	.word	0x20000510
 80013e0:	20000530 	.word	0x20000530

080013e4 <crc16>:
    0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641,
    0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040
};

uint16_t crc16(const uint8_t *data, uint16_t num_bytes)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]

    uint16_t crc = 0xFFFF;
 80013f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013f4:	82fb      	strh	r3, [r7, #22]
    const uint8_t *ptr = data;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	613b      	str	r3, [r7, #16]

    if (ptr != NULL)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d018      	beq.n	8001432 <crc16+0x4e>
    {
        for (uint16_t i = 0; i < num_bytes; i++)
 8001400:	2300      	movs	r3, #0
 8001402:	81fb      	strh	r3, [r7, #14]
 8001404:	e011      	b.n	800142a <crc16+0x46>
        {
            crc = (crc >> 8) ^ crc16_lookup_table[(crc ^ (uint16_t)*ptr++) & 0x00FF];
 8001406:	8afb      	ldrh	r3, [r7, #22]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	b29a      	uxth	r2, r3
 800140c:	8af9      	ldrh	r1, [r7, #22]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1c58      	adds	r0, r3, #1
 8001412:	6138      	str	r0, [r7, #16]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	404b      	eors	r3, r1
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4909      	ldr	r1, [pc, #36]	; (8001440 <crc16+0x5c>)
 800141c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001420:	4053      	eors	r3, r2
 8001422:	82fb      	strh	r3, [r7, #22]
        for (uint16_t i = 0; i < num_bytes; i++)
 8001424:	89fb      	ldrh	r3, [r7, #14]
 8001426:	3301      	adds	r3, #1
 8001428:	81fb      	strh	r3, [r7, #14]
 800142a:	89fa      	ldrh	r2, [r7, #14]
 800142c:	887b      	ldrh	r3, [r7, #2]
 800142e:	429a      	cmp	r2, r3
 8001430:	d3e9      	bcc.n	8001406 <crc16+0x22>
        }
    }

    return crc;
 8001432:	8afb      	ldrh	r3, [r7, #22]
}
 8001434:	4618      	mov	r0, r3
 8001436:	371c      	adds	r7, #28
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	20000020 	.word	0x20000020

08001444 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_DMA_Init+0x3c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <MX_DMA_Init+0x3c>)
 8001454:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_DMA_Init+0x3c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	2038      	movs	r0, #56	; 0x38
 800146c:	f002 fba1 	bl	8003bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001470:	2038      	movs	r0, #56	; 0x38
 8001472:	f002 fbba 	bl	8003bea <HAL_NVIC_EnableIRQ>

}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08e      	sub	sp, #56	; 0x38
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800149e:	463b      	mov	r3, r7
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
 80014ac:	615a      	str	r2, [r3, #20]
 80014ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80014b0:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <MX_FSMC_Init+0xec>)
 80014b2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80014b6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80014b8:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <MX_FSMC_Init+0xec>)
 80014ba:	4a2e      	ldr	r2, [pc, #184]	; (8001574 <MX_FSMC_Init+0xf0>)
 80014bc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80014be:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <MX_FSMC_Init+0xec>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80014c4:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <MX_FSMC_Init+0xec>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80014ca:	4b29      	ldr	r3, [pc, #164]	; (8001570 <MX_FSMC_Init+0xec>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <MX_FSMC_Init+0xec>)
 80014d2:	2210      	movs	r2, #16
 80014d4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <MX_FSMC_Init+0xec>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <MX_FSMC_Init+0xec>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80014e2:	4b23      	ldr	r3, [pc, #140]	; (8001570 <MX_FSMC_Init+0xec>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80014e8:	4b21      	ldr	r3, [pc, #132]	; (8001570 <MX_FSMC_Init+0xec>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80014ee:	4b20      	ldr	r3, [pc, #128]	; (8001570 <MX_FSMC_Init+0xec>)
 80014f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <MX_FSMC_Init+0xec>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80014fc:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <MX_FSMC_Init+0xec>)
 80014fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001502:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <MX_FSMC_Init+0xec>)
 8001506:	2200      	movs	r2, #0
 8001508:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <MX_FSMC_Init+0xec>)
 800150c:	2200      	movs	r2, #0
 800150e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <MX_FSMC_Init+0xec>)
 8001512:	2200      	movs	r2, #0
 8001514:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001516:	230f      	movs	r3, #15
 8001518:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800151a:	230f      	movs	r3, #15
 800151c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800151e:	233c      	movs	r3, #60	; 0x3c
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001526:	2310      	movs	r3, #16
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800152a:	2311      	movs	r3, #17
 800152c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800152e:	2300      	movs	r3, #0
 8001530:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001532:	2308      	movs	r3, #8
 8001534:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001536:	230f      	movs	r3, #15
 8001538:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800153a:	2309      	movs	r3, #9
 800153c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001542:	2310      	movs	r3, #16
 8001544:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001546:	2311      	movs	r3, #17
 8001548:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800154e:	463a      	mov	r2, r7
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	4806      	ldr	r0, [pc, #24]	; (8001570 <MX_FSMC_Init+0xec>)
 8001558:	f004 fa00 	bl	800595c <HAL_SRAM_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001562:	f000 ff61 	bl	8002428 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001566:	bf00      	nop
 8001568:	3738      	adds	r7, #56	; 0x38
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200005d4 	.word	0x200005d4
 8001574:	a0000104 	.word	0xa0000104

08001578 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800158c:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <HAL_FSMC_MspInit+0x88>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d131      	bne.n	80015f8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_FSMC_MspInit+0x88>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_FSMC_MspInit+0x8c>)
 80015a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a2:	4a18      	ldr	r2, [pc, #96]	; (8001604 <HAL_FSMC_MspInit+0x8c>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6393      	str	r3, [r2, #56]	; 0x38
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <HAL_FSMC_MspInit+0x8c>)
 80015ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80015b6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80015ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015c8:	230c      	movs	r3, #12
 80015ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	4619      	mov	r1, r3
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <HAL_FSMC_MspInit+0x90>)
 80015d2:	f002 ff27 	bl	8004424 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80015d6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80015da:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015e8:	230c      	movs	r3, #12
 80015ea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	4619      	mov	r1, r3
 80015f0:	4806      	ldr	r0, [pc, #24]	; (800160c <HAL_FSMC_MspInit+0x94>)
 80015f2:	f002 ff17 	bl	8004424 <HAL_GPIO_Init>
 80015f6:	e000      	b.n	80015fa <HAL_FSMC_MspInit+0x82>
    return;
 80015f8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000624 	.word	0x20000624
 8001604:	40023800 	.word	0x40023800
 8001608:	40021000 	.word	0x40021000
 800160c:	40020c00 	.word	0x40020c00

08001610 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001618:	f7ff ffae 	bl	8001578 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	; 0x30
 8001628:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	4b63      	ldr	r3, [pc, #396]	; (80017cc <MX_GPIO_Init+0x1a8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a62      	ldr	r2, [pc, #392]	; (80017cc <MX_GPIO_Init+0x1a8>)
 8001644:	f043 0310 	orr.w	r3, r3, #16
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b60      	ldr	r3, [pc, #384]	; (80017cc <MX_GPIO_Init+0x1a8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	4b5c      	ldr	r3, [pc, #368]	; (80017cc <MX_GPIO_Init+0x1a8>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a5b      	ldr	r2, [pc, #364]	; (80017cc <MX_GPIO_Init+0x1a8>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b59      	ldr	r3, [pc, #356]	; (80017cc <MX_GPIO_Init+0x1a8>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b55      	ldr	r3, [pc, #340]	; (80017cc <MX_GPIO_Init+0x1a8>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a54      	ldr	r2, [pc, #336]	; (80017cc <MX_GPIO_Init+0x1a8>)
 800167c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b52      	ldr	r3, [pc, #328]	; (80017cc <MX_GPIO_Init+0x1a8>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b4e      	ldr	r3, [pc, #312]	; (80017cc <MX_GPIO_Init+0x1a8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a4d      	ldr	r2, [pc, #308]	; (80017cc <MX_GPIO_Init+0x1a8>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b4b      	ldr	r3, [pc, #300]	; (80017cc <MX_GPIO_Init+0x1a8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4b47      	ldr	r3, [pc, #284]	; (80017cc <MX_GPIO_Init+0x1a8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a46      	ldr	r2, [pc, #280]	; (80017cc <MX_GPIO_Init+0x1a8>)
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b44      	ldr	r3, [pc, #272]	; (80017cc <MX_GPIO_Init+0x1a8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4b40      	ldr	r3, [pc, #256]	; (80017cc <MX_GPIO_Init+0x1a8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a3f      	ldr	r2, [pc, #252]	; (80017cc <MX_GPIO_Init+0x1a8>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b3d      	ldr	r3, [pc, #244]	; (80017cc <MX_GPIO_Init+0x1a8>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	4b39      	ldr	r3, [pc, #228]	; (80017cc <MX_GPIO_Init+0x1a8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a38      	ldr	r2, [pc, #224]	; (80017cc <MX_GPIO_Init+0x1a8>)
 80016ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b36      	ldr	r3, [pc, #216]	; (80017cc <MX_GPIO_Init+0x1a8>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	2110      	movs	r1, #16
 8001702:	4833      	ldr	r0, [pc, #204]	; (80017d0 <MX_GPIO_Init+0x1ac>)
 8001704:	f003 f82a 	bl	800475c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800170e:	4831      	ldr	r0, [pc, #196]	; (80017d4 <MX_GPIO_Init+0x1b0>)
 8001710:	f003 f824 	bl	800475c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	2140      	movs	r1, #64	; 0x40
 8001718:	482f      	ldr	r0, [pc, #188]	; (80017d8 <MX_GPIO_Init+0x1b4>)
 800171a:	f003 f81f 	bl	800475c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FSMC_BLK_Pin|EN_RS485_Pin, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8001724:	482d      	ldr	r0, [pc, #180]	; (80017dc <MX_GPIO_Init+0x1b8>)
 8001726:	f003 f819 	bl	800475c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2108      	movs	r1, #8
 800172e:	482c      	ldr	r0, [pc, #176]	; (80017e0 <MX_GPIO_Init+0x1bc>)
 8001730:	f003 f814 	bl	800475c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001734:	2310      	movs	r3, #16
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4619      	mov	r1, r3
 800174a:	4821      	ldr	r0, [pc, #132]	; (80017d0 <MX_GPIO_Init+0x1ac>)
 800174c:	f002 fe6a 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	4619      	mov	r1, r3
 8001768:	481a      	ldr	r0, [pc, #104]	; (80017d4 <MX_GPIO_Init+0x1b0>)
 800176a:	f002 fe5b 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800176e:	2340      	movs	r3, #64	; 0x40
 8001770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001772:	2301      	movs	r3, #1
 8001774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 031c 	add.w	r3, r7, #28
 8001782:	4619      	mov	r1, r3
 8001784:	4814      	ldr	r0, [pc, #80]	; (80017d8 <MX_GPIO_Init+0x1b4>)
 8001786:	f002 fe4d 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin|EN_RS485_Pin;
 800178a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001790:	2301      	movs	r3, #1
 8001792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	4619      	mov	r1, r3
 80017a2:	480e      	ldr	r0, [pc, #56]	; (80017dc <MX_GPIO_Init+0x1b8>)
 80017a4:	f002 fe3e 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80017a8:	2308      	movs	r3, #8
 80017aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	4619      	mov	r1, r3
 80017be:	4808      	ldr	r0, [pc, #32]	; (80017e0 <MX_GPIO_Init+0x1bc>)
 80017c0:	f002 fe30 	bl	8004424 <HAL_GPIO_Init>

}
 80017c4:	bf00      	nop
 80017c6:	3730      	adds	r7, #48	; 0x30
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40021800 	.word	0x40021800
 80017dc:	40020000 	.word	0x40020000
 80017e0:	40020c00 	.word	0x40020c00

080017e4 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 80017ee:	4a04      	ldr	r2, [pc, #16]	; (8001800 <LCD_WR_REG+0x1c>)
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	8013      	strh	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	600ffffe 	.word	0x600ffffe

08001804 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 800180e:	4a04      	ldr	r2, [pc, #16]	; (8001820 <LCD_WR_DATA+0x1c>)
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	8053      	strh	r3, [r2, #2]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	600ffffe 	.word	0x600ffffe

08001824 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <LCD_RD_DATA+0x20>)
 800182c:	885b      	ldrh	r3, [r3, #2]
 800182e:	b29b      	uxth	r3, r3
 8001830:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	b29b      	uxth	r3, r3
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	600ffffe 	.word	0x600ffffe

08001848 <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4604      	mov	r4, r0
 8001850:	4608      	mov	r0, r1
 8001852:	4611      	mov	r1, r2
 8001854:	461a      	mov	r2, r3
 8001856:	4623      	mov	r3, r4
 8001858:	80fb      	strh	r3, [r7, #6]
 800185a:	4603      	mov	r3, r0
 800185c:	80bb      	strh	r3, [r7, #4]
 800185e:	460b      	mov	r3, r1
 8001860:	807b      	strh	r3, [r7, #2]
 8001862:	4613      	mov	r3, r2
 8001864:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 8001866:	202a      	movs	r0, #42	; 0x2a
 8001868:	f7ff ffbc 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	0a1b      	lsrs	r3, r3, #8
 8001870:	b29b      	uxth	r3, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ffc6 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	b29b      	uxth	r3, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ffc0 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 8001884:	887b      	ldrh	r3, [r7, #2]
 8001886:	0a1b      	lsrs	r3, r3, #8
 8001888:	b29b      	uxth	r3, r3
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ffba 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 8001890:	887b      	ldrh	r3, [r7, #2]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	b29b      	uxth	r3, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ffb4 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 800189c:	202b      	movs	r0, #43	; 0x2b
 800189e:	f7ff ffa1 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 80018a2:	88bb      	ldrh	r3, [r7, #4]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ffab 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 80018ae:	88bb      	ldrh	r3, [r7, #4]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ffa5 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 80018ba:	883b      	ldrh	r3, [r7, #0]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	b29b      	uxth	r3, r3
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff9f 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 80018c6:	883b      	ldrh	r3, [r7, #0]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff99 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 80018d2:	202c      	movs	r0, #44	; 0x2c
 80018d4:	f7ff ff86 	bl	80017e4 <LCD_WR_REG>
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd90      	pop	{r4, r7, pc}

080018e0 <lcd_clear>:
/**
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <lcd_clear+0x60>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <lcd_clear+0x60>)
 80018f4:	885b      	ldrh	r3, [r3, #2]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	2100      	movs	r1, #0
 80018fc:	2000      	movs	r0, #0
 80018fe:	f7ff ffa3 	bl	8001848 <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 8001902:	2300      	movs	r3, #0
 8001904:	81fb      	strh	r3, [r7, #14]
 8001906:	e011      	b.n	800192c <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 8001908:	2300      	movs	r3, #0
 800190a:	81bb      	strh	r3, [r7, #12]
 800190c:	e006      	b.n	800191c <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff77 	bl	8001804 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 8001916:	89bb      	ldrh	r3, [r7, #12]
 8001918:	3301      	adds	r3, #1
 800191a:	81bb      	strh	r3, [r7, #12]
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <lcd_clear+0x60>)
 800191e:	885b      	ldrh	r3, [r3, #2]
 8001920:	89ba      	ldrh	r2, [r7, #12]
 8001922:	429a      	cmp	r2, r3
 8001924:	d3f3      	bcc.n	800190e <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 8001926:	89fb      	ldrh	r3, [r7, #14]
 8001928:	3301      	adds	r3, #1
 800192a:	81fb      	strh	r3, [r7, #14]
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <lcd_clear+0x60>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	89fa      	ldrh	r2, [r7, #14]
 8001932:	429a      	cmp	r2, r3
 8001934:	d3e8      	bcc.n	8001908 <lcd_clear+0x28>
		}
	}
}
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000628 	.word	0x20000628

08001944 <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	80fb      	strh	r3, [r7, #6]
 800194e:	460b      	mov	r3, r1
 8001950:	80bb      	strh	r3, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 8001956:	88bb      	ldrh	r3, [r7, #4]
 8001958:	88fa      	ldrh	r2, [r7, #6]
 800195a:	88b9      	ldrh	r1, [r7, #4]
 800195c:	88f8      	ldrh	r0, [r7, #6]
 800195e:	f7ff ff73 	bl	8001848 <lcd_set_address>
	LCD_WR_DATA(color);
 8001962:	887b      	ldrh	r3, [r7, #2]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff4d 	bl	8001804 <LCD_WR_DATA>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <lcd_show_char>:
	lcd_draw_line(x1, y2, x2, y2, color);
	lcd_draw_line(x2, y1, x2, y2, color);
}

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	4604      	mov	r4, r0
 800197c:	4608      	mov	r0, r1
 800197e:	4611      	mov	r1, r2
 8001980:	461a      	mov	r2, r3
 8001982:	4623      	mov	r3, r4
 8001984:	80fb      	strh	r3, [r7, #6]
 8001986:	4603      	mov	r3, r0
 8001988:	80bb      	strh	r3, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	70fb      	strb	r3, [r7, #3]
 800198e:	4613      	mov	r3, r2
 8001990:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 800199a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800199e:	085b      	lsrs	r3, r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	08db      	lsrs	r3, r3, #3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bf14      	ite	ne
 80019b6:	2301      	movne	r3, #1
 80019b8:	2300      	moveq	r3, #0
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	4413      	add	r3, r2
 80019be:	b29a      	uxth	r2, r3
 80019c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	fb12 f303 	smulbb	r3, r2, r3
 80019ca:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	3b20      	subs	r3, #32
 80019d0:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	4413      	add	r3, r2
 80019da:	b29b      	uxth	r3, r3
 80019dc:	3b01      	subs	r3, #1
 80019de:	b29c      	uxth	r4, r3
 80019e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	88bb      	ldrh	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	88b9      	ldrh	r1, [r7, #4]
 80019f2:	88f8      	ldrh	r0, [r7, #6]
 80019f4:	4622      	mov	r2, r4
 80019f6:	f7ff ff27 	bl	8001848 <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 80019fa:	2300      	movs	r3, #0
 80019fc:	827b      	strh	r3, [r7, #18]
 80019fe:	e07a      	b.n	8001af6 <lcd_show_char+0x182>
		if (sizey == 12)
 8001a00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a04:	2b0c      	cmp	r3, #12
 8001a06:	d028      	beq.n	8001a5a <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 8001a08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a0c:	2b10      	cmp	r3, #16
 8001a0e:	d108      	bne.n	8001a22 <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	8a7b      	ldrh	r3, [r7, #18]
 8001a14:	493c      	ldr	r1, [pc, #240]	; (8001b08 <lcd_show_char+0x194>)
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	440a      	add	r2, r1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	75fb      	strb	r3, [r7, #23]
 8001a20:	e01b      	b.n	8001a5a <lcd_show_char+0xe6>
		else if (sizey == 24)
 8001a22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a26:	2b18      	cmp	r3, #24
 8001a28:	d10b      	bne.n	8001a42 <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 8001a2a:	78fa      	ldrb	r2, [r7, #3]
 8001a2c:	8a79      	ldrh	r1, [r7, #18]
 8001a2e:	4837      	ldr	r0, [pc, #220]	; (8001b0c <lcd_show_char+0x198>)
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	4403      	add	r3, r0
 8001a3a:	440b      	add	r3, r1
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	75fb      	strb	r3, [r7, #23]
 8001a40:	e00b      	b.n	8001a5a <lcd_show_char+0xe6>
		else if (sizey == 32)
 8001a42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a46:	2b20      	cmp	r3, #32
 8001a48:	d15a      	bne.n	8001b00 <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 8001a4a:	78fa      	ldrb	r2, [r7, #3]
 8001a4c:	8a7b      	ldrh	r3, [r7, #18]
 8001a4e:	4930      	ldr	r1, [pc, #192]	; (8001b10 <lcd_show_char+0x19c>)
 8001a50:	0192      	lsls	r2, r2, #6
 8001a52:	440a      	add	r2, r1
 8001a54:	4413      	add	r3, r2
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	75bb      	strb	r3, [r7, #22]
 8001a5e:	e044      	b.n	8001aea <lcd_show_char+0x176>
			if (!mode) {
 8001a60:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d120      	bne.n	8001aaa <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 8001a68:	7dfa      	ldrb	r2, [r7, #23]
 8001a6a:	7dbb      	ldrb	r3, [r7, #22]
 8001a6c:	fa42 f303 	asr.w	r3, r2, r3
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d004      	beq.n	8001a82 <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 8001a78:	883b      	ldrh	r3, [r7, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fec2 	bl	8001804 <LCD_WR_DATA>
 8001a80:	e003      	b.n	8001a8a <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 8001a82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff febd 	bl	8001804 <LCD_WR_DATA>
				m++;
 8001a8a:	7d7b      	ldrb	r3, [r7, #21]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 8001a90:	7d7b      	ldrb	r3, [r7, #21]
 8001a92:	7bfa      	ldrb	r2, [r7, #15]
 8001a94:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a98:	fb01 f202 	mul.w	r2, r1, r2
 8001a9c:	1a9b      	subs	r3, r3, r2
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d11f      	bne.n	8001ae4 <lcd_show_char+0x170>
					m = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	757b      	strb	r3, [r7, #21]
					break;
 8001aa8:	e022      	b.n	8001af0 <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 8001aaa:	7dfa      	ldrb	r2, [r7, #23]
 8001aac:	7dbb      	ldrb	r3, [r7, #22]
 8001aae:	fa42 f303 	asr.w	r3, r2, r3
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d005      	beq.n	8001ac6 <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 8001aba:	883a      	ldrh	r2, [r7, #0]
 8001abc:	88b9      	ldrh	r1, [r7, #4]
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff3f 	bl	8001944 <lcd_draw_point>
				x++;
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 8001acc:	88fa      	ldrh	r2, [r7, #6]
 8001ace:	8a3b      	ldrh	r3, [r7, #16]
 8001ad0:	1ad2      	subs	r2, r2, r3
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d105      	bne.n	8001ae4 <lcd_show_char+0x170>
					x = x0;
 8001ad8:	8a3b      	ldrh	r3, [r7, #16]
 8001ada:	80fb      	strh	r3, [r7, #6]
					y++;
 8001adc:	88bb      	ldrh	r3, [r7, #4]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	80bb      	strh	r3, [r7, #4]
					break;
 8001ae2:	e005      	b.n	8001af0 <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 8001ae4:	7dbb      	ldrb	r3, [r7, #22]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	75bb      	strb	r3, [r7, #22]
 8001aea:	7dbb      	ldrb	r3, [r7, #22]
 8001aec:	2b07      	cmp	r3, #7
 8001aee:	d9b7      	bls.n	8001a60 <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 8001af0:	8a7b      	ldrh	r3, [r7, #18]
 8001af2:	3301      	adds	r3, #1
 8001af4:	827b      	strh	r3, [r7, #18]
 8001af6:	8a7a      	ldrh	r2, [r7, #18]
 8001af8:	89bb      	ldrh	r3, [r7, #12]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d380      	bcc.n	8001a00 <lcd_show_char+0x8c>
 8001afe:	e000      	b.n	8001b02 <lcd_show_char+0x18e>
			return;
 8001b00:	bf00      	nop
				}
			}
		}
	}
}
 8001b02:	371c      	adds	r7, #28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd90      	pop	{r4, r7, pc}
 8001b08:	080075f8 	.word	0x080075f8
 8001b0c:	08007be8 	.word	0x08007be8
 8001b10:	08008db8 	.word	0x08008db8

08001b14 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n) {
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	460a      	mov	r2, r1
 8001b1e:	71fb      	strb	r3, [r7, #7]
 8001b20:	4613      	mov	r3, r2
 8001b22:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8001b24:	2301      	movs	r3, #1
 8001b26:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001b28:	e004      	b.n	8001b34 <mypow+0x20>
		result *= m;
 8001b2a:	79fa      	ldrb	r2, [r7, #7]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	fb02 f303 	mul.w	r3, r2, r3
 8001b32:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001b34:	79bb      	ldrb	r3, [r7, #6]
 8001b36:	1e5a      	subs	r2, r3, #1
 8001b38:	71ba      	strb	r2, [r7, #6]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f5      	bne.n	8001b2a <mypow+0x16>
	return result;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <lcd_show_int_num>:

void lcd_show_int_num(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af04      	add	r7, sp, #16
 8001b52:	4604      	mov	r4, r0
 8001b54:	4608      	mov	r0, r1
 8001b56:	4611      	mov	r1, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4623      	mov	r3, r4
 8001b5c:	80fb      	strh	r3, [r7, #6]
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80bb      	strh	r3, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	807b      	strh	r3, [r7, #2]
 8001b66:	4613      	mov	r3, r2
 8001b68:	707b      	strb	r3, [r7, #1]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex = sizey / 2;
 8001b6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b72:	085b      	lsrs	r3, r3, #1
 8001b74:	737b      	strb	r3, [r7, #13]
	for (t = 0; t < len; t++) {
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	e059      	b.n	8001c30 <lcd_show_int_num+0xe4>
		temp = (num / mypow(10, len - t - 1)) % 10;
 8001b7c:	887c      	ldrh	r4, [r7, #2]
 8001b7e:	787a      	ldrb	r2, [r7, #1]
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	200a      	movs	r0, #10
 8001b8e:	f7ff ffc1 	bl	8001b14 <mypow>
 8001b92:	4603      	mov	r3, r0
 8001b94:	fbb4 f1f3 	udiv	r1, r4, r3
 8001b98:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <lcd_show_int_num+0xf8>)
 8001b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8001b9e:	08da      	lsrs	r2, r3, #3
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	1aca      	subs	r2, r1, r3
 8001baa:	4613      	mov	r3, r2
 8001bac:	733b      	strb	r3, [r7, #12]
		if (enshow == 0 && t < (len - 1)) {
 8001bae:	7bbb      	ldrb	r3, [r7, #14]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d121      	bne.n	8001bf8 <lcd_show_int_num+0xac>
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	787b      	ldrb	r3, [r7, #1]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	da1c      	bge.n	8001bf8 <lcd_show_int_num+0xac>
			if (temp == 0) {
 8001bbe:	7b3b      	ldrb	r3, [r7, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d117      	bne.n	8001bf4 <lcd_show_int_num+0xa8>
				lcd_show_char(x + t * sizex, y, ' ', fc, bc, sizey, 0);
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	7b7b      	ldrb	r3, [r7, #13]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	fb12 f303 	smulbb	r3, r2, r3
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	b298      	uxth	r0, r3
 8001bd8:	8c3a      	ldrh	r2, [r7, #32]
 8001bda:	88b9      	ldrh	r1, [r7, #4]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	9302      	str	r3, [sp, #8]
 8001be0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001be4:	9301      	str	r3, [sp, #4]
 8001be6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	4613      	mov	r3, r2
 8001bec:	2220      	movs	r2, #32
 8001bee:	f7ff fec1 	bl	8001974 <lcd_show_char>
				continue;
 8001bf2:	e01a      	b.n	8001c2a <lcd_show_int_num+0xde>
			} else
				enshow = 1;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73bb      	strb	r3, [r7, #14]

		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	7b7b      	ldrb	r3, [r7, #13]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	fb12 f303 	smulbb	r3, r2, r3
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	4413      	add	r3, r2
 8001c0a:	b298      	uxth	r0, r3
 8001c0c:	7b3b      	ldrb	r3, [r7, #12]
 8001c0e:	3330      	adds	r3, #48	; 0x30
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	8c3c      	ldrh	r4, [r7, #32]
 8001c14:	88b9      	ldrh	r1, [r7, #4]
 8001c16:	2300      	movs	r3, #0
 8001c18:	9302      	str	r3, [sp, #8]
 8001c1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	4623      	mov	r3, r4
 8001c26:	f7ff fea5 	bl	8001974 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	7bfa      	ldrb	r2, [r7, #15]
 8001c32:	787b      	ldrb	r3, [r7, #1]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d3a1      	bcc.n	8001b7c <lcd_show_int_num+0x30>
	}
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd90      	pop	{r4, r7, pc}
 8001c42:	bf00      	nop
 8001c44:	cccccccd 	.word	0xcccccccd

08001c48 <lcd_show_float_num>:

void lcd_show_float_num(uint16_t x, uint16_t y, float num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b08b      	sub	sp, #44	; 0x2c
 8001c4c:	af04      	add	r7, sp, #16
 8001c4e:	4604      	mov	r4, r0
 8001c50:	4608      	mov	r0, r1
 8001c52:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c56:	4611      	mov	r1, r2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4623      	mov	r3, r4
 8001c5c:	81fb      	strh	r3, [r7, #14]
 8001c5e:	4603      	mov	r3, r0
 8001c60:	81bb      	strh	r3, [r7, #12]
 8001c62:	460b      	mov	r3, r1
 8001c64:	71fb      	strb	r3, [r7, #7]
 8001c66:	4613      	mov	r3, r2
 8001c68:	80bb      	strh	r3, [r7, #4]
	uint8_t t, temp, sizex;
	uint16_t num1;
	sizex = sizey / 2;
 8001c6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c6e:	085b      	lsrs	r3, r3, #1
 8001c70:	75bb      	strb	r3, [r7, #22]
	num1 = num * 100;
 8001c72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c76:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001d50 <lcd_show_float_num+0x108>
 8001c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c82:	ee17 3a90 	vmov	r3, s15
 8001c86:	82bb      	strh	r3, [r7, #20]
	for (t = 0; t < len; t++) {
 8001c88:	2300      	movs	r3, #0
 8001c8a:	75fb      	strb	r3, [r7, #23]
 8001c8c:	e057      	b.n	8001d3e <lcd_show_float_num+0xf6>
		temp = (num1 / mypow(10, len - t - 1)) % 10;
 8001c8e:	8abc      	ldrh	r4, [r7, #20]
 8001c90:	79fa      	ldrb	r2, [r7, #7]
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	200a      	movs	r0, #10
 8001ca0:	f7ff ff38 	bl	8001b14 <mypow>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	fbb4 f1f3 	udiv	r1, r4, r3
 8001caa:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <lcd_show_float_num+0x10c>)
 8001cac:	fba3 2301 	umull	r2, r3, r3, r1
 8001cb0:	08da      	lsrs	r2, r3, #3
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	1aca      	subs	r2, r1, r3
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	74fb      	strb	r3, [r7, #19]
		if (t == (len - 2)) {
 8001cc0:	7dfa      	ldrb	r2, [r7, #23]
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	3b02      	subs	r3, #2
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d11d      	bne.n	8001d06 <lcd_show_float_num+0xbe>
			lcd_show_char(x + (len - 2) * sizex, y, '.', fc, bc, sizey, 0);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	3b02      	subs	r3, #2
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	7dbb      	ldrb	r3, [r7, #22]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	fb12 f303 	smulbb	r3, r2, r3
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	89fb      	ldrh	r3, [r7, #14]
 8001cdc:	4413      	add	r3, r2
 8001cde:	b298      	uxth	r0, r3
 8001ce0:	88ba      	ldrh	r2, [r7, #4]
 8001ce2:	89b9      	ldrh	r1, [r7, #12]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	222e      	movs	r2, #46	; 0x2e
 8001cf6:	f7ff fe3d 	bl	8001974 <lcd_show_char>
			t++;
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	75fb      	strb	r3, [r7, #23]
			len += 1;
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	3301      	adds	r3, #1
 8001d04:	71fb      	strb	r3, [r7, #7]
		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8001d06:	7dfb      	ldrb	r3, [r7, #23]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	7dbb      	ldrb	r3, [r7, #22]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	fb12 f303 	smulbb	r3, r2, r3
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	89fb      	ldrh	r3, [r7, #14]
 8001d16:	4413      	add	r3, r2
 8001d18:	b298      	uxth	r0, r3
 8001d1a:	7cfb      	ldrb	r3, [r7, #19]
 8001d1c:	3330      	adds	r3, #48	; 0x30
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	88bc      	ldrh	r4, [r7, #4]
 8001d22:	89b9      	ldrh	r1, [r7, #12]
 8001d24:	2300      	movs	r3, #0
 8001d26:	9302      	str	r3, [sp, #8]
 8001d28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d2c:	9301      	str	r3, [sp, #4]
 8001d2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	4623      	mov	r3, r4
 8001d34:	f7ff fe1e 	bl	8001974 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001d38:	7dfb      	ldrb	r3, [r7, #23]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	75fb      	strb	r3, [r7, #23]
 8001d3e:	7dfa      	ldrb	r2, [r7, #23]
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d3a3      	bcc.n	8001c8e <lcd_show_float_num+0x46>
	}
}
 8001d46:	bf00      	nop
 8001d48:	bf00      	nop
 8001d4a:	371c      	adds	r7, #28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd90      	pop	{r4, r7, pc}
 8001d50:	42c80000 	.word	0x42c80000
 8001d54:	cccccccd 	.word	0xcccccccd

08001d58 <lcd_set_direction>:
			k++;
		}
	}
}

void lcd_set_direction(uint8_t dir) {
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d007      	beq.n	8001d82 <lcd_set_direction+0x2a>
		lcddev.width = 320;
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <lcd_set_direction+0x44>)
 8001d74:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d78:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <lcd_set_direction+0x44>)
 8001d7c:	22f0      	movs	r2, #240	; 0xf0
 8001d7e:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8001d80:	e006      	b.n	8001d90 <lcd_set_direction+0x38>
		lcddev.width = 240;
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <lcd_set_direction+0x44>)
 8001d84:	22f0      	movs	r2, #240	; 0xf0
 8001d86:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <lcd_set_direction+0x44>)
 8001d8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d8e:	805a      	strh	r2, [r3, #2]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	20000628 	.word	0x20000628

08001da0 <lcd_init>:

void lcd_init(void) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001da4:	2200      	movs	r2, #0
 8001da6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001daa:	48aa      	ldr	r0, [pc, #680]	; (8002054 <lcd_init+0x2b4>)
 8001dac:	f002 fcd6 	bl	800475c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001db0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001db4:	f001 f9ec 	bl	8003190 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001db8:	2201      	movs	r2, #1
 8001dba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dbe:	48a5      	ldr	r0, [pc, #660]	; (8002054 <lcd_init+0x2b4>)
 8001dc0:	f002 fccc 	bl	800475c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001dc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dc8:	f001 f9e2 	bl	8003190 <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7ff ffc3 	bl	8001d58 <lcd_set_direction>
	LCD_WR_REG(0XD3);
 8001dd2:	20d3      	movs	r0, #211	; 0xd3
 8001dd4:	f7ff fd06 	bl	80017e4 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8001dd8:	f7ff fd24 	bl	8001824 <LCD_RD_DATA>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b9d      	ldr	r3, [pc, #628]	; (8002058 <lcd_init+0x2b8>)
 8001de2:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001de4:	f7ff fd1e 	bl	8001824 <LCD_RD_DATA>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b9a      	ldr	r3, [pc, #616]	; (8002058 <lcd_init+0x2b8>)
 8001dee:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001df0:	f7ff fd18 	bl	8001824 <LCD_RD_DATA>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b97      	ldr	r3, [pc, #604]	; (8002058 <lcd_init+0x2b8>)
 8001dfa:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8001dfc:	4b96      	ldr	r3, [pc, #600]	; (8002058 <lcd_init+0x2b8>)
 8001dfe:	889b      	ldrh	r3, [r3, #4]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	4b94      	ldr	r3, [pc, #592]	; (8002058 <lcd_init+0x2b8>)
 8001e06:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8001e08:	f7ff fd0c 	bl	8001824 <LCD_RD_DATA>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b91      	ldr	r3, [pc, #580]	; (8002058 <lcd_init+0x2b8>)
 8001e12:	889b      	ldrh	r3, [r3, #4]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	4b8f      	ldr	r3, [pc, #572]	; (8002058 <lcd_init+0x2b8>)
 8001e1a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001e1c:	20cf      	movs	r0, #207	; 0xcf
 8001e1e:	f7ff fce1 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7ff fcee 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001e28:	20c1      	movs	r0, #193	; 0xc1
 8001e2a:	f7ff fceb 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001e2e:	2030      	movs	r0, #48	; 0x30
 8001e30:	f7ff fce8 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001e34:	20ed      	movs	r0, #237	; 0xed
 8001e36:	f7ff fcd5 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001e3a:	2064      	movs	r0, #100	; 0x64
 8001e3c:	f7ff fce2 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001e40:	2003      	movs	r0, #3
 8001e42:	f7ff fcdf 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001e46:	2012      	movs	r0, #18
 8001e48:	f7ff fcdc 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001e4c:	2081      	movs	r0, #129	; 0x81
 8001e4e:	f7ff fcd9 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001e52:	20e8      	movs	r0, #232	; 0xe8
 8001e54:	f7ff fcc6 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001e58:	2085      	movs	r0, #133	; 0x85
 8001e5a:	f7ff fcd3 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001e5e:	2010      	movs	r0, #16
 8001e60:	f7ff fcd0 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001e64:	207a      	movs	r0, #122	; 0x7a
 8001e66:	f7ff fccd 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001e6a:	20cb      	movs	r0, #203	; 0xcb
 8001e6c:	f7ff fcba 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001e70:	2039      	movs	r0, #57	; 0x39
 8001e72:	f7ff fcc7 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001e76:	202c      	movs	r0, #44	; 0x2c
 8001e78:	f7ff fcc4 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f7ff fcc1 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001e82:	2034      	movs	r0, #52	; 0x34
 8001e84:	f7ff fcbe 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001e88:	2002      	movs	r0, #2
 8001e8a:	f7ff fcbb 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001e8e:	20f7      	movs	r0, #247	; 0xf7
 8001e90:	f7ff fca8 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001e94:	2020      	movs	r0, #32
 8001e96:	f7ff fcb5 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001e9a:	20ea      	movs	r0, #234	; 0xea
 8001e9c:	f7ff fca2 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff fcaf 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7ff fcac 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001eac:	20c0      	movs	r0, #192	; 0xc0
 8001eae:	f7ff fc99 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001eb2:	201b      	movs	r0, #27
 8001eb4:	f7ff fca6 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001eb8:	20c1      	movs	r0, #193	; 0xc1
 8001eba:	f7ff fc93 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f7ff fca0 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001ec4:	20c5      	movs	r0, #197	; 0xc5
 8001ec6:	f7ff fc8d 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001eca:	2030      	movs	r0, #48	; 0x30
 8001ecc:	f7ff fc9a 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001ed0:	2030      	movs	r0, #48	; 0x30
 8001ed2:	f7ff fc97 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001ed6:	20c7      	movs	r0, #199	; 0xc7
 8001ed8:	f7ff fc84 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001edc:	20b7      	movs	r0, #183	; 0xb7
 8001ede:	f7ff fc91 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001ee2:	2036      	movs	r0, #54	; 0x36
 8001ee4:	f7ff fc7e 	bl	80017e4 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8001ee8:	2008      	movs	r0, #8
 8001eea:	f7ff fc8b 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001eee:	203a      	movs	r0, #58	; 0x3a
 8001ef0:	f7ff fc78 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001ef4:	2055      	movs	r0, #85	; 0x55
 8001ef6:	f7ff fc85 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001efa:	20b1      	movs	r0, #177	; 0xb1
 8001efc:	f7ff fc72 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff fc7f 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001f06:	201a      	movs	r0, #26
 8001f08:	f7ff fc7c 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001f0c:	20b6      	movs	r0, #182	; 0xb6
 8001f0e:	f7ff fc69 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001f12:	200a      	movs	r0, #10
 8001f14:	f7ff fc76 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001f18:	20a2      	movs	r0, #162	; 0xa2
 8001f1a:	f7ff fc73 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001f1e:	20f2      	movs	r0, #242	; 0xf2
 8001f20:	f7ff fc60 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7ff fc6d 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001f2a:	2026      	movs	r0, #38	; 0x26
 8001f2c:	f7ff fc5a 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001f30:	2001      	movs	r0, #1
 8001f32:	f7ff fc67 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001f36:	20e0      	movs	r0, #224	; 0xe0
 8001f38:	f7ff fc54 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001f3c:	200f      	movs	r0, #15
 8001f3e:	f7ff fc61 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001f42:	202a      	movs	r0, #42	; 0x2a
 8001f44:	f7ff fc5e 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001f48:	2028      	movs	r0, #40	; 0x28
 8001f4a:	f7ff fc5b 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001f4e:	2008      	movs	r0, #8
 8001f50:	f7ff fc58 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001f54:	200e      	movs	r0, #14
 8001f56:	f7ff fc55 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001f5a:	2008      	movs	r0, #8
 8001f5c:	f7ff fc52 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001f60:	2054      	movs	r0, #84	; 0x54
 8001f62:	f7ff fc4f 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001f66:	20a9      	movs	r0, #169	; 0xa9
 8001f68:	f7ff fc4c 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001f6c:	2043      	movs	r0, #67	; 0x43
 8001f6e:	f7ff fc49 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001f72:	200a      	movs	r0, #10
 8001f74:	f7ff fc46 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001f78:	200f      	movs	r0, #15
 8001f7a:	f7ff fc43 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff fc40 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7ff fc3d 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7ff fc3a 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7ff fc37 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001f96:	20e1      	movs	r0, #225	; 0xe1
 8001f98:	f7ff fc24 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff fc31 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001fa2:	2015      	movs	r0, #21
 8001fa4:	f7ff fc2e 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001fa8:	2017      	movs	r0, #23
 8001faa:	f7ff fc2b 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001fae:	2007      	movs	r0, #7
 8001fb0:	f7ff fc28 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001fb4:	2011      	movs	r0, #17
 8001fb6:	f7ff fc25 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001fba:	2006      	movs	r0, #6
 8001fbc:	f7ff fc22 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001fc0:	202b      	movs	r0, #43	; 0x2b
 8001fc2:	f7ff fc1f 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001fc6:	2056      	movs	r0, #86	; 0x56
 8001fc8:	f7ff fc1c 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001fcc:	203c      	movs	r0, #60	; 0x3c
 8001fce:	f7ff fc19 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001fd2:	2005      	movs	r0, #5
 8001fd4:	f7ff fc16 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001fd8:	2010      	movs	r0, #16
 8001fda:	f7ff fc13 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001fde:	200f      	movs	r0, #15
 8001fe0:	f7ff fc10 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001fe4:	203f      	movs	r0, #63	; 0x3f
 8001fe6:	f7ff fc0d 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001fea:	203f      	movs	r0, #63	; 0x3f
 8001fec:	f7ff fc0a 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ff0:	200f      	movs	r0, #15
 8001ff2:	f7ff fc07 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001ff6:	202b      	movs	r0, #43	; 0x2b
 8001ff8:	f7ff fbf4 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f7ff fc01 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002002:	2000      	movs	r0, #0
 8002004:	f7ff fbfe 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002008:	2001      	movs	r0, #1
 800200a:	f7ff fbfb 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800200e:	203f      	movs	r0, #63	; 0x3f
 8002010:	f7ff fbf8 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002014:	202a      	movs	r0, #42	; 0x2a
 8002016:	f7ff fbe5 	bl	80017e4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800201a:	2000      	movs	r0, #0
 800201c:	f7ff fbf2 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002020:	2000      	movs	r0, #0
 8002022:	f7ff fbef 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002026:	2000      	movs	r0, #0
 8002028:	f7ff fbec 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800202c:	20ef      	movs	r0, #239	; 0xef
 800202e:	f7ff fbe9 	bl	8001804 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 8002032:	2011      	movs	r0, #17
 8002034:	f7ff fbd6 	bl	80017e4 <LCD_WR_REG>
	HAL_Delay(120);
 8002038:	2078      	movs	r0, #120	; 0x78
 800203a:	f001 f8a9 	bl	8003190 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 800203e:	2029      	movs	r0, #41	; 0x29
 8002040:	f7ff fbd0 	bl	80017e4 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002044:	2201      	movs	r2, #1
 8002046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800204a:	4804      	ldr	r0, [pc, #16]	; (800205c <lcd_init+0x2bc>)
 800204c:	f002 fb86 	bl	800475c <HAL_GPIO_WritePin>
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40020800 	.word	0x40020800
 8002058:	20000628 	.word	0x20000628
 800205c:	40020000 	.word	0x40020000

08002060 <lcd_show_string>:
		}
	}
}

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b08b      	sub	sp, #44	; 0x2c
 8002064:	af04      	add	r7, sp, #16
 8002066:	60ba      	str	r2, [r7, #8]
 8002068:	461a      	mov	r2, r3
 800206a:	4603      	mov	r3, r0
 800206c:	81fb      	strh	r3, [r7, #14]
 800206e:	460b      	mov	r3, r1
 8002070:	81bb      	strh	r3, [r7, #12]
 8002072:	4613      	mov	r3, r2
 8002074:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 8002076:	89fb      	ldrh	r3, [r7, #14]
 8002078:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 800207e:	e048      	b.n	8002112 <lcd_show_string+0xb2>
		if (!bHz) {
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d145      	bne.n	8002112 <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 8002086:	89fa      	ldrh	r2, [r7, #14]
 8002088:	4b26      	ldr	r3, [pc, #152]	; (8002124 <lcd_show_string+0xc4>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	4619      	mov	r1, r3
 800208e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002092:	085b      	lsrs	r3, r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	1acb      	subs	r3, r1, r3
 8002098:	429a      	cmp	r2, r3
 800209a:	dc3f      	bgt.n	800211c <lcd_show_string+0xbc>
 800209c:	89ba      	ldrh	r2, [r7, #12]
 800209e:	4b21      	ldr	r3, [pc, #132]	; (8002124 <lcd_show_string+0xc4>)
 80020a0:	885b      	ldrh	r3, [r3, #2]
 80020a2:	4619      	mov	r1, r3
 80020a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020a8:	1acb      	subs	r3, r1, r3
 80020aa:	429a      	cmp	r2, r3
 80020ac:	dc36      	bgt.n	800211c <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b80      	cmp	r3, #128	; 0x80
 80020b4:	d902      	bls.n	80020bc <lcd_show_string+0x5c>
				bHz = 1;
 80020b6:	2301      	movs	r3, #1
 80020b8:	75fb      	strb	r3, [r7, #23]
 80020ba:	e02a      	b.n	8002112 <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b0d      	cmp	r3, #13
 80020c2:	d10b      	bne.n	80020dc <lcd_show_string+0x7c>
					y += sizey;
 80020c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	89bb      	ldrh	r3, [r7, #12]
 80020cc:	4413      	add	r3, r2
 80020ce:	81bb      	strh	r3, [r7, #12]
					x = x0;
 80020d0:	8abb      	ldrh	r3, [r7, #20]
 80020d2:	81fb      	strh	r3, [r7, #14]
					str++;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	3301      	adds	r3, #1
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	e017      	b.n	800210c <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	781a      	ldrb	r2, [r3, #0]
 80020e0:	88fc      	ldrh	r4, [r7, #6]
 80020e2:	89b9      	ldrh	r1, [r7, #12]
 80020e4:	89f8      	ldrh	r0, [r7, #14]
 80020e6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80020ea:	9302      	str	r3, [sp, #8]
 80020ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	4623      	mov	r3, r4
 80020f8:	f7ff fc3c 	bl	8001974 <lcd_show_char>
					x += sizey / 2;
 80020fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002100:	085b      	lsrs	r3, r3, #1
 8002102:	b2db      	uxtb	r3, r3
 8002104:	b29a      	uxth	r2, r3
 8002106:	89fb      	ldrh	r3, [r7, #14]
 8002108:	4413      	add	r3, r2
 800210a:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	3301      	adds	r3, #1
 8002110:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1b2      	bne.n	8002080 <lcd_show_string+0x20>
 800211a:	e000      	b.n	800211e <lcd_show_string+0xbe>
				return;
 800211c:	bf00      	nop
			}
		}
	}
}
 800211e:	371c      	adds	r7, #28
 8002120:	46bd      	mov	sp, r7
 8002122:	bd90      	pop	{r4, r7, pc}
 8002124:	20000628 	.word	0x20000628

08002128 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TestADC();
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a04      	ldr	r2, [pc, #16]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d101      	bne.n	800213e <HAL_TIM_PeriodElapsedCallback+0x16>
		timerRun();
 800213a:	f000 fe0d 	bl	8002d58 <timerRun>
	}
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40000400 	.word	0x40000400

0800214c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002150:	f000 ffac 	bl	80030ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002154:	f000 f83e 	bl	80021d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002158:	f7ff fa64 	bl	8001624 <MX_GPIO_Init>
  MX_DMA_Init();
 800215c:	f7ff f972 	bl	8001444 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002160:	f000 fe94 	bl	8002e8c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8002164:	f000 fe68 	bl	8002e38 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002168:	f000 fe3c 	bl	8002de4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800216c:	f7fe ff38 	bl	8000fe0 <MX_ADC1_Init>
  MX_FSMC_Init();
 8002170:	f7ff f988 	bl	8001484 <MX_FSMC_Init>
  MX_SPI1_Init();
 8002174:	f000 fc62 	bl	8002a3c <MX_SPI1_Init>
  MX_TIM3_Init();
 8002178:	f000 fd60 	bl	8002c3c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800217c:	f7ff fe10 	bl	8001da0 <lcd_init>
  sensor_init();
 8002180:	f000 fb72 	bl	8002868 <sensor_init>
  lcd_clear(BLACK);
 8002184:	2000      	movs	r0, #0
 8002186:	f7ff fbab 	bl	80018e0 <lcd_clear>
  HAL_TIM_Base_Start_IT(&htim3);
 800218a:	4811      	ldr	r0, [pc, #68]	; (80021d0 <main+0x84>)
 800218c:	f003 fc7e 	bl	8005a8c <HAL_TIM_Base_Start_IT>
  setTimer(TI_BUTTON_SCAN_TIMER, TI_BUTTON_SCAN_TIME);
 8002190:	2114      	movs	r1, #20
 8002192:	2000      	movs	r0, #0
 8002194:	f000 fdc8 	bl	8002d28 <setTimer>
  setTimer(TI_7SEG_SCAN_TIMER, TI_7SEG_SCAN_TIME);
 8002198:	2102      	movs	r1, #2
 800219a:	2001      	movs	r0, #1
 800219c:	f000 fdc4 	bl	8002d28 <setTimer>
  f_rs485_fsm_init();
 80021a0:	f000 fa12 	bl	80025c8 <f_rs485_fsm_init>
  f_slave_init_def();
 80021a4:	f7fe feb2 	bl	8000f0c <f_slave_init_def>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifdef SLAVE
	  if(isFlag(TI_BUTTON_SCAN_TIMER)){
 80021a8:	2000      	movs	r0, #0
 80021aa:	f000 fe05 	bl	8002db8 <isFlag>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d007      	beq.n	80021c4 <main+0x78>
		  TestADC();
 80021b4:	f000 f878 	bl	80022a8 <TestADC>
		  button_scan();
 80021b8:	f7ff f828 	bl	800120c <button_scan>
		  setTimer(TI_BUTTON_SCAN_TIMER, TI_BUTTON_SCAN_TIME);
 80021bc:	2114      	movs	r1, #20
 80021be:	2000      	movs	r0, #0
 80021c0:	f000 fdb2 	bl	8002d28 <setTimer>
	  }
	  f_slave_behavior_def();
 80021c4:	f7fe feca 	bl	8000f5c <f_slave_behavior_def>
	  f_rs485_fsm();
 80021c8:	f000 fa16 	bl	80025f8 <f_rs485_fsm>
	  if(isFlag(TI_BUTTON_SCAN_TIMER)){
 80021cc:	e7ec      	b.n	80021a8 <main+0x5c>
 80021ce:	bf00      	nop
 80021d0:	200008b4 	.word	0x200008b4

080021d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b094      	sub	sp, #80	; 0x50
 80021d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021da:	f107 0320 	add.w	r3, r7, #32
 80021de:	2230      	movs	r2, #48	; 0x30
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f005 f9b0 	bl	8007548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021e8:	f107 030c 	add.w	r3, r7, #12
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021f8:	2300      	movs	r3, #0
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <SystemClock_Config+0xcc>)
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	4a27      	ldr	r2, [pc, #156]	; (80022a0 <SystemClock_Config+0xcc>)
 8002202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002206:	6413      	str	r3, [r2, #64]	; 0x40
 8002208:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <SystemClock_Config+0xcc>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002214:	2300      	movs	r3, #0
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <SystemClock_Config+0xd0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a21      	ldr	r2, [pc, #132]	; (80022a4 <SystemClock_Config+0xd0>)
 800221e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	4b1f      	ldr	r3, [pc, #124]	; (80022a4 <SystemClock_Config+0xd0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002230:	2302      	movs	r3, #2
 8002232:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002234:	2301      	movs	r3, #1
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002238:	2310      	movs	r3, #16
 800223a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800223c:	2302      	movs	r3, #2
 800223e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002240:	2300      	movs	r3, #0
 8002242:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002244:	2308      	movs	r3, #8
 8002246:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002248:	23a8      	movs	r3, #168	; 0xa8
 800224a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800224c:	2302      	movs	r3, #2
 800224e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002250:	2304      	movs	r3, #4
 8002252:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002254:	f107 0320 	add.w	r3, r7, #32
 8002258:	4618      	mov	r0, r3
 800225a:	f002 fa99 	bl	8004790 <HAL_RCC_OscConfig>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002264:	f000 f8e0 	bl	8002428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002268:	230f      	movs	r3, #15
 800226a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800226c:	2302      	movs	r3, #2
 800226e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002274:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002278:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800227a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800227e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	2105      	movs	r1, #5
 8002286:	4618      	mov	r0, r3
 8002288:	f002 fcfa 	bl	8004c80 <HAL_RCC_ClockConfig>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002292:	f000 f8c9 	bl	8002428 <Error_Handler>
  }
}
 8002296:	bf00      	nop
 8002298:	3750      	adds	r7, #80	; 0x50
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40007000 	.word	0x40007000

080022a8 <TestADC>:

/* USER CODE BEGIN 4 */
uint8_t count_adc = 0;
void TestADC() {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1) % 20;
 80022ae:	4b57      	ldr	r3, [pc, #348]	; (800240c <TestADC+0x164>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	4b56      	ldr	r3, [pc, #344]	; (8002410 <TestADC+0x168>)
 80022b6:	fb83 1302 	smull	r1, r3, r3, r2
 80022ba:	10d9      	asrs	r1, r3, #3
 80022bc:	17d3      	asrs	r3, r2, #31
 80022be:	1ac9      	subs	r1, r1, r3
 80022c0:	460b      	mov	r3, r1
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	1ad1      	subs	r1, r2, r3
 80022ca:	b2ca      	uxtb	r2, r1
 80022cc:	4b4f      	ldr	r3, [pc, #316]	; (800240c <TestADC+0x164>)
 80022ce:	701a      	strb	r2, [r3, #0]
	if (count_adc == 0) {
 80022d0:	4b4e      	ldr	r3, [pc, #312]	; (800240c <TestADC+0x164>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f040 8096 	bne.w	8002406 <TestADC+0x15e>
		sensor_read();
 80022da:	f000 fad3 	bl	8002884 <sensor_read>
		lcd_show_string(10, 100, "Voltage:", RED, BLACK, 16, 0);
 80022de:	2300      	movs	r3, #0
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	2310      	movs	r3, #16
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	2300      	movs	r3, #0
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022ee:	4a49      	ldr	r2, [pc, #292]	; (8002414 <TestADC+0x16c>)
 80022f0:	2164      	movs	r1, #100	; 0x64
 80022f2:	200a      	movs	r0, #10
 80022f4:	f7ff feb4 	bl	8002060 <lcd_show_string>
		lcd_show_float_num(130, 100, sensor_get_voltage(), 4, RED, BLACK, 16);
 80022f8:	f000 faea 	bl	80028d0 <sensor_get_voltage>
 80022fc:	eef0 7a40 	vmov.f32	s15, s0
 8002300:	2310      	movs	r3, #16
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	2300      	movs	r3, #0
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800230c:	2204      	movs	r2, #4
 800230e:	eeb0 0a67 	vmov.f32	s0, s15
 8002312:	2164      	movs	r1, #100	; 0x64
 8002314:	2082      	movs	r0, #130	; 0x82
 8002316:	f7ff fc97 	bl	8001c48 <lcd_show_float_num>
		lcd_show_string(10, 120, "Current:", RED, BLACK, 16, 0);
 800231a:	2300      	movs	r3, #0
 800231c:	9302      	str	r3, [sp, #8]
 800231e:	2310      	movs	r3, #16
 8002320:	9301      	str	r3, [sp, #4]
 8002322:	2300      	movs	r3, #0
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800232a:	4a3b      	ldr	r2, [pc, #236]	; (8002418 <TestADC+0x170>)
 800232c:	2178      	movs	r1, #120	; 0x78
 800232e:	200a      	movs	r0, #10
 8002330:	f7ff fe96 	bl	8002060 <lcd_show_string>
		lcd_show_float_num(130, 120, sensor_get_current(), 4, RED, BLACK, 16);
 8002334:	f000 fb08 	bl	8002948 <sensor_get_current>
 8002338:	eef0 7a40 	vmov.f32	s15, s0
 800233c:	2310      	movs	r3, #16
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	2300      	movs	r3, #0
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002348:	2204      	movs	r2, #4
 800234a:	eeb0 0a67 	vmov.f32	s0, s15
 800234e:	2178      	movs	r1, #120	; 0x78
 8002350:	2082      	movs	r0, #130	; 0x82
 8002352:	f7ff fc79 	bl	8001c48 <lcd_show_float_num>
		lcd_show_string(10, 140, "Light:", RED, BLACK, 16, 0);
 8002356:	2300      	movs	r3, #0
 8002358:	9302      	str	r3, [sp, #8]
 800235a:	2310      	movs	r3, #16
 800235c:	9301      	str	r3, [sp, #4]
 800235e:	2300      	movs	r3, #0
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002366:	4a2d      	ldr	r2, [pc, #180]	; (800241c <TestADC+0x174>)
 8002368:	218c      	movs	r1, #140	; 0x8c
 800236a:	200a      	movs	r0, #10
 800236c:	f7ff fe78 	bl	8002060 <lcd_show_string>
		lcd_show_int_num(130, 140, sensor_get_light(), 4, RED, BLACK, 16);
 8002370:	f000 fa96 	bl	80028a0 <sensor_get_light>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	2310      	movs	r3, #16
 800237a:	9302      	str	r3, [sp, #8]
 800237c:	2300      	movs	r3, #0
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	2304      	movs	r3, #4
 8002388:	218c      	movs	r1, #140	; 0x8c
 800238a:	2082      	movs	r0, #130	; 0x82
 800238c:	f7ff fbde 	bl	8001b4c <lcd_show_int_num>
		lcd_show_string(10, 160, "Potentiometer:", RED, BLACK, 16, 0);
 8002390:	2300      	movs	r3, #0
 8002392:	9302      	str	r3, [sp, #8]
 8002394:	2310      	movs	r3, #16
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	2300      	movs	r3, #0
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023a0:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <TestADC+0x178>)
 80023a2:	21a0      	movs	r1, #160	; 0xa0
 80023a4:	200a      	movs	r0, #10
 80023a6:	f7ff fe5b 	bl	8002060 <lcd_show_string>
		lcd_show_int_num(130, 160, sensor_get_potentiometer(), 4, RED, BLACK,
 80023aa:	f000 fa85 	bl	80028b8 <sensor_get_potentiometer>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461a      	mov	r2, r3
 80023b2:	2310      	movs	r3, #16
 80023b4:	9302      	str	r3, [sp, #8]
 80023b6:	2300      	movs	r3, #0
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2304      	movs	r3, #4
 80023c2:	21a0      	movs	r1, #160	; 0xa0
 80023c4:	2082      	movs	r0, #130	; 0x82
 80023c6:	f7ff fbc1 	bl	8001b4c <lcd_show_int_num>
				16);
		lcd_show_string(10, 180, "Temperature:", RED, BLACK, 16, 0);
 80023ca:	2300      	movs	r3, #0
 80023cc:	9302      	str	r3, [sp, #8]
 80023ce:	2310      	movs	r3, #16
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	2300      	movs	r3, #0
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <TestADC+0x17c>)
 80023dc:	21b4      	movs	r1, #180	; 0xb4
 80023de:	200a      	movs	r0, #10
 80023e0:	f7ff fe3e 	bl	8002060 <lcd_show_string>
		lcd_show_float_num(130, 180, sensor_get_temperature(), 4, RED, BLACK,
 80023e4:	f000 fb0c 	bl	8002a00 <sensor_get_temperature>
 80023e8:	eef0 7a40 	vmov.f32	s15, s0
 80023ec:	2310      	movs	r3, #16
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	2300      	movs	r3, #0
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023f8:	2204      	movs	r2, #4
 80023fa:	eeb0 0a67 	vmov.f32	s0, s15
 80023fe:	21b4      	movs	r1, #180	; 0xb4
 8002400:	2082      	movs	r0, #130	; 0x82
 8002402:	f7ff fc21 	bl	8001c48 <lcd_show_float_num>
				16);
	}
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	2000062e 	.word	0x2000062e
 8002410:	66666667 	.word	0x66666667
 8002414:	080075b8 	.word	0x080075b8
 8002418:	080075c4 	.word	0x080075c4
 800241c:	080075d0 	.word	0x080075d0
 8002420:	080075d8 	.word	0x080075d8
 8002424:	080075e8 	.word	0x080075e8

08002428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800242c:	b672      	cpsid	i
}
 800242e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002430:	e7fe      	b.n	8002430 <Error_Handler+0x8>
	...

08002434 <_is_character_received>:
	}
	return 0;
}

uint8_t _is_character_received()
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
	if (_character_received_flag == 1)
 8002438:	4b07      	ldr	r3, [pc, #28]	; (8002458 <_is_character_received+0x24>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d104      	bne.n	800244a <_is_character_received+0x16>
	{
		_character_received_flag = 0;
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <_is_character_received+0x24>)
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
		return 1;
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <_is_character_received+0x18>
	}
	return 0;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	2000084c 	.word	0x2000084c

0800245c <_is_transmit>:

uint8_t _is_transmit()
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
	if (_transmit_flag == 1)
 8002460:	4b07      	ldr	r3, [pc, #28]	; (8002480 <_is_transmit+0x24>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d104      	bne.n	8002472 <_is_transmit+0x16>
	{
		_transmit_flag = 0;
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <_is_transmit+0x24>)
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]
		return 1;
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <_is_transmit+0x18>
	}
	return 0;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	2000084d 	.word	0x2000084d

08002484 <_crc_checking>:

uint8_t _crc_checking()
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
	if (_receive_index - 2 >= 0)
 800248a:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <_crc_checking+0x60>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d922      	bls.n	80024d8 <_crc_checking+0x54>
	{
		uint16_t crc = crc16(_receive_buffer, _receive_index - 2);
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <_crc_checking+0x60>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b02      	subs	r3, #2
 800249a:	b29b      	uxth	r3, r3
 800249c:	4619      	mov	r1, r3
 800249e:	4812      	ldr	r0, [pc, #72]	; (80024e8 <_crc_checking+0x64>)
 80024a0:	f7fe ffa0 	bl	80013e4 <crc16>
 80024a4:	4603      	mov	r3, r0
 80024a6:	80fb      	strh	r3, [r7, #6]
		uint8_t crc_high = (crc >> 8) & 0xFF;
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	0a1b      	lsrs	r3, r3, #8
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	717b      	strb	r3, [r7, #5]
		uint8_t crc_low = crc & 0xFF;
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	713b      	strb	r3, [r7, #4]
		if (crc_low == _receive_buffer[_receive_index - 2] && crc_high == _receive_buffer[_receive_index - 1])
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <_crc_checking+0x60>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	3b02      	subs	r3, #2
 80024ba:	4a0b      	ldr	r2, [pc, #44]	; (80024e8 <_crc_checking+0x64>)
 80024bc:	5cd3      	ldrb	r3, [r2, r3]
 80024be:	793a      	ldrb	r2, [r7, #4]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d109      	bne.n	80024d8 <_crc_checking+0x54>
 80024c4:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <_crc_checking+0x60>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	4a07      	ldr	r2, [pc, #28]	; (80024e8 <_crc_checking+0x64>)
 80024cc:	5cd3      	ldrb	r3, [r2, r3]
 80024ce:	797a      	ldrb	r2, [r7, #5]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d101      	bne.n	80024d8 <_crc_checking+0x54>
		{
			return 1;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <_crc_checking+0x56>
		}
	}

	return 0;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000744 	.word	0x20000744
 80024e8:	20000644 	.word	0x20000644

080024ec <f_rs485_init>:
 * @param flag_rx: flag for receive callback fsm
 * @param rx_size: the size of receive command for callback fsm
 * @retval: None
 */
void f_rs485_init(UART_HandleTypeDef *huart, uint8_t *receive_buffer, uint8_t *flag_rx, uint16_t *rx_size)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	603b      	str	r3, [r7, #0]
	_huart_callback = huart;
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <f_rs485_init+0x34>)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6013      	str	r3, [r2, #0]
	_receive_buffer_callback = receive_buffer;
 8002500:	4a08      	ldr	r2, [pc, #32]	; (8002524 <f_rs485_init+0x38>)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	6013      	str	r3, [r2, #0]
	_flag_rx_callback = flag_rx;
 8002506:	4a08      	ldr	r2, [pc, #32]	; (8002528 <f_rs485_init+0x3c>)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6013      	str	r3, [r2, #0]
	_rx_size_callback = rx_size;
 800250c:	4a07      	ldr	r2, [pc, #28]	; (800252c <f_rs485_init+0x40>)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	6013      	str	r3, [r2, #0]
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000630 	.word	0x20000630
 8002524:	20000634 	.word	0x20000634
 8002528:	20000638 	.word	0x20000638
 800252c:	2000063c 	.word	0x2000063c

08002530 <f_rs485_send_cmd>:
 * @param tx_buffer_without_crc: transmit buffer address, maxsize is 254
 * @param tx_size_without_crc: number of bytes transmit, max is 254
 * @retval: None
 */
void f_rs485_send_cmd(uint8_t *tx_buffer_without_crc, uint8_t tx_size_without_crc)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	70fb      	strb	r3, [r7, #3]
	if (tx_size_without_crc > 254) return;
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	2bff      	cmp	r3, #255	; 0xff
 8002540:	d038      	beq.n	80025b4 <f_rs485_send_cmd+0x84>

	for (int i = 0; i < tx_size_without_crc; i++)
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	e00b      	b.n	8002560 <f_rs485_send_cmd+0x30>
	{
		_transmit_buffer[i] = tx_buffer_without_crc[i];
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	7819      	ldrb	r1, [r3, #0]
 8002550:	4a1a      	ldr	r2, [pc, #104]	; (80025bc <f_rs485_send_cmd+0x8c>)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4413      	add	r3, r2
 8002556:	460a      	mov	r2, r1
 8002558:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < tx_size_without_crc; i++)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	3301      	adds	r3, #1
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	429a      	cmp	r2, r3
 8002566:	dbef      	blt.n	8002548 <f_rs485_send_cmd+0x18>
	}
	//	sprintf((void*)transmit_buffer,"%s",cmd_without_crc);
	_transmit_size = tx_size_without_crc;
 8002568:	4a15      	ldr	r2, [pc, #84]	; (80025c0 <f_rs485_send_cmd+0x90>)
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	7013      	strb	r3, [r2, #0]

	uint16_t crc = crc16(_transmit_buffer, _transmit_size);
 800256e:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <f_rs485_send_cmd+0x90>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	4619      	mov	r1, r3
 8002576:	4811      	ldr	r0, [pc, #68]	; (80025bc <f_rs485_send_cmd+0x8c>)
 8002578:	f7fe ff34 	bl	80013e4 <crc16>
 800257c:	4603      	mov	r3, r0
 800257e:	817b      	strh	r3, [r7, #10]
	_transmit_buffer[_transmit_size] = (uint8_t)(crc & 0x00FF); // CRC low
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <f_rs485_send_cmd+0x90>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	897b      	ldrh	r3, [r7, #10]
 8002588:	b2d9      	uxtb	r1, r3
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <f_rs485_send_cmd+0x8c>)
 800258c:	5499      	strb	r1, [r3, r2]
	_transmit_buffer[_transmit_size + 1] = (uint8_t)((crc >> 8) & 0x00FF); // CRC high
 800258e:	897b      	ldrh	r3, [r7, #10]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	b29a      	uxth	r2, r3
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <f_rs485_send_cmd+0x90>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	b2d1      	uxtb	r1, r2
 800259c:	4a07      	ldr	r2, [pc, #28]	; (80025bc <f_rs485_send_cmd+0x8c>)
 800259e:	54d1      	strb	r1, [r2, r3]

	_transmit_size += 2;
 80025a0:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <f_rs485_send_cmd+0x90>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	3302      	adds	r3, #2
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <f_rs485_send_cmd+0x90>)
 80025aa:	701a      	strb	r2, [r3, #0]
	_transmit_flag = 1;
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <f_rs485_send_cmd+0x94>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	e000      	b.n	80025b6 <f_rs485_send_cmd+0x86>
	if (tx_size_without_crc > 254) return;
 80025b4:	bf00      	nop
}
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000748 	.word	0x20000748
 80025c0:	20000848 	.word	0x20000848
 80025c4:	2000084d 	.word	0x2000084d

080025c8 <f_rs485_fsm_init>:

void f_rs485_fsm_init()
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_RS485_GPIO_Port, EN_RS485_Pin, 0);
 80025cc:	2200      	movs	r2, #0
 80025ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025d2:	4806      	ldr	r0, [pc, #24]	; (80025ec <f_rs485_fsm_init+0x24>)
 80025d4:	f002 f8c2 	bl	800475c <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(_huart_callback, &_receive_byte_buffer, 1);
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <f_rs485_fsm_init+0x28>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2201      	movs	r2, #1
 80025de:	4905      	ldr	r1, [pc, #20]	; (80025f4 <f_rs485_fsm_init+0x2c>)
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 ff54 	bl	800648e <HAL_UART_Receive_IT>
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40020000 	.word	0x40020000
 80025f0:	20000630 	.word	0x20000630
 80025f4:	20000640 	.word	0x20000640

080025f8 <f_rs485_fsm>:
/*
 * @brief: RS485 Finite State Machine, this must be put in while loop
 * @retval: None
 */
void f_rs485_fsm()
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
	switch (MODBUS485_STATE) {
 80025fc:	4b50      	ldr	r3, [pc, #320]	; (8002740 <f_rs485_fsm+0x148>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b05      	cmp	r3, #5
 8002602:	f200 8090 	bhi.w	8002726 <f_rs485_fsm+0x12e>
 8002606:	a201      	add	r2, pc, #4	; (adr r2, 800260c <f_rs485_fsm+0x14>)
 8002608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260c:	08002625 	.word	0x08002625
 8002610:	08002635 	.word	0x08002635
 8002614:	08002665 	.word	0x08002665
 8002618:	080026bf 	.word	0x080026bf
 800261c:	080026db 	.word	0x080026db
 8002620:	0800270b 	.word	0x0800270b
		case RS485_SUPER_INIT:
			_f_rs485_super_init();
 8002624:	f000 f896 	bl	8002754 <_f_rs485_super_init>

			if (1) // CHANGE STATE -> RS485_INIT
			{
				_f_init_rs485_init();
 8002628:	f000 f89b 	bl	8002762 <_f_init_rs485_init>
				MODBUS485_STATE = RS485_INIT;
 800262c:	4b44      	ldr	r3, [pc, #272]	; (8002740 <f_rs485_fsm+0x148>)
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002632:	e083      	b.n	800273c <f_rs485_fsm+0x144>
		case RS485_INIT:
			_f_rs485_init();
 8002634:	f000 f89d 	bl	8002772 <_f_rs485_init>

			if (isFlag(TI_RS485_T35_TIMER)) // CHANGE STATE -> RS485_IDLE
 8002638:	2008      	movs	r0, #8
 800263a:	f000 fbbd 	bl	8002db8 <isFlag>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <f_rs485_fsm+0x56>
			{
				_f_init_rs485_idle();
 8002644:	f000 f89c 	bl	8002780 <_f_init_rs485_idle>
				MODBUS485_STATE = RS485_IDLE;
 8002648:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <f_rs485_fsm+0x148>)
 800264a:	2202      	movs	r2, #2
 800264c:	701a      	strb	r2, [r3, #0]
			}
			if (_is_character_received()) // CHANGE STATE -> RS485_INIT
 800264e:	f7ff fef1 	bl	8002434 <_is_character_received>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d068      	beq.n	800272a <f_rs485_fsm+0x132>
			{
				_f_init_rs485_init();
 8002658:	f000 f883 	bl	8002762 <_f_init_rs485_init>
				MODBUS485_STATE = RS485_INIT;
 800265c:	4b38      	ldr	r3, [pc, #224]	; (8002740 <f_rs485_fsm+0x148>)
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002662:	e062      	b.n	800272a <f_rs485_fsm+0x132>
		case RS485_IDLE:
			_f_rs485_idle();
 8002664:	f000 f89e 	bl	80027a4 <_f_rs485_idle>

			if (_is_transmit()) // CHANGE STATE -> RS485_TRANSMIT
 8002668:	f7ff fef8 	bl	800245c <_is_transmit>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d01a      	beq.n	80026a8 <f_rs485_fsm+0xb0>
			{
				HAL_GPIO_WritePin(EN_RS485_GPIO_Port, EN_RS485_Pin, 1);
 8002672:	2201      	movs	r2, #1
 8002674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002678:	4832      	ldr	r0, [pc, #200]	; (8002744 <f_rs485_fsm+0x14c>)
 800267a:	f002 f86f 	bl	800475c <HAL_GPIO_WritePin>
				HAL_UART_Transmit(_huart_callback, _transmit_buffer, _transmit_size, HAL_MAX_DELAY);
 800267e:	4b32      	ldr	r3, [pc, #200]	; (8002748 <f_rs485_fsm+0x150>)
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	4b32      	ldr	r3, [pc, #200]	; (800274c <f_rs485_fsm+0x154>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b29a      	uxth	r2, r3
 8002688:	f04f 33ff 	mov.w	r3, #4294967295
 800268c:	4930      	ldr	r1, [pc, #192]	; (8002750 <f_rs485_fsm+0x158>)
 800268e:	f003 fe73 	bl	8006378 <HAL_UART_Transmit>
				HAL_GPIO_WritePin(EN_RS485_GPIO_Port, EN_RS485_Pin, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002698:	482a      	ldr	r0, [pc, #168]	; (8002744 <f_rs485_fsm+0x14c>)
 800269a:	f002 f85f 	bl	800475c <HAL_GPIO_WritePin>
				_f_init_rs485_transmit();
 800269e:	f000 f888 	bl	80027b2 <_f_init_rs485_transmit>
				MODBUS485_STATE = RS485_TRANSMIT;
 80026a2:	4b27      	ldr	r3, [pc, #156]	; (8002740 <f_rs485_fsm+0x148>)
 80026a4:	2203      	movs	r2, #3
 80026a6:	701a      	strb	r2, [r3, #0]
			}
			if (_is_character_received()) // CHANGE STATE -> RS485_RECEIVE
 80026a8:	f7ff fec4 	bl	8002434 <_is_character_received>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d03d      	beq.n	800272e <f_rs485_fsm+0x136>
			{
				_f_init_rs485_receive();
 80026b2:	f000 f88d 	bl	80027d0 <_f_init_rs485_receive>
				MODBUS485_STATE = RS485_RECEIVE;
 80026b6:	4b22      	ldr	r3, [pc, #136]	; (8002740 <f_rs485_fsm+0x148>)
 80026b8:	2204      	movs	r2, #4
 80026ba:	701a      	strb	r2, [r3, #0]
			}
			break;
 80026bc:	e037      	b.n	800272e <f_rs485_fsm+0x136>
		case RS485_TRANSMIT:
			_f_rs485_transmit();
 80026be:	f000 f880 	bl	80027c2 <_f_rs485_transmit>

			if (isFlag(TI_RS485_T35_TIMER)) // CHANGE STATE -> IDLE
 80026c2:	2008      	movs	r0, #8
 80026c4:	f000 fb78 	bl	8002db8 <isFlag>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d031      	beq.n	8002732 <f_rs485_fsm+0x13a>
			{
				_f_init_rs485_idle();
 80026ce:	f000 f857 	bl	8002780 <_f_init_rs485_idle>
				MODBUS485_STATE = RS485_IDLE;
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <f_rs485_fsm+0x148>)
 80026d4:	2202      	movs	r2, #2
 80026d6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80026d8:	e02b      	b.n	8002732 <f_rs485_fsm+0x13a>
		case RS485_RECEIVE:
			_f_rs485_receive();
 80026da:	f000 f885 	bl	80027e8 <_f_rs485_receive>

			if (_is_character_received()) // CHANGE STATE -> RS485_RECEIVE
 80026de:	f7ff fea9 	bl	8002434 <_is_character_received>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d004      	beq.n	80026f2 <f_rs485_fsm+0xfa>
			{
				_f_init_rs485_receive();
 80026e8:	f000 f872 	bl	80027d0 <_f_init_rs485_receive>
				MODBUS485_STATE = RS485_RECEIVE;
 80026ec:	4b14      	ldr	r3, [pc, #80]	; (8002740 <f_rs485_fsm+0x148>)
 80026ee:	2204      	movs	r2, #4
 80026f0:	701a      	strb	r2, [r3, #0]
			}
			if (isFlag(TI_RS485_T15_TIMER)) // CHANGE STATE -> RS485_WAITING_CONTROL
 80026f2:	2007      	movs	r0, #7
 80026f4:	f000 fb60 	bl	8002db8 <isFlag>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d01b      	beq.n	8002736 <f_rs485_fsm+0x13e>
			{
				_f_init_rs485_waiting_control();
 80026fe:	f000 f87b 	bl	80027f8 <_f_init_rs485_waiting_control>
				MODBUS485_STATE = RS485_WAITING_CONTROL;
 8002702:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <f_rs485_fsm+0x148>)
 8002704:	2205      	movs	r2, #5
 8002706:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002708:	e015      	b.n	8002736 <f_rs485_fsm+0x13e>
		case RS485_WAITING_CONTROL:
			_f_rs485_waiting_control();
 800270a:	f000 f881 	bl	8002810 <_f_rs485_waiting_control>

			if (isFlag(TI_RS485_T35_TIMER)) // CHANGE STATE -> RS485_IDLE
 800270e:	2008      	movs	r0, #8
 8002710:	f000 fb52 	bl	8002db8 <isFlag>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00f      	beq.n	800273a <f_rs485_fsm+0x142>
			{
				_f_init_rs485_idle();
 800271a:	f000 f831 	bl	8002780 <_f_init_rs485_idle>
				MODBUS485_STATE = RS485_IDLE;
 800271e:	4b08      	ldr	r3, [pc, #32]	; (8002740 <f_rs485_fsm+0x148>)
 8002720:	2202      	movs	r2, #2
 8002722:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002724:	e009      	b.n	800273a <f_rs485_fsm+0x142>
		default:
			break;
 8002726:	bf00      	nop
 8002728:	e008      	b.n	800273c <f_rs485_fsm+0x144>
			break;
 800272a:	bf00      	nop
 800272c:	e006      	b.n	800273c <f_rs485_fsm+0x144>
			break;
 800272e:	bf00      	nop
 8002730:	e004      	b.n	800273c <f_rs485_fsm+0x144>
			break;
 8002732:	bf00      	nop
 8002734:	e002      	b.n	800273c <f_rs485_fsm+0x144>
			break;
 8002736:	bf00      	nop
 8002738:	e000      	b.n	800273c <f_rs485_fsm+0x144>
			break;
 800273a:	bf00      	nop
	}
}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}
 8002740:	2000084b 	.word	0x2000084b
 8002744:	40020000 	.word	0x40020000
 8002748:	20000630 	.word	0x20000630
 800274c:	20000848 	.word	0x20000848
 8002750:	20000748 	.word	0x20000748

08002754 <_f_rs485_super_init>:
{
	// Do not thing
}

void _f_rs485_super_init()
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
	// Do not thing
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <_f_init_rs485_init>:

void _f_init_rs485_init()
{
 8002762:	b580      	push	{r7, lr}
 8002764:	af00      	add	r7, sp, #0
	setTimer(TI_RS485_T35_TIMER, TI_RS485_T35_TIME);
 8002766:	2104      	movs	r1, #4
 8002768:	2008      	movs	r0, #8
 800276a:	f000 fadd 	bl	8002d28 <setTimer>
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}

08002772 <_f_rs485_init>:

void _f_rs485_init()
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0
	// Do not thing
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <_f_init_rs485_idle>:

void _f_init_rs485_idle()
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
	_transmit_flag = 0;
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <_f_init_rs485_idle+0x1c>)
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
	_receive_index = 0;
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <_f_init_rs485_idle+0x20>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	2000084d 	.word	0x2000084d
 80027a0:	20000744 	.word	0x20000744

080027a4 <_f_rs485_idle>:

void _f_rs485_idle()
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
	// Do not thing
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <_f_init_rs485_transmit>:

void _f_init_rs485_transmit()
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	af00      	add	r7, sp, #0
	setTimer(TI_RS485_T35_TIMER, TI_RS485_T35_TIME);
 80027b6:	2104      	movs	r1, #4
 80027b8:	2008      	movs	r0, #8
 80027ba:	f000 fab5 	bl	8002d28 <setTimer>
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <_f_rs485_transmit>:

void _f_rs485_transmit()
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0
	// Do not thing
}
 80027c6:	bf00      	nop
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <_f_init_rs485_receive>:

void _f_init_rs485_receive()
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
	setTimer(TI_RS485_T35_TIMER, TI_RS485_T35_TIME);
 80027d4:	2104      	movs	r1, #4
 80027d6:	2008      	movs	r0, #8
 80027d8:	f000 faa6 	bl	8002d28 <setTimer>
	setTimer(TI_RS485_T15_TIMER, TI_RS485_T15_TIME);
 80027dc:	2101      	movs	r1, #1
 80027de:	2007      	movs	r0, #7
 80027e0:	f000 faa2 	bl	8002d28 <setTimer>
}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <_f_rs485_receive>:

void _f_rs485_receive()
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
	// Do not thing
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <_f_init_rs485_waiting_control>:

void _f_init_rs485_waiting_control()
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
	_isCRCChecking = 0;
 80027fc:	4b03      	ldr	r3, [pc, #12]	; (800280c <_f_init_rs485_waiting_control+0x14>)
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
}
 8002802:	bf00      	nop
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	2000084a 	.word	0x2000084a

08002810 <_f_rs485_waiting_control>:

void _f_rs485_waiting_control()
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
	if (_is_character_received())
 8002814:	f7ff fe0e 	bl	8002434 <_is_character_received>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <_f_rs485_waiting_control+0x14>
	{
		FRAME_STATUS = FRAME_NOT_OK;
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <_f_rs485_waiting_control+0x48>)
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
	}

	if (_isCRCChecking == 0)
 8002824:	4b0d      	ldr	r3, [pc, #52]	; (800285c <_f_rs485_waiting_control+0x4c>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d112      	bne.n	8002852 <_f_rs485_waiting_control+0x42>
	{
		// CHECK SLAVE ADDRESS if needed
		if (_crc_checking())
 800282c:	f7ff fe2a 	bl	8002484 <_crc_checking>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <_f_rs485_waiting_control+0x2e>
		{
			FRAME_STATUS = FRAME_OK;
 8002836:	4b08      	ldr	r3, [pc, #32]	; (8002858 <_f_rs485_waiting_control+0x48>)
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
 800283c:	e002      	b.n	8002844 <_f_rs485_waiting_control+0x34>
		}
		else
		{
			FRAME_STATUS = FRAME_NOT_OK;
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <_f_rs485_waiting_control+0x48>)
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
		}
		_frame_size = _receive_index;
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <_f_rs485_waiting_control+0x50>)
 8002846:	781a      	ldrb	r2, [r3, #0]
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <_f_rs485_waiting_control+0x54>)
 800284a:	701a      	strb	r2, [r3, #0]
		_isCRCChecking = 1;
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <_f_rs485_waiting_control+0x4c>)
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]
	}
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000220 	.word	0x20000220
 800285c:	2000084a 	.word	0x2000084a
 8002860:	20000744 	.word	0x20000744
 8002864:	20000849 	.word	0x20000849

08002868 <sensor_init>:

/* Variables */
uint16_t adc_receive[5];

/* Functions */
void sensor_init() {
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (void*) adc_receive, 5);
 800286c:	2205      	movs	r2, #5
 800286e:	4903      	ldr	r1, [pc, #12]	; (800287c <sensor_init+0x14>)
 8002870:	4803      	ldr	r0, [pc, #12]	; (8002880 <sensor_init+0x18>)
 8002872:	f000 fcf5 	bl	8003260 <HAL_ADC_Start_DMA>
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000850 	.word	0x20000850
 8002880:	20000468 	.word	0x20000468

08002884 <sensor_read>:

void sensor_read() {
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_receive, 5);
 8002888:	2205      	movs	r2, #5
 800288a:	4903      	ldr	r1, [pc, #12]	; (8002898 <sensor_read+0x14>)
 800288c:	4803      	ldr	r0, [pc, #12]	; (800289c <sensor_read+0x18>)
 800288e:	f000 fce7 	bl	8003260 <HAL_ADC_Start_DMA>
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000850 	.word	0x20000850
 800289c:	20000468 	.word	0x20000468

080028a0 <sensor_get_light>:

uint16_t sensor_get_light() {
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
	return adc_receive[2];
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <sensor_get_light+0x14>)
 80028a6:	889b      	ldrh	r3, [r3, #4]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000850 	.word	0x20000850

080028b8 <sensor_get_potentiometer>:

uint16_t sensor_get_potentiometer() {
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
	return adc_receive[3];
 80028bc:	4b03      	ldr	r3, [pc, #12]	; (80028cc <sensor_get_potentiometer+0x14>)
 80028be:	88db      	ldrh	r3, [r3, #6]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20000850 	.word	0x20000850

080028d0 <sensor_get_voltage>:

float sensor_get_voltage() {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
	return ((float) adc_receive[0] * 3.3 * 12) / (4095 * 1.565);
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <sensor_get_voltage+0x70>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	ee07 3a90 	vmov	s15, r3
 80028dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028e0:	ee17 0a90 	vmov	r0, s15
 80028e4:	f7fd fdd4 	bl	8000490 <__aeabi_f2d>
 80028e8:	a311      	add	r3, pc, #68	; (adr r3, 8002930 <sensor_get_voltage+0x60>)
 80028ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ee:	f7fd fe27 	bl	8000540 <__aeabi_dmul>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4610      	mov	r0, r2
 80028f8:	4619      	mov	r1, r3
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <sensor_get_voltage+0x74>)
 8002900:	f7fd fe1e 	bl	8000540 <__aeabi_dmul>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4610      	mov	r0, r2
 800290a:	4619      	mov	r1, r3
 800290c:	a30a      	add	r3, pc, #40	; (adr r3, 8002938 <sensor_get_voltage+0x68>)
 800290e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002912:	f7fd ff3f 	bl	8000794 <__aeabi_ddiv>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4610      	mov	r0, r2
 800291c:	4619      	mov	r1, r3
 800291e:	f7fe f821 	bl	8000964 <__aeabi_d2f>
 8002922:	4603      	mov	r3, r0
 8002924:	ee07 3a90 	vmov	s15, r3
}
 8002928:	eeb0 0a67 	vmov.f32	s0, s15
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	66666666 	.word	0x66666666
 8002934:	400a6666 	.word	0x400a6666
 8002938:	cccccccd 	.word	0xcccccccd
 800293c:	40b908ac 	.word	0x40b908ac
 8002940:	20000850 	.word	0x20000850
 8002944:	40280000 	.word	0x40280000

08002948 <sensor_get_current>:

float sensor_get_current() {
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
	return (((float) adc_receive[1] * 3.3 * 1000) / (4095 * 0.647) - 2.5) * 5
 800294c:	4b28      	ldr	r3, [pc, #160]	; (80029f0 <sensor_get_current+0xa8>)
 800294e:	885b      	ldrh	r3, [r3, #2]
 8002950:	ee07 3a90 	vmov	s15, r3
 8002954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002958:	ee17 0a90 	vmov	r0, s15
 800295c:	f7fd fd98 	bl	8000490 <__aeabi_f2d>
 8002960:	a31f      	add	r3, pc, #124	; (adr r3, 80029e0 <sensor_get_current+0x98>)
 8002962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002966:	f7fd fdeb 	bl	8000540 <__aeabi_dmul>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	4b1f      	ldr	r3, [pc, #124]	; (80029f4 <sensor_get_current+0xac>)
 8002978:	f7fd fde2 	bl	8000540 <__aeabi_dmul>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	a318      	add	r3, pc, #96	; (adr r3, 80029e8 <sensor_get_current+0xa0>)
 8002986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298a:	f7fd ff03 	bl	8000794 <__aeabi_ddiv>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <sensor_get_current+0xb0>)
 800299c:	f7fd fc18 	bl	80001d0 <__aeabi_dsub>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	4b13      	ldr	r3, [pc, #76]	; (80029fc <sensor_get_current+0xb4>)
 80029ae:	f7fd fdc7 	bl	8000540 <__aeabi_dmul>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
			/ 2.5;
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <sensor_get_current+0xb0>)
 80029c0:	f7fd fee8 	bl	8000794 <__aeabi_ddiv>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	f7fd ffca 	bl	8000964 <__aeabi_d2f>
 80029d0:	4603      	mov	r3, r0
 80029d2:	ee07 3a90 	vmov	s15, r3
}
 80029d6:	eeb0 0a67 	vmov.f32	s0, s15
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	f3af 8000 	nop.w
 80029e0:	66666666 	.word	0x66666666
 80029e4:	400a6666 	.word	0x400a6666
 80029e8:	147ae148 	.word	0x147ae148
 80029ec:	40a4b2ee 	.word	0x40a4b2ee
 80029f0:	20000850 	.word	0x20000850
 80029f4:	408f4000 	.word	0x408f4000
 80029f8:	40040000 	.word	0x40040000
 80029fc:	40140000 	.word	0x40140000

08002a00 <sensor_get_temperature>:

float sensor_get_temperature() {
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
	return ((float) adc_receive[4] * 330) / (4095);
 8002a04:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <sensor_get_temperature+0x30>)
 8002a06:	891b      	ldrh	r3, [r3, #8]
 8002a08:	ee07 3a90 	vmov	s15, r3
 8002a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a10:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002a34 <sensor_get_temperature+0x34>
 8002a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a18:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002a38 <sensor_get_temperature+0x38>
 8002a1c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a20:	eef0 7a66 	vmov.f32	s15, s13
}
 8002a24:	eeb0 0a67 	vmov.f32	s0, s15
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	20000850 	.word	0x20000850
 8002a34:	43a50000 	.word	0x43a50000
 8002a38:	457ff000 	.word	0x457ff000

08002a3c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a40:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <MX_SPI1_Init+0x64>)
 8002a42:	4a18      	ldr	r2, [pc, #96]	; (8002aa4 <MX_SPI1_Init+0x68>)
 8002a44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a46:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <MX_SPI1_Init+0x64>)
 8002a48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a4e:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <MX_SPI1_Init+0x64>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a54:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <MX_SPI1_Init+0x64>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a5a:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <MX_SPI1_Init+0x64>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <MX_SPI1_Init+0x64>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a66:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <MX_SPI1_Init+0x64>)
 8002a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <MX_SPI1_Init+0x64>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a74:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <MX_SPI1_Init+0x64>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <MX_SPI1_Init+0x64>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a80:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <MX_SPI1_Init+0x64>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <MX_SPI1_Init+0x64>)
 8002a88:	220a      	movs	r2, #10
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a8c:	4804      	ldr	r0, [pc, #16]	; (8002aa0 <MX_SPI1_Init+0x64>)
 8002a8e:	f002 fad7 	bl	8005040 <HAL_SPI_Init>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a98:	f7ff fcc6 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a9c:	bf00      	nop
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	2000085c 	.word	0x2000085c
 8002aa4:	40013000 	.word	0x40013000

08002aa8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a19      	ldr	r2, [pc, #100]	; (8002b2c <HAL_SPI_MspInit+0x84>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d12b      	bne.n	8002b22 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <HAL_SPI_MspInit+0x88>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a17      	ldr	r2, [pc, #92]	; (8002b30 <HAL_SPI_MspInit+0x88>)
 8002ad4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <HAL_SPI_MspInit+0x88>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_SPI_MspInit+0x88>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a10      	ldr	r2, [pc, #64]	; (8002b30 <HAL_SPI_MspInit+0x88>)
 8002af0:	f043 0302 	orr.w	r3, r3, #2
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <HAL_SPI_MspInit+0x88>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002b02:	2338      	movs	r3, #56	; 0x38
 8002b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b12:	2305      	movs	r3, #5
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b16:	f107 0314 	add.w	r3, r7, #20
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4805      	ldr	r0, [pc, #20]	; (8002b34 <HAL_SPI_MspInit+0x8c>)
 8002b1e:	f001 fc81 	bl	8004424 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002b22:	bf00      	nop
 8002b24:	3728      	adds	r7, #40	; 0x28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40013000 	.word	0x40013000
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40020400 	.word	0x40020400

08002b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <HAL_MspInit+0x4c>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	4a0f      	ldr	r2, [pc, #60]	; (8002b84 <HAL_MspInit+0x4c>)
 8002b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <HAL_MspInit+0x4c>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <HAL_MspInit+0x4c>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	4a08      	ldr	r2, [pc, #32]	; (8002b84 <HAL_MspInit+0x4c>)
 8002b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b68:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_MspInit+0x4c>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40023800 	.word	0x40023800

08002b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b8c:	e7fe      	b.n	8002b8c <NMI_Handler+0x4>

08002b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b92:	e7fe      	b.n	8002b92 <HardFault_Handler+0x4>

08002b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b98:	e7fe      	b.n	8002b98 <MemManage_Handler+0x4>

08002b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b9e:	e7fe      	b.n	8002b9e <BusFault_Handler+0x4>

08002ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ba4:	e7fe      	b.n	8002ba4 <UsageFault_Handler+0x4>

08002ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bd4:	f000 fabc 	bl	8003150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002be0:	4802      	ldr	r0, [pc, #8]	; (8002bec <TIM3_IRQHandler+0x10>)
 8002be2:	f002 ffc3 	bl	8005b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	200008b4 	.word	0x200008b4

08002bf0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002bf4:	4802      	ldr	r0, [pc, #8]	; (8002c00 <USART3_IRQHandler+0x10>)
 8002bf6:	f003 fc6f 	bl	80064d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200009dc 	.word	0x200009dc

08002c04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c08:	4802      	ldr	r0, [pc, #8]	; (8002c14 <DMA2_Stream0_IRQHandler+0x10>)
 8002c0a:	f001 f9a1 	bl	8003f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	200004b0 	.word	0x200004b0

08002c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <SystemInit+0x20>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	4a05      	ldr	r2, [pc, #20]	; (8002c38 <SystemInit+0x20>)
 8002c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c42:	f107 0308 	add.w	r3, r7, #8
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	605a      	str	r2, [r3, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c50:	463b      	mov	r3, r7
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c58:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <MX_TIM3_Init+0x94>)
 8002c5a:	4a1e      	ldr	r2, [pc, #120]	; (8002cd4 <MX_TIM3_Init+0x98>)
 8002c5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8002c5e:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <MX_TIM3_Init+0x94>)
 8002c60:	f240 3247 	movw	r2, #839	; 0x347
 8002c64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c66:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <MX_TIM3_Init+0x94>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002c6c:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <MX_TIM3_Init+0x94>)
 8002c6e:	2263      	movs	r2, #99	; 0x63
 8002c70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c72:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <MX_TIM3_Init+0x94>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c78:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <MX_TIM3_Init+0x94>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c7e:	4814      	ldr	r0, [pc, #80]	; (8002cd0 <MX_TIM3_Init+0x94>)
 8002c80:	f002 feb4 	bl	80059ec <HAL_TIM_Base_Init>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002c8a:	f7ff fbcd 	bl	8002428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c94:	f107 0308 	add.w	r3, r7, #8
 8002c98:	4619      	mov	r1, r3
 8002c9a:	480d      	ldr	r0, [pc, #52]	; (8002cd0 <MX_TIM3_Init+0x94>)
 8002c9c:	f003 f856 	bl	8005d4c <HAL_TIM_ConfigClockSource>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002ca6:	f7ff fbbf 	bl	8002428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002caa:	2300      	movs	r3, #0
 8002cac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cb2:	463b      	mov	r3, r7
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4806      	ldr	r0, [pc, #24]	; (8002cd0 <MX_TIM3_Init+0x94>)
 8002cb8:	f003 fa7e 	bl	80061b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002cc2:	f7ff fbb1 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002cc6:	bf00      	nop
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	200008b4 	.word	0x200008b4
 8002cd4:	40000400 	.word	0x40000400

08002cd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a0e      	ldr	r2, [pc, #56]	; (8002d20 <HAL_TIM_Base_MspInit+0x48>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d115      	bne.n	8002d16 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <HAL_TIM_Base_MspInit+0x4c>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	4a0c      	ldr	r2, [pc, #48]	; (8002d24 <HAL_TIM_Base_MspInit+0x4c>)
 8002cf4:	f043 0302 	orr.w	r3, r3, #2
 8002cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_TIM_Base_MspInit+0x4c>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d06:	2200      	movs	r2, #0
 8002d08:	2100      	movs	r1, #0
 8002d0a:	201d      	movs	r0, #29
 8002d0c:	f000 ff51 	bl	8003bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d10:	201d      	movs	r0, #29
 8002d12:	f000 ff6a 	bl	8003bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40023800 	.word	0x40023800

08002d28 <setTimer>:
#include "timer.h"

struct TimerStruct timer[10];

void setTimer(int idx, int counter)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
	timer[idx].counter = counter / TICK;
 8002d32:	4908      	ldr	r1, [pc, #32]	; (8002d54 <setTimer+0x2c>)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	timer[idx].flag = 0;
 8002d3c:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <setTimer+0x2c>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	2200      	movs	r2, #0
 8002d46:	605a      	str	r2, [r3, #4]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	200008fc 	.word	0x200008fc

08002d58 <timerRun>:

void timerRun()
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; ++i)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	607b      	str	r3, [r7, #4]
 8002d62:	e01d      	b.n	8002da0 <timerRun+0x48>
	{
		if (timer[i].counter > 0)
 8002d64:	4a13      	ldr	r2, [pc, #76]	; (8002db4 <timerRun+0x5c>)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	dd14      	ble.n	8002d9a <timerRun+0x42>
		{
			--timer[i].counter;
 8002d70:	4a10      	ldr	r2, [pc, #64]	; (8002db4 <timerRun+0x5c>)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d78:	1e5a      	subs	r2, r3, #1
 8002d7a:	490e      	ldr	r1, [pc, #56]	; (8002db4 <timerRun+0x5c>)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			if (timer[i].counter <= 0)
 8002d82:	4a0c      	ldr	r2, [pc, #48]	; (8002db4 <timerRun+0x5c>)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	dc05      	bgt.n	8002d9a <timerRun+0x42>
			{
				timer[i].flag = 1;
 8002d8e:	4a09      	ldr	r2, [pc, #36]	; (8002db4 <timerRun+0x5c>)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	2201      	movs	r2, #1
 8002d98:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 10; ++i)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b09      	cmp	r3, #9
 8002da4:	ddde      	ble.n	8002d64 <timerRun+0xc>
			}
		}
	}
}
 8002da6:	bf00      	nop
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	200008fc 	.word	0x200008fc

08002db8 <isFlag>:

int isFlag(int idx)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	if (timer[idx].flag)
 8002dc0:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <isFlag+0x28>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <isFlag+0x1a>
	{
		return 1;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <isFlag+0x1c>
	}
	return 0;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	200008fc 	.word	0x200008fc

08002de4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002dea:	4a12      	ldr	r2, [pc, #72]	; (8002e34 <MX_USART1_UART_Init+0x50>)
 8002dec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002df0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002df4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002df6:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e08:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002e0a:	220c      	movs	r2, #12
 8002e0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e1a:	4805      	ldr	r0, [pc, #20]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002e1c:	f003 fa5c 	bl	80062d8 <HAL_UART_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e26:	f7ff faff 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	2000094c 	.word	0x2000094c
 8002e34:	40011000 	.word	0x40011000

08002e38 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <MX_USART2_UART_Init+0x4c>)
 8002e3e:	4a12      	ldr	r2, [pc, #72]	; (8002e88 <MX_USART2_UART_Init+0x50>)
 8002e40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e42:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <MX_USART2_UART_Init+0x4c>)
 8002e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <MX_USART2_UART_Init+0x4c>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <MX_USART2_UART_Init+0x4c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e56:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <MX_USART2_UART_Init+0x4c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e5c:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <MX_USART2_UART_Init+0x4c>)
 8002e5e:	220c      	movs	r2, #12
 8002e60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <MX_USART2_UART_Init+0x4c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <MX_USART2_UART_Init+0x4c>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e6e:	4805      	ldr	r0, [pc, #20]	; (8002e84 <MX_USART2_UART_Init+0x4c>)
 8002e70:	f003 fa32 	bl	80062d8 <HAL_UART_Init>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e7a:	f7ff fad5 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000994 	.word	0x20000994
 8002e88:	40004400 	.word	0x40004400

08002e8c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <MX_USART3_UART_Init+0x4c>)
 8002e92:	4a12      	ldr	r2, [pc, #72]	; (8002edc <MX_USART3_UART_Init+0x50>)
 8002e94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <MX_USART3_UART_Init+0x4c>)
 8002e98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <MX_USART3_UART_Init+0x4c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <MX_USART3_UART_Init+0x4c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <MX_USART3_UART_Init+0x4c>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002eb0:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <MX_USART3_UART_Init+0x4c>)
 8002eb2:	220c      	movs	r2, #12
 8002eb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eb6:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <MX_USART3_UART_Init+0x4c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <MX_USART3_UART_Init+0x4c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ec2:	4805      	ldr	r0, [pc, #20]	; (8002ed8 <MX_USART3_UART_Init+0x4c>)
 8002ec4:	f003 fa08 	bl	80062d8 <HAL_UART_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002ece:	f7ff faab 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200009dc 	.word	0x200009dc
 8002edc:	40004800 	.word	0x40004800

08002ee0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08e      	sub	sp, #56	; 0x38
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a50      	ldr	r2, [pc, #320]	; (8003040 <HAL_UART_MspInit+0x160>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d12d      	bne.n	8002f5e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	623b      	str	r3, [r7, #32]
 8002f06:	4b4f      	ldr	r3, [pc, #316]	; (8003044 <HAL_UART_MspInit+0x164>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	4a4e      	ldr	r2, [pc, #312]	; (8003044 <HAL_UART_MspInit+0x164>)
 8002f0c:	f043 0310 	orr.w	r3, r3, #16
 8002f10:	6453      	str	r3, [r2, #68]	; 0x44
 8002f12:	4b4c      	ldr	r3, [pc, #304]	; (8003044 <HAL_UART_MspInit+0x164>)
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	623b      	str	r3, [r7, #32]
 8002f1c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	4b48      	ldr	r3, [pc, #288]	; (8003044 <HAL_UART_MspInit+0x164>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	4a47      	ldr	r2, [pc, #284]	; (8003044 <HAL_UART_MspInit+0x164>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2e:	4b45      	ldr	r3, [pc, #276]	; (8003044 <HAL_UART_MspInit+0x164>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	61fb      	str	r3, [r7, #28]
 8002f38:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f4c:	2307      	movs	r3, #7
 8002f4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f54:	4619      	mov	r1, r3
 8002f56:	483c      	ldr	r0, [pc, #240]	; (8003048 <HAL_UART_MspInit+0x168>)
 8002f58:	f001 fa64 	bl	8004424 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002f5c:	e06b      	b.n	8003036 <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a3a      	ldr	r2, [pc, #232]	; (800304c <HAL_UART_MspInit+0x16c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d12c      	bne.n	8002fc2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61bb      	str	r3, [r7, #24]
 8002f6c:	4b35      	ldr	r3, [pc, #212]	; (8003044 <HAL_UART_MspInit+0x164>)
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	4a34      	ldr	r2, [pc, #208]	; (8003044 <HAL_UART_MspInit+0x164>)
 8002f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f76:	6413      	str	r3, [r2, #64]	; 0x40
 8002f78:	4b32      	ldr	r3, [pc, #200]	; (8003044 <HAL_UART_MspInit+0x164>)
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	4b2e      	ldr	r3, [pc, #184]	; (8003044 <HAL_UART_MspInit+0x164>)
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	4a2d      	ldr	r2, [pc, #180]	; (8003044 <HAL_UART_MspInit+0x164>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6313      	str	r3, [r2, #48]	; 0x30
 8002f94:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <HAL_UART_MspInit+0x164>)
 8002f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fa0:	230c      	movs	r3, #12
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fac:	2303      	movs	r3, #3
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fb0:	2307      	movs	r3, #7
 8002fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4823      	ldr	r0, [pc, #140]	; (8003048 <HAL_UART_MspInit+0x168>)
 8002fbc:	f001 fa32 	bl	8004424 <HAL_GPIO_Init>
}
 8002fc0:	e039      	b.n	8003036 <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART3)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a22      	ldr	r2, [pc, #136]	; (8003050 <HAL_UART_MspInit+0x170>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d134      	bne.n	8003036 <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fcc:	2300      	movs	r3, #0
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <HAL_UART_MspInit+0x164>)
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	4a1b      	ldr	r2, [pc, #108]	; (8003044 <HAL_UART_MspInit+0x164>)
 8002fd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fda:	6413      	str	r3, [r2, #64]	; 0x40
 8002fdc:	4b19      	ldr	r3, [pc, #100]	; (8003044 <HAL_UART_MspInit+0x164>)
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	4b15      	ldr	r3, [pc, #84]	; (8003044 <HAL_UART_MspInit+0x164>)
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	4a14      	ldr	r2, [pc, #80]	; (8003044 <HAL_UART_MspInit+0x164>)
 8002ff2:	f043 0304 	orr.w	r3, r3, #4
 8002ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff8:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_UART_MspInit+0x164>)
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003004:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300a:	2302      	movs	r3, #2
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300e:	2300      	movs	r3, #0
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003012:	2303      	movs	r3, #3
 8003014:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003016:	2307      	movs	r3, #7
 8003018:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800301a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800301e:	4619      	mov	r1, r3
 8003020:	480c      	ldr	r0, [pc, #48]	; (8003054 <HAL_UART_MspInit+0x174>)
 8003022:	f001 f9ff 	bl	8004424 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003026:	2200      	movs	r2, #0
 8003028:	2100      	movs	r1, #0
 800302a:	2027      	movs	r0, #39	; 0x27
 800302c:	f000 fdc1 	bl	8003bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003030:	2027      	movs	r0, #39	; 0x27
 8003032:	f000 fdda 	bl	8003bea <HAL_NVIC_EnableIRQ>
}
 8003036:	bf00      	nop
 8003038:	3738      	adds	r7, #56	; 0x38
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40011000 	.word	0x40011000
 8003044:	40023800 	.word	0x40023800
 8003048:	40020000 	.word	0x40020000
 800304c:	40004400 	.word	0x40004400
 8003050:	40004800 	.word	0x40004800
 8003054:	40020800 	.word	0x40020800

08003058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003090 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800305c:	f7ff fddc 	bl	8002c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003060:	480c      	ldr	r0, [pc, #48]	; (8003094 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003062:	490d      	ldr	r1, [pc, #52]	; (8003098 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003064:	4a0d      	ldr	r2, [pc, #52]	; (800309c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003068:	e002      	b.n	8003070 <LoopCopyDataInit>

0800306a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800306a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800306c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800306e:	3304      	adds	r3, #4

08003070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003074:	d3f9      	bcc.n	800306a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003076:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003078:	4c0a      	ldr	r4, [pc, #40]	; (80030a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800307a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800307c:	e001      	b.n	8003082 <LoopFillZerobss>

0800307e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800307e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003080:	3204      	adds	r2, #4

08003082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003084:	d3fb      	bcc.n	800307e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003086:	f004 fa67 	bl	8007558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800308a:	f7ff f85f 	bl	800214c <main>
  bx  lr    
 800308e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003090:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003098:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 800309c:	0800a5a8 	.word	0x0800a5a8
  ldr r2, =_sbss
 80030a0:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 80030a4:	20000a28 	.word	0x20000a28

080030a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030a8:	e7fe      	b.n	80030a8 <ADC_IRQHandler>
	...

080030ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030b0:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <HAL_Init+0x40>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0d      	ldr	r2, [pc, #52]	; (80030ec <HAL_Init+0x40>)
 80030b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_Init+0x40>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <HAL_Init+0x40>)
 80030c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030c8:	4b08      	ldr	r3, [pc, #32]	; (80030ec <HAL_Init+0x40>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a07      	ldr	r2, [pc, #28]	; (80030ec <HAL_Init+0x40>)
 80030ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030d4:	2003      	movs	r0, #3
 80030d6:	f000 fd61 	bl	8003b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030da:	200f      	movs	r0, #15
 80030dc:	f000 f808 	bl	80030f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030e0:	f7ff fd2a 	bl	8002b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40023c00 	.word	0x40023c00

080030f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030f8:	4b12      	ldr	r3, [pc, #72]	; (8003144 <HAL_InitTick+0x54>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b12      	ldr	r3, [pc, #72]	; (8003148 <HAL_InitTick+0x58>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	4619      	mov	r1, r3
 8003102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003106:	fbb3 f3f1 	udiv	r3, r3, r1
 800310a:	fbb2 f3f3 	udiv	r3, r2, r3
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fd79 	bl	8003c06 <HAL_SYSTICK_Config>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e00e      	b.n	800313c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b0f      	cmp	r3, #15
 8003122:	d80a      	bhi.n	800313a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003124:	2200      	movs	r2, #0
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	f04f 30ff 	mov.w	r0, #4294967295
 800312c:	f000 fd41 	bl	8003bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003130:	4a06      	ldr	r2, [pc, #24]	; (800314c <HAL_InitTick+0x5c>)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	e000      	b.n	800313c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
}
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20000224 	.word	0x20000224
 8003148:	2000022c 	.word	0x2000022c
 800314c:	20000228 	.word	0x20000228

08003150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_IncTick+0x20>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_IncTick+0x24>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4413      	add	r3, r2
 8003160:	4a04      	ldr	r2, [pc, #16]	; (8003174 <HAL_IncTick+0x24>)
 8003162:	6013      	str	r3, [r2, #0]
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	2000022c 	.word	0x2000022c
 8003174:	20000a24 	.word	0x20000a24

08003178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return uwTick;
 800317c:	4b03      	ldr	r3, [pc, #12]	; (800318c <HAL_GetTick+0x14>)
 800317e:	681b      	ldr	r3, [r3, #0]
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000a24 	.word	0x20000a24

08003190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003198:	f7ff ffee 	bl	8003178 <HAL_GetTick>
 800319c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a8:	d005      	beq.n	80031b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031aa:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <HAL_Delay+0x44>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4413      	add	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031b6:	bf00      	nop
 80031b8:	f7ff ffde 	bl	8003178 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d8f7      	bhi.n	80031b8 <HAL_Delay+0x28>
  {
  }
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	2000022c 	.word	0x2000022c

080031d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e033      	b.n	8003256 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fd ff74 	bl	80010e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b00      	cmp	r3, #0
 8003214:	d118      	bne.n	8003248 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800321e:	f023 0302 	bic.w	r3, r3, #2
 8003222:	f043 0202 	orr.w	r2, r3, #2
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fa68 	bl	8003700 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f023 0303 	bic.w	r3, r3, #3
 800323e:	f043 0201 	orr.w	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	641a      	str	r2, [r3, #64]	; 0x40
 8003246:	e001      	b.n	800324c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003254:	7bfb      	ldrb	r3, [r7, #15]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_ADC_Start_DMA+0x1e>
 800327a:	2302      	movs	r3, #2
 800327c:	e0e9      	b.n	8003452 <HAL_ADC_Start_DMA+0x1f2>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d018      	beq.n	80032c6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032a4:	4b6d      	ldr	r3, [pc, #436]	; (800345c <HAL_ADC_Start_DMA+0x1fc>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a6d      	ldr	r2, [pc, #436]	; (8003460 <HAL_ADC_Start_DMA+0x200>)
 80032aa:	fba2 2303 	umull	r2, r3, r2, r3
 80032ae:	0c9a      	lsrs	r2, r3, #18
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80032b8:	e002      	b.n	80032c0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	3b01      	subs	r3, #1
 80032be:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f9      	bne.n	80032ba <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d4:	d107      	bne.n	80032e6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032e4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	f040 80a1 	bne.w	8003438 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032fe:	f023 0301 	bic.w	r3, r3, #1
 8003302:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003314:	2b00      	cmp	r3, #0
 8003316:	d007      	beq.n	8003328 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003320:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003334:	d106      	bne.n	8003344 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	f023 0206 	bic.w	r2, r3, #6
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	645a      	str	r2, [r3, #68]	; 0x44
 8003342:	e002      	b.n	800334a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003352:	4b44      	ldr	r3, [pc, #272]	; (8003464 <HAL_ADC_Start_DMA+0x204>)
 8003354:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	4a43      	ldr	r2, [pc, #268]	; (8003468 <HAL_ADC_Start_DMA+0x208>)
 800335c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	4a42      	ldr	r2, [pc, #264]	; (800346c <HAL_ADC_Start_DMA+0x20c>)
 8003364:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	4a41      	ldr	r2, [pc, #260]	; (8003470 <HAL_ADC_Start_DMA+0x210>)
 800336c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003376:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003386:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003396:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	334c      	adds	r3, #76	; 0x4c
 80033a2:	4619      	mov	r1, r3
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f000 fce8 	bl	8003d7c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d12a      	bne.n	800340e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a2d      	ldr	r2, [pc, #180]	; (8003474 <HAL_ADC_Start_DMA+0x214>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d015      	beq.n	80033ee <HAL_ADC_Start_DMA+0x18e>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a2c      	ldr	r2, [pc, #176]	; (8003478 <HAL_ADC_Start_DMA+0x218>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d105      	bne.n	80033d8 <HAL_ADC_Start_DMA+0x178>
 80033cc:	4b25      	ldr	r3, [pc, #148]	; (8003464 <HAL_ADC_Start_DMA+0x204>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00a      	beq.n	80033ee <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a27      	ldr	r2, [pc, #156]	; (800347c <HAL_ADC_Start_DMA+0x21c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d136      	bne.n	8003450 <HAL_ADC_Start_DMA+0x1f0>
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_ADC_Start_DMA+0x204>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d130      	bne.n	8003450 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d129      	bne.n	8003450 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	e020      	b.n	8003450 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a18      	ldr	r2, [pc, #96]	; (8003474 <HAL_ADC_Start_DMA+0x214>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d11b      	bne.n	8003450 <HAL_ADC_Start_DMA+0x1f0>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d114      	bne.n	8003450 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003434:	609a      	str	r2, [r3, #8]
 8003436:	e00b      	b.n	8003450 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	f043 0210 	orr.w	r2, r3, #16
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	f043 0201 	orr.w	r2, r3, #1
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000224 	.word	0x20000224
 8003460:	431bde83 	.word	0x431bde83
 8003464:	40012300 	.word	0x40012300
 8003468:	080038f9 	.word	0x080038f9
 800346c:	080039b3 	.word	0x080039b3
 8003470:	080039cf 	.word	0x080039cf
 8003474:	40012000 	.word	0x40012000
 8003478:	40012100 	.word	0x40012100
 800347c:	40012200 	.word	0x40012200

08003480 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x1c>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e105      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x228>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b09      	cmp	r3, #9
 80034e6:	d925      	bls.n	8003534 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68d9      	ldr	r1, [r3, #12]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	4613      	mov	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4413      	add	r3, r2
 80034fc:	3b1e      	subs	r3, #30
 80034fe:	2207      	movs	r2, #7
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43da      	mvns	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	400a      	ands	r2, r1
 800350c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68d9      	ldr	r1, [r3, #12]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	b29b      	uxth	r3, r3
 800351e:	4618      	mov	r0, r3
 8003520:	4603      	mov	r3, r0
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4403      	add	r3, r0
 8003526:	3b1e      	subs	r3, #30
 8003528:	409a      	lsls	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	e022      	b.n	800357a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6919      	ldr	r1, [r3, #16]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	461a      	mov	r2, r3
 8003542:	4613      	mov	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	2207      	movs	r2, #7
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43da      	mvns	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	400a      	ands	r2, r1
 8003556:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6919      	ldr	r1, [r3, #16]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	4618      	mov	r0, r3
 800356a:	4603      	mov	r3, r0
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	4403      	add	r3, r0
 8003570:	409a      	lsls	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b06      	cmp	r3, #6
 8003580:	d824      	bhi.n	80035cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	3b05      	subs	r3, #5
 8003594:	221f      	movs	r2, #31
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43da      	mvns	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	400a      	ands	r2, r1
 80035a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	4618      	mov	r0, r3
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	3b05      	subs	r3, #5
 80035be:	fa00 f203 	lsl.w	r2, r0, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	635a      	str	r2, [r3, #52]	; 0x34
 80035ca:	e04c      	b.n	8003666 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b0c      	cmp	r3, #12
 80035d2:	d824      	bhi.n	800361e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	3b23      	subs	r3, #35	; 0x23
 80035e6:	221f      	movs	r2, #31
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43da      	mvns	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	400a      	ands	r2, r1
 80035f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	b29b      	uxth	r3, r3
 8003602:	4618      	mov	r0, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	3b23      	subs	r3, #35	; 0x23
 8003610:	fa00 f203 	lsl.w	r2, r0, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	631a      	str	r2, [r3, #48]	; 0x30
 800361c:	e023      	b.n	8003666 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	3b41      	subs	r3, #65	; 0x41
 8003630:	221f      	movs	r2, #31
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43da      	mvns	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	400a      	ands	r2, r1
 800363e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	4618      	mov	r0, r3
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	3b41      	subs	r3, #65	; 0x41
 800365a:	fa00 f203 	lsl.w	r2, r0, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003666:	4b22      	ldr	r3, [pc, #136]	; (80036f0 <HAL_ADC_ConfigChannel+0x234>)
 8003668:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a21      	ldr	r2, [pc, #132]	; (80036f4 <HAL_ADC_ConfigChannel+0x238>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d109      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x1cc>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b12      	cmp	r3, #18
 800367a:	d105      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a19      	ldr	r2, [pc, #100]	; (80036f4 <HAL_ADC_ConfigChannel+0x238>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d123      	bne.n	80036da <HAL_ADC_ConfigChannel+0x21e>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b10      	cmp	r3, #16
 8003698:	d003      	beq.n	80036a2 <HAL_ADC_ConfigChannel+0x1e6>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b11      	cmp	r3, #17
 80036a0:	d11b      	bne.n	80036da <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b10      	cmp	r3, #16
 80036b4:	d111      	bne.n	80036da <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036b6:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <HAL_ADC_ConfigChannel+0x23c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a10      	ldr	r2, [pc, #64]	; (80036fc <HAL_ADC_ConfigChannel+0x240>)
 80036bc:	fba2 2303 	umull	r2, r3, r2, r3
 80036c0:	0c9a      	lsrs	r2, r3, #18
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80036cc:	e002      	b.n	80036d4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f9      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	40012300 	.word	0x40012300
 80036f4:	40012000 	.word	0x40012000
 80036f8:	20000224 	.word	0x20000224
 80036fc:	431bde83 	.word	0x431bde83

08003700 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003708:	4b79      	ldr	r3, [pc, #484]	; (80038f0 <ADC_Init+0x1f0>)
 800370a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	431a      	orrs	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003734:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	021a      	lsls	r2, r3, #8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003758:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6899      	ldr	r1, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	4a58      	ldr	r2, [pc, #352]	; (80038f4 <ADC_Init+0x1f4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d022      	beq.n	80037de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6899      	ldr	r1, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6899      	ldr	r1, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	e00f      	b.n	80037fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0202 	bic.w	r2, r2, #2
 800380c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6899      	ldr	r1, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	7e1b      	ldrb	r3, [r3, #24]
 8003818:	005a      	lsls	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01b      	beq.n	8003864 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800383a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800384a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	3b01      	subs	r3, #1
 8003858:	035a      	lsls	r2, r3, #13
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	e007      	b.n	8003874 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003872:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003882:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	3b01      	subs	r3, #1
 8003890:	051a      	lsls	r2, r3, #20
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6899      	ldr	r1, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038b6:	025a      	lsls	r2, r3, #9
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6899      	ldr	r1, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	029a      	lsls	r2, r3, #10
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	609a      	str	r2, [r3, #8]
}
 80038e4:	bf00      	nop
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40012300 	.word	0x40012300
 80038f4:	0f000001 	.word	0x0f000001

080038f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800390e:	2b00      	cmp	r3, #0
 8003910:	d13c      	bne.n	800398c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d12b      	bne.n	8003984 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003930:	2b00      	cmp	r3, #0
 8003932:	d127      	bne.n	8003984 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800393e:	2b00      	cmp	r3, #0
 8003940:	d006      	beq.n	8003950 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800394c:	2b00      	cmp	r3, #0
 800394e:	d119      	bne.n	8003984 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0220 	bic.w	r2, r2, #32
 800395e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d105      	bne.n	8003984 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f043 0201 	orr.w	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7ff fd7b 	bl	8003480 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800398a:	e00e      	b.n	80039aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f7ff fd85 	bl	80034a8 <HAL_ADC_ErrorCallback>
}
 800399e:	e004      	b.n	80039aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	4798      	blx	r3
}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f7ff fd67 	bl	8003494 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2240      	movs	r2, #64	; 0x40
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	f043 0204 	orr.w	r2, r3, #4
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff fd5a 	bl	80034a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <__NVIC_SetPriorityGrouping+0x44>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a18:	4013      	ands	r3, r2
 8003a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a2e:	4a04      	ldr	r2, [pc, #16]	; (8003a40 <__NVIC_SetPriorityGrouping+0x44>)
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	60d3      	str	r3, [r2, #12]
}
 8003a34:	bf00      	nop
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a48:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <__NVIC_GetPriorityGrouping+0x18>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	0a1b      	lsrs	r3, r3, #8
 8003a4e:	f003 0307 	and.w	r3, r3, #7
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	e000ed00 	.word	0xe000ed00

08003a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	db0b      	blt.n	8003a8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	f003 021f 	and.w	r2, r3, #31
 8003a78:	4907      	ldr	r1, [pc, #28]	; (8003a98 <__NVIC_EnableIRQ+0x38>)
 8003a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	2001      	movs	r0, #1
 8003a82:	fa00 f202 	lsl.w	r2, r0, r2
 8003a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	e000e100 	.word	0xe000e100

08003a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	6039      	str	r1, [r7, #0]
 8003aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	db0a      	blt.n	8003ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	490c      	ldr	r1, [pc, #48]	; (8003ae8 <__NVIC_SetPriority+0x4c>)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	0112      	lsls	r2, r2, #4
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	440b      	add	r3, r1
 8003ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ac4:	e00a      	b.n	8003adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	4908      	ldr	r1, [pc, #32]	; (8003aec <__NVIC_SetPriority+0x50>)
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	3b04      	subs	r3, #4
 8003ad4:	0112      	lsls	r2, r2, #4
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	440b      	add	r3, r1
 8003ada:	761a      	strb	r2, [r3, #24]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	e000e100 	.word	0xe000e100
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b089      	sub	sp, #36	; 0x24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f1c3 0307 	rsb	r3, r3, #7
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	bf28      	it	cs
 8003b0e:	2304      	movcs	r3, #4
 8003b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3304      	adds	r3, #4
 8003b16:	2b06      	cmp	r3, #6
 8003b18:	d902      	bls.n	8003b20 <NVIC_EncodePriority+0x30>
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3b03      	subs	r3, #3
 8003b1e:	e000      	b.n	8003b22 <NVIC_EncodePriority+0x32>
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b24:	f04f 32ff 	mov.w	r2, #4294967295
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	401a      	ands	r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b38:	f04f 31ff 	mov.w	r1, #4294967295
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b42:	43d9      	mvns	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b48:	4313      	orrs	r3, r2
         );
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3724      	adds	r7, #36	; 0x24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b68:	d301      	bcc.n	8003b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e00f      	b.n	8003b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b6e:	4a0a      	ldr	r2, [pc, #40]	; (8003b98 <SysTick_Config+0x40>)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b76:	210f      	movs	r1, #15
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7c:	f7ff ff8e 	bl	8003a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <SysTick_Config+0x40>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b86:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <SysTick_Config+0x40>)
 8003b88:	2207      	movs	r2, #7
 8003b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	e000e010 	.word	0xe000e010

08003b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff ff29 	bl	80039fc <__NVIC_SetPriorityGrouping>
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b086      	sub	sp, #24
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	4603      	mov	r3, r0
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bc4:	f7ff ff3e 	bl	8003a44 <__NVIC_GetPriorityGrouping>
 8003bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	6978      	ldr	r0, [r7, #20]
 8003bd0:	f7ff ff8e 	bl	8003af0 <NVIC_EncodePriority>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bda:	4611      	mov	r1, r2
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff ff5d 	bl	8003a9c <__NVIC_SetPriority>
}
 8003be2:	bf00      	nop
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b082      	sub	sp, #8
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff ff31 	bl	8003a60 <__NVIC_EnableIRQ>
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff ffa2 	bl	8003b58 <SysTick_Config>
 8003c14:	4603      	mov	r3, r0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c2c:	f7ff faa4 	bl	8003178 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e099      	b.n	8003d70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0201 	bic.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c5c:	e00f      	b.n	8003c7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c5e:	f7ff fa8b 	bl	8003178 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	d908      	bls.n	8003c7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2203      	movs	r2, #3
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e078      	b.n	8003d70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e8      	bne.n	8003c5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4b38      	ldr	r3, [pc, #224]	; (8003d78 <HAL_DMA_Init+0x158>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003caa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d107      	bne.n	8003ce8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f023 0307 	bic.w	r3, r3, #7
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d117      	bne.n	8003d42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00e      	beq.n	8003d42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fb01 	bl	800432c <DMA_CheckFifoParam>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2240      	movs	r2, #64	; 0x40
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e016      	b.n	8003d70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fab8 	bl	80042c0 <DMA_CalcBaseAndBitshift>
 8003d50:	4603      	mov	r3, r0
 8003d52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d58:	223f      	movs	r2, #63	; 0x3f
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	f010803f 	.word	0xf010803f

08003d7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_DMA_Start_IT+0x26>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e040      	b.n	8003e24 <HAL_DMA_Start_IT+0xa8>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d12f      	bne.n	8003e16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2202      	movs	r2, #2
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 fa4a 	bl	8004264 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd4:	223f      	movs	r2, #63	; 0x3f
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0216 	orr.w	r2, r2, #22
 8003dea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0208 	orr.w	r2, r2, #8
 8003e02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	e005      	b.n	8003e22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e3a:	f7ff f99d 	bl	8003178 <HAL_GetTick>
 8003e3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d008      	beq.n	8003e5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2280      	movs	r2, #128	; 0x80
 8003e50:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e052      	b.n	8003f04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0216 	bic.w	r2, r2, #22
 8003e6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695a      	ldr	r2, [r3, #20]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d103      	bne.n	8003e8e <HAL_DMA_Abort+0x62>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d007      	beq.n	8003e9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0208 	bic.w	r2, r2, #8
 8003e9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eae:	e013      	b.n	8003ed8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eb0:	f7ff f962 	bl	8003178 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b05      	cmp	r3, #5
 8003ebc:	d90c      	bls.n	8003ed8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2203      	movs	r2, #3
 8003ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e015      	b.n	8003f04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e4      	bne.n	8003eb0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eea:	223f      	movs	r2, #63	; 0x3f
 8003eec:	409a      	lsls	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d004      	beq.n	8003f2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2280      	movs	r2, #128	; 0x80
 8003f24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e00c      	b.n	8003f44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2205      	movs	r2, #5
 8003f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0201 	bic.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f5c:	4b8e      	ldr	r3, [pc, #568]	; (8004198 <HAL_DMA_IRQHandler+0x248>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a8e      	ldr	r2, [pc, #568]	; (800419c <HAL_DMA_IRQHandler+0x24c>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	0a9b      	lsrs	r3, r3, #10
 8003f68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7a:	2208      	movs	r2, #8
 8003f7c:	409a      	lsls	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4013      	ands	r3, r2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d01a      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d013      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0204 	bic.w	r2, r2, #4
 8003fa2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa8:	2208      	movs	r2, #8
 8003faa:	409a      	lsls	r2, r3
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb4:	f043 0201 	orr.w	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d012      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00b      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fde:	2201      	movs	r2, #1
 8003fe0:	409a      	lsls	r2, r3
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fea:	f043 0202 	orr.w	r2, r3, #2
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff6:	2204      	movs	r2, #4
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d012      	beq.n	8004028 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00b      	beq.n	8004028 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004014:	2204      	movs	r2, #4
 8004016:	409a      	lsls	r2, r3
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004020:	f043 0204 	orr.w	r2, r3, #4
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402c:	2210      	movs	r2, #16
 800402e:	409a      	lsls	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4013      	ands	r3, r2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d043      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d03c      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404a:	2210      	movs	r2, #16
 800404c:	409a      	lsls	r2, r3
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d018      	beq.n	8004092 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d108      	bne.n	8004080 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	2b00      	cmp	r3, #0
 8004074:	d024      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	4798      	blx	r3
 800407e:	e01f      	b.n	80040c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01b      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	4798      	blx	r3
 8004090:	e016      	b.n	80040c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d107      	bne.n	80040b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0208 	bic.w	r2, r2, #8
 80040ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c4:	2220      	movs	r2, #32
 80040c6:	409a      	lsls	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4013      	ands	r3, r2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 808f 	beq.w	80041f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 8087 	beq.w	80041f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e6:	2220      	movs	r2, #32
 80040e8:	409a      	lsls	r2, r3
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b05      	cmp	r3, #5
 80040f8:	d136      	bne.n	8004168 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0216 	bic.w	r2, r2, #22
 8004108:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004118:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	2b00      	cmp	r3, #0
 8004120:	d103      	bne.n	800412a <HAL_DMA_IRQHandler+0x1da>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004126:	2b00      	cmp	r3, #0
 8004128:	d007      	beq.n	800413a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0208 	bic.w	r2, r2, #8
 8004138:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413e:	223f      	movs	r2, #63	; 0x3f
 8004140:	409a      	lsls	r2, r3
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415a:	2b00      	cmp	r3, #0
 800415c:	d07e      	beq.n	800425c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	4798      	blx	r3
        }
        return;
 8004166:	e079      	b.n	800425c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01d      	beq.n	80041b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10d      	bne.n	80041a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004188:	2b00      	cmp	r3, #0
 800418a:	d031      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	4798      	blx	r3
 8004194:	e02c      	b.n	80041f0 <HAL_DMA_IRQHandler+0x2a0>
 8004196:	bf00      	nop
 8004198:	20000224 	.word	0x20000224
 800419c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d023      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	4798      	blx	r3
 80041b0:	e01e      	b.n	80041f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10f      	bne.n	80041e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0210 	bic.w	r2, r2, #16
 80041ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d032      	beq.n	800425e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d022      	beq.n	800424a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2205      	movs	r2, #5
 8004208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0201 	bic.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	3301      	adds	r3, #1
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	429a      	cmp	r2, r3
 8004226:	d307      	bcc.n	8004238 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f2      	bne.n	800421c <HAL_DMA_IRQHandler+0x2cc>
 8004236:	e000      	b.n	800423a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004238:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424e:	2b00      	cmp	r3, #0
 8004250:	d005      	beq.n	800425e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	4798      	blx	r3
 800425a:	e000      	b.n	800425e <HAL_DMA_IRQHandler+0x30e>
        return;
 800425c:	bf00      	nop
    }
  }
}
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004280:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b40      	cmp	r3, #64	; 0x40
 8004290:	d108      	bne.n	80042a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042a2:	e007      	b.n	80042b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	60da      	str	r2, [r3, #12]
}
 80042b4:	bf00      	nop
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	3b10      	subs	r3, #16
 80042d0:	4a14      	ldr	r2, [pc, #80]	; (8004324 <DMA_CalcBaseAndBitshift+0x64>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	091b      	lsrs	r3, r3, #4
 80042d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042da:	4a13      	ldr	r2, [pc, #76]	; (8004328 <DMA_CalcBaseAndBitshift+0x68>)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4413      	add	r3, r2
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d909      	bls.n	8004302 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042f6:	f023 0303 	bic.w	r3, r3, #3
 80042fa:	1d1a      	adds	r2, r3, #4
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	659a      	str	r2, [r3, #88]	; 0x58
 8004300:	e007      	b.n	8004312 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800430a:	f023 0303 	bic.w	r3, r3, #3
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	aaaaaaab 	.word	0xaaaaaaab
 8004328:	0800a590 	.word	0x0800a590

0800432c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d11f      	bne.n	8004386 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b03      	cmp	r3, #3
 800434a:	d856      	bhi.n	80043fa <DMA_CheckFifoParam+0xce>
 800434c:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <DMA_CheckFifoParam+0x28>)
 800434e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004352:	bf00      	nop
 8004354:	08004365 	.word	0x08004365
 8004358:	08004377 	.word	0x08004377
 800435c:	08004365 	.word	0x08004365
 8004360:	080043fb 	.word	0x080043fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d046      	beq.n	80043fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004374:	e043      	b.n	80043fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800437e:	d140      	bne.n	8004402 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004384:	e03d      	b.n	8004402 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800438e:	d121      	bne.n	80043d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b03      	cmp	r3, #3
 8004394:	d837      	bhi.n	8004406 <DMA_CheckFifoParam+0xda>
 8004396:	a201      	add	r2, pc, #4	; (adr r2, 800439c <DMA_CheckFifoParam+0x70>)
 8004398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439c:	080043ad 	.word	0x080043ad
 80043a0:	080043b3 	.word	0x080043b3
 80043a4:	080043ad 	.word	0x080043ad
 80043a8:	080043c5 	.word	0x080043c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
      break;
 80043b0:	e030      	b.n	8004414 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d025      	beq.n	800440a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c2:	e022      	b.n	800440a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043cc:	d11f      	bne.n	800440e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043d2:	e01c      	b.n	800440e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d903      	bls.n	80043e2 <DMA_CheckFifoParam+0xb6>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d003      	beq.n	80043e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043e0:	e018      	b.n	8004414 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
      break;
 80043e6:	e015      	b.n	8004414 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00e      	beq.n	8004412 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
      break;
 80043f8:	e00b      	b.n	8004412 <DMA_CheckFifoParam+0xe6>
      break;
 80043fa:	bf00      	nop
 80043fc:	e00a      	b.n	8004414 <DMA_CheckFifoParam+0xe8>
      break;
 80043fe:	bf00      	nop
 8004400:	e008      	b.n	8004414 <DMA_CheckFifoParam+0xe8>
      break;
 8004402:	bf00      	nop
 8004404:	e006      	b.n	8004414 <DMA_CheckFifoParam+0xe8>
      break;
 8004406:	bf00      	nop
 8004408:	e004      	b.n	8004414 <DMA_CheckFifoParam+0xe8>
      break;
 800440a:	bf00      	nop
 800440c:	e002      	b.n	8004414 <DMA_CheckFifoParam+0xe8>
      break;   
 800440e:	bf00      	nop
 8004410:	e000      	b.n	8004414 <DMA_CheckFifoParam+0xe8>
      break;
 8004412:	bf00      	nop
    }
  } 
  
  return status; 
 8004414:	7bfb      	ldrb	r3, [r7, #15]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop

08004424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004424:	b480      	push	{r7}
 8004426:	b089      	sub	sp, #36	; 0x24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004432:	2300      	movs	r3, #0
 8004434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004436:	2300      	movs	r3, #0
 8004438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	e16b      	b.n	8004718 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004440:	2201      	movs	r2, #1
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	4013      	ands	r3, r2
 8004452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	429a      	cmp	r2, r3
 800445a:	f040 815a 	bne.w	8004712 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	2b01      	cmp	r3, #1
 8004468:	d005      	beq.n	8004476 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004472:	2b02      	cmp	r3, #2
 8004474:	d130      	bne.n	80044d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	2203      	movs	r2, #3
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	43db      	mvns	r3, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4013      	ands	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4313      	orrs	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044ac:	2201      	movs	r2, #1
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	43db      	mvns	r3, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4013      	ands	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	091b      	lsrs	r3, r3, #4
 80044c2:	f003 0201 	and.w	r2, r3, #1
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d017      	beq.n	8004514 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	2203      	movs	r2, #3
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	43db      	mvns	r3, r3
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4013      	ands	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4313      	orrs	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d123      	bne.n	8004568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	08da      	lsrs	r2, r3, #3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3208      	adds	r2, #8
 8004528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800452c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	220f      	movs	r2, #15
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	43db      	mvns	r3, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4013      	ands	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	4313      	orrs	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	08da      	lsrs	r2, r3, #3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3208      	adds	r2, #8
 8004562:	69b9      	ldr	r1, [r7, #24]
 8004564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	2203      	movs	r2, #3
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	43db      	mvns	r3, r3
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4013      	ands	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 0203 	and.w	r2, r3, #3
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4313      	orrs	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80b4 	beq.w	8004712 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	4b60      	ldr	r3, [pc, #384]	; (8004730 <HAL_GPIO_Init+0x30c>)
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	4a5f      	ldr	r2, [pc, #380]	; (8004730 <HAL_GPIO_Init+0x30c>)
 80045b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045b8:	6453      	str	r3, [r2, #68]	; 0x44
 80045ba:	4b5d      	ldr	r3, [pc, #372]	; (8004730 <HAL_GPIO_Init+0x30c>)
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045c6:	4a5b      	ldr	r2, [pc, #364]	; (8004734 <HAL_GPIO_Init+0x310>)
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	089b      	lsrs	r3, r3, #2
 80045cc:	3302      	adds	r3, #2
 80045ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	220f      	movs	r2, #15
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43db      	mvns	r3, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4013      	ands	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a52      	ldr	r2, [pc, #328]	; (8004738 <HAL_GPIO_Init+0x314>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d02b      	beq.n	800464a <HAL_GPIO_Init+0x226>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a51      	ldr	r2, [pc, #324]	; (800473c <HAL_GPIO_Init+0x318>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d025      	beq.n	8004646 <HAL_GPIO_Init+0x222>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a50      	ldr	r2, [pc, #320]	; (8004740 <HAL_GPIO_Init+0x31c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d01f      	beq.n	8004642 <HAL_GPIO_Init+0x21e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a4f      	ldr	r2, [pc, #316]	; (8004744 <HAL_GPIO_Init+0x320>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d019      	beq.n	800463e <HAL_GPIO_Init+0x21a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a4e      	ldr	r2, [pc, #312]	; (8004748 <HAL_GPIO_Init+0x324>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d013      	beq.n	800463a <HAL_GPIO_Init+0x216>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a4d      	ldr	r2, [pc, #308]	; (800474c <HAL_GPIO_Init+0x328>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00d      	beq.n	8004636 <HAL_GPIO_Init+0x212>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a4c      	ldr	r2, [pc, #304]	; (8004750 <HAL_GPIO_Init+0x32c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d007      	beq.n	8004632 <HAL_GPIO_Init+0x20e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a4b      	ldr	r2, [pc, #300]	; (8004754 <HAL_GPIO_Init+0x330>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d101      	bne.n	800462e <HAL_GPIO_Init+0x20a>
 800462a:	2307      	movs	r3, #7
 800462c:	e00e      	b.n	800464c <HAL_GPIO_Init+0x228>
 800462e:	2308      	movs	r3, #8
 8004630:	e00c      	b.n	800464c <HAL_GPIO_Init+0x228>
 8004632:	2306      	movs	r3, #6
 8004634:	e00a      	b.n	800464c <HAL_GPIO_Init+0x228>
 8004636:	2305      	movs	r3, #5
 8004638:	e008      	b.n	800464c <HAL_GPIO_Init+0x228>
 800463a:	2304      	movs	r3, #4
 800463c:	e006      	b.n	800464c <HAL_GPIO_Init+0x228>
 800463e:	2303      	movs	r3, #3
 8004640:	e004      	b.n	800464c <HAL_GPIO_Init+0x228>
 8004642:	2302      	movs	r3, #2
 8004644:	e002      	b.n	800464c <HAL_GPIO_Init+0x228>
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <HAL_GPIO_Init+0x228>
 800464a:	2300      	movs	r3, #0
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	f002 0203 	and.w	r2, r2, #3
 8004652:	0092      	lsls	r2, r2, #2
 8004654:	4093      	lsls	r3, r2
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	4313      	orrs	r3, r2
 800465a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800465c:	4935      	ldr	r1, [pc, #212]	; (8004734 <HAL_GPIO_Init+0x310>)
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	089b      	lsrs	r3, r3, #2
 8004662:	3302      	adds	r3, #2
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800466a:	4b3b      	ldr	r3, [pc, #236]	; (8004758 <HAL_GPIO_Init+0x334>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	43db      	mvns	r3, r3
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	4013      	ands	r3, r2
 8004678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	4313      	orrs	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800468e:	4a32      	ldr	r2, [pc, #200]	; (8004758 <HAL_GPIO_Init+0x334>)
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004694:	4b30      	ldr	r3, [pc, #192]	; (8004758 <HAL_GPIO_Init+0x334>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	43db      	mvns	r3, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4013      	ands	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046b8:	4a27      	ldr	r2, [pc, #156]	; (8004758 <HAL_GPIO_Init+0x334>)
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046be:	4b26      	ldr	r3, [pc, #152]	; (8004758 <HAL_GPIO_Init+0x334>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	43db      	mvns	r3, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4013      	ands	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046e2:	4a1d      	ldr	r2, [pc, #116]	; (8004758 <HAL_GPIO_Init+0x334>)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046e8:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <HAL_GPIO_Init+0x334>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	43db      	mvns	r3, r3
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4013      	ands	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800470c:	4a12      	ldr	r2, [pc, #72]	; (8004758 <HAL_GPIO_Init+0x334>)
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	3301      	adds	r3, #1
 8004716:	61fb      	str	r3, [r7, #28]
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	2b0f      	cmp	r3, #15
 800471c:	f67f ae90 	bls.w	8004440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004720:	bf00      	nop
 8004722:	bf00      	nop
 8004724:	3724      	adds	r7, #36	; 0x24
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40023800 	.word	0x40023800
 8004734:	40013800 	.word	0x40013800
 8004738:	40020000 	.word	0x40020000
 800473c:	40020400 	.word	0x40020400
 8004740:	40020800 	.word	0x40020800
 8004744:	40020c00 	.word	0x40020c00
 8004748:	40021000 	.word	0x40021000
 800474c:	40021400 	.word	0x40021400
 8004750:	40021800 	.word	0x40021800
 8004754:	40021c00 	.word	0x40021c00
 8004758:	40013c00 	.word	0x40013c00

0800475c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	807b      	strh	r3, [r7, #2]
 8004768:	4613      	mov	r3, r2
 800476a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800476c:	787b      	ldrb	r3, [r7, #1]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004772:	887a      	ldrh	r2, [r7, #2]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004778:	e003      	b.n	8004782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800477a:	887b      	ldrh	r3, [r7, #2]
 800477c:	041a      	lsls	r2, r3, #16
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	619a      	str	r2, [r3, #24]
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e267      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d075      	beq.n	800489a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047ae:	4b88      	ldr	r3, [pc, #544]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d00c      	beq.n	80047d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ba:	4b85      	ldr	r3, [pc, #532]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d112      	bne.n	80047ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047c6:	4b82      	ldr	r3, [pc, #520]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d2:	d10b      	bne.n	80047ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d4:	4b7e      	ldr	r3, [pc, #504]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d05b      	beq.n	8004898 <HAL_RCC_OscConfig+0x108>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d157      	bne.n	8004898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e242      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f4:	d106      	bne.n	8004804 <HAL_RCC_OscConfig+0x74>
 80047f6:	4b76      	ldr	r3, [pc, #472]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a75      	ldr	r2, [pc, #468]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80047fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	e01d      	b.n	8004840 <HAL_RCC_OscConfig+0xb0>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800480c:	d10c      	bne.n	8004828 <HAL_RCC_OscConfig+0x98>
 800480e:	4b70      	ldr	r3, [pc, #448]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a6f      	ldr	r2, [pc, #444]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 8004814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	4b6d      	ldr	r3, [pc, #436]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a6c      	ldr	r2, [pc, #432]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 8004820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	e00b      	b.n	8004840 <HAL_RCC_OscConfig+0xb0>
 8004828:	4b69      	ldr	r3, [pc, #420]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a68      	ldr	r2, [pc, #416]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 800482e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	4b66      	ldr	r3, [pc, #408]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a65      	ldr	r2, [pc, #404]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 800483a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800483e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d013      	beq.n	8004870 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7fe fc96 	bl	8003178 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004850:	f7fe fc92 	bl	8003178 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b64      	cmp	r3, #100	; 0x64
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e207      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004862:	4b5b      	ldr	r3, [pc, #364]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0xc0>
 800486e:	e014      	b.n	800489a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004870:	f7fe fc82 	bl	8003178 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004878:	f7fe fc7e 	bl	8003178 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b64      	cmp	r3, #100	; 0x64
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e1f3      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488a:	4b51      	ldr	r3, [pc, #324]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0xe8>
 8004896:	e000      	b.n	800489a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d063      	beq.n	800496e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048a6:	4b4a      	ldr	r3, [pc, #296]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 030c 	and.w	r3, r3, #12
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00b      	beq.n	80048ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048b2:	4b47      	ldr	r3, [pc, #284]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d11c      	bne.n	80048f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048be:	4b44      	ldr	r3, [pc, #272]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d116      	bne.n	80048f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ca:	4b41      	ldr	r3, [pc, #260]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_RCC_OscConfig+0x152>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d001      	beq.n	80048e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e1c7      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e2:	4b3b      	ldr	r3, [pc, #236]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4937      	ldr	r1, [pc, #220]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048f6:	e03a      	b.n	800496e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d020      	beq.n	8004942 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004900:	4b34      	ldr	r3, [pc, #208]	; (80049d4 <HAL_RCC_OscConfig+0x244>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004906:	f7fe fc37 	bl	8003178 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800490e:	f7fe fc33 	bl	8003178 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e1a8      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004920:	4b2b      	ldr	r3, [pc, #172]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f0      	beq.n	800490e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492c:	4b28      	ldr	r3, [pc, #160]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	4925      	ldr	r1, [pc, #148]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 800493c:	4313      	orrs	r3, r2
 800493e:	600b      	str	r3, [r1, #0]
 8004940:	e015      	b.n	800496e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004942:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <HAL_RCC_OscConfig+0x244>)
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004948:	f7fe fc16 	bl	8003178 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004950:	f7fe fc12 	bl	8003178 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e187      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004962:	4b1b      	ldr	r3, [pc, #108]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d036      	beq.n	80049e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d016      	beq.n	80049b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004982:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <HAL_RCC_OscConfig+0x248>)
 8004984:	2201      	movs	r2, #1
 8004986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004988:	f7fe fbf6 	bl	8003178 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004990:	f7fe fbf2 	bl	8003178 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e167      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a2:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80049a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x200>
 80049ae:	e01b      	b.n	80049e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <HAL_RCC_OscConfig+0x248>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b6:	f7fe fbdf 	bl	8003178 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049bc:	e00e      	b.n	80049dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049be:	f7fe fbdb 	bl	8003178 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d907      	bls.n	80049dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e150      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
 80049d0:	40023800 	.word	0x40023800
 80049d4:	42470000 	.word	0x42470000
 80049d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049dc:	4b88      	ldr	r3, [pc, #544]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 80049de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1ea      	bne.n	80049be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 8097 	beq.w	8004b24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049f6:	2300      	movs	r3, #0
 80049f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049fa:	4b81      	ldr	r3, [pc, #516]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10f      	bne.n	8004a26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	4b7d      	ldr	r3, [pc, #500]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	4a7c      	ldr	r2, [pc, #496]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a14:	6413      	str	r3, [r2, #64]	; 0x40
 8004a16:	4b7a      	ldr	r3, [pc, #488]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a22:	2301      	movs	r3, #1
 8004a24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a26:	4b77      	ldr	r3, [pc, #476]	; (8004c04 <HAL_RCC_OscConfig+0x474>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d118      	bne.n	8004a64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a32:	4b74      	ldr	r3, [pc, #464]	; (8004c04 <HAL_RCC_OscConfig+0x474>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a73      	ldr	r2, [pc, #460]	; (8004c04 <HAL_RCC_OscConfig+0x474>)
 8004a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a3e:	f7fe fb9b 	bl	8003178 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a46:	f7fe fb97 	bl	8003178 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e10c      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a58:	4b6a      	ldr	r3, [pc, #424]	; (8004c04 <HAL_RCC_OscConfig+0x474>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d106      	bne.n	8004a7a <HAL_RCC_OscConfig+0x2ea>
 8004a6c:	4b64      	ldr	r3, [pc, #400]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	4a63      	ldr	r2, [pc, #396]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a72:	f043 0301 	orr.w	r3, r3, #1
 8004a76:	6713      	str	r3, [r2, #112]	; 0x70
 8004a78:	e01c      	b.n	8004ab4 <HAL_RCC_OscConfig+0x324>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b05      	cmp	r3, #5
 8004a80:	d10c      	bne.n	8004a9c <HAL_RCC_OscConfig+0x30c>
 8004a82:	4b5f      	ldr	r3, [pc, #380]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	4a5e      	ldr	r2, [pc, #376]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a88:	f043 0304 	orr.w	r3, r3, #4
 8004a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8e:	4b5c      	ldr	r3, [pc, #368]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a92:	4a5b      	ldr	r2, [pc, #364]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a94:	f043 0301 	orr.w	r3, r3, #1
 8004a98:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9a:	e00b      	b.n	8004ab4 <HAL_RCC_OscConfig+0x324>
 8004a9c:	4b58      	ldr	r3, [pc, #352]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa0:	4a57      	ldr	r2, [pc, #348]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	f023 0301 	bic.w	r3, r3, #1
 8004aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa8:	4b55      	ldr	r3, [pc, #340]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aac:	4a54      	ldr	r2, [pc, #336]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004aae:	f023 0304 	bic.w	r3, r3, #4
 8004ab2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d015      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abc:	f7fe fb5c 	bl	8003178 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac2:	e00a      	b.n	8004ada <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac4:	f7fe fb58 	bl	8003178 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e0cb      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ada:	4b49      	ldr	r3, [pc, #292]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0ee      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x334>
 8004ae6:	e014      	b.n	8004b12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae8:	f7fe fb46 	bl	8003178 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aee:	e00a      	b.n	8004b06 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af0:	f7fe fb42 	bl	8003178 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e0b5      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b06:	4b3e      	ldr	r3, [pc, #248]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1ee      	bne.n	8004af0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d105      	bne.n	8004b24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b18:	4b39      	ldr	r3, [pc, #228]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	4a38      	ldr	r2, [pc, #224]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 80a1 	beq.w	8004c70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b2e:	4b34      	ldr	r3, [pc, #208]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 030c 	and.w	r3, r3, #12
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d05c      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d141      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b42:	4b31      	ldr	r3, [pc, #196]	; (8004c08 <HAL_RCC_OscConfig+0x478>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b48:	f7fe fb16 	bl	8003178 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b50:	f7fe fb12 	bl	8003178 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e087      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b62:	4b27      	ldr	r3, [pc, #156]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69da      	ldr	r2, [r3, #28]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	019b      	lsls	r3, r3, #6
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	085b      	lsrs	r3, r3, #1
 8004b86:	3b01      	subs	r3, #1
 8004b88:	041b      	lsls	r3, r3, #16
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	061b      	lsls	r3, r3, #24
 8004b92:	491b      	ldr	r1, [pc, #108]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b98:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <HAL_RCC_OscConfig+0x478>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9e:	f7fe faeb 	bl	8003178 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba6:	f7fe fae7 	bl	8003178 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e05c      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb8:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x416>
 8004bc4:	e054      	b.n	8004c70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc6:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <HAL_RCC_OscConfig+0x478>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bcc:	f7fe fad4 	bl	8003178 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd4:	f7fe fad0 	bl	8003178 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e045      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be6:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x444>
 8004bf2:	e03d      	b.n	8004c70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d107      	bne.n	8004c0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e038      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
 8004c00:	40023800 	.word	0x40023800
 8004c04:	40007000 	.word	0x40007000
 8004c08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c0c:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <HAL_RCC_OscConfig+0x4ec>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d028      	beq.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d121      	bne.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d11a      	bne.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d111      	bne.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c52:	085b      	lsrs	r3, r3, #1
 8004c54:	3b01      	subs	r3, #1
 8004c56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d107      	bne.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d001      	beq.n	8004c70 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40023800 	.word	0x40023800

08004c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e0cc      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c94:	4b68      	ldr	r3, [pc, #416]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d90c      	bls.n	8004cbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca2:	4b65      	ldr	r3, [pc, #404]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004caa:	4b63      	ldr	r3, [pc, #396]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d001      	beq.n	8004cbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e0b8      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d020      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cd4:	4b59      	ldr	r3, [pc, #356]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	4a58      	ldr	r2, [pc, #352]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cde:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cec:	4b53      	ldr	r3, [pc, #332]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4a52      	ldr	r2, [pc, #328]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cf8:	4b50      	ldr	r3, [pc, #320]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	494d      	ldr	r1, [pc, #308]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d044      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d107      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d1e:	4b47      	ldr	r3, [pc, #284]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d119      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e07f      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d003      	beq.n	8004d3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d107      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d3e:	4b3f      	ldr	r3, [pc, #252]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e06f      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d4e:	4b3b      	ldr	r3, [pc, #236]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e067      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d5e:	4b37      	ldr	r3, [pc, #220]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f023 0203 	bic.w	r2, r3, #3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	4934      	ldr	r1, [pc, #208]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d70:	f7fe fa02 	bl	8003178 <HAL_GetTick>
 8004d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d76:	e00a      	b.n	8004d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d78:	f7fe f9fe 	bl	8003178 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e04f      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d8e:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 020c 	and.w	r2, r3, #12
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d1eb      	bne.n	8004d78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004da0:	4b25      	ldr	r3, [pc, #148]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d20c      	bcs.n	8004dc8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dae:	4b22      	ldr	r3, [pc, #136]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db6:	4b20      	ldr	r3, [pc, #128]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e032      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d008      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dd4:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4916      	ldr	r1, [pc, #88]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d009      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004df2:	4b12      	ldr	r3, [pc, #72]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	490e      	ldr	r1, [pc, #56]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e06:	f000 f821 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	091b      	lsrs	r3, r3, #4
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	490a      	ldr	r1, [pc, #40]	; (8004e40 <HAL_RCC_ClockConfig+0x1c0>)
 8004e18:	5ccb      	ldrb	r3, [r1, r3]
 8004e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1e:	4a09      	ldr	r2, [pc, #36]	; (8004e44 <HAL_RCC_ClockConfig+0x1c4>)
 8004e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e22:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fe f962 	bl	80030f0 <HAL_InitTick>

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	40023c00 	.word	0x40023c00
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	0800a578 	.word	0x0800a578
 8004e44:	20000224 	.word	0x20000224
 8004e48:	20000228 	.word	0x20000228

08004e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e50:	b090      	sub	sp, #64	; 0x40
 8004e52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e64:	4b59      	ldr	r3, [pc, #356]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 030c 	and.w	r3, r3, #12
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d00d      	beq.n	8004e8c <HAL_RCC_GetSysClockFreq+0x40>
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	f200 80a1 	bhi.w	8004fb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_RCC_GetSysClockFreq+0x34>
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d003      	beq.n	8004e86 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e7e:	e09b      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e80:	4b53      	ldr	r3, [pc, #332]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e84:	e09b      	b.n	8004fbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e86:	4b53      	ldr	r3, [pc, #332]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e8a:	e098      	b.n	8004fbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e8c:	4b4f      	ldr	r3, [pc, #316]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e94:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e96:	4b4d      	ldr	r3, [pc, #308]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d028      	beq.n	8004ef4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ea2:	4b4a      	ldr	r3, [pc, #296]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	099b      	lsrs	r3, r3, #6
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	623b      	str	r3, [r7, #32]
 8004eac:	627a      	str	r2, [r7, #36]	; 0x24
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	4b47      	ldr	r3, [pc, #284]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004eb8:	fb03 f201 	mul.w	r2, r3, r1
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	fb00 f303 	mul.w	r3, r0, r3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	4a43      	ldr	r2, [pc, #268]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ec6:	fba0 1202 	umull	r1, r2, r0, r2
 8004eca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ecc:	460a      	mov	r2, r1
 8004ece:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ed2:	4413      	add	r3, r2
 8004ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed8:	2200      	movs	r2, #0
 8004eda:	61bb      	str	r3, [r7, #24]
 8004edc:	61fa      	str	r2, [r7, #28]
 8004ede:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ee2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004ee6:	f7fb fd8d 	bl	8000a04 <__aeabi_uldivmod>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4613      	mov	r3, r2
 8004ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ef2:	e053      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef4:	4b35      	ldr	r3, [pc, #212]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	099b      	lsrs	r3, r3, #6
 8004efa:	2200      	movs	r2, #0
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	617a      	str	r2, [r7, #20]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f06:	f04f 0b00 	mov.w	fp, #0
 8004f0a:	4652      	mov	r2, sl
 8004f0c:	465b      	mov	r3, fp
 8004f0e:	f04f 0000 	mov.w	r0, #0
 8004f12:	f04f 0100 	mov.w	r1, #0
 8004f16:	0159      	lsls	r1, r3, #5
 8004f18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f1c:	0150      	lsls	r0, r2, #5
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	ebb2 080a 	subs.w	r8, r2, sl
 8004f26:	eb63 090b 	sbc.w	r9, r3, fp
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004f36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004f3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f3e:	ebb2 0408 	subs.w	r4, r2, r8
 8004f42:	eb63 0509 	sbc.w	r5, r3, r9
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	00eb      	lsls	r3, r5, #3
 8004f50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f54:	00e2      	lsls	r2, r4, #3
 8004f56:	4614      	mov	r4, r2
 8004f58:	461d      	mov	r5, r3
 8004f5a:	eb14 030a 	adds.w	r3, r4, sl
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	eb45 030b 	adc.w	r3, r5, fp
 8004f64:	607b      	str	r3, [r7, #4]
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f72:	4629      	mov	r1, r5
 8004f74:	028b      	lsls	r3, r1, #10
 8004f76:	4621      	mov	r1, r4
 8004f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	028a      	lsls	r2, r1, #10
 8004f80:	4610      	mov	r0, r2
 8004f82:	4619      	mov	r1, r3
 8004f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f86:	2200      	movs	r2, #0
 8004f88:	60bb      	str	r3, [r7, #8]
 8004f8a:	60fa      	str	r2, [r7, #12]
 8004f8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f90:	f7fb fd38 	bl	8000a04 <__aeabi_uldivmod>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4613      	mov	r3, r2
 8004f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	0c1b      	lsrs	r3, r3, #16
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004fac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fb6:	e002      	b.n	8004fbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fb8:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004fba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3740      	adds	r7, #64	; 0x40
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fca:	bf00      	nop
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	00f42400 	.word	0x00f42400
 8004fd4:	017d7840 	.word	0x017d7840

08004fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fdc:	4b03      	ldr	r3, [pc, #12]	; (8004fec <HAL_RCC_GetHCLKFreq+0x14>)
 8004fde:	681b      	ldr	r3, [r3, #0]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	20000224 	.word	0x20000224

08004ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ff4:	f7ff fff0 	bl	8004fd8 <HAL_RCC_GetHCLKFreq>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	4b05      	ldr	r3, [pc, #20]	; (8005010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	0a9b      	lsrs	r3, r3, #10
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	4903      	ldr	r1, [pc, #12]	; (8005014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005006:	5ccb      	ldrb	r3, [r1, r3]
 8005008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800500c:	4618      	mov	r0, r3
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40023800 	.word	0x40023800
 8005014:	0800a588 	.word	0x0800a588

08005018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800501c:	f7ff ffdc 	bl	8004fd8 <HAL_RCC_GetHCLKFreq>
 8005020:	4602      	mov	r2, r0
 8005022:	4b05      	ldr	r3, [pc, #20]	; (8005038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	0b5b      	lsrs	r3, r3, #13
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	4903      	ldr	r1, [pc, #12]	; (800503c <HAL_RCC_GetPCLK2Freq+0x24>)
 800502e:	5ccb      	ldrb	r3, [r1, r3]
 8005030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005034:	4618      	mov	r0, r3
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40023800 	.word	0x40023800
 800503c:	0800a588 	.word	0x0800a588

08005040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e07b      	b.n	800514a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	2b00      	cmp	r3, #0
 8005058:	d108      	bne.n	800506c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005062:	d009      	beq.n	8005078 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	61da      	str	r2, [r3, #28]
 800506a:	e005      	b.n	8005078 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fd fd08 	bl	8002aa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fc:	ea42 0103 	orr.w	r1, r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005104:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	0c1b      	lsrs	r3, r3, #16
 8005116:	f003 0104 	and.w	r1, r3, #4
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	f003 0210 	and.w	r2, r3, #16
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005138:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b088      	sub	sp, #32
 8005156:	af02      	add	r7, sp, #8
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	4613      	mov	r3, r2
 8005160:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b01      	cmp	r3, #1
 800516c:	d001      	beq.n	8005172 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800516e:	2302      	movs	r3, #2
 8005170:	e104      	b.n	800537c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800517a:	d112      	bne.n	80051a2 <HAL_SPI_Receive+0x50>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10e      	bne.n	80051a2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2204      	movs	r2, #4
 8005188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800518c:	88fa      	ldrh	r2, [r7, #6]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	4613      	mov	r3, r2
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	68b9      	ldr	r1, [r7, #8]
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f8f3 	bl	8005384 <HAL_SPI_TransmitReceive>
 800519e:	4603      	mov	r3, r0
 80051a0:	e0ec      	b.n	800537c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051a2:	f7fd ffe9 	bl	8003178 <HAL_GetTick>
 80051a6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <HAL_SPI_Receive+0x62>
 80051ae:	88fb      	ldrh	r3, [r7, #6]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0e1      	b.n	800537c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d101      	bne.n	80051c6 <HAL_SPI_Receive+0x74>
 80051c2:	2302      	movs	r3, #2
 80051c4:	e0da      	b.n	800537c <HAL_SPI_Receive+0x22a>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2204      	movs	r2, #4
 80051d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	88fa      	ldrh	r2, [r7, #6]
 80051e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	88fa      	ldrh	r2, [r7, #6]
 80051ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005214:	d10f      	bne.n	8005236 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005224:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005234:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	d007      	beq.n	8005254 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005252:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d170      	bne.n	800533e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800525c:	e035      	b.n	80052ca <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b01      	cmp	r3, #1
 800526a:	d115      	bne.n	8005298 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f103 020c 	add.w	r2, r3, #12
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	7812      	ldrb	r2, [r2, #0]
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800528c:	b29b      	uxth	r3, r3
 800528e:	3b01      	subs	r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005296:	e018      	b.n	80052ca <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005298:	f7fd ff6e 	bl	8003178 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d803      	bhi.n	80052b0 <HAL_SPI_Receive+0x15e>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ae:	d102      	bne.n	80052b6 <HAL_SPI_Receive+0x164>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e058      	b.n	800537c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1c4      	bne.n	800525e <HAL_SPI_Receive+0x10c>
 80052d4:	e038      	b.n	8005348 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d113      	bne.n	800530c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	b292      	uxth	r2, r2
 80052f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f6:	1c9a      	adds	r2, r3, #2
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	87da      	strh	r2, [r3, #62]	; 0x3e
 800530a:	e018      	b.n	800533e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800530c:	f7fd ff34 	bl	8003178 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d803      	bhi.n	8005324 <HAL_SPI_Receive+0x1d2>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005322:	d102      	bne.n	800532a <HAL_SPI_Receive+0x1d8>
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d109      	bne.n	800533e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e01e      	b.n	800537c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005342:	b29b      	uxth	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1c6      	bne.n	80052d6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	6839      	ldr	r1, [r7, #0]
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 fa4b 	bl	80057e8 <SPI_EndRxTransaction>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2220      	movs	r2, #32
 800535c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800537a:	2300      	movs	r3, #0
  }
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005392:	2301      	movs	r3, #1
 8005394:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005396:	f7fd feef 	bl	8003178 <HAL_GetTick>
 800539a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053a2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80053aa:	887b      	ldrh	r3, [r7, #2]
 80053ac:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80053ae:	7ffb      	ldrb	r3, [r7, #31]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d00c      	beq.n	80053ce <HAL_SPI_TransmitReceive+0x4a>
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ba:	d106      	bne.n	80053ca <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d102      	bne.n	80053ca <HAL_SPI_TransmitReceive+0x46>
 80053c4:	7ffb      	ldrb	r3, [r7, #31]
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d001      	beq.n	80053ce <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80053ca:	2302      	movs	r3, #2
 80053cc:	e17f      	b.n	80056ce <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_SPI_TransmitReceive+0x5c>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <HAL_SPI_TransmitReceive+0x5c>
 80053da:	887b      	ldrh	r3, [r7, #2]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e174      	b.n	80056ce <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <HAL_SPI_TransmitReceive+0x6e>
 80053ee:	2302      	movs	r3, #2
 80053f0:	e16d      	b.n	80056ce <HAL_SPI_TransmitReceive+0x34a>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b04      	cmp	r3, #4
 8005404:	d003      	beq.n	800540e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2205      	movs	r2, #5
 800540a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	887a      	ldrh	r2, [r7, #2]
 800541e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	887a      	ldrh	r2, [r7, #2]
 8005424:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	887a      	ldrh	r2, [r7, #2]
 8005430:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	887a      	ldrh	r2, [r7, #2]
 8005436:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544e:	2b40      	cmp	r3, #64	; 0x40
 8005450:	d007      	beq.n	8005462 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005460:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800546a:	d17e      	bne.n	800556a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <HAL_SPI_TransmitReceive+0xf6>
 8005474:	8afb      	ldrh	r3, [r7, #22]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d16c      	bne.n	8005554 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	881a      	ldrh	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548a:	1c9a      	adds	r2, r3, #2
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800549e:	e059      	b.n	8005554 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d11b      	bne.n	80054e6 <HAL_SPI_TransmitReceive+0x162>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d016      	beq.n	80054e6 <HAL_SPI_TransmitReceive+0x162>
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d113      	bne.n	80054e6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c2:	881a      	ldrh	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ce:	1c9a      	adds	r2, r3, #2
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d119      	bne.n	8005528 <HAL_SPI_TransmitReceive+0x1a4>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d014      	beq.n	8005528 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005508:	b292      	uxth	r2, r2
 800550a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	1c9a      	adds	r2, r3, #2
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005524:	2301      	movs	r3, #1
 8005526:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005528:	f7fd fe26 	bl	8003178 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005534:	429a      	cmp	r2, r3
 8005536:	d80d      	bhi.n	8005554 <HAL_SPI_TransmitReceive+0x1d0>
 8005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553e:	d009      	beq.n	8005554 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e0bc      	b.n	80056ce <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1a0      	bne.n	80054a0 <HAL_SPI_TransmitReceive+0x11c>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005562:	b29b      	uxth	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d19b      	bne.n	80054a0 <HAL_SPI_TransmitReceive+0x11c>
 8005568:	e082      	b.n	8005670 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <HAL_SPI_TransmitReceive+0x1f4>
 8005572:	8afb      	ldrh	r3, [r7, #22]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d171      	bne.n	800565c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	330c      	adds	r3, #12
 8005582:	7812      	ldrb	r2, [r2, #0]
 8005584:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005594:	b29b      	uxth	r3, r3
 8005596:	3b01      	subs	r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800559e:	e05d      	b.n	800565c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d11c      	bne.n	80055e8 <HAL_SPI_TransmitReceive+0x264>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d017      	beq.n	80055e8 <HAL_SPI_TransmitReceive+0x264>
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d114      	bne.n	80055e8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	330c      	adds	r3, #12
 80055c8:	7812      	ldrb	r2, [r2, #0]
 80055ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d119      	bne.n	800562a <HAL_SPI_TransmitReceive+0x2a6>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d014      	beq.n	800562a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	b29a      	uxth	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005626:	2301      	movs	r3, #1
 8005628:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800562a:	f7fd fda5 	bl	8003178 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005636:	429a      	cmp	r2, r3
 8005638:	d803      	bhi.n	8005642 <HAL_SPI_TransmitReceive+0x2be>
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005640:	d102      	bne.n	8005648 <HAL_SPI_TransmitReceive+0x2c4>
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	2b00      	cmp	r3, #0
 8005646:	d109      	bne.n	800565c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e038      	b.n	80056ce <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d19c      	bne.n	80055a0 <HAL_SPI_TransmitReceive+0x21c>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d197      	bne.n	80055a0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005670:	6a3a      	ldr	r2, [r7, #32]
 8005672:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 f91d 	bl	80058b4 <SPI_EndRxTxTransaction>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d008      	beq.n	8005692 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2220      	movs	r2, #32
 8005684:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e01d      	b.n	80056ce <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800569a:	2300      	movs	r3, #0
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	613b      	str	r3, [r7, #16]
 80056ae:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e000      	b.n	80056ce <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80056cc:	2300      	movs	r3, #0
  }
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3728      	adds	r7, #40	; 0x28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b088      	sub	sp, #32
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	603b      	str	r3, [r7, #0]
 80056e4:	4613      	mov	r3, r2
 80056e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056e8:	f7fd fd46 	bl	8003178 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	1a9b      	subs	r3, r3, r2
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	4413      	add	r3, r2
 80056f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056f8:	f7fd fd3e 	bl	8003178 <HAL_GetTick>
 80056fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056fe:	4b39      	ldr	r3, [pc, #228]	; (80057e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	015b      	lsls	r3, r3, #5
 8005704:	0d1b      	lsrs	r3, r3, #20
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	fb02 f303 	mul.w	r3, r2, r3
 800570c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800570e:	e054      	b.n	80057ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005716:	d050      	beq.n	80057ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005718:	f7fd fd2e 	bl	8003178 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	69fa      	ldr	r2, [r7, #28]
 8005724:	429a      	cmp	r2, r3
 8005726:	d902      	bls.n	800572e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d13d      	bne.n	80057aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800573c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005746:	d111      	bne.n	800576c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005750:	d004      	beq.n	800575c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800575a:	d107      	bne.n	800576c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800576a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005774:	d10f      	bne.n	8005796 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005794:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e017      	b.n	80057da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4013      	ands	r3, r2
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	bf0c      	ite	eq
 80057ca:	2301      	moveq	r3, #1
 80057cc:	2300      	movne	r3, #0
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	461a      	mov	r2, r3
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d19b      	bne.n	8005710 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3720      	adds	r7, #32
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000224 	.word	0x20000224

080057e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057fc:	d111      	bne.n	8005822 <SPI_EndRxTransaction+0x3a>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005806:	d004      	beq.n	8005812 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005810:	d107      	bne.n	8005822 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005820:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800582a:	d12a      	bne.n	8005882 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005834:	d012      	beq.n	800585c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2200      	movs	r2, #0
 800583e:	2180      	movs	r1, #128	; 0x80
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f7ff ff49 	bl	80056d8 <SPI_WaitFlagStateUntilTimeout>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d02d      	beq.n	80058a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005850:	f043 0220 	orr.w	r2, r3, #32
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e026      	b.n	80058aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2200      	movs	r2, #0
 8005864:	2101      	movs	r1, #1
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f7ff ff36 	bl	80056d8 <SPI_WaitFlagStateUntilTimeout>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d01a      	beq.n	80058a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005876:	f043 0220 	orr.w	r2, r3, #32
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e013      	b.n	80058aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2200      	movs	r2, #0
 800588a:	2101      	movs	r1, #1
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f7ff ff23 	bl	80056d8 <SPI_WaitFlagStateUntilTimeout>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d007      	beq.n	80058a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589c:	f043 0220 	orr.w	r2, r3, #32
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e000      	b.n	80058aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af02      	add	r7, sp, #8
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2201      	movs	r2, #1
 80058c8:	2102      	movs	r1, #2
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f7ff ff04 	bl	80056d8 <SPI_WaitFlagStateUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058da:	f043 0220 	orr.w	r2, r3, #32
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e032      	b.n	800594c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058e6:	4b1b      	ldr	r3, [pc, #108]	; (8005954 <SPI_EndRxTxTransaction+0xa0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a1b      	ldr	r2, [pc, #108]	; (8005958 <SPI_EndRxTxTransaction+0xa4>)
 80058ec:	fba2 2303 	umull	r2, r3, r2, r3
 80058f0:	0d5b      	lsrs	r3, r3, #21
 80058f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058f6:	fb02 f303 	mul.w	r3, r2, r3
 80058fa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005904:	d112      	bne.n	800592c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2200      	movs	r2, #0
 800590e:	2180      	movs	r1, #128	; 0x80
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f7ff fee1 	bl	80056d8 <SPI_WaitFlagStateUntilTimeout>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d016      	beq.n	800594a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005920:	f043 0220 	orr.w	r2, r3, #32
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e00f      	b.n	800594c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	3b01      	subs	r3, #1
 8005936:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005942:	2b80      	cmp	r3, #128	; 0x80
 8005944:	d0f2      	beq.n	800592c <SPI_EndRxTxTransaction+0x78>
 8005946:	e000      	b.n	800594a <SPI_EndRxTxTransaction+0x96>
        break;
 8005948:	bf00      	nop
  }

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20000224 	.word	0x20000224
 8005958:	165e9f81 	.word	0x165e9f81

0800595c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e038      	b.n	80059e4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7fb fe42 	bl	8001610 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3308      	adds	r3, #8
 8005994:	4619      	mov	r1, r3
 8005996:	4610      	mov	r0, r2
 8005998:	f001 fcfe 	bl	8007398 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6818      	ldr	r0, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	461a      	mov	r2, r3
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	f001 fd60 	bl	800746c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6858      	ldr	r0, [r3, #4]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	f001 fd8d 	bl	80074d8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	6892      	ldr	r2, [r2, #8]
 80059c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	6892      	ldr	r2, [r2, #8]
 80059d2:	f041 0101 	orr.w	r1, r1, #1
 80059d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e041      	b.n	8005a82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7fd f960 	bl	8002cd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3304      	adds	r3, #4
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	f000 fa7e 	bl	8005f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d001      	beq.n	8005aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e04e      	b.n	8005b42 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0201 	orr.w	r2, r2, #1
 8005aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a23      	ldr	r2, [pc, #140]	; (8005b50 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d022      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0x80>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ace:	d01d      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0x80>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1f      	ldr	r2, [pc, #124]	; (8005b54 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d018      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0x80>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a1e      	ldr	r2, [pc, #120]	; (8005b58 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d013      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0x80>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a1c      	ldr	r2, [pc, #112]	; (8005b5c <HAL_TIM_Base_Start_IT+0xd0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00e      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0x80>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a1b      	ldr	r2, [pc, #108]	; (8005b60 <HAL_TIM_Base_Start_IT+0xd4>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d009      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0x80>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a19      	ldr	r2, [pc, #100]	; (8005b64 <HAL_TIM_Base_Start_IT+0xd8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d004      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0x80>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d111      	bne.n	8005b30 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b06      	cmp	r3, #6
 8005b1c:	d010      	beq.n	8005b40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0201 	orr.w	r2, r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b2e:	e007      	b.n	8005b40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0201 	orr.w	r2, r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40010000 	.word	0x40010000
 8005b54:	40000400 	.word	0x40000400
 8005b58:	40000800 	.word	0x40000800
 8005b5c:	40000c00 	.word	0x40000c00
 8005b60:	40010400 	.word	0x40010400
 8005b64:	40014000 	.word	0x40014000
 8005b68:	40001800 	.word	0x40001800

08005b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d020      	beq.n	8005bd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01b      	beq.n	8005bd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0202 	mvn.w	r2, #2
 8005ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f999 	bl	8005eee <HAL_TIM_IC_CaptureCallback>
 8005bbc:	e005      	b.n	8005bca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f98b 	bl	8005eda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f99c 	bl	8005f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d020      	beq.n	8005c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01b      	beq.n	8005c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f06f 0204 	mvn.w	r2, #4
 8005bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f973 	bl	8005eee <HAL_TIM_IC_CaptureCallback>
 8005c08:	e005      	b.n	8005c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f965 	bl	8005eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f976 	bl	8005f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f003 0308 	and.w	r3, r3, #8
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d020      	beq.n	8005c68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f003 0308 	and.w	r3, r3, #8
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01b      	beq.n	8005c68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f06f 0208 	mvn.w	r2, #8
 8005c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2204      	movs	r2, #4
 8005c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f94d 	bl	8005eee <HAL_TIM_IC_CaptureCallback>
 8005c54:	e005      	b.n	8005c62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f93f 	bl	8005eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f950 	bl	8005f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f003 0310 	and.w	r3, r3, #16
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d020      	beq.n	8005cb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01b      	beq.n	8005cb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0210 	mvn.w	r2, #16
 8005c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2208      	movs	r2, #8
 8005c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f927 	bl	8005eee <HAL_TIM_IC_CaptureCallback>
 8005ca0:	e005      	b.n	8005cae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f919 	bl	8005eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f92a 	bl	8005f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00c      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d007      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f06f 0201 	mvn.w	r2, #1
 8005cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fc fa28 	bl	8002128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00c      	beq.n	8005cfc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d007      	beq.n	8005cfc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fae4 	bl	80062c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00c      	beq.n	8005d20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f8fb 	bl	8005f16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f003 0320 	and.w	r3, r3, #32
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00c      	beq.n	8005d44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f003 0320 	and.w	r3, r3, #32
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d007      	beq.n	8005d44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0220 	mvn.w	r2, #32
 8005d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fab6 	bl	80062b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d44:	bf00      	nop
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d101      	bne.n	8005d68 <HAL_TIM_ConfigClockSource+0x1c>
 8005d64:	2302      	movs	r3, #2
 8005d66:	e0b4      	b.n	8005ed2 <HAL_TIM_ConfigClockSource+0x186>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da0:	d03e      	beq.n	8005e20 <HAL_TIM_ConfigClockSource+0xd4>
 8005da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da6:	f200 8087 	bhi.w	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dae:	f000 8086 	beq.w	8005ebe <HAL_TIM_ConfigClockSource+0x172>
 8005db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db6:	d87f      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005db8:	2b70      	cmp	r3, #112	; 0x70
 8005dba:	d01a      	beq.n	8005df2 <HAL_TIM_ConfigClockSource+0xa6>
 8005dbc:	2b70      	cmp	r3, #112	; 0x70
 8005dbe:	d87b      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc0:	2b60      	cmp	r3, #96	; 0x60
 8005dc2:	d050      	beq.n	8005e66 <HAL_TIM_ConfigClockSource+0x11a>
 8005dc4:	2b60      	cmp	r3, #96	; 0x60
 8005dc6:	d877      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc8:	2b50      	cmp	r3, #80	; 0x50
 8005dca:	d03c      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0xfa>
 8005dcc:	2b50      	cmp	r3, #80	; 0x50
 8005dce:	d873      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd0:	2b40      	cmp	r3, #64	; 0x40
 8005dd2:	d058      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x13a>
 8005dd4:	2b40      	cmp	r3, #64	; 0x40
 8005dd6:	d86f      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd8:	2b30      	cmp	r3, #48	; 0x30
 8005dda:	d064      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8005ddc:	2b30      	cmp	r3, #48	; 0x30
 8005dde:	d86b      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005de0:	2b20      	cmp	r3, #32
 8005de2:	d060      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8005de4:	2b20      	cmp	r3, #32
 8005de6:	d867      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d05c      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8005dec:	2b10      	cmp	r3, #16
 8005dee:	d05a      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8005df0:	e062      	b.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e02:	f000 f9b9 	bl	8006178 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	609a      	str	r2, [r3, #8]
      break;
 8005e1e:	e04f      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e30:	f000 f9a2 	bl	8006178 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e42:	609a      	str	r2, [r3, #8]
      break;
 8005e44:	e03c      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e52:	461a      	mov	r2, r3
 8005e54:	f000 f916 	bl	8006084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2150      	movs	r1, #80	; 0x50
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 f96f 	bl	8006142 <TIM_ITRx_SetConfig>
      break;
 8005e64:	e02c      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e72:	461a      	mov	r2, r3
 8005e74:	f000 f935 	bl	80060e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2160      	movs	r1, #96	; 0x60
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 f95f 	bl	8006142 <TIM_ITRx_SetConfig>
      break;
 8005e84:	e01c      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e92:	461a      	mov	r2, r3
 8005e94:	f000 f8f6 	bl	8006084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2140      	movs	r1, #64	; 0x40
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 f94f 	bl	8006142 <TIM_ITRx_SetConfig>
      break;
 8005ea4:	e00c      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	f000 f946 	bl	8006142 <TIM_ITRx_SetConfig>
      break;
 8005eb6:	e003      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	73fb      	strb	r3, [r7, #15]
      break;
 8005ebc:	e000      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ee2:	bf00      	nop
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
	...

08005f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a46      	ldr	r2, [pc, #280]	; (8006058 <TIM_Base_SetConfig+0x12c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d013      	beq.n	8005f6c <TIM_Base_SetConfig+0x40>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4a:	d00f      	beq.n	8005f6c <TIM_Base_SetConfig+0x40>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a43      	ldr	r2, [pc, #268]	; (800605c <TIM_Base_SetConfig+0x130>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00b      	beq.n	8005f6c <TIM_Base_SetConfig+0x40>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a42      	ldr	r2, [pc, #264]	; (8006060 <TIM_Base_SetConfig+0x134>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d007      	beq.n	8005f6c <TIM_Base_SetConfig+0x40>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a41      	ldr	r2, [pc, #260]	; (8006064 <TIM_Base_SetConfig+0x138>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d003      	beq.n	8005f6c <TIM_Base_SetConfig+0x40>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a40      	ldr	r2, [pc, #256]	; (8006068 <TIM_Base_SetConfig+0x13c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d108      	bne.n	8005f7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a35      	ldr	r2, [pc, #212]	; (8006058 <TIM_Base_SetConfig+0x12c>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d02b      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8c:	d027      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a32      	ldr	r2, [pc, #200]	; (800605c <TIM_Base_SetConfig+0x130>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d023      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a31      	ldr	r2, [pc, #196]	; (8006060 <TIM_Base_SetConfig+0x134>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d01f      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a30      	ldr	r2, [pc, #192]	; (8006064 <TIM_Base_SetConfig+0x138>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d01b      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a2f      	ldr	r2, [pc, #188]	; (8006068 <TIM_Base_SetConfig+0x13c>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d017      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a2e      	ldr	r2, [pc, #184]	; (800606c <TIM_Base_SetConfig+0x140>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d013      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a2d      	ldr	r2, [pc, #180]	; (8006070 <TIM_Base_SetConfig+0x144>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00f      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a2c      	ldr	r2, [pc, #176]	; (8006074 <TIM_Base_SetConfig+0x148>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00b      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a2b      	ldr	r2, [pc, #172]	; (8006078 <TIM_Base_SetConfig+0x14c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d007      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a2a      	ldr	r2, [pc, #168]	; (800607c <TIM_Base_SetConfig+0x150>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d003      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a29      	ldr	r2, [pc, #164]	; (8006080 <TIM_Base_SetConfig+0x154>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d108      	bne.n	8005ff0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a10      	ldr	r2, [pc, #64]	; (8006058 <TIM_Base_SetConfig+0x12c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d003      	beq.n	8006024 <TIM_Base_SetConfig+0xf8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a12      	ldr	r2, [pc, #72]	; (8006068 <TIM_Base_SetConfig+0x13c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d103      	bne.n	800602c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b01      	cmp	r3, #1
 800603c:	d105      	bne.n	800604a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f023 0201 	bic.w	r2, r3, #1
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	611a      	str	r2, [r3, #16]
  }
}
 800604a:	bf00      	nop
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40010000 	.word	0x40010000
 800605c:	40000400 	.word	0x40000400
 8006060:	40000800 	.word	0x40000800
 8006064:	40000c00 	.word	0x40000c00
 8006068:	40010400 	.word	0x40010400
 800606c:	40014000 	.word	0x40014000
 8006070:	40014400 	.word	0x40014400
 8006074:	40014800 	.word	0x40014800
 8006078:	40001800 	.word	0x40001800
 800607c:	40001c00 	.word	0x40001c00
 8006080:	40002000 	.word	0x40002000

08006084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	f023 0201 	bic.w	r2, r3, #1
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f023 030a 	bic.w	r3, r3, #10
 80060c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	621a      	str	r2, [r3, #32]
}
 80060d6:	bf00      	nop
 80060d8:	371c      	adds	r7, #28
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b087      	sub	sp, #28
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f023 0210 	bic.w	r2, r3, #16
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800610c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	031b      	lsls	r3, r3, #12
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800611e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	4313      	orrs	r3, r2
 8006128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	621a      	str	r2, [r3, #32]
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006142:	b480      	push	{r7}
 8006144:	b085      	sub	sp, #20
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	f043 0307 	orr.w	r3, r3, #7
 8006164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	609a      	str	r2, [r3, #8]
}
 800616c:	bf00      	nop
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
 8006184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	021a      	lsls	r2, r3, #8
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	431a      	orrs	r2, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	4313      	orrs	r3, r2
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	609a      	str	r2, [r3, #8]
}
 80061ac:	bf00      	nop
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e05a      	b.n	8006286 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a21      	ldr	r2, [pc, #132]	; (8006294 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d022      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621c:	d01d      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1d      	ldr	r2, [pc, #116]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d018      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a1b      	ldr	r2, [pc, #108]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d013      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a1a      	ldr	r2, [pc, #104]	; (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00e      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a18      	ldr	r2, [pc, #96]	; (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d009      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a17      	ldr	r2, [pc, #92]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d004      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a15      	ldr	r2, [pc, #84]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d10c      	bne.n	8006274 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	4313      	orrs	r3, r2
 800626a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	40010000 	.word	0x40010000
 8006298:	40000400 	.word	0x40000400
 800629c:	40000800 	.word	0x40000800
 80062a0:	40000c00 	.word	0x40000c00
 80062a4:	40010400 	.word	0x40010400
 80062a8:	40014000 	.word	0x40014000
 80062ac:	40001800 	.word	0x40001800

080062b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e042      	b.n	8006370 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d106      	bne.n	8006304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fc fdee 	bl	8002ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2224      	movs	r2, #36	; 0x24
 8006308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800631a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fdc7 	bl	8006eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	691a      	ldr	r2, [r3, #16]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	695a      	ldr	r2, [r3, #20]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2220      	movs	r2, #32
 800635c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2220      	movs	r2, #32
 8006364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08a      	sub	sp, #40	; 0x28
 800637c:	af02      	add	r7, sp, #8
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	4613      	mov	r3, r2
 8006386:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006388:	2300      	movs	r3, #0
 800638a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b20      	cmp	r3, #32
 8006396:	d175      	bne.n	8006484 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d002      	beq.n	80063a4 <HAL_UART_Transmit+0x2c>
 800639e:	88fb      	ldrh	r3, [r7, #6]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e06e      	b.n	8006486 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2221      	movs	r2, #33	; 0x21
 80063b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063b6:	f7fc fedf 	bl	8003178 <HAL_GetTick>
 80063ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	88fa      	ldrh	r2, [r7, #6]
 80063c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	88fa      	ldrh	r2, [r7, #6]
 80063c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d0:	d108      	bne.n	80063e4 <HAL_UART_Transmit+0x6c>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d104      	bne.n	80063e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80063da:	2300      	movs	r3, #0
 80063dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	61bb      	str	r3, [r7, #24]
 80063e2:	e003      	b.n	80063ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063e8:	2300      	movs	r3, #0
 80063ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063ec:	e02e      	b.n	800644c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2200      	movs	r2, #0
 80063f6:	2180      	movs	r1, #128	; 0x80
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fb29 	bl	8006a50 <UART_WaitOnFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d005      	beq.n	8006410 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2220      	movs	r2, #32
 8006408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e03a      	b.n	8006486 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10b      	bne.n	800642e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	461a      	mov	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006424:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	3302      	adds	r3, #2
 800642a:	61bb      	str	r3, [r7, #24]
 800642c:	e007      	b.n	800643e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	781a      	ldrb	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	3301      	adds	r3, #1
 800643c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006442:	b29b      	uxth	r3, r3
 8006444:	3b01      	subs	r3, #1
 8006446:	b29a      	uxth	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006450:	b29b      	uxth	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1cb      	bne.n	80063ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2200      	movs	r2, #0
 800645e:	2140      	movs	r1, #64	; 0x40
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 faf5 	bl	8006a50 <UART_WaitOnFlagUntilTimeout>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2220      	movs	r2, #32
 8006470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e006      	b.n	8006486 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	e000      	b.n	8006486 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006484:	2302      	movs	r3, #2
  }
}
 8006486:	4618      	mov	r0, r3
 8006488:	3720      	adds	r7, #32
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b084      	sub	sp, #16
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	4613      	mov	r3, r2
 800649a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b20      	cmp	r3, #32
 80064a6:	d112      	bne.n	80064ce <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <HAL_UART_Receive_IT+0x26>
 80064ae:	88fb      	ldrh	r3, [r7, #6]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e00b      	b.n	80064d0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	461a      	mov	r2, r3
 80064c2:	68b9      	ldr	r1, [r7, #8]
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 fb1c 	bl	8006b02 <UART_Start_Receive_IT>
 80064ca:	4603      	mov	r3, r0
 80064cc:	e000      	b.n	80064d0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80064ce:	2302      	movs	r3, #2
  }
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b0ba      	sub	sp, #232	; 0xe8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80064fe:	2300      	movs	r3, #0
 8006500:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006504:	2300      	movs	r3, #0
 8006506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800650a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10f      	bne.n	800653e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800651e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006522:	f003 0320 	and.w	r3, r3, #32
 8006526:	2b00      	cmp	r3, #0
 8006528:	d009      	beq.n	800653e <HAL_UART_IRQHandler+0x66>
 800652a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fbfc 	bl	8006d34 <UART_Receive_IT>
      return;
 800653c:	e25b      	b.n	80069f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800653e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 80de 	beq.w	8006704 <HAL_UART_IRQHandler+0x22c>
 8006548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	d106      	bne.n	8006562 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006558:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 80d1 	beq.w	8006704 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00b      	beq.n	8006586 <HAL_UART_IRQHandler+0xae>
 800656e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006576:	2b00      	cmp	r3, #0
 8006578:	d005      	beq.n	8006586 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657e:	f043 0201 	orr.w	r2, r3, #1
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658a:	f003 0304 	and.w	r3, r3, #4
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00b      	beq.n	80065aa <HAL_UART_IRQHandler+0xd2>
 8006592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d005      	beq.n	80065aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a2:	f043 0202 	orr.w	r2, r3, #2
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00b      	beq.n	80065ce <HAL_UART_IRQHandler+0xf6>
 80065b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d005      	beq.n	80065ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c6:	f043 0204 	orr.w	r2, r3, #4
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d011      	beq.n	80065fe <HAL_UART_IRQHandler+0x126>
 80065da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d105      	bne.n	80065f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80065e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d005      	beq.n	80065fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f6:	f043 0208 	orr.w	r2, r3, #8
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 81f2 	beq.w	80069ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	2b00      	cmp	r3, #0
 8006612:	d008      	beq.n	8006626 <HAL_UART_IRQHandler+0x14e>
 8006614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006618:	f003 0320 	and.w	r3, r3, #32
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fb87 	bl	8006d34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006630:	2b40      	cmp	r3, #64	; 0x40
 8006632:	bf0c      	ite	eq
 8006634:	2301      	moveq	r3, #1
 8006636:	2300      	movne	r3, #0
 8006638:	b2db      	uxtb	r3, r3
 800663a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d103      	bne.n	8006652 <HAL_UART_IRQHandler+0x17a>
 800664a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800664e:	2b00      	cmp	r3, #0
 8006650:	d04f      	beq.n	80066f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fa8f 	bl	8006b76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	d141      	bne.n	80066ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3314      	adds	r3, #20
 800666c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006670:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800667c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3314      	adds	r3, #20
 800668e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006692:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800669e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1d9      	bne.n	8006666 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d013      	beq.n	80066e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066be:	4a7e      	ldr	r2, [pc, #504]	; (80068b8 <HAL_UART_IRQHandler+0x3e0>)
 80066c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fd fc20 	bl	8003f0c <HAL_DMA_Abort_IT>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d016      	beq.n	8006700 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80066dc:	4610      	mov	r0, r2
 80066de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e0:	e00e      	b.n	8006700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f99e 	bl	8006a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e8:	e00a      	b.n	8006700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f99a 	bl	8006a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f0:	e006      	b.n	8006700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f996 	bl	8006a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80066fe:	e175      	b.n	80069ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006700:	bf00      	nop
    return;
 8006702:	e173      	b.n	80069ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006708:	2b01      	cmp	r3, #1
 800670a:	f040 814f 	bne.w	80069ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800670e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006712:	f003 0310 	and.w	r3, r3, #16
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 8148 	beq.w	80069ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800671c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006720:	f003 0310 	and.w	r3, r3, #16
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 8141 	beq.w	80069ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800672a:	2300      	movs	r3, #0
 800672c:	60bb      	str	r3, [r7, #8]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60bb      	str	r3, [r7, #8]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	60bb      	str	r3, [r7, #8]
 800673e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674a:	2b40      	cmp	r3, #64	; 0x40
 800674c:	f040 80b6 	bne.w	80068bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800675c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 8145 	beq.w	80069f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800676a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800676e:	429a      	cmp	r2, r3
 8006770:	f080 813e 	bcs.w	80069f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800677a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006786:	f000 8088 	beq.w	800689a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	330c      	adds	r3, #12
 8006790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006794:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	330c      	adds	r3, #12
 80067b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80067b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1d9      	bne.n	800678a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3314      	adds	r3, #20
 80067dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067e8:	f023 0301 	bic.w	r3, r3, #1
 80067ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3314      	adds	r3, #20
 80067f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006800:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006802:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800680c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1e1      	bne.n	80067d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3314      	adds	r3, #20
 8006818:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006828:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3314      	adds	r3, #20
 8006832:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006836:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006838:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800683c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e3      	bne.n	8006812 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2220      	movs	r2, #32
 800684e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	330c      	adds	r3, #12
 800685e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006862:	e853 3f00 	ldrex	r3, [r3]
 8006866:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800686a:	f023 0310 	bic.w	r3, r3, #16
 800686e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	330c      	adds	r3, #12
 8006878:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800687c:	65ba      	str	r2, [r7, #88]	; 0x58
 800687e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006882:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006884:	e841 2300 	strex	r3, r2, [r1]
 8006888:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800688a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1e3      	bne.n	8006858 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006894:	4618      	mov	r0, r3
 8006896:	f7fd fac9 	bl	8003e2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2202      	movs	r2, #2
 800689e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f8c1 	bl	8006a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068b6:	e09b      	b.n	80069f0 <HAL_UART_IRQHandler+0x518>
 80068b8:	08006c3d 	.word	0x08006c3d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 808e 	beq.w	80069f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80068d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 8089 	beq.w	80069f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	330c      	adds	r3, #12
 80068e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ec:	e853 3f00 	ldrex	r3, [r3]
 80068f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	330c      	adds	r3, #12
 8006902:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006906:	647a      	str	r2, [r7, #68]	; 0x44
 8006908:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800690c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800690e:	e841 2300 	strex	r3, r2, [r1]
 8006912:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1e3      	bne.n	80068e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3314      	adds	r3, #20
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	623b      	str	r3, [r7, #32]
   return(result);
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	f023 0301 	bic.w	r3, r3, #1
 8006930:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3314      	adds	r3, #20
 800693a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800693e:	633a      	str	r2, [r7, #48]	; 0x30
 8006940:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006942:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800694c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1e3      	bne.n	800691a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2220      	movs	r2, #32
 8006956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	330c      	adds	r3, #12
 8006966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	e853 3f00 	ldrex	r3, [r3]
 800696e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0310 	bic.w	r3, r3, #16
 8006976:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	330c      	adds	r3, #12
 8006980:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006984:	61fa      	str	r2, [r7, #28]
 8006986:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	69b9      	ldr	r1, [r7, #24]
 800698a:	69fa      	ldr	r2, [r7, #28]
 800698c:	e841 2300 	strex	r3, r2, [r1]
 8006990:	617b      	str	r3, [r7, #20]
   return(result);
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e3      	bne.n	8006960 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800699e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f847 	bl	8006a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069aa:	e023      	b.n	80069f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d009      	beq.n	80069cc <HAL_UART_IRQHandler+0x4f4>
 80069b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f94d 	bl	8006c64 <UART_Transmit_IT>
    return;
 80069ca:	e014      	b.n	80069f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00e      	beq.n	80069f6 <HAL_UART_IRQHandler+0x51e>
 80069d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d008      	beq.n	80069f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f98d 	bl	8006d04 <UART_EndTransmit_IT>
    return;
 80069ea:	e004      	b.n	80069f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80069ec:	bf00      	nop
 80069ee:	e002      	b.n	80069f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80069f0:	bf00      	nop
 80069f2:	e000      	b.n	80069f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80069f4:	bf00      	nop
  }
}
 80069f6:	37e8      	adds	r7, #232	; 0xe8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a60:	e03b      	b.n	8006ada <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a68:	d037      	beq.n	8006ada <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a6a:	f7fc fb85 	bl	8003178 <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	6a3a      	ldr	r2, [r7, #32]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d302      	bcc.n	8006a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e03a      	b.n	8006afa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f003 0304 	and.w	r3, r3, #4
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d023      	beq.n	8006ada <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b80      	cmp	r3, #128	; 0x80
 8006a96:	d020      	beq.n	8006ada <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2b40      	cmp	r3, #64	; 0x40
 8006a9c:	d01d      	beq.n	8006ada <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0308 	and.w	r3, r3, #8
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d116      	bne.n	8006ada <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006aac:	2300      	movs	r3, #0
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	617b      	str	r3, [r7, #20]
 8006ac0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 f857 	bl	8006b76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2208      	movs	r2, #8
 8006acc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e00f      	b.n	8006afa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	bf0c      	ite	eq
 8006aea:	2301      	moveq	r3, #1
 8006aec:	2300      	movne	r3, #0
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	461a      	mov	r2, r3
 8006af2:	79fb      	ldrb	r3, [r7, #7]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d0b4      	beq.n	8006a62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	88fa      	ldrh	r2, [r7, #6]
 8006b1a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	88fa      	ldrh	r2, [r7, #6]
 8006b20:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2222      	movs	r2, #34	; 0x22
 8006b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d007      	beq.n	8006b48 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b46:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695a      	ldr	r2, [r3, #20]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0201 	orr.w	r2, r2, #1
 8006b56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f042 0220 	orr.w	r2, r2, #32
 8006b66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b095      	sub	sp, #84	; 0x54
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	330c      	adds	r3, #12
 8006b84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	330c      	adds	r3, #12
 8006b9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b9e:	643a      	str	r2, [r7, #64]	; 0x40
 8006ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ba4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e5      	bne.n	8006b7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3314      	adds	r3, #20
 8006bb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	f023 0301 	bic.w	r3, r3, #1
 8006bc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3314      	adds	r3, #20
 8006bd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bda:	e841 2300 	strex	r3, r2, [r1]
 8006bde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1e5      	bne.n	8006bb2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d119      	bne.n	8006c22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	330c      	adds	r3, #12
 8006bf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f023 0310 	bic.w	r3, r3, #16
 8006c04:	647b      	str	r3, [r7, #68]	; 0x44
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c0e:	61ba      	str	r2, [r7, #24]
 8006c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	6979      	ldr	r1, [r7, #20]
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e5      	bne.n	8006bee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c30:	bf00      	nop
 8006c32:	3754      	adds	r7, #84	; 0x54
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f7ff fee4 	bl	8006a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c5c:	bf00      	nop
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b21      	cmp	r3, #33	; 0x21
 8006c76:	d13e      	bne.n	8006cf6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c80:	d114      	bne.n	8006cac <UART_Transmit_IT+0x48>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d110      	bne.n	8006cac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c9e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	1c9a      	adds	r2, r3, #2
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	621a      	str	r2, [r3, #32]
 8006caa:	e008      	b.n	8006cbe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	1c59      	adds	r1, r3, #1
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	6211      	str	r1, [r2, #32]
 8006cb6:	781a      	ldrb	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10f      	bne.n	8006cf2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ce0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68da      	ldr	r2, [r3, #12]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cf0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	e000      	b.n	8006cf8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006cf6:	2302      	movs	r3, #2
  }
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2220      	movs	r2, #32
 8006d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff fe69 	bl	80069fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08c      	sub	sp, #48	; 0x30
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b22      	cmp	r3, #34	; 0x22
 8006d46:	f040 80ae 	bne.w	8006ea6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d52:	d117      	bne.n	8006d84 <UART_Receive_IT+0x50>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d113      	bne.n	8006d84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d64:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7c:	1c9a      	adds	r2, r3, #2
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	629a      	str	r2, [r3, #40]	; 0x28
 8006d82:	e026      	b.n	8006dd2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d96:	d007      	beq.n	8006da8 <UART_Receive_IT+0x74>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10a      	bne.n	8006db6 <UART_Receive_IT+0x82>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d106      	bne.n	8006db6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db2:	701a      	strb	r2, [r3, #0]
 8006db4:	e008      	b.n	8006dc8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dcc:	1c5a      	adds	r2, r3, #1
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	4619      	mov	r1, r3
 8006de0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d15d      	bne.n	8006ea2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0220 	bic.w	r2, r2, #32
 8006df4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	695a      	ldr	r2, [r3, #20]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 0201 	bic.w	r2, r2, #1
 8006e14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2220      	movs	r2, #32
 8006e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d135      	bne.n	8006e98 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	330c      	adds	r3, #12
 8006e38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	e853 3f00 	ldrex	r3, [r3]
 8006e40:	613b      	str	r3, [r7, #16]
   return(result);
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	f023 0310 	bic.w	r3, r3, #16
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	330c      	adds	r3, #12
 8006e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e52:	623a      	str	r2, [r7, #32]
 8006e54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e56:	69f9      	ldr	r1, [r7, #28]
 8006e58:	6a3a      	ldr	r2, [r7, #32]
 8006e5a:	e841 2300 	strex	r3, r2, [r1]
 8006e5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1e5      	bne.n	8006e32 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0310 	and.w	r3, r3, #16
 8006e70:	2b10      	cmp	r3, #16
 8006e72:	d10a      	bne.n	8006e8a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	60fb      	str	r3, [r7, #12]
 8006e88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7ff fdd1 	bl	8006a38 <HAL_UARTEx_RxEventCallback>
 8006e96:	e002      	b.n	8006e9e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7ff fdb9 	bl	8006a10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e002      	b.n	8006ea8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	e000      	b.n	8006ea8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006ea6:	2302      	movs	r3, #2
  }
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3730      	adds	r7, #48	; 0x30
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eb4:	b0c0      	sub	sp, #256	; 0x100
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ecc:	68d9      	ldr	r1, [r3, #12]
 8006ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	ea40 0301 	orr.w	r3, r0, r1
 8006ed8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006f08:	f021 010c 	bic.w	r1, r1, #12
 8006f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f16:	430b      	orrs	r3, r1
 8006f18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2a:	6999      	ldr	r1, [r3, #24]
 8006f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	ea40 0301 	orr.w	r3, r0, r1
 8006f36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4b8f      	ldr	r3, [pc, #572]	; (800717c <UART_SetConfig+0x2cc>)
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d005      	beq.n	8006f50 <UART_SetConfig+0xa0>
 8006f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	4b8d      	ldr	r3, [pc, #564]	; (8007180 <UART_SetConfig+0x2d0>)
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d104      	bne.n	8006f5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f50:	f7fe f862 	bl	8005018 <HAL_RCC_GetPCLK2Freq>
 8006f54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006f58:	e003      	b.n	8006f62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f5a:	f7fe f849 	bl	8004ff0 <HAL_RCC_GetPCLK1Freq>
 8006f5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f6c:	f040 810c 	bne.w	8007188 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f74:	2200      	movs	r2, #0
 8006f76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f82:	4622      	mov	r2, r4
 8006f84:	462b      	mov	r3, r5
 8006f86:	1891      	adds	r1, r2, r2
 8006f88:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f8a:	415b      	adcs	r3, r3
 8006f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f92:	4621      	mov	r1, r4
 8006f94:	eb12 0801 	adds.w	r8, r2, r1
 8006f98:	4629      	mov	r1, r5
 8006f9a:	eb43 0901 	adc.w	r9, r3, r1
 8006f9e:	f04f 0200 	mov.w	r2, #0
 8006fa2:	f04f 0300 	mov.w	r3, #0
 8006fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fb2:	4690      	mov	r8, r2
 8006fb4:	4699      	mov	r9, r3
 8006fb6:	4623      	mov	r3, r4
 8006fb8:	eb18 0303 	adds.w	r3, r8, r3
 8006fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fc0:	462b      	mov	r3, r5
 8006fc2:	eb49 0303 	adc.w	r3, r9, r3
 8006fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006fda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006fde:	460b      	mov	r3, r1
 8006fe0:	18db      	adds	r3, r3, r3
 8006fe2:	653b      	str	r3, [r7, #80]	; 0x50
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	eb42 0303 	adc.w	r3, r2, r3
 8006fea:	657b      	str	r3, [r7, #84]	; 0x54
 8006fec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ff0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ff4:	f7f9 fd06 	bl	8000a04 <__aeabi_uldivmod>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4b61      	ldr	r3, [pc, #388]	; (8007184 <UART_SetConfig+0x2d4>)
 8006ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8007002:	095b      	lsrs	r3, r3, #5
 8007004:	011c      	lsls	r4, r3, #4
 8007006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800700a:	2200      	movs	r2, #0
 800700c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007010:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007014:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007018:	4642      	mov	r2, r8
 800701a:	464b      	mov	r3, r9
 800701c:	1891      	adds	r1, r2, r2
 800701e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007020:	415b      	adcs	r3, r3
 8007022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007024:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007028:	4641      	mov	r1, r8
 800702a:	eb12 0a01 	adds.w	sl, r2, r1
 800702e:	4649      	mov	r1, r9
 8007030:	eb43 0b01 	adc.w	fp, r3, r1
 8007034:	f04f 0200 	mov.w	r2, #0
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007040:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007044:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007048:	4692      	mov	sl, r2
 800704a:	469b      	mov	fp, r3
 800704c:	4643      	mov	r3, r8
 800704e:	eb1a 0303 	adds.w	r3, sl, r3
 8007052:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007056:	464b      	mov	r3, r9
 8007058:	eb4b 0303 	adc.w	r3, fp, r3
 800705c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800706c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007070:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007074:	460b      	mov	r3, r1
 8007076:	18db      	adds	r3, r3, r3
 8007078:	643b      	str	r3, [r7, #64]	; 0x40
 800707a:	4613      	mov	r3, r2
 800707c:	eb42 0303 	adc.w	r3, r2, r3
 8007080:	647b      	str	r3, [r7, #68]	; 0x44
 8007082:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007086:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800708a:	f7f9 fcbb 	bl	8000a04 <__aeabi_uldivmod>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	4611      	mov	r1, r2
 8007094:	4b3b      	ldr	r3, [pc, #236]	; (8007184 <UART_SetConfig+0x2d4>)
 8007096:	fba3 2301 	umull	r2, r3, r3, r1
 800709a:	095b      	lsrs	r3, r3, #5
 800709c:	2264      	movs	r2, #100	; 0x64
 800709e:	fb02 f303 	mul.w	r3, r2, r3
 80070a2:	1acb      	subs	r3, r1, r3
 80070a4:	00db      	lsls	r3, r3, #3
 80070a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80070aa:	4b36      	ldr	r3, [pc, #216]	; (8007184 <UART_SetConfig+0x2d4>)
 80070ac:	fba3 2302 	umull	r2, r3, r3, r2
 80070b0:	095b      	lsrs	r3, r3, #5
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070b8:	441c      	add	r4, r3
 80070ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80070c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80070cc:	4642      	mov	r2, r8
 80070ce:	464b      	mov	r3, r9
 80070d0:	1891      	adds	r1, r2, r2
 80070d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80070d4:	415b      	adcs	r3, r3
 80070d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070dc:	4641      	mov	r1, r8
 80070de:	1851      	adds	r1, r2, r1
 80070e0:	6339      	str	r1, [r7, #48]	; 0x30
 80070e2:	4649      	mov	r1, r9
 80070e4:	414b      	adcs	r3, r1
 80070e6:	637b      	str	r3, [r7, #52]	; 0x34
 80070e8:	f04f 0200 	mov.w	r2, #0
 80070ec:	f04f 0300 	mov.w	r3, #0
 80070f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80070f4:	4659      	mov	r1, fp
 80070f6:	00cb      	lsls	r3, r1, #3
 80070f8:	4651      	mov	r1, sl
 80070fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070fe:	4651      	mov	r1, sl
 8007100:	00ca      	lsls	r2, r1, #3
 8007102:	4610      	mov	r0, r2
 8007104:	4619      	mov	r1, r3
 8007106:	4603      	mov	r3, r0
 8007108:	4642      	mov	r2, r8
 800710a:	189b      	adds	r3, r3, r2
 800710c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007110:	464b      	mov	r3, r9
 8007112:	460a      	mov	r2, r1
 8007114:	eb42 0303 	adc.w	r3, r2, r3
 8007118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800711c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007128:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800712c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007130:	460b      	mov	r3, r1
 8007132:	18db      	adds	r3, r3, r3
 8007134:	62bb      	str	r3, [r7, #40]	; 0x28
 8007136:	4613      	mov	r3, r2
 8007138:	eb42 0303 	adc.w	r3, r2, r3
 800713c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800713e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007142:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007146:	f7f9 fc5d 	bl	8000a04 <__aeabi_uldivmod>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	4b0d      	ldr	r3, [pc, #52]	; (8007184 <UART_SetConfig+0x2d4>)
 8007150:	fba3 1302 	umull	r1, r3, r3, r2
 8007154:	095b      	lsrs	r3, r3, #5
 8007156:	2164      	movs	r1, #100	; 0x64
 8007158:	fb01 f303 	mul.w	r3, r1, r3
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	3332      	adds	r3, #50	; 0x32
 8007162:	4a08      	ldr	r2, [pc, #32]	; (8007184 <UART_SetConfig+0x2d4>)
 8007164:	fba2 2303 	umull	r2, r3, r2, r3
 8007168:	095b      	lsrs	r3, r3, #5
 800716a:	f003 0207 	and.w	r2, r3, #7
 800716e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4422      	add	r2, r4
 8007176:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007178:	e106      	b.n	8007388 <UART_SetConfig+0x4d8>
 800717a:	bf00      	nop
 800717c:	40011000 	.word	0x40011000
 8007180:	40011400 	.word	0x40011400
 8007184:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800718c:	2200      	movs	r2, #0
 800718e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007192:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007196:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800719a:	4642      	mov	r2, r8
 800719c:	464b      	mov	r3, r9
 800719e:	1891      	adds	r1, r2, r2
 80071a0:	6239      	str	r1, [r7, #32]
 80071a2:	415b      	adcs	r3, r3
 80071a4:	627b      	str	r3, [r7, #36]	; 0x24
 80071a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071aa:	4641      	mov	r1, r8
 80071ac:	1854      	adds	r4, r2, r1
 80071ae:	4649      	mov	r1, r9
 80071b0:	eb43 0501 	adc.w	r5, r3, r1
 80071b4:	f04f 0200 	mov.w	r2, #0
 80071b8:	f04f 0300 	mov.w	r3, #0
 80071bc:	00eb      	lsls	r3, r5, #3
 80071be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071c2:	00e2      	lsls	r2, r4, #3
 80071c4:	4614      	mov	r4, r2
 80071c6:	461d      	mov	r5, r3
 80071c8:	4643      	mov	r3, r8
 80071ca:	18e3      	adds	r3, r4, r3
 80071cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071d0:	464b      	mov	r3, r9
 80071d2:	eb45 0303 	adc.w	r3, r5, r3
 80071d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071ea:	f04f 0200 	mov.w	r2, #0
 80071ee:	f04f 0300 	mov.w	r3, #0
 80071f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80071f6:	4629      	mov	r1, r5
 80071f8:	008b      	lsls	r3, r1, #2
 80071fa:	4621      	mov	r1, r4
 80071fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007200:	4621      	mov	r1, r4
 8007202:	008a      	lsls	r2, r1, #2
 8007204:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007208:	f7f9 fbfc 	bl	8000a04 <__aeabi_uldivmod>
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	4b60      	ldr	r3, [pc, #384]	; (8007394 <UART_SetConfig+0x4e4>)
 8007212:	fba3 2302 	umull	r2, r3, r3, r2
 8007216:	095b      	lsrs	r3, r3, #5
 8007218:	011c      	lsls	r4, r3, #4
 800721a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800721e:	2200      	movs	r2, #0
 8007220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007224:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007228:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800722c:	4642      	mov	r2, r8
 800722e:	464b      	mov	r3, r9
 8007230:	1891      	adds	r1, r2, r2
 8007232:	61b9      	str	r1, [r7, #24]
 8007234:	415b      	adcs	r3, r3
 8007236:	61fb      	str	r3, [r7, #28]
 8007238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800723c:	4641      	mov	r1, r8
 800723e:	1851      	adds	r1, r2, r1
 8007240:	6139      	str	r1, [r7, #16]
 8007242:	4649      	mov	r1, r9
 8007244:	414b      	adcs	r3, r1
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	f04f 0200 	mov.w	r2, #0
 800724c:	f04f 0300 	mov.w	r3, #0
 8007250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007254:	4659      	mov	r1, fp
 8007256:	00cb      	lsls	r3, r1, #3
 8007258:	4651      	mov	r1, sl
 800725a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800725e:	4651      	mov	r1, sl
 8007260:	00ca      	lsls	r2, r1, #3
 8007262:	4610      	mov	r0, r2
 8007264:	4619      	mov	r1, r3
 8007266:	4603      	mov	r3, r0
 8007268:	4642      	mov	r2, r8
 800726a:	189b      	adds	r3, r3, r2
 800726c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007270:	464b      	mov	r3, r9
 8007272:	460a      	mov	r2, r1
 8007274:	eb42 0303 	adc.w	r3, r2, r3
 8007278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800727c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	67bb      	str	r3, [r7, #120]	; 0x78
 8007286:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	f04f 0300 	mov.w	r3, #0
 8007290:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007294:	4649      	mov	r1, r9
 8007296:	008b      	lsls	r3, r1, #2
 8007298:	4641      	mov	r1, r8
 800729a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800729e:	4641      	mov	r1, r8
 80072a0:	008a      	lsls	r2, r1, #2
 80072a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80072a6:	f7f9 fbad 	bl	8000a04 <__aeabi_uldivmod>
 80072aa:	4602      	mov	r2, r0
 80072ac:	460b      	mov	r3, r1
 80072ae:	4611      	mov	r1, r2
 80072b0:	4b38      	ldr	r3, [pc, #224]	; (8007394 <UART_SetConfig+0x4e4>)
 80072b2:	fba3 2301 	umull	r2, r3, r3, r1
 80072b6:	095b      	lsrs	r3, r3, #5
 80072b8:	2264      	movs	r2, #100	; 0x64
 80072ba:	fb02 f303 	mul.w	r3, r2, r3
 80072be:	1acb      	subs	r3, r1, r3
 80072c0:	011b      	lsls	r3, r3, #4
 80072c2:	3332      	adds	r3, #50	; 0x32
 80072c4:	4a33      	ldr	r2, [pc, #204]	; (8007394 <UART_SetConfig+0x4e4>)
 80072c6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ca:	095b      	lsrs	r3, r3, #5
 80072cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072d0:	441c      	add	r4, r3
 80072d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072d6:	2200      	movs	r2, #0
 80072d8:	673b      	str	r3, [r7, #112]	; 0x70
 80072da:	677a      	str	r2, [r7, #116]	; 0x74
 80072dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80072e0:	4642      	mov	r2, r8
 80072e2:	464b      	mov	r3, r9
 80072e4:	1891      	adds	r1, r2, r2
 80072e6:	60b9      	str	r1, [r7, #8]
 80072e8:	415b      	adcs	r3, r3
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072f0:	4641      	mov	r1, r8
 80072f2:	1851      	adds	r1, r2, r1
 80072f4:	6039      	str	r1, [r7, #0]
 80072f6:	4649      	mov	r1, r9
 80072f8:	414b      	adcs	r3, r1
 80072fa:	607b      	str	r3, [r7, #4]
 80072fc:	f04f 0200 	mov.w	r2, #0
 8007300:	f04f 0300 	mov.w	r3, #0
 8007304:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007308:	4659      	mov	r1, fp
 800730a:	00cb      	lsls	r3, r1, #3
 800730c:	4651      	mov	r1, sl
 800730e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007312:	4651      	mov	r1, sl
 8007314:	00ca      	lsls	r2, r1, #3
 8007316:	4610      	mov	r0, r2
 8007318:	4619      	mov	r1, r3
 800731a:	4603      	mov	r3, r0
 800731c:	4642      	mov	r2, r8
 800731e:	189b      	adds	r3, r3, r2
 8007320:	66bb      	str	r3, [r7, #104]	; 0x68
 8007322:	464b      	mov	r3, r9
 8007324:	460a      	mov	r2, r1
 8007326:	eb42 0303 	adc.w	r3, r2, r3
 800732a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800732c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	663b      	str	r3, [r7, #96]	; 0x60
 8007336:	667a      	str	r2, [r7, #100]	; 0x64
 8007338:	f04f 0200 	mov.w	r2, #0
 800733c:	f04f 0300 	mov.w	r3, #0
 8007340:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007344:	4649      	mov	r1, r9
 8007346:	008b      	lsls	r3, r1, #2
 8007348:	4641      	mov	r1, r8
 800734a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800734e:	4641      	mov	r1, r8
 8007350:	008a      	lsls	r2, r1, #2
 8007352:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007356:	f7f9 fb55 	bl	8000a04 <__aeabi_uldivmod>
 800735a:	4602      	mov	r2, r0
 800735c:	460b      	mov	r3, r1
 800735e:	4b0d      	ldr	r3, [pc, #52]	; (8007394 <UART_SetConfig+0x4e4>)
 8007360:	fba3 1302 	umull	r1, r3, r3, r2
 8007364:	095b      	lsrs	r3, r3, #5
 8007366:	2164      	movs	r1, #100	; 0x64
 8007368:	fb01 f303 	mul.w	r3, r1, r3
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	011b      	lsls	r3, r3, #4
 8007370:	3332      	adds	r3, #50	; 0x32
 8007372:	4a08      	ldr	r2, [pc, #32]	; (8007394 <UART_SetConfig+0x4e4>)
 8007374:	fba2 2303 	umull	r2, r3, r2, r3
 8007378:	095b      	lsrs	r3, r3, #5
 800737a:	f003 020f 	and.w	r2, r3, #15
 800737e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4422      	add	r2, r4
 8007386:	609a      	str	r2, [r3, #8]
}
 8007388:	bf00      	nop
 800738a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800738e:	46bd      	mov	sp, r7
 8007390:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007394:	51eb851f 	.word	0x51eb851f

08007398 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	f023 0101 	bic.w	r1, r3, #1
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	2b08      	cmp	r3, #8
 80073c0:	d102      	bne.n	80073c8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80073c2:	2340      	movs	r3, #64	; 0x40
 80073c4:	617b      	str	r3, [r7, #20]
 80073c6:	e001      	b.n	80073cc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80073c8:	2300      	movs	r3, #0
 80073ca:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80073d8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80073de:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80073e4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80073ea:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80073f0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80073f6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80073fc:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8007402:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8007408:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800740e:	4313      	orrs	r3, r2
 8007410:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	4313      	orrs	r3, r2
 800741a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	4313      	orrs	r3, r2
 8007424:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8007426:	4b10      	ldr	r3, [pc, #64]	; (8007468 <FSMC_NORSRAM_Init+0xd0>)
 8007428:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007430:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007438:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	43db      	mvns	r3, r3
 8007448:	ea02 0103 	and.w	r1, r2, r3
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	4319      	orrs	r1, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	371c      	adds	r7, #28
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	0008fb7f 	.word	0x0008fb7f

0800746c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007482:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	011b      	lsls	r3, r3, #4
 8007490:	431a      	orrs	r2, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	021b      	lsls	r3, r3, #8
 8007498:	431a      	orrs	r2, r3
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	041b      	lsls	r3, r3, #16
 80074a0:	431a      	orrs	r2, r3
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	051b      	lsls	r3, r3, #20
 80074aa:	431a      	orrs	r2, r3
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	3b02      	subs	r3, #2
 80074b2:	061b      	lsls	r3, r3, #24
 80074b4:	431a      	orrs	r2, r3
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	3201      	adds	r2, #1
 80074c0:	4319      	orrs	r1, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
	...

080074d8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
 80074e4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074ec:	d11d      	bne.n	800752a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80074f6:	4b13      	ldr	r3, [pc, #76]	; (8007544 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80074f8:	4013      	ands	r3, r2
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	6811      	ldr	r1, [r2, #0]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	6852      	ldr	r2, [r2, #4]
 8007502:	0112      	lsls	r2, r2, #4
 8007504:	4311      	orrs	r1, r2
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	6892      	ldr	r2, [r2, #8]
 800750a:	0212      	lsls	r2, r2, #8
 800750c:	4311      	orrs	r1, r2
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	6992      	ldr	r2, [r2, #24]
 8007512:	4311      	orrs	r1, r2
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	68d2      	ldr	r2, [r2, #12]
 8007518:	0412      	lsls	r2, r2, #16
 800751a:	430a      	orrs	r2, r1
 800751c:	ea43 0102 	orr.w	r1, r3, r2
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007528:	e005      	b.n	8007536 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	cff00000 	.word	0xcff00000

08007548 <memset>:
 8007548:	4402      	add	r2, r0
 800754a:	4603      	mov	r3, r0
 800754c:	4293      	cmp	r3, r2
 800754e:	d100      	bne.n	8007552 <memset+0xa>
 8007550:	4770      	bx	lr
 8007552:	f803 1b01 	strb.w	r1, [r3], #1
 8007556:	e7f9      	b.n	800754c <memset+0x4>

08007558 <__libc_init_array>:
 8007558:	b570      	push	{r4, r5, r6, lr}
 800755a:	4d0d      	ldr	r5, [pc, #52]	; (8007590 <__libc_init_array+0x38>)
 800755c:	4c0d      	ldr	r4, [pc, #52]	; (8007594 <__libc_init_array+0x3c>)
 800755e:	1b64      	subs	r4, r4, r5
 8007560:	10a4      	asrs	r4, r4, #2
 8007562:	2600      	movs	r6, #0
 8007564:	42a6      	cmp	r6, r4
 8007566:	d109      	bne.n	800757c <__libc_init_array+0x24>
 8007568:	4d0b      	ldr	r5, [pc, #44]	; (8007598 <__libc_init_array+0x40>)
 800756a:	4c0c      	ldr	r4, [pc, #48]	; (800759c <__libc_init_array+0x44>)
 800756c:	f000 f818 	bl	80075a0 <_init>
 8007570:	1b64      	subs	r4, r4, r5
 8007572:	10a4      	asrs	r4, r4, #2
 8007574:	2600      	movs	r6, #0
 8007576:	42a6      	cmp	r6, r4
 8007578:	d105      	bne.n	8007586 <__libc_init_array+0x2e>
 800757a:	bd70      	pop	{r4, r5, r6, pc}
 800757c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007580:	4798      	blx	r3
 8007582:	3601      	adds	r6, #1
 8007584:	e7ee      	b.n	8007564 <__libc_init_array+0xc>
 8007586:	f855 3b04 	ldr.w	r3, [r5], #4
 800758a:	4798      	blx	r3
 800758c:	3601      	adds	r6, #1
 800758e:	e7f2      	b.n	8007576 <__libc_init_array+0x1e>
 8007590:	0800a5a0 	.word	0x0800a5a0
 8007594:	0800a5a0 	.word	0x0800a5a0
 8007598:	0800a5a0 	.word	0x0800a5a0
 800759c:	0800a5a4 	.word	0x0800a5a4

080075a0 <_init>:
 80075a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a2:	bf00      	nop
 80075a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075a6:	bc08      	pop	{r3}
 80075a8:	469e      	mov	lr, r3
 80075aa:	4770      	bx	lr

080075ac <_fini>:
 80075ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ae:	bf00      	nop
 80075b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075b2:	bc08      	pop	{r3}
 80075b4:	469e      	mov	lr, r3
 80075b6:	4770      	bx	lr
