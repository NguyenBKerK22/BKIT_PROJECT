
ModBus_RTU_Implement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007754  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000302c  080078e4  080078e4  000088e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a910  0800a910  0000c298  2**0
                  CONTENTS
  4 .ARM          00000008  0800a910  0800a910  0000b910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a918  0800a918  0000c298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a918  0800a918  0000b918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a91c  0800a91c  0000b91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000298  20000000  0800a920  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c298  2**0
                  CONTENTS
 10 .bss          00000734  20000298  20000298  0000c298  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009cc  200009cc  0000c298  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c298  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016fe8  00000000  00000000  0000c2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004098  00000000  00000000  000232b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  00027348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9c  00000000  00000000  000287c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e9c  00000000  00000000  00029764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c401  00000000  00000000  0004f600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de294  00000000  00000000  0006ba01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149c95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005730  00000000  00000000  00149cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0014f408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000298 	.word	0x20000298
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078cc 	.word	0x080078cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000029c 	.word	0x2000029c
 80001cc:	080078cc 	.word	0x080078cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <_f_master_send_cmd_temperature>:
 *      Author: ADMIN
 */
#include "master.h"
int error_count = 0;
enum master_state_t master_behavior = IDLE;
void _f_master_send_cmd_temperature(){
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
	master.tx_buf[0] = slave_address;
 8000564:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <_f_master_send_cmd_temperature+0x3c>)
 8000566:	781a      	ldrb	r2, [r3, #0]
 8000568:	4b0d      	ldr	r3, [pc, #52]	@ (80005a0 <_f_master_send_cmd_temperature+0x40>)
 800056a:	715a      	strb	r2, [r3, #5]
	master.tx_buf[1] = READ_HOLDING_REGISTER;
 800056c:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <_f_master_send_cmd_temperature+0x40>)
 800056e:	2203      	movs	r2, #3
 8000570:	719a      	strb	r2, [r3, #6]
	master.tx_buf[2] = 0x00;
 8000572:	4b0b      	ldr	r3, [pc, #44]	@ (80005a0 <_f_master_send_cmd_temperature+0x40>)
 8000574:	2200      	movs	r2, #0
 8000576:	71da      	strb	r2, [r3, #7]
	master.tx_buf[3] = TEMPERATURE_REGISTER_ADDRESS;
 8000578:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <_f_master_send_cmd_temperature+0x40>)
 800057a:	2206      	movs	r2, #6
 800057c:	721a      	strb	r2, [r3, #8]
	master.tx_buf[4] = 0x00;
 800057e:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <_f_master_send_cmd_temperature+0x40>)
 8000580:	2200      	movs	r2, #0
 8000582:	725a      	strb	r2, [r3, #9]
	master.tx_buf[5] = 0x01;
 8000584:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <_f_master_send_cmd_temperature+0x40>)
 8000586:	2201      	movs	r2, #1
 8000588:	729a      	strb	r2, [r3, #10]
	master.tx_size = 6;
 800058a:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <_f_master_send_cmd_temperature+0x40>)
 800058c:	2206      	movs	r2, #6
 800058e:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	20000220 	.word	0x20000220
 80005a0:	20000488 	.word	0x20000488

080005a4 <_f_master_send_cmd_current>:

void _f_master_send_cmd_current(){
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	master.tx_buf[0] = slave_address;
 80005a8:	4b0d      	ldr	r3, [pc, #52]	@ (80005e0 <_f_master_send_cmd_current+0x3c>)
 80005aa:	781a      	ldrb	r2, [r3, #0]
 80005ac:	4b0d      	ldr	r3, [pc, #52]	@ (80005e4 <_f_master_send_cmd_current+0x40>)
 80005ae:	715a      	strb	r2, [r3, #5]
	master.tx_buf[1] = READ_HOLDING_REGISTER;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <_f_master_send_cmd_current+0x40>)
 80005b2:	2203      	movs	r2, #3
 80005b4:	719a      	strb	r2, [r3, #6]
	master.tx_buf[2] = 0x00;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <_f_master_send_cmd_current+0x40>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	71da      	strb	r2, [r3, #7]
	master.tx_buf[3] = CURRENT_REGISTER_ADDRESS;
 80005bc:	4b09      	ldr	r3, [pc, #36]	@ (80005e4 <_f_master_send_cmd_current+0x40>)
 80005be:	220a      	movs	r2, #10
 80005c0:	721a      	strb	r2, [r3, #8]
	master.tx_buf[4] = 0x00;
 80005c2:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <_f_master_send_cmd_current+0x40>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	725a      	strb	r2, [r3, #9]
	master.tx_buf[5] = 0x01;
 80005c8:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <_f_master_send_cmd_current+0x40>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	729a      	strb	r2, [r3, #10]
	master.tx_size = 6;
 80005ce:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <_f_master_send_cmd_current+0x40>)
 80005d0:	2206      	movs	r2, #6
 80005d2:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	20000220 	.word	0x20000220
 80005e4:	20000488 	.word	0x20000488

080005e8 <_f_master_send_cmd_voltage>:

void _f_master_send_cmd_voltage(){
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
	master.tx_buf[0] = slave_address;
 80005ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <_f_master_send_cmd_voltage+0x3c>)
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000628 <_f_master_send_cmd_voltage+0x40>)
 80005f2:	715a      	strb	r2, [r3, #5]
	master.tx_buf[1] = READ_HOLDING_REGISTER;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <_f_master_send_cmd_voltage+0x40>)
 80005f6:	2203      	movs	r2, #3
 80005f8:	719a      	strb	r2, [r3, #6]
	master.tx_buf[2] = 0x00;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <_f_master_send_cmd_voltage+0x40>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	71da      	strb	r2, [r3, #7]
	master.tx_buf[3] = VOLTAGE_REGISTER_ADDRESS;
 8000600:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <_f_master_send_cmd_voltage+0x40>)
 8000602:	220e      	movs	r2, #14
 8000604:	721a      	strb	r2, [r3, #8]
	master.tx_buf[4] = 0x00;
 8000606:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <_f_master_send_cmd_voltage+0x40>)
 8000608:	2200      	movs	r2, #0
 800060a:	725a      	strb	r2, [r3, #9]
	master.tx_buf[5] = 0x01;
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <_f_master_send_cmd_voltage+0x40>)
 800060e:	2201      	movs	r2, #1
 8000610:	729a      	strb	r2, [r3, #10]
	master.tx_size = 6;
 8000612:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <_f_master_send_cmd_voltage+0x40>)
 8000614:	2206      	movs	r2, #6
 8000616:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	20000220 	.word	0x20000220
 8000628:	20000488 	.word	0x20000488

0800062c <_f_master_send_cmd_light>:

void _f_master_send_cmd_light(){
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	master.tx_buf[0] = slave_address;
 8000630:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <_f_master_send_cmd_light+0x3c>)
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <_f_master_send_cmd_light+0x40>)
 8000636:	715a      	strb	r2, [r3, #5]
	master.tx_buf[1] = READ_HOLDING_REGISTER;
 8000638:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <_f_master_send_cmd_light+0x40>)
 800063a:	2203      	movs	r2, #3
 800063c:	719a      	strb	r2, [r3, #6]
	master.tx_buf[2] = 0x00;
 800063e:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <_f_master_send_cmd_light+0x40>)
 8000640:	2200      	movs	r2, #0
 8000642:	71da      	strb	r2, [r3, #7]
	master.tx_buf[3] = LIGHT_REGISTER_ADDRESS;
 8000644:	4b09      	ldr	r3, [pc, #36]	@ (800066c <_f_master_send_cmd_light+0x40>)
 8000646:	2204      	movs	r2, #4
 8000648:	721a      	strb	r2, [r3, #8]
	master.tx_buf[4] = 0x00;
 800064a:	4b08      	ldr	r3, [pc, #32]	@ (800066c <_f_master_send_cmd_light+0x40>)
 800064c:	2200      	movs	r2, #0
 800064e:	725a      	strb	r2, [r3, #9]
	master.tx_buf[5] = 0x01;
 8000650:	4b06      	ldr	r3, [pc, #24]	@ (800066c <_f_master_send_cmd_light+0x40>)
 8000652:	2201      	movs	r2, #1
 8000654:	729a      	strb	r2, [r3, #10]
	master.tx_size = 6;
 8000656:	4b05      	ldr	r3, [pc, #20]	@ (800066c <_f_master_send_cmd_light+0x40>)
 8000658:	2206      	movs	r2, #6
 800065a:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	20000220 	.word	0x20000220
 800066c:	20000488 	.word	0x20000488

08000670 <_f_master_send_cmd_potentiometer>:

void _f_master_send_cmd_potentiometer(){
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
	master.tx_buf[0] = slave_address;
 8000674:	4b0d      	ldr	r3, [pc, #52]	@ (80006ac <_f_master_send_cmd_potentiometer+0x3c>)
 8000676:	781a      	ldrb	r2, [r3, #0]
 8000678:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <_f_master_send_cmd_potentiometer+0x40>)
 800067a:	715a      	strb	r2, [r3, #5]
	master.tx_buf[1] = READ_HOLDING_REGISTER;
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <_f_master_send_cmd_potentiometer+0x40>)
 800067e:	2203      	movs	r2, #3
 8000680:	719a      	strb	r2, [r3, #6]
	master.tx_buf[2] = 0x00;
 8000682:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <_f_master_send_cmd_potentiometer+0x40>)
 8000684:	2200      	movs	r2, #0
 8000686:	71da      	strb	r2, [r3, #7]
	master.tx_buf[3] = POTENTIOMETER_REGISTER_ADDRESS;
 8000688:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <_f_master_send_cmd_potentiometer+0x40>)
 800068a:	2200      	movs	r2, #0
 800068c:	721a      	strb	r2, [r3, #8]
	master.tx_buf[4] = 0x00;
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <_f_master_send_cmd_potentiometer+0x40>)
 8000690:	2200      	movs	r2, #0
 8000692:	725a      	strb	r2, [r3, #9]
	master.tx_buf[5] = 0x01;
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <_f_master_send_cmd_potentiometer+0x40>)
 8000696:	2201      	movs	r2, #1
 8000698:	729a      	strb	r2, [r3, #10]
	master.tx_size = 6;
 800069a:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <_f_master_send_cmd_potentiometer+0x40>)
 800069c:	2206      	movs	r2, #6
 800069e:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	20000220 	.word	0x20000220
 80006b0:	20000488 	.word	0x20000488

080006b4 <f_master_fsm>:

void f_master_fsm(){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b0c8      	sub	sp, #288	@ 0x120
 80006b8:	af04      	add	r7, sp, #16
	switch(master_behavior){
 80006ba:	4b8c      	ldr	r3, [pc, #560]	@ (80008ec <f_master_fsm+0x238>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b04      	cmp	r3, #4
 80006c0:	f200 8107 	bhi.w	80008d2 <f_master_fsm+0x21e>
 80006c4:	a201      	add	r2, pc, #4	@ (adr r2, 80006cc <f_master_fsm+0x18>)
 80006c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ca:	bf00      	nop
 80006cc:	080006e1 	.word	0x080006e1
 80006d0:	0800076d 	.word	0x0800076d
 80006d4:	08000783 	.word	0x08000783
 80006d8:	080007ab 	.word	0x080007ab
 80006dc:	0800087d 	.word	0x0800087d
		case IDLE:
			if(flag_send_cmd){
 80006e0:	4b83      	ldr	r3, [pc, #524]	@ (80008f0 <f_master_fsm+0x23c>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	f000 80f6 	beq.w	80008d6 <f_master_fsm+0x222>
				switch(cmd_send){
 80006ea:	4b82      	ldr	r3, [pc, #520]	@ (80008f4 <f_master_fsm+0x240>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	2b05      	cmp	r3, #5
 80006f2:	d81e      	bhi.n	8000732 <f_master_fsm+0x7e>
 80006f4:	a201      	add	r2, pc, #4	@ (adr r2, 80006fc <f_master_fsm+0x48>)
 80006f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fa:	bf00      	nop
 80006fc:	08000715 	.word	0x08000715
 8000700:	0800071b 	.word	0x0800071b
 8000704:	08000721 	.word	0x08000721
 8000708:	08000727 	.word	0x08000727
 800070c:	08000733 	.word	0x08000733
 8000710:	0800072d 	.word	0x0800072d
					case READ_TEMPERATURE:
						_f_master_send_cmd_temperature();
 8000714:	f7ff ff24 	bl	8000560 <_f_master_send_cmd_temperature>
						break;
 8000718:	e00c      	b.n	8000734 <f_master_fsm+0x80>
					case READ_CURRENT:
						_f_master_send_cmd_current();
 800071a:	f7ff ff43 	bl	80005a4 <_f_master_send_cmd_current>
						break;
 800071e:	e009      	b.n	8000734 <f_master_fsm+0x80>
					case READ_VOLTAGE:
						_f_master_send_cmd_voltage();
 8000720:	f7ff ff62 	bl	80005e8 <_f_master_send_cmd_voltage>
						break;
 8000724:	e006      	b.n	8000734 <f_master_fsm+0x80>
					case READ_LIGHT:
						_f_master_send_cmd_light();
 8000726:	f7ff ff81 	bl	800062c <_f_master_send_cmd_light>
						break;
 800072a:	e003      	b.n	8000734 <f_master_fsm+0x80>
					case READ_POTENTION:
						_f_master_send_cmd_potentiometer();
 800072c:	f7ff ffa0 	bl	8000670 <_f_master_send_cmd_potentiometer>
						break;
 8000730:	e000      	b.n	8000734 <f_master_fsm+0x80>
					default:
						break;
 8000732:	bf00      	nop
				}
				f_rs485_send_cmd(master.tx_buf, master.tx_size);
 8000734:	4b70      	ldr	r3, [pc, #448]	@ (80008f8 <f_master_fsm+0x244>)
 8000736:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4619      	mov	r1, r3
 800073e:	486f      	ldr	r0, [pc, #444]	@ (80008fc <f_master_fsm+0x248>)
 8000740:	f001 fcd8 	bl	80020f4 <f_rs485_send_cmd>
				if(cmd_send == BROAD_CAST){
 8000744:	4b6b      	ldr	r3, [pc, #428]	@ (80008f4 <f_master_fsm+0x240>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2bff      	cmp	r3, #255	@ 0xff
 800074a:	d107      	bne.n	800075c <f_master_fsm+0xa8>
					setTimer(TI_MASTER_TURN_ARROUND_TIMER, TI_MASTER_TURN_ARROUND_TIME);
 800074c:	2132      	movs	r1, #50	@ 0x32
 800074e:	2005      	movs	r0, #5
 8000750:	f001 fec6 	bl	80024e0 <setTimer>
					master_behavior = WAITING_TURN_ARROUND_DELAY;
 8000754:	4b65      	ldr	r3, [pc, #404]	@ (80008ec <f_master_fsm+0x238>)
 8000756:	2201      	movs	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
					break;
 800075a:	e0c1      	b.n	80008e0 <f_master_fsm+0x22c>
				}
				setTimer(TI_MASTER_WAITING_TIMER, TI_MASTER_TURN_ARROUND_TIME);
 800075c:	2132      	movs	r1, #50	@ 0x32
 800075e:	2006      	movs	r0, #6
 8000760:	f001 febe 	bl	80024e0 <setTimer>
				master_behavior = WAITING_FOR_REPLY;
 8000764:	4b61      	ldr	r3, [pc, #388]	@ (80008ec <f_master_fsm+0x238>)
 8000766:	2202      	movs	r2, #2
 8000768:	701a      	strb	r2, [r3, #0]
			}
			break;
 800076a:	e0b4      	b.n	80008d6 <f_master_fsm+0x222>
		case WAITING_TURN_ARROUND_DELAY:
			if(isFlag(TI_MASTER_TURN_ARROUND_TIMER)) master_behavior = IDLE;
 800076c:	2005      	movs	r0, #5
 800076e:	f001 feff 	bl	8002570 <isFlag>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	f000 80b0 	beq.w	80008da <f_master_fsm+0x226>
 800077a:	4b5c      	ldr	r3, [pc, #368]	@ (80008ec <f_master_fsm+0x238>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
			break;
 8000780:	e0ab      	b.n	80008da <f_master_fsm+0x226>
		case WAITING_FOR_REPLY:
			if(isFlag(TI_MASTER_TURN_ARROUND_TIME)) master_behavior = PROCESSING_ERROR;
 8000782:	2032      	movs	r0, #50	@ 0x32
 8000784:	f001 fef4 	bl	8002570 <isFlag>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d003      	beq.n	8000796 <f_master_fsm+0xe2>
 800078e:	4b57      	ldr	r3, [pc, #348]	@ (80008ec <f_master_fsm+0x238>)
 8000790:	2204      	movs	r2, #4
 8000792:	701a      	strb	r2, [r3, #0]
			else if(f_rs485_received()){
				master_behavior = PROCESSING_REPLY;
			}
			break;
 8000794:	e0a3      	b.n	80008de <f_master_fsm+0x22a>
			else if(f_rs485_received()){
 8000796:	f001 fcce 	bl	8002136 <f_rs485_received>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	f000 809e 	beq.w	80008de <f_master_fsm+0x22a>
				master_behavior = PROCESSING_REPLY;
 80007a2:	4b52      	ldr	r3, [pc, #328]	@ (80008ec <f_master_fsm+0x238>)
 80007a4:	2203      	movs	r2, #3
 80007a6:	701a      	strb	r2, [r3, #0]
			break;
 80007a8:	e099      	b.n	80008de <f_master_fsm+0x22a>
			uint8_t _address;
			uint8_t _function;
			uint8_t _data[256];
			uint8_t _data_size;
			uint16_t _crc_receive;
			f_rs485_parserFrame(master.rx_buf, master.rx_size, &_address, &_function, _data,&_data_size, &_crc_receive);
 80007aa:	4b53      	ldr	r3, [pc, #332]	@ (80008f8 <f_master_fsm+0x244>)
 80007ac:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80007b0:	b2d9      	uxtb	r1, r3
 80007b2:	f507 7083 	add.w	r0, r7, #262	@ 0x106
 80007b6:	f207 1207 	addw	r2, r7, #263	@ 0x107
 80007ba:	f507 7381 	add.w	r3, r7, #258	@ 0x102
 80007be:	9302      	str	r3, [sp, #8]
 80007c0:	f207 1305 	addw	r3, r7, #261	@ 0x105
 80007c4:	9301      	str	r3, [sp, #4]
 80007c6:	463b      	mov	r3, r7
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	4603      	mov	r3, r0
 80007cc:	484c      	ldr	r0, [pc, #304]	@ (8000900 <f_master_fsm+0x24c>)
 80007ce:	f001 fca4 	bl	800211a <f_rs485_parserFrame>
			if(_crc_receive == crc16(master.rx_buf, master.rx_size - 2)){
 80007d2:	4b49      	ldr	r3, [pc, #292]	@ (80008f8 <f_master_fsm+0x244>)
 80007d4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80007d8:	3b02      	subs	r3, #2
 80007da:	b29b      	uxth	r3, r3
 80007dc:	4619      	mov	r1, r3
 80007de:	4848      	ldr	r0, [pc, #288]	@ (8000900 <f_master_fsm+0x24c>)
 80007e0:	f000 fb50 	bl	8000e84 <crc16>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d141      	bne.n	8000874 <f_master_fsm+0x1c0>
				switch(_function){
 80007f0:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 80007f4:	2b10      	cmp	r3, #16
 80007f6:	d036      	beq.n	8000866 <f_master_fsm+0x1b2>
 80007f8:	2b10      	cmp	r3, #16
 80007fa:	dc36      	bgt.n	800086a <f_master_fsm+0x1b6>
 80007fc:	2b03      	cmp	r3, #3
 80007fe:	d001      	beq.n	8000804 <f_master_fsm+0x150>
 8000800:	2b05      	cmp	r3, #5
						}
						break;
					case WRITE_MULTIPLE_HOLDING_REGISTER:
						break;
					case WRITE_SINGLE_COIL:
						break;
 8000802:	e033      	b.n	800086c <f_master_fsm+0x1b8>
						uint8_t _num_bytes = master.rx_buf[2];
 8000804:	4b3c      	ldr	r3, [pc, #240]	@ (80008f8 <f_master_fsm+0x244>)
 8000806:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 800080a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
						uint16_t _address = (((uint16_t)master.tx_buf[2]<<8)|(master.tx_buf[3]));
 800080e:	4b3a      	ldr	r3, [pc, #232]	@ (80008f8 <f_master_fsm+0x244>)
 8000810:	79db      	ldrb	r3, [r3, #7]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	4b38      	ldr	r3, [pc, #224]	@ (80008f8 <f_master_fsm+0x244>)
 8000818:	7a1b      	ldrb	r3, [r3, #8]
 800081a:	b21b      	sxth	r3, r3
 800081c:	4313      	orrs	r3, r2
 800081e:	b21b      	sxth	r3, r3
 8000820:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
						for(int i=0;i<_num_bytes;i++){
 8000824:	2300      	movs	r3, #0
 8000826:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800082a:	e015      	b.n	8000858 <f_master_fsm+0x1a4>
							master.holding_register[i + _address]  = master.rx_buf[i+3];
 800082c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000830:	1cda      	adds	r2, r3, #3
 8000832:	f8b7 1108 	ldrh.w	r1, [r7, #264]	@ 0x108
 8000836:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800083a:	440b      	add	r3, r1
 800083c:	492e      	ldr	r1, [pc, #184]	@ (80008f8 <f_master_fsm+0x244>)
 800083e:	440a      	add	r2, r1
 8000840:	f892 1108 	ldrb.w	r1, [r2, #264]	@ 0x108
 8000844:	4a2c      	ldr	r2, [pc, #176]	@ (80008f8 <f_master_fsm+0x244>)
 8000846:	4413      	add	r3, r2
 8000848:	460a      	mov	r2, r1
 800084a:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
						for(int i=0;i<_num_bytes;i++){
 800084e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000852:	3301      	adds	r3, #1
 8000854:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000858:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800085c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000860:	429a      	cmp	r2, r3
 8000862:	dbe3      	blt.n	800082c <f_master_fsm+0x178>
						break;
 8000864:	e002      	b.n	800086c <f_master_fsm+0x1b8>
						break;
 8000866:	bf00      	nop
 8000868:	e000      	b.n	800086c <f_master_fsm+0x1b8>
					default:
						break;
 800086a:	bf00      	nop
				}
				master_behavior = IDLE;
 800086c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <f_master_fsm+0x238>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
			}
			else{
				master_behavior = PROCESSING_ERROR;
			}
			break;
 8000872:	e035      	b.n	80008e0 <f_master_fsm+0x22c>
				master_behavior = PROCESSING_ERROR;
 8000874:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <f_master_fsm+0x238>)
 8000876:	2204      	movs	r2, #4
 8000878:	701a      	strb	r2, [r3, #0]
			break;
 800087a:	e031      	b.n	80008e0 <f_master_fsm+0x22c>
		case PROCESSING_ERROR:
			error_count++;
 800087c:	4b21      	ldr	r3, [pc, #132]	@ (8000904 <f_master_fsm+0x250>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	4a20      	ldr	r2, [pc, #128]	@ (8000904 <f_master_fsm+0x250>)
 8000884:	6013      	str	r3, [r2, #0]
			if(error_count == 5){
 8000886:	4b1f      	ldr	r3, [pc, #124]	@ (8000904 <f_master_fsm+0x250>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b05      	cmp	r3, #5
 800088c:	d105      	bne.n	800089a <f_master_fsm+0x1e6>
				flag_slave_not_respond = 1;
 800088e:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <f_master_fsm+0x254>)
 8000890:	2201      	movs	r2, #1
 8000892:	701a      	strb	r2, [r3, #0]
				master_behavior = IDLE;
 8000894:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <f_master_fsm+0x238>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
			}
			f_rs485_send_cmd(master.tx_buf, master.tx_size);
 800089a:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <f_master_fsm+0x244>)
 800089c:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	4815      	ldr	r0, [pc, #84]	@ (80008fc <f_master_fsm+0x248>)
 80008a6:	f001 fc25 	bl	80020f4 <f_rs485_send_cmd>
			if(cmd_send == BROAD_CAST){
 80008aa:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <f_master_fsm+0x240>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2bff      	cmp	r3, #255	@ 0xff
 80008b0:	d107      	bne.n	80008c2 <f_master_fsm+0x20e>
				setTimer(TI_MASTER_TURN_ARROUND_TIMER, TI_MASTER_TURN_ARROUND_TIME);
 80008b2:	2132      	movs	r1, #50	@ 0x32
 80008b4:	2005      	movs	r0, #5
 80008b6:	f001 fe13 	bl	80024e0 <setTimer>
				master_behavior = WAITING_TURN_ARROUND_DELAY;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <f_master_fsm+0x238>)
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
				break;
 80008c0:	e00e      	b.n	80008e0 <f_master_fsm+0x22c>
			}
			setTimer(TI_MASTER_WAITING_TIMER, TI_MASTER_TURN_ARROUND_TIME);
 80008c2:	2132      	movs	r1, #50	@ 0x32
 80008c4:	2006      	movs	r0, #6
 80008c6:	f001 fe0b 	bl	80024e0 <setTimer>
			master_behavior = WAITING_FOR_REPLY;
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <f_master_fsm+0x238>)
 80008cc:	2202      	movs	r2, #2
 80008ce:	701a      	strb	r2, [r3, #0]
			break;
 80008d0:	e006      	b.n	80008e0 <f_master_fsm+0x22c>
		default:
			break;
 80008d2:	bf00      	nop
 80008d4:	e004      	b.n	80008e0 <f_master_fsm+0x22c>
			break;
 80008d6:	bf00      	nop
 80008d8:	e002      	b.n	80008e0 <f_master_fsm+0x22c>
			break;
 80008da:	bf00      	nop
 80008dc:	e000      	b.n	80008e0 <f_master_fsm+0x22c>
			break;
 80008de:	bf00      	nop
	}
}
 80008e0:	bf00      	nop
 80008e2:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200002b8 	.word	0x200002b8
 80008f0:	2000047d 	.word	0x2000047d
 80008f4:	2000047c 	.word	0x2000047c
 80008f8:	20000488 	.word	0x20000488
 80008fc:	2000048d 	.word	0x2000048d
 8000900:	20000590 	.word	0x20000590
 8000904:	200002b4 	.word	0x200002b4
 8000908:	2000047e 	.word	0x2000047e

0800090c <f_master_get_temperature>:

float f_master_get_temperature(){
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
	return *((float*)((master.holding_register + TEMPERATURE_REGISTER_ADDRESS)));
 8000910:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <f_master_get_temperature+0x18>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	ee07 3a90 	vmov	s15, r3
}
 8000918:	eeb0 0a67 	vmov.f32	s0, s15
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	20000698 	.word	0x20000698

08000928 <f_master_get_current>:

float f_master_get_current(){
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
	return *((float*)((master.holding_register + CURRENT_REGISTER_ADDRESS)));;
 800092c:	4b04      	ldr	r3, [pc, #16]	@ (8000940 <f_master_get_current+0x18>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	ee07 3a90 	vmov	s15, r3
}
 8000934:	eeb0 0a67 	vmov.f32	s0, s15
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	2000069c 	.word	0x2000069c

08000944 <f_master_get_voltage>:

float f_master_get_voltage(){
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
	return *((float*)((master.holding_register + VOLTAGE_REGISTER_ADDRESS)));
 8000948:	4b04      	ldr	r3, [pc, #16]	@ (800095c <f_master_get_voltage+0x18>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	ee07 3a90 	vmov	s15, r3
}
 8000950:	eeb0 0a67 	vmov.f32	s0, s15
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	200006a0 	.word	0x200006a0

08000960 <f_master_get_light>:

uint16_t f_master_get_light(){
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
	uint16_t _return_val = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	81fb      	strh	r3, [r7, #14]
	uint8_t _size_of_reg = 2;
 800096a:	2302      	movs	r3, #2
 800096c:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < _size_of_reg; i++){
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	e00f      	b.n	8000994 <f_master_get_light+0x34>
		_return_val = (_return_val<<8)|(master.holding_register[LIGHT_REGISTER_ADDRESS + i]);
 8000974:	89fb      	ldrh	r3, [r7, #14]
 8000976:	021b      	lsls	r3, r3, #8
 8000978:	b21a      	sxth	r2, r3
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	3304      	adds	r3, #4
 800097e:	490b      	ldr	r1, [pc, #44]	@ (80009ac <f_master_get_light+0x4c>)
 8000980:	440b      	add	r3, r1
 8000982:	f893 320a 	ldrb.w	r3, [r3, #522]	@ 0x20a
 8000986:	b21b      	sxth	r3, r3
 8000988:	4313      	orrs	r3, r2
 800098a:	b21b      	sxth	r3, r3
 800098c:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < _size_of_reg; i++){
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	3301      	adds	r3, #1
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	429a      	cmp	r2, r3
 800099a:	dbeb      	blt.n	8000974 <f_master_get_light+0x14>
	}
	return _return_val;
 800099c:	89fb      	ldrh	r3, [r7, #14]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000488 	.word	0x20000488

080009b0 <f_master_get_potention>:

uint16_t f_master_get_potention(){
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
	uint16_t _return_val = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	81fb      	strh	r3, [r7, #14]
	uint8_t _size_of_reg = 2;
 80009ba:	2302      	movs	r3, #2
 80009bc:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < _size_of_reg; i++){
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	e00f      	b.n	80009e4 <f_master_get_potention+0x34>
		_return_val = (_return_val<<8)|(master.holding_register[POTENTIOMETER_REGISTER_ADDRESS + i]);
 80009c4:	89fb      	ldrh	r3, [r7, #14]
 80009c6:	021b      	lsls	r3, r3, #8
 80009c8:	b21a      	sxth	r2, r3
 80009ca:	490c      	ldr	r1, [pc, #48]	@ (80009fc <f_master_get_potention+0x4c>)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	440b      	add	r3, r1
 80009d0:	f203 230a 	addw	r3, r3, #522	@ 0x20a
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b21b      	sxth	r3, r3
 80009d8:	4313      	orrs	r3, r2
 80009da:	b21b      	sxth	r3, r3
 80009dc:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < _size_of_reg; i++){
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	3301      	adds	r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	dbeb      	blt.n	80009c4 <f_master_get_potention+0x14>
	}
	return _return_val;
 80009ec:	89fb      	ldrh	r3, [r7, #14]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20000488 	.word	0x20000488

08000a00 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a06:	463b      	mov	r3, r7
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a12:	4b39      	ldr	r3, [pc, #228]	@ (8000af8 <MX_ADC1_Init+0xf8>)
 8000a14:	4a39      	ldr	r2, [pc, #228]	@ (8000afc <MX_ADC1_Init+0xfc>)
 8000a16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a18:	4b37      	ldr	r3, [pc, #220]	@ (8000af8 <MX_ADC1_Init+0xf8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a1e:	4b36      	ldr	r3, [pc, #216]	@ (8000af8 <MX_ADC1_Init+0xf8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a24:	4b34      	ldr	r3, [pc, #208]	@ (8000af8 <MX_ADC1_Init+0xf8>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a2a:	4b33      	ldr	r3, [pc, #204]	@ (8000af8 <MX_ADC1_Init+0xf8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a30:	4b31      	ldr	r3, [pc, #196]	@ (8000af8 <MX_ADC1_Init+0xf8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a38:	4b2f      	ldr	r3, [pc, #188]	@ (8000af8 <MX_ADC1_Init+0xf8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8000af8 <MX_ADC1_Init+0xf8>)
 8000a40:	4a2f      	ldr	r2, [pc, #188]	@ (8000b00 <MX_ADC1_Init+0x100>)
 8000a42:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a44:	4b2c      	ldr	r3, [pc, #176]	@ (8000af8 <MX_ADC1_Init+0xf8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000af8 <MX_ADC1_Init+0xf8>)
 8000a4c:	2205      	movs	r2, #5
 8000a4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a50:	4b29      	ldr	r3, [pc, #164]	@ (8000af8 <MX_ADC1_Init+0xf8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a58:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <MX_ADC1_Init+0xf8>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a5e:	4826      	ldr	r0, [pc, #152]	@ (8000af8 <MX_ADC1_Init+0xf8>)
 8000a60:	f002 f8e6 	bl	8002c30 <HAL_ADC_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a6a:	f001 fb3d 	bl	80020e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a6e:	2308      	movs	r3, #8
 8000a70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000a76:	2301      	movs	r3, #1
 8000a78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	481e      	ldr	r0, [pc, #120]	@ (8000af8 <MX_ADC1_Init+0xf8>)
 8000a80:	f002 fa48 	bl	8002f14 <HAL_ADC_ConfigChannel>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a8a:	f001 fb2d 	bl	80020e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	4619      	mov	r1, r3
 8000a96:	4818      	ldr	r0, [pc, #96]	@ (8000af8 <MX_ADC1_Init+0xf8>)
 8000a98:	f002 fa3c 	bl	8002f14 <HAL_ADC_ConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000aa2:	f001 fb21 	bl	80020e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4619      	mov	r1, r3
 8000aae:	4812      	ldr	r0, [pc, #72]	@ (8000af8 <MX_ADC1_Init+0xf8>)
 8000ab0:	f002 fa30 	bl	8002f14 <HAL_ADC_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8000aba:	f001 fb15 	bl	80020e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480c      	ldr	r0, [pc, #48]	@ (8000af8 <MX_ADC1_Init+0xf8>)
 8000ac8:	f002 fa24 	bl	8002f14 <HAL_ADC_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000ad2:	f001 fb09 	bl	80020e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ada:	463b      	mov	r3, r7
 8000adc:	4619      	mov	r1, r3
 8000ade:	4806      	ldr	r0, [pc, #24]	@ (8000af8 <MX_ADC1_Init+0xf8>)
 8000ae0:	f002 fa18 	bl	8002f14 <HAL_ADC_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000aea:	f001 fafd 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200002bc 	.word	0x200002bc
 8000afc:	40012000 	.word	0x40012000
 8000b00:	0f000001 	.word	0x0f000001

08000b04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	@ 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a3c      	ldr	r2, [pc, #240]	@ (8000c14 <HAL_ADC_MspInit+0x110>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d171      	bne.n	8000c0a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c18 <HAL_ADC_MspInit+0x114>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2e:	4a3a      	ldr	r2, [pc, #232]	@ (8000c18 <HAL_ADC_MspInit+0x114>)
 8000b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b36:	4b38      	ldr	r3, [pc, #224]	@ (8000c18 <HAL_ADC_MspInit+0x114>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b34      	ldr	r3, [pc, #208]	@ (8000c18 <HAL_ADC_MspInit+0x114>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a33      	ldr	r2, [pc, #204]	@ (8000c18 <HAL_ADC_MspInit+0x114>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b31      	ldr	r3, [pc, #196]	@ (8000c18 <HAL_ADC_MspInit+0x114>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	4b2d      	ldr	r3, [pc, #180]	@ (8000c18 <HAL_ADC_MspInit+0x114>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a2c      	ldr	r2, [pc, #176]	@ (8000c18 <HAL_ADC_MspInit+0x114>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c18 <HAL_ADC_MspInit+0x114>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4823      	ldr	r0, [pc, #140]	@ (8000c1c <HAL_ADC_MspInit+0x118>)
 8000b8e:	f003 f975 	bl	8003e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b92:	2303      	movs	r3, #3
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b96:	2303      	movs	r3, #3
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	481e      	ldr	r0, [pc, #120]	@ (8000c20 <HAL_ADC_MspInit+0x11c>)
 8000ba6:	f003 f969 	bl	8003e7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000baa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c24 <HAL_ADC_MspInit+0x120>)
 8000bac:	4a1e      	ldr	r2, [pc, #120]	@ (8000c28 <HAL_ADC_MspInit+0x124>)
 8000bae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <HAL_ADC_MspInit+0x120>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c24 <HAL_ADC_MspInit+0x120>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bbc:	4b19      	ldr	r3, [pc, #100]	@ (8000c24 <HAL_ADC_MspInit+0x120>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bc2:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <HAL_ADC_MspInit+0x120>)
 8000bc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bc8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bca:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <HAL_ADC_MspInit+0x120>)
 8000bcc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bd0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <HAL_ADC_MspInit+0x120>)
 8000bd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bd8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bda:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <HAL_ADC_MspInit+0x120>)
 8000bdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000be0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000be2:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <HAL_ADC_MspInit+0x120>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000be8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <HAL_ADC_MspInit+0x120>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bee:	480d      	ldr	r0, [pc, #52]	@ (8000c24 <HAL_ADC_MspInit+0x120>)
 8000bf0:	f002 fd42 	bl	8003678 <HAL_DMA_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000bfa:	f001 fa75 	bl	80020e8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a08      	ldr	r2, [pc, #32]	@ (8000c24 <HAL_ADC_MspInit+0x120>)
 8000c02:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c04:	4a07      	ldr	r2, [pc, #28]	@ (8000c24 <HAL_ADC_MspInit+0x120>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	@ 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40012000 	.word	0x40012000
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020800 	.word	0x40020800
 8000c20:	40020400 	.word	0x40020400
 8000c24:	20000304 	.word	0x20000304
 8000c28:	40026410 	.word	0x40026410

08000c2c <button_scan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void button_scan() {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
	// Shift button input
	for (int i = 0; i < 16; i++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	e012      	b.n	8000c5e <button_scan+0x32>
	{
		button_count2[i] = button_count1[i];
 8000c38:	4a68      	ldr	r2, [pc, #416]	@ (8000ddc <button_scan+0x1b0>)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000c40:	4a67      	ldr	r2, [pc, #412]	@ (8000de0 <button_scan+0x1b4>)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		button_count1[i] = button_count[i];
 8000c48:	4a66      	ldr	r2, [pc, #408]	@ (8000de4 <button_scan+0x1b8>)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000c50:	4a62      	ldr	r2, [pc, #392]	@ (8000ddc <button_scan+0x1b0>)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 16; i++)
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	dde9      	ble.n	8000c38 <button_scan+0xc>
	}

	// Get new key input to button_count
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2108      	movs	r1, #8
 8000c68:	485f      	ldr	r0, [pc, #380]	@ (8000de8 <button_scan+0x1bc>)
 8000c6a:	f003 faa3 	bl	80041b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2108      	movs	r1, #8
 8000c72:	485d      	ldr	r0, [pc, #372]	@ (8000de8 <button_scan+0x1bc>)
 8000c74:	f003 fa9e 	bl	80041b4 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 8000c78:	230a      	movs	r3, #10
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	495b      	ldr	r1, [pc, #364]	@ (8000dec <button_scan+0x1c0>)
 8000c7e:	485c      	ldr	r0, [pc, #368]	@ (8000df0 <button_scan+0x1c4>)
 8000c80:	f004 f8d7 	bl	8004e32 <HAL_SPI_Receive>

	int button_index = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
	uint16_t mask = 0x8000;
 8000c88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c8c:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++) {
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	e03a      	b.n	8000d0a <button_scan+0xde>
		if (i >= 0 && i <= 3) {
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db06      	blt.n	8000ca8 <button_scan+0x7c>
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	dc03      	bgt.n	8000ca8 <button_scan+0x7c>
			button_index = i + 4;
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	e018      	b.n	8000cda <button_scan+0xae>
		} else if (i >= 4 && i <= 7) {
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	dd07      	ble.n	8000cbe <button_scan+0x92>
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	2b07      	cmp	r3, #7
 8000cb2:	dc04      	bgt.n	8000cbe <button_scan+0x92>
			button_index = 7 - i;
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	e00d      	b.n	8000cda <button_scan+0xae>
		} else if (i >= 8 && i <= 11) {
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	2b07      	cmp	r3, #7
 8000cc2:	dd06      	ble.n	8000cd2 <button_scan+0xa6>
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	2b0b      	cmp	r3, #11
 8000cc8:	dc03      	bgt.n	8000cd2 <button_scan+0xa6>
			button_index = i + 4;
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	e003      	b.n	8000cda <button_scan+0xae>
		} else {
			button_index = 23 - i;
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	f1c3 0317 	rsb	r3, r3, #23
 8000cd8:	613b      	str	r3, [r7, #16]
		}
		if (button_spi_buffer & mask)
 8000cda:	4b44      	ldr	r3, [pc, #272]	@ (8000dec <button_scan+0x1c0>)
 8000cdc:	881a      	ldrh	r2, [r3, #0]
 8000cde:	89fb      	ldrh	r3, [r7, #14]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <button_scan+0xc8>
			button_count[button_index] = 0;
 8000ce8:	4a3e      	ldr	r2, [pc, #248]	@ (8000de4 <button_scan+0x1b8>)
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	2100      	movs	r1, #0
 8000cee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000cf2:	e004      	b.n	8000cfe <button_scan+0xd2>
		else
			button_count[button_index] = 1;
 8000cf4:	4a3b      	ldr	r2, [pc, #236]	@ (8000de4 <button_scan+0x1b8>)
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 8000cfe:	89fb      	ldrh	r3, [r7, #14]
 8000d00:	085b      	lsrs	r3, r3, #1
 8000d02:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++) {
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	3301      	adds	r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	ddc1      	ble.n	8000c94 <button_scan+0x68>
	}

	for (int i = 0; i < 16; i++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	e059      	b.n	8000dca <button_scan+0x19e>
	{
		if ((button_count[i] == button_count1[i]) && (button_count1[i] == button_count2[i]))
 8000d16:	4a33      	ldr	r2, [pc, #204]	@ (8000de4 <button_scan+0x1b8>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d1e:	492f      	ldr	r1, [pc, #188]	@ (8000ddc <button_scan+0x1b0>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d14c      	bne.n	8000dc4 <button_scan+0x198>
 8000d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8000ddc <button_scan+0x1b0>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d32:	492b      	ldr	r1, [pc, #172]	@ (8000de0 <button_scan+0x1b4>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d142      	bne.n	8000dc4 <button_scan+0x198>
		{
			if (button_count2[i] != button_count3[i])
 8000d3e:	4a28      	ldr	r2, [pc, #160]	@ (8000de0 <button_scan+0x1b4>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d46:	492b      	ldr	r1, [pc, #172]	@ (8000df4 <button_scan+0x1c8>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d018      	beq.n	8000d84 <button_scan+0x158>
			{
				button_count3[i] = button_count2[i];
 8000d52:	4a23      	ldr	r2, [pc, #140]	@ (8000de0 <button_scan+0x1b4>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d5a:	4a26      	ldr	r2, [pc, #152]	@ (8000df4 <button_scan+0x1c8>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				if (button_count3[i] == 1) // PRESSED
 8000d62:	4a24      	ldr	r2, [pc, #144]	@ (8000df4 <button_scan+0x1c8>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d12a      	bne.n	8000dc4 <button_scan+0x198>
				{
					timeOutForPress[i] = TIME_OUT_FOR_LONG_PRESS / TI_BUTTON_SCAN_TIME;
 8000d6e:	4a22      	ldr	r2, [pc, #136]	@ (8000df8 <button_scan+0x1cc>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2119      	movs	r1, #25
 8000d74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					isPressed[i] = 1;
 8000d78:	4a20      	ldr	r2, [pc, #128]	@ (8000dfc <button_scan+0x1d0>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d82:	e01f      	b.n	8000dc4 <button_scan+0x198>
				}
			}
			else
			{
				timeOutForPress[i]--;
 8000d84:	4a1c      	ldr	r2, [pc, #112]	@ (8000df8 <button_scan+0x1cc>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	b299      	uxth	r1, r3
 8000d90:	4a19      	ldr	r2, [pc, #100]	@ (8000df8 <button_scan+0x1cc>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if (timeOutForPress[i] <= 0)
 8000d98:	4a17      	ldr	r2, [pc, #92]	@ (8000df8 <button_scan+0x1cc>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d10f      	bne.n	8000dc4 <button_scan+0x198>
				{
					timeOutForPress[i] = TIME_OUT_FOR_LONG_PRESS / TI_BUTTON_SCAN_TIME;
 8000da4:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <button_scan+0x1cc>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2119      	movs	r1, #25
 8000daa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (button_count3[i] == 1) // PRESSED
 8000dae:	4a11      	ldr	r2, [pc, #68]	@ (8000df4 <button_scan+0x1c8>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d104      	bne.n	8000dc4 <button_scan+0x198>
					{
						isLongPressed[i] = 1;
 8000dba:	4a11      	ldr	r2, [pc, #68]	@ (8000e00 <button_scan+0x1d4>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 16; i++)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	dda2      	ble.n	8000d16 <button_scan+0xea>
					}
				}
			}
		}
	}
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200003e4 	.word	0x200003e4
 8000de0:	200003c4 	.word	0x200003c4
 8000de4:	20000404 	.word	0x20000404
 8000de8:	40020c00 	.word	0x40020c00
 8000dec:	20000424 	.word	0x20000424
 8000df0:	200006b0 	.word	0x200006b0
 8000df4:	200003a4 	.word	0x200003a4
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000364 	.word	0x20000364
 8000e00:	20000384 	.word	0x20000384

08000e04 <isPress>:

uint8_t isPress(uint8_t index)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index > 15) return 0;
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d901      	bls.n	8000e18 <isPress+0x14>
 8000e14:	2300      	movs	r3, #0
 8000e16:	e00d      	b.n	8000e34 <isPress+0x30>
	if (isPressed[index] == 1)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	4a09      	ldr	r2, [pc, #36]	@ (8000e40 <isPress+0x3c>)
 8000e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d106      	bne.n	8000e32 <isPress+0x2e>
	{
		isPressed[index] = 0;
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	4a06      	ldr	r2, [pc, #24]	@ (8000e40 <isPress+0x3c>)
 8000e28:	2100      	movs	r1, #0
 8000e2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		return 1;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <isPress+0x30>
	}
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	20000364 	.word	0x20000364

08000e44 <isLongPress>:

uint8_t isLongPress(uint8_t index)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index > 15) return 0;
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d901      	bls.n	8000e58 <isLongPress+0x14>
 8000e54:	2300      	movs	r3, #0
 8000e56:	e00d      	b.n	8000e74 <isLongPress+0x30>
	if (isLongPressed[index] == 1)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4a09      	ldr	r2, [pc, #36]	@ (8000e80 <isLongPress+0x3c>)
 8000e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d106      	bne.n	8000e72 <isLongPress+0x2e>
	{
		isLongPressed[index] = 0;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4a06      	ldr	r2, [pc, #24]	@ (8000e80 <isLongPress+0x3c>)
 8000e68:	2100      	movs	r1, #0
 8000e6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		return 1;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <isLongPress+0x30>
	}
	return 0;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	20000384 	.word	0x20000384

08000e84 <crc16>:
    0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641,
    0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040
};

uint16_t crc16(const uint8_t *data, uint16_t num_bytes)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]

    uint16_t crc = 0xFFFF;
 8000e90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e94:	82fb      	strh	r3, [r7, #22]
    const uint8_t *ptr = data;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	613b      	str	r3, [r7, #16]

    if (ptr != NULL)
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d018      	beq.n	8000ed2 <crc16+0x4e>
    {
        for (uint16_t i = 0; i < num_bytes; i++)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	81fb      	strh	r3, [r7, #14]
 8000ea4:	e011      	b.n	8000eca <crc16+0x46>
        {
            crc = (crc >> 8) ^ crc16_lookup_table[(crc ^ (uint16_t)*ptr++) & 0x00FF];
 8000ea6:	8afb      	ldrh	r3, [r7, #22]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	8af9      	ldrh	r1, [r7, #22]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1c58      	adds	r0, r3, #1
 8000eb2:	6138      	str	r0, [r7, #16]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	404b      	eors	r3, r1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4909      	ldr	r1, [pc, #36]	@ (8000ee0 <crc16+0x5c>)
 8000ebc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ec0:	4053      	eors	r3, r2
 8000ec2:	82fb      	strh	r3, [r7, #22]
        for (uint16_t i = 0; i < num_bytes; i++)
 8000ec4:	89fb      	ldrh	r3, [r7, #14]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	81fb      	strh	r3, [r7, #14]
 8000eca:	89fa      	ldrh	r2, [r7, #14]
 8000ecc:	887b      	ldrh	r3, [r7, #2]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d3e9      	bcc.n	8000ea6 <crc16+0x22>
        }
    }

    return crc;
 8000ed2:	8afb      	ldrh	r3, [r7, #22]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	371c      	adds	r7, #28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	20000020 	.word	0x20000020

08000ee4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <MX_DMA_Init+0x3c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	@ (8000f20 <MX_DMA_Init+0x3c>)
 8000ef4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <MX_DMA_Init+0x3c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2038      	movs	r0, #56	@ 0x38
 8000f0c:	f002 fb7d 	bl	800360a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f10:	2038      	movs	r0, #56	@ 0x38
 8000f12:	f002 fb96 	bl	8003642 <HAL_NVIC_EnableIRQ>

}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800

08000f24 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08e      	sub	sp, #56	@ 0x38
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	615a      	str	r2, [r3, #20]
 8000f3c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
 8000f4c:	615a      	str	r2, [r3, #20]
 8000f4e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000f50:	4b2f      	ldr	r3, [pc, #188]	@ (8001010 <MX_FSMC_Init+0xec>)
 8000f52:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000f56:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000f58:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <MX_FSMC_Init+0xec>)
 8000f5a:	4a2e      	ldr	r2, [pc, #184]	@ (8001014 <MX_FSMC_Init+0xf0>)
 8000f5c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001010 <MX_FSMC_Init+0xec>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000f64:	4b2a      	ldr	r3, [pc, #168]	@ (8001010 <MX_FSMC_Init+0xec>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000f6a:	4b29      	ldr	r3, [pc, #164]	@ (8001010 <MX_FSMC_Init+0xec>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f70:	4b27      	ldr	r3, [pc, #156]	@ (8001010 <MX_FSMC_Init+0xec>)
 8000f72:	2210      	movs	r2, #16
 8000f74:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000f76:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <MX_FSMC_Init+0xec>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f7c:	4b24      	ldr	r3, [pc, #144]	@ (8001010 <MX_FSMC_Init+0xec>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000f82:	4b23      	ldr	r3, [pc, #140]	@ (8001010 <MX_FSMC_Init+0xec>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000f88:	4b21      	ldr	r3, [pc, #132]	@ (8001010 <MX_FSMC_Init+0xec>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000f8e:	4b20      	ldr	r3, [pc, #128]	@ (8001010 <MX_FSMC_Init+0xec>)
 8000f90:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f94:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000f96:	4b1e      	ldr	r3, [pc, #120]	@ (8001010 <MX_FSMC_Init+0xec>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <MX_FSMC_Init+0xec>)
 8000f9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <MX_FSMC_Init+0xec>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000faa:	4b19      	ldr	r3, [pc, #100]	@ (8001010 <MX_FSMC_Init+0xec>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <MX_FSMC_Init+0xec>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000fba:	230f      	movs	r3, #15
 8000fbc:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000fbe:	233c      	movs	r3, #60	@ 0x3c
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000fc6:	2310      	movs	r3, #16
 8000fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000fca:	2311      	movs	r3, #17
 8000fcc:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000fd2:	2308      	movs	r3, #8
 8000fd4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000fda:	2309      	movs	r3, #9
 8000fdc:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000fe2:	2310      	movs	r3, #16
 8000fe4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000fe6:	2311      	movs	r3, #17
 8000fe8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000fee:	463a      	mov	r2, r7
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4806      	ldr	r0, [pc, #24]	@ (8001010 <MX_FSMC_Init+0xec>)
 8000ff8:	f004 fb20 	bl	800563c <HAL_SRAM_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001002:	f001 f871 	bl	80020e8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001006:	bf00      	nop
 8001008:	3738      	adds	r7, #56	@ 0x38
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000428 	.word	0x20000428
 8001014:	a0000104 	.word	0xa0000104

08001018 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800102c:	4b1c      	ldr	r3, [pc, #112]	@ (80010a0 <HAL_FSMC_MspInit+0x88>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d131      	bne.n	8001098 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001034:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <HAL_FSMC_MspInit+0x88>)
 8001036:	2201      	movs	r2, #1
 8001038:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	4b19      	ldr	r3, [pc, #100]	@ (80010a4 <HAL_FSMC_MspInit+0x8c>)
 8001040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001042:	4a18      	ldr	r2, [pc, #96]	@ (80010a4 <HAL_FSMC_MspInit+0x8c>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6393      	str	r3, [r2, #56]	@ 0x38
 800104a:	4b16      	ldr	r3, [pc, #88]	@ (80010a4 <HAL_FSMC_MspInit+0x8c>)
 800104c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001056:	f64f 7388 	movw	r3, #65416	@ 0xff88
 800105a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001068:	230c      	movs	r3, #12
 800106a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	4619      	mov	r1, r3
 8001070:	480d      	ldr	r0, [pc, #52]	@ (80010a8 <HAL_FSMC_MspInit+0x90>)
 8001072:	f002 ff03 	bl	8003e7c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001076:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 800107a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001088:	230c      	movs	r3, #12
 800108a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4619      	mov	r1, r3
 8001090:	4806      	ldr	r0, [pc, #24]	@ (80010ac <HAL_FSMC_MspInit+0x94>)
 8001092:	f002 fef3 	bl	8003e7c <HAL_GPIO_Init>
 8001096:	e000      	b.n	800109a <HAL_FSMC_MspInit+0x82>
    return;
 8001098:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000478 	.word	0x20000478
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40020c00 	.word	0x40020c00

080010b0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80010b8:	f7ff ffae 	bl	8001018 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08c      	sub	sp, #48	@ 0x30
 80010c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	4b63      	ldr	r3, [pc, #396]	@ (800126c <MX_GPIO_Init+0x1a8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a62      	ldr	r2, [pc, #392]	@ (800126c <MX_GPIO_Init+0x1a8>)
 80010e4:	f043 0310 	orr.w	r3, r3, #16
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b60      	ldr	r3, [pc, #384]	@ (800126c <MX_GPIO_Init+0x1a8>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	61bb      	str	r3, [r7, #24]
 80010f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	4b5c      	ldr	r3, [pc, #368]	@ (800126c <MX_GPIO_Init+0x1a8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a5b      	ldr	r2, [pc, #364]	@ (800126c <MX_GPIO_Init+0x1a8>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b59      	ldr	r3, [pc, #356]	@ (800126c <MX_GPIO_Init+0x1a8>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b55      	ldr	r3, [pc, #340]	@ (800126c <MX_GPIO_Init+0x1a8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a54      	ldr	r2, [pc, #336]	@ (800126c <MX_GPIO_Init+0x1a8>)
 800111c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b52      	ldr	r3, [pc, #328]	@ (800126c <MX_GPIO_Init+0x1a8>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b4e      	ldr	r3, [pc, #312]	@ (800126c <MX_GPIO_Init+0x1a8>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a4d      	ldr	r2, [pc, #308]	@ (800126c <MX_GPIO_Init+0x1a8>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b4b      	ldr	r3, [pc, #300]	@ (800126c <MX_GPIO_Init+0x1a8>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b47      	ldr	r3, [pc, #284]	@ (800126c <MX_GPIO_Init+0x1a8>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a46      	ldr	r2, [pc, #280]	@ (800126c <MX_GPIO_Init+0x1a8>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b44      	ldr	r3, [pc, #272]	@ (800126c <MX_GPIO_Init+0x1a8>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b40      	ldr	r3, [pc, #256]	@ (800126c <MX_GPIO_Init+0x1a8>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a3f      	ldr	r2, [pc, #252]	@ (800126c <MX_GPIO_Init+0x1a8>)
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b3d      	ldr	r3, [pc, #244]	@ (800126c <MX_GPIO_Init+0x1a8>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	4b39      	ldr	r3, [pc, #228]	@ (800126c <MX_GPIO_Init+0x1a8>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a38      	ldr	r2, [pc, #224]	@ (800126c <MX_GPIO_Init+0x1a8>)
 800118c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b36      	ldr	r3, [pc, #216]	@ (800126c <MX_GPIO_Init+0x1a8>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	2110      	movs	r1, #16
 80011a2:	4833      	ldr	r0, [pc, #204]	@ (8001270 <MX_GPIO_Init+0x1ac>)
 80011a4:	f003 f806 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011ae:	4831      	ldr	r0, [pc, #196]	@ (8001274 <MX_GPIO_Init+0x1b0>)
 80011b0:	f003 f800 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2140      	movs	r1, #64	@ 0x40
 80011b8:	482f      	ldr	r0, [pc, #188]	@ (8001278 <MX_GPIO_Init+0x1b4>)
 80011ba:	f002 fffb 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FSMC_BLK_Pin|EN_RS485_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 80011c4:	482d      	ldr	r0, [pc, #180]	@ (800127c <MX_GPIO_Init+0x1b8>)
 80011c6:	f002 fff5 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2108      	movs	r1, #8
 80011ce:	482c      	ldr	r0, [pc, #176]	@ (8001280 <MX_GPIO_Init+0x1bc>)
 80011d0:	f002 fff0 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011d4:	2310      	movs	r3, #16
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4821      	ldr	r0, [pc, #132]	@ (8001270 <MX_GPIO_Init+0x1ac>)
 80011ec:	f002 fe46 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80011f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	481a      	ldr	r0, [pc, #104]	@ (8001274 <MX_GPIO_Init+0x1b0>)
 800120a:	f002 fe37 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800120e:	2340      	movs	r3, #64	@ 0x40
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	4814      	ldr	r0, [pc, #80]	@ (8001278 <MX_GPIO_Init+0x1b4>)
 8001226:	f002 fe29 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin|EN_RS485_Pin;
 800122a:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 800122e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	480e      	ldr	r0, [pc, #56]	@ (800127c <MX_GPIO_Init+0x1b8>)
 8001244:	f002 fe1a 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001248:	2308      	movs	r3, #8
 800124a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	4619      	mov	r1, r3
 800125e:	4808      	ldr	r0, [pc, #32]	@ (8001280 <MX_GPIO_Init+0x1bc>)
 8001260:	f002 fe0c 	bl	8003e7c <HAL_GPIO_Init>

}
 8001264:	bf00      	nop
 8001266:	3730      	adds	r7, #48	@ 0x30
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	40021000 	.word	0x40021000
 8001274:	40020800 	.word	0x40020800
 8001278:	40021800 	.word	0x40021800
 800127c:	40020000 	.word	0x40020000
 8001280:	40020c00 	.word	0x40020c00

08001284 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 800128e:	4a04      	ldr	r2, [pc, #16]	@ (80012a0 <LCD_WR_REG+0x1c>)
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	8013      	strh	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	600ffffe 	.word	0x600ffffe

080012a4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 80012ae:	4a04      	ldr	r2, [pc, #16]	@ (80012c0 <LCD_WR_DATA+0x1c>)
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	8053      	strh	r3, [r2, #2]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	600ffffe 	.word	0x600ffffe

080012c4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <LCD_RD_DATA+0x20>)
 80012cc:	885b      	ldrh	r3, [r3, #2]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	80fb      	strh	r3, [r7, #6]
	return ram;
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	b29b      	uxth	r3, r3
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	600ffffe 	.word	0x600ffffe

080012e8 <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4604      	mov	r4, r0
 80012f0:	4608      	mov	r0, r1
 80012f2:	4611      	mov	r1, r2
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	80fb      	strh	r3, [r7, #6]
 80012fa:	4603      	mov	r3, r0
 80012fc:	80bb      	strh	r3, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	807b      	strh	r3, [r7, #2]
 8001302:	4613      	mov	r3, r2
 8001304:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 8001306:	202a      	movs	r0, #42	@ 0x2a
 8001308:	f7ff ffbc 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	0a1b      	lsrs	r3, r3, #8
 8001310:	b29b      	uxth	r3, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ffc6 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	b29b      	uxth	r3, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ffc0 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 8001324:	887b      	ldrh	r3, [r7, #2]
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	b29b      	uxth	r3, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ffba 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 8001330:	887b      	ldrh	r3, [r7, #2]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	b29b      	uxth	r3, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ffb4 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 800133c:	202b      	movs	r0, #43	@ 0x2b
 800133e:	f7ff ffa1 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 8001342:	88bb      	ldrh	r3, [r7, #4]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	b29b      	uxth	r3, r3
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ffab 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 800134e:	88bb      	ldrh	r3, [r7, #4]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	b29b      	uxth	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ffa5 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 800135a:	883b      	ldrh	r3, [r7, #0]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	b29b      	uxth	r3, r3
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff9f 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 8001366:	883b      	ldrh	r3, [r7, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	b29b      	uxth	r3, r3
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff99 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 8001372:	202c      	movs	r0, #44	@ 0x2c
 8001374:	f7ff ff86 	bl	8001284 <LCD_WR_REG>
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bd90      	pop	{r4, r7, pc}

08001380 <lcd_clear>:
/**
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 800138a:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <lcd_clear+0x60>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	3b01      	subs	r3, #1
 8001390:	b29a      	uxth	r2, r3
 8001392:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <lcd_clear+0x60>)
 8001394:	885b      	ldrh	r3, [r3, #2]
 8001396:	3b01      	subs	r3, #1
 8001398:	b29b      	uxth	r3, r3
 800139a:	2100      	movs	r1, #0
 800139c:	2000      	movs	r0, #0
 800139e:	f7ff ffa3 	bl	80012e8 <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 80013a2:	2300      	movs	r3, #0
 80013a4:	81fb      	strh	r3, [r7, #14]
 80013a6:	e011      	b.n	80013cc <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 80013a8:	2300      	movs	r3, #0
 80013aa:	81bb      	strh	r3, [r7, #12]
 80013ac:	e006      	b.n	80013bc <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff77 	bl	80012a4 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 80013b6:	89bb      	ldrh	r3, [r7, #12]
 80013b8:	3301      	adds	r3, #1
 80013ba:	81bb      	strh	r3, [r7, #12]
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <lcd_clear+0x60>)
 80013be:	885b      	ldrh	r3, [r3, #2]
 80013c0:	89ba      	ldrh	r2, [r7, #12]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d3f3      	bcc.n	80013ae <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	3301      	adds	r3, #1
 80013ca:	81fb      	strh	r3, [r7, #14]
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <lcd_clear+0x60>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	89fa      	ldrh	r2, [r7, #14]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d3e8      	bcc.n	80013a8 <lcd_clear+0x28>
		}
	}
}
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000480 	.word	0x20000480

080013e4 <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
 80013ee:	460b      	mov	r3, r1
 80013f0:	80bb      	strh	r3, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 80013f6:	88bb      	ldrh	r3, [r7, #4]
 80013f8:	88fa      	ldrh	r2, [r7, #6]
 80013fa:	88b9      	ldrh	r1, [r7, #4]
 80013fc:	88f8      	ldrh	r0, [r7, #6]
 80013fe:	f7ff ff73 	bl	80012e8 <lcd_set_address>
	LCD_WR_DATA(color);
 8001402:	887b      	ldrh	r3, [r7, #2]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff4d 	bl	80012a4 <LCD_WR_DATA>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <lcd_show_char>:
	lcd_draw_line(x1, y2, x2, y2, color);
	lcd_draw_line(x2, y1, x2, y2, color);
}

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	4604      	mov	r4, r0
 800141c:	4608      	mov	r0, r1
 800141e:	4611      	mov	r1, r2
 8001420:	461a      	mov	r2, r3
 8001422:	4623      	mov	r3, r4
 8001424:	80fb      	strh	r3, [r7, #6]
 8001426:	4603      	mov	r3, r0
 8001428:	80bb      	strh	r3, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	70fb      	strb	r3, [r7, #3]
 800142e:	4613      	mov	r3, r2
 8001430:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 800143a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800143e:	085b      	lsrs	r3, r3, #1
 8001440:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	08db      	lsrs	r3, r3, #3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	461a      	mov	r2, r3
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	bf14      	ite	ne
 8001456:	2301      	movne	r3, #1
 8001458:	2300      	moveq	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	4413      	add	r3, r2
 800145e:	b29a      	uxth	r2, r3
 8001460:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001464:	b29b      	uxth	r3, r3
 8001466:	fb12 f303 	smulbb	r3, r2, r3
 800146a:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	3b20      	subs	r3, #32
 8001470:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	b29a      	uxth	r2, r3
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	4413      	add	r3, r2
 800147a:	b29b      	uxth	r3, r3
 800147c:	3b01      	subs	r3, #1
 800147e:	b29c      	uxth	r4, r3
 8001480:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001484:	b29a      	uxth	r2, r3
 8001486:	88bb      	ldrh	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	b29b      	uxth	r3, r3
 800148c:	3b01      	subs	r3, #1
 800148e:	b29b      	uxth	r3, r3
 8001490:	88b9      	ldrh	r1, [r7, #4]
 8001492:	88f8      	ldrh	r0, [r7, #6]
 8001494:	4622      	mov	r2, r4
 8001496:	f7ff ff27 	bl	80012e8 <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 800149a:	2300      	movs	r3, #0
 800149c:	827b      	strh	r3, [r7, #18]
 800149e:	e07a      	b.n	8001596 <lcd_show_char+0x182>
		if (sizey == 12)
 80014a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014a4:	2b0c      	cmp	r3, #12
 80014a6:	d028      	beq.n	80014fa <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 80014a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014ac:	2b10      	cmp	r3, #16
 80014ae:	d108      	bne.n	80014c2 <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 80014b0:	78fa      	ldrb	r2, [r7, #3]
 80014b2:	8a7b      	ldrh	r3, [r7, #18]
 80014b4:	493c      	ldr	r1, [pc, #240]	@ (80015a8 <lcd_show_char+0x194>)
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	440a      	add	r2, r1
 80014ba:	4413      	add	r3, r2
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	75fb      	strb	r3, [r7, #23]
 80014c0:	e01b      	b.n	80014fa <lcd_show_char+0xe6>
		else if (sizey == 24)
 80014c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014c6:	2b18      	cmp	r3, #24
 80014c8:	d10b      	bne.n	80014e2 <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 80014ca:	78fa      	ldrb	r2, [r7, #3]
 80014cc:	8a79      	ldrh	r1, [r7, #18]
 80014ce:	4837      	ldr	r0, [pc, #220]	@ (80015ac <lcd_show_char+0x198>)
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	4403      	add	r3, r0
 80014da:	440b      	add	r3, r1
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	75fb      	strb	r3, [r7, #23]
 80014e0:	e00b      	b.n	80014fa <lcd_show_char+0xe6>
		else if (sizey == 32)
 80014e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014e6:	2b20      	cmp	r3, #32
 80014e8:	d15a      	bne.n	80015a0 <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 80014ea:	78fa      	ldrb	r2, [r7, #3]
 80014ec:	8a7b      	ldrh	r3, [r7, #18]
 80014ee:	4930      	ldr	r1, [pc, #192]	@ (80015b0 <lcd_show_char+0x19c>)
 80014f0:	0192      	lsls	r2, r2, #6
 80014f2:	440a      	add	r2, r1
 80014f4:	4413      	add	r3, r2
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 80014fa:	2300      	movs	r3, #0
 80014fc:	75bb      	strb	r3, [r7, #22]
 80014fe:	e044      	b.n	800158a <lcd_show_char+0x176>
			if (!mode) {
 8001500:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001504:	2b00      	cmp	r3, #0
 8001506:	d120      	bne.n	800154a <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 8001508:	7dfa      	ldrb	r2, [r7, #23]
 800150a:	7dbb      	ldrb	r3, [r7, #22]
 800150c:	fa42 f303 	asr.w	r3, r2, r3
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	d004      	beq.n	8001522 <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 8001518:	883b      	ldrh	r3, [r7, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fec2 	bl	80012a4 <LCD_WR_DATA>
 8001520:	e003      	b.n	800152a <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 8001522:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff febd 	bl	80012a4 <LCD_WR_DATA>
				m++;
 800152a:	7d7b      	ldrb	r3, [r7, #21]
 800152c:	3301      	adds	r3, #1
 800152e:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 8001530:	7d7b      	ldrb	r3, [r7, #21]
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	fbb3 f1f2 	udiv	r1, r3, r2
 8001538:	fb01 f202 	mul.w	r2, r1, r2
 800153c:	1a9b      	subs	r3, r3, r2
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d11f      	bne.n	8001584 <lcd_show_char+0x170>
					m = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	757b      	strb	r3, [r7, #21]
					break;
 8001548:	e022      	b.n	8001590 <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 800154a:	7dfa      	ldrb	r2, [r7, #23]
 800154c:	7dbb      	ldrb	r3, [r7, #22]
 800154e:	fa42 f303 	asr.w	r3, r2, r3
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 800155a:	883a      	ldrh	r2, [r7, #0]
 800155c:	88b9      	ldrh	r1, [r7, #4]
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff3f 	bl	80013e4 <lcd_draw_point>
				x++;
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	3301      	adds	r3, #1
 800156a:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 800156c:	88fa      	ldrh	r2, [r7, #6]
 800156e:	8a3b      	ldrh	r3, [r7, #16]
 8001570:	1ad2      	subs	r2, r2, r3
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	429a      	cmp	r2, r3
 8001576:	d105      	bne.n	8001584 <lcd_show_char+0x170>
					x = x0;
 8001578:	8a3b      	ldrh	r3, [r7, #16]
 800157a:	80fb      	strh	r3, [r7, #6]
					y++;
 800157c:	88bb      	ldrh	r3, [r7, #4]
 800157e:	3301      	adds	r3, #1
 8001580:	80bb      	strh	r3, [r7, #4]
					break;
 8001582:	e005      	b.n	8001590 <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 8001584:	7dbb      	ldrb	r3, [r7, #22]
 8001586:	3301      	adds	r3, #1
 8001588:	75bb      	strb	r3, [r7, #22]
 800158a:	7dbb      	ldrb	r3, [r7, #22]
 800158c:	2b07      	cmp	r3, #7
 800158e:	d9b7      	bls.n	8001500 <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 8001590:	8a7b      	ldrh	r3, [r7, #18]
 8001592:	3301      	adds	r3, #1
 8001594:	827b      	strh	r3, [r7, #18]
 8001596:	8a7a      	ldrh	r2, [r7, #18]
 8001598:	89bb      	ldrh	r3, [r7, #12]
 800159a:	429a      	cmp	r2, r3
 800159c:	d380      	bcc.n	80014a0 <lcd_show_char+0x8c>
 800159e:	e000      	b.n	80015a2 <lcd_show_char+0x18e>
			return;
 80015a0:	bf00      	nop
				}
			}
		}
	}
}
 80015a2:	371c      	adds	r7, #28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd90      	pop	{r4, r7, pc}
 80015a8:	0800793c 	.word	0x0800793c
 80015ac:	08007f2c 	.word	0x08007f2c
 80015b0:	080090fc 	.word	0x080090fc

080015b4 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n) {
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	460a      	mov	r2, r1
 80015be:	71fb      	strb	r3, [r7, #7]
 80015c0:	4613      	mov	r3, r2
 80015c2:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
	while (n--)
 80015c8:	e004      	b.n	80015d4 <mypow+0x20>
		result *= m;
 80015ca:	79fa      	ldrb	r2, [r7, #7]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	60fb      	str	r3, [r7, #12]
	while (n--)
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	1e5a      	subs	r2, r3, #1
 80015d8:	71ba      	strb	r2, [r7, #6]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f5      	bne.n	80015ca <mypow+0x16>
	return result;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <lcd_show_int_num>:

void lcd_show_int_num(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b089      	sub	sp, #36	@ 0x24
 80015f0:	af04      	add	r7, sp, #16
 80015f2:	4604      	mov	r4, r0
 80015f4:	4608      	mov	r0, r1
 80015f6:	4611      	mov	r1, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	4623      	mov	r3, r4
 80015fc:	80fb      	strh	r3, [r7, #6]
 80015fe:	4603      	mov	r3, r0
 8001600:	80bb      	strh	r3, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	807b      	strh	r3, [r7, #2]
 8001606:	4613      	mov	r3, r2
 8001608:	707b      	strb	r3, [r7, #1]
	uint8_t t, temp;
	uint8_t enshow = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex = sizey / 2;
 800160e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	737b      	strb	r3, [r7, #13]
	for (t = 0; t < len; t++) {
 8001616:	2300      	movs	r3, #0
 8001618:	73fb      	strb	r3, [r7, #15]
 800161a:	e059      	b.n	80016d0 <lcd_show_int_num+0xe4>
		temp = (num / mypow(10, len - t - 1)) % 10;
 800161c:	887c      	ldrh	r4, [r7, #2]
 800161e:	787a      	ldrb	r2, [r7, #1]
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	b2db      	uxtb	r3, r3
 8001626:	3b01      	subs	r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	4619      	mov	r1, r3
 800162c:	200a      	movs	r0, #10
 800162e:	f7ff ffc1 	bl	80015b4 <mypow>
 8001632:	4603      	mov	r3, r0
 8001634:	fbb4 f1f3 	udiv	r1, r4, r3
 8001638:	4b2a      	ldr	r3, [pc, #168]	@ (80016e4 <lcd_show_int_num+0xf8>)
 800163a:	fba3 2301 	umull	r2, r3, r3, r1
 800163e:	08da      	lsrs	r2, r3, #3
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	1aca      	subs	r2, r1, r3
 800164a:	4613      	mov	r3, r2
 800164c:	733b      	strb	r3, [r7, #12]
		if (enshow == 0 && t < (len - 1)) {
 800164e:	7bbb      	ldrb	r3, [r7, #14]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d121      	bne.n	8001698 <lcd_show_int_num+0xac>
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	787b      	ldrb	r3, [r7, #1]
 8001658:	3b01      	subs	r3, #1
 800165a:	429a      	cmp	r2, r3
 800165c:	da1c      	bge.n	8001698 <lcd_show_int_num+0xac>
			if (temp == 0) {
 800165e:	7b3b      	ldrb	r3, [r7, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d117      	bne.n	8001694 <lcd_show_int_num+0xa8>
				lcd_show_char(x + t * sizex, y, ' ', fc, bc, sizey, 0);
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	b29a      	uxth	r2, r3
 8001668:	7b7b      	ldrb	r3, [r7, #13]
 800166a:	b29b      	uxth	r3, r3
 800166c:	fb12 f303 	smulbb	r3, r2, r3
 8001670:	b29a      	uxth	r2, r3
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	4413      	add	r3, r2
 8001676:	b298      	uxth	r0, r3
 8001678:	8c3a      	ldrh	r2, [r7, #32]
 800167a:	88b9      	ldrh	r1, [r7, #4]
 800167c:	2300      	movs	r3, #0
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	4613      	mov	r3, r2
 800168c:	2220      	movs	r2, #32
 800168e:	f7ff fec1 	bl	8001414 <lcd_show_char>
				continue;
 8001692:	e01a      	b.n	80016ca <lcd_show_int_num+0xde>
			} else
				enshow = 1;
 8001694:	2301      	movs	r3, #1
 8001696:	73bb      	strb	r3, [r7, #14]

		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	b29a      	uxth	r2, r3
 800169c:	7b7b      	ldrb	r3, [r7, #13]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	fb12 f303 	smulbb	r3, r2, r3
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	4413      	add	r3, r2
 80016aa:	b298      	uxth	r0, r3
 80016ac:	7b3b      	ldrb	r3, [r7, #12]
 80016ae:	3330      	adds	r3, #48	@ 0x30
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	8c3c      	ldrh	r4, [r7, #32]
 80016b4:	88b9      	ldrh	r1, [r7, #4]
 80016b6:	2300      	movs	r3, #0
 80016b8:	9302      	str	r3, [sp, #8]
 80016ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	4623      	mov	r3, r4
 80016c6:	f7ff fea5 	bl	8001414 <lcd_show_char>
	for (t = 0; t < len; t++) {
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	3301      	adds	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	787b      	ldrb	r3, [r7, #1]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d3a1      	bcc.n	800161c <lcd_show_int_num+0x30>
	}
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	cccccccd 	.word	0xcccccccd

080016e8 <lcd_show_float_num>:

void lcd_show_float_num(uint16_t x, uint16_t y, float num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b08b      	sub	sp, #44	@ 0x2c
 80016ec:	af04      	add	r7, sp, #16
 80016ee:	4604      	mov	r4, r0
 80016f0:	4608      	mov	r0, r1
 80016f2:	ed87 0a02 	vstr	s0, [r7, #8]
 80016f6:	4611      	mov	r1, r2
 80016f8:	461a      	mov	r2, r3
 80016fa:	4623      	mov	r3, r4
 80016fc:	81fb      	strh	r3, [r7, #14]
 80016fe:	4603      	mov	r3, r0
 8001700:	81bb      	strh	r3, [r7, #12]
 8001702:	460b      	mov	r3, r1
 8001704:	71fb      	strb	r3, [r7, #7]
 8001706:	4613      	mov	r3, r2
 8001708:	80bb      	strh	r3, [r7, #4]
	uint8_t t, temp, sizex;
	uint16_t num1;
	sizex = sizey / 2;
 800170a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800170e:	085b      	lsrs	r3, r3, #1
 8001710:	75bb      	strb	r3, [r7, #22]
	num1 = num * 100;
 8001712:	edd7 7a02 	vldr	s15, [r7, #8]
 8001716:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80017f0 <lcd_show_float_num+0x108>
 800171a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001722:	ee17 3a90 	vmov	r3, s15
 8001726:	82bb      	strh	r3, [r7, #20]
	for (t = 0; t < len; t++) {
 8001728:	2300      	movs	r3, #0
 800172a:	75fb      	strb	r3, [r7, #23]
 800172c:	e057      	b.n	80017de <lcd_show_float_num+0xf6>
		temp = (num1 / mypow(10, len - t - 1)) % 10;
 800172e:	8abc      	ldrh	r4, [r7, #20]
 8001730:	79fa      	ldrb	r2, [r7, #7]
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	3b01      	subs	r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4619      	mov	r1, r3
 800173e:	200a      	movs	r0, #10
 8001740:	f7ff ff38 	bl	80015b4 <mypow>
 8001744:	4603      	mov	r3, r0
 8001746:	fbb4 f1f3 	udiv	r1, r4, r3
 800174a:	4b2a      	ldr	r3, [pc, #168]	@ (80017f4 <lcd_show_float_num+0x10c>)
 800174c:	fba3 2301 	umull	r2, r3, r3, r1
 8001750:	08da      	lsrs	r2, r3, #3
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	1aca      	subs	r2, r1, r3
 800175c:	4613      	mov	r3, r2
 800175e:	74fb      	strb	r3, [r7, #19]
		if (t == (len - 2)) {
 8001760:	7dfa      	ldrb	r2, [r7, #23]
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	3b02      	subs	r3, #2
 8001766:	429a      	cmp	r2, r3
 8001768:	d11d      	bne.n	80017a6 <lcd_show_float_num+0xbe>
			lcd_show_char(x + (len - 2) * sizex, y, '.', fc, bc, sizey, 0);
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	3b02      	subs	r3, #2
 800176e:	b29a      	uxth	r2, r3
 8001770:	7dbb      	ldrb	r3, [r7, #22]
 8001772:	b29b      	uxth	r3, r3
 8001774:	fb12 f303 	smulbb	r3, r2, r3
 8001778:	b29a      	uxth	r2, r3
 800177a:	89fb      	ldrh	r3, [r7, #14]
 800177c:	4413      	add	r3, r2
 800177e:	b298      	uxth	r0, r3
 8001780:	88ba      	ldrh	r2, [r7, #4]
 8001782:	89b9      	ldrh	r1, [r7, #12]
 8001784:	2300      	movs	r3, #0
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	4613      	mov	r3, r2
 8001794:	222e      	movs	r2, #46	@ 0x2e
 8001796:	f7ff fe3d 	bl	8001414 <lcd_show_char>
			t++;
 800179a:	7dfb      	ldrb	r3, [r7, #23]
 800179c:	3301      	adds	r3, #1
 800179e:	75fb      	strb	r3, [r7, #23]
			len += 1;
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	3301      	adds	r3, #1
 80017a4:	71fb      	strb	r3, [r7, #7]
		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 80017a6:	7dfb      	ldrb	r3, [r7, #23]
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	7dbb      	ldrb	r3, [r7, #22]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	fb12 f303 	smulbb	r3, r2, r3
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	89fb      	ldrh	r3, [r7, #14]
 80017b6:	4413      	add	r3, r2
 80017b8:	b298      	uxth	r0, r3
 80017ba:	7cfb      	ldrb	r3, [r7, #19]
 80017bc:	3330      	adds	r3, #48	@ 0x30
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	88bc      	ldrh	r4, [r7, #4]
 80017c2:	89b9      	ldrh	r1, [r7, #12]
 80017c4:	2300      	movs	r3, #0
 80017c6:	9302      	str	r3, [sp, #8]
 80017c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	4623      	mov	r3, r4
 80017d4:	f7ff fe1e 	bl	8001414 <lcd_show_char>
	for (t = 0; t < len; t++) {
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	3301      	adds	r3, #1
 80017dc:	75fb      	strb	r3, [r7, #23]
 80017de:	7dfa      	ldrb	r2, [r7, #23]
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d3a3      	bcc.n	800172e <lcd_show_float_num+0x46>
	}
}
 80017e6:	bf00      	nop
 80017e8:	bf00      	nop
 80017ea:	371c      	adds	r7, #28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd90      	pop	{r4, r7, pc}
 80017f0:	42c80000 	.word	0x42c80000
 80017f4:	cccccccd 	.word	0xcccccccd

080017f8 <lcd_set_direction>:
			k++;
		}
	}
}

void lcd_set_direction(uint8_t dir) {
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	091b      	lsrs	r3, r3, #4
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <lcd_set_direction+0x2a>
		lcddev.width = 320;
 8001812:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <lcd_set_direction+0x44>)
 8001814:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001818:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 800181a:	4b08      	ldr	r3, [pc, #32]	@ (800183c <lcd_set_direction+0x44>)
 800181c:	22f0      	movs	r2, #240	@ 0xf0
 800181e:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8001820:	e006      	b.n	8001830 <lcd_set_direction+0x38>
		lcddev.width = 240;
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <lcd_set_direction+0x44>)
 8001824:	22f0      	movs	r2, #240	@ 0xf0
 8001826:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001828:	4b04      	ldr	r3, [pc, #16]	@ (800183c <lcd_set_direction+0x44>)
 800182a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800182e:	805a      	strh	r2, [r3, #2]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	20000480 	.word	0x20000480

08001840 <lcd_init>:

void lcd_init(void) {
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800184a:	48aa      	ldr	r0, [pc, #680]	@ (8001af4 <lcd_init+0x2b4>)
 800184c:	f002 fcb2 	bl	80041b4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001850:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001854:	f001 f9c8 	bl	8002be8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800185e:	48a5      	ldr	r0, [pc, #660]	@ (8001af4 <lcd_init+0x2b4>)
 8001860:	f002 fca8 	bl	80041b4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001864:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001868:	f001 f9be 	bl	8002be8 <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 800186c:	2000      	movs	r0, #0
 800186e:	f7ff ffc3 	bl	80017f8 <lcd_set_direction>
	LCD_WR_REG(0XD3);
 8001872:	20d3      	movs	r0, #211	@ 0xd3
 8001874:	f7ff fd06 	bl	8001284 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8001878:	f7ff fd24 	bl	80012c4 <LCD_RD_DATA>
 800187c:	4603      	mov	r3, r0
 800187e:	461a      	mov	r2, r3
 8001880:	4b9d      	ldr	r3, [pc, #628]	@ (8001af8 <lcd_init+0x2b8>)
 8001882:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001884:	f7ff fd1e 	bl	80012c4 <LCD_RD_DATA>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	4b9a      	ldr	r3, [pc, #616]	@ (8001af8 <lcd_init+0x2b8>)
 800188e:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001890:	f7ff fd18 	bl	80012c4 <LCD_RD_DATA>
 8001894:	4603      	mov	r3, r0
 8001896:	461a      	mov	r2, r3
 8001898:	4b97      	ldr	r3, [pc, #604]	@ (8001af8 <lcd_init+0x2b8>)
 800189a:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 800189c:	4b96      	ldr	r3, [pc, #600]	@ (8001af8 <lcd_init+0x2b8>)
 800189e:	889b      	ldrh	r3, [r3, #4]
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	4b94      	ldr	r3, [pc, #592]	@ (8001af8 <lcd_init+0x2b8>)
 80018a6:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 80018a8:	f7ff fd0c 	bl	80012c4 <LCD_RD_DATA>
 80018ac:	4603      	mov	r3, r0
 80018ae:	461a      	mov	r2, r3
 80018b0:	4b91      	ldr	r3, [pc, #580]	@ (8001af8 <lcd_init+0x2b8>)
 80018b2:	889b      	ldrh	r3, [r3, #4]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	4b8f      	ldr	r3, [pc, #572]	@ (8001af8 <lcd_init+0x2b8>)
 80018ba:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80018bc:	20cf      	movs	r0, #207	@ 0xcf
 80018be:	f7ff fce1 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f7ff fcee 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80018c8:	20c1      	movs	r0, #193	@ 0xc1
 80018ca:	f7ff fceb 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80018ce:	2030      	movs	r0, #48	@ 0x30
 80018d0:	f7ff fce8 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80018d4:	20ed      	movs	r0, #237	@ 0xed
 80018d6:	f7ff fcd5 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80018da:	2064      	movs	r0, #100	@ 0x64
 80018dc:	f7ff fce2 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80018e0:	2003      	movs	r0, #3
 80018e2:	f7ff fcdf 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80018e6:	2012      	movs	r0, #18
 80018e8:	f7ff fcdc 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80018ec:	2081      	movs	r0, #129	@ 0x81
 80018ee:	f7ff fcd9 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80018f2:	20e8      	movs	r0, #232	@ 0xe8
 80018f4:	f7ff fcc6 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80018f8:	2085      	movs	r0, #133	@ 0x85
 80018fa:	f7ff fcd3 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80018fe:	2010      	movs	r0, #16
 8001900:	f7ff fcd0 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001904:	207a      	movs	r0, #122	@ 0x7a
 8001906:	f7ff fccd 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800190a:	20cb      	movs	r0, #203	@ 0xcb
 800190c:	f7ff fcba 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001910:	2039      	movs	r0, #57	@ 0x39
 8001912:	f7ff fcc7 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001916:	202c      	movs	r0, #44	@ 0x2c
 8001918:	f7ff fcc4 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800191c:	2000      	movs	r0, #0
 800191e:	f7ff fcc1 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001922:	2034      	movs	r0, #52	@ 0x34
 8001924:	f7ff fcbe 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001928:	2002      	movs	r0, #2
 800192a:	f7ff fcbb 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800192e:	20f7      	movs	r0, #247	@ 0xf7
 8001930:	f7ff fca8 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001934:	2020      	movs	r0, #32
 8001936:	f7ff fcb5 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800193a:	20ea      	movs	r0, #234	@ 0xea
 800193c:	f7ff fca2 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff fcaf 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001946:	2000      	movs	r0, #0
 8001948:	f7ff fcac 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800194c:	20c0      	movs	r0, #192	@ 0xc0
 800194e:	f7ff fc99 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001952:	201b      	movs	r0, #27
 8001954:	f7ff fca6 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001958:	20c1      	movs	r0, #193	@ 0xc1
 800195a:	f7ff fc93 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800195e:	2001      	movs	r0, #1
 8001960:	f7ff fca0 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001964:	20c5      	movs	r0, #197	@ 0xc5
 8001966:	f7ff fc8d 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800196a:	2030      	movs	r0, #48	@ 0x30
 800196c:	f7ff fc9a 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001970:	2030      	movs	r0, #48	@ 0x30
 8001972:	f7ff fc97 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001976:	20c7      	movs	r0, #199	@ 0xc7
 8001978:	f7ff fc84 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800197c:	20b7      	movs	r0, #183	@ 0xb7
 800197e:	f7ff fc91 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001982:	2036      	movs	r0, #54	@ 0x36
 8001984:	f7ff fc7e 	bl	8001284 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8001988:	2008      	movs	r0, #8
 800198a:	f7ff fc8b 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800198e:	203a      	movs	r0, #58	@ 0x3a
 8001990:	f7ff fc78 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001994:	2055      	movs	r0, #85	@ 0x55
 8001996:	f7ff fc85 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800199a:	20b1      	movs	r0, #177	@ 0xb1
 800199c:	f7ff fc72 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff fc7f 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80019a6:	201a      	movs	r0, #26
 80019a8:	f7ff fc7c 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80019ac:	20b6      	movs	r0, #182	@ 0xb6
 80019ae:	f7ff fc69 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80019b2:	200a      	movs	r0, #10
 80019b4:	f7ff fc76 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80019b8:	20a2      	movs	r0, #162	@ 0xa2
 80019ba:	f7ff fc73 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80019be:	20f2      	movs	r0, #242	@ 0xf2
 80019c0:	f7ff fc60 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff fc6d 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80019ca:	2026      	movs	r0, #38	@ 0x26
 80019cc:	f7ff fc5a 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f7ff fc67 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80019d6:	20e0      	movs	r0, #224	@ 0xe0
 80019d8:	f7ff fc54 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80019dc:	200f      	movs	r0, #15
 80019de:	f7ff fc61 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80019e2:	202a      	movs	r0, #42	@ 0x2a
 80019e4:	f7ff fc5e 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80019e8:	2028      	movs	r0, #40	@ 0x28
 80019ea:	f7ff fc5b 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80019ee:	2008      	movs	r0, #8
 80019f0:	f7ff fc58 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80019f4:	200e      	movs	r0, #14
 80019f6:	f7ff fc55 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80019fa:	2008      	movs	r0, #8
 80019fc:	f7ff fc52 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001a00:	2054      	movs	r0, #84	@ 0x54
 8001a02:	f7ff fc4f 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001a06:	20a9      	movs	r0, #169	@ 0xa9
 8001a08:	f7ff fc4c 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001a0c:	2043      	movs	r0, #67	@ 0x43
 8001a0e:	f7ff fc49 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001a12:	200a      	movs	r0, #10
 8001a14:	f7ff fc46 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001a18:	200f      	movs	r0, #15
 8001a1a:	f7ff fc43 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7ff fc40 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7ff fc3d 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f7ff fc3a 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff fc37 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001a36:	20e1      	movs	r0, #225	@ 0xe1
 8001a38:	f7ff fc24 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff fc31 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001a42:	2015      	movs	r0, #21
 8001a44:	f7ff fc2e 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001a48:	2017      	movs	r0, #23
 8001a4a:	f7ff fc2b 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001a4e:	2007      	movs	r0, #7
 8001a50:	f7ff fc28 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001a54:	2011      	movs	r0, #17
 8001a56:	f7ff fc25 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001a5a:	2006      	movs	r0, #6
 8001a5c:	f7ff fc22 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001a60:	202b      	movs	r0, #43	@ 0x2b
 8001a62:	f7ff fc1f 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001a66:	2056      	movs	r0, #86	@ 0x56
 8001a68:	f7ff fc1c 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001a6c:	203c      	movs	r0, #60	@ 0x3c
 8001a6e:	f7ff fc19 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001a72:	2005      	movs	r0, #5
 8001a74:	f7ff fc16 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001a78:	2010      	movs	r0, #16
 8001a7a:	f7ff fc13 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001a7e:	200f      	movs	r0, #15
 8001a80:	f7ff fc10 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001a84:	203f      	movs	r0, #63	@ 0x3f
 8001a86:	f7ff fc0d 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001a8a:	203f      	movs	r0, #63	@ 0x3f
 8001a8c:	f7ff fc0a 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001a90:	200f      	movs	r0, #15
 8001a92:	f7ff fc07 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001a96:	202b      	movs	r0, #43	@ 0x2b
 8001a98:	f7ff fbf4 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff fc01 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7ff fbfe 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f7ff fbfb 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001aae:	203f      	movs	r0, #63	@ 0x3f
 8001ab0:	f7ff fbf8 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001ab4:	202a      	movs	r0, #42	@ 0x2a
 8001ab6:	f7ff fbe5 	bl	8001284 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f7ff fbf2 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f7ff fbef 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f7ff fbec 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001acc:	20ef      	movs	r0, #239	@ 0xef
 8001ace:	f7ff fbe9 	bl	80012a4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 8001ad2:	2011      	movs	r0, #17
 8001ad4:	f7ff fbd6 	bl	8001284 <LCD_WR_REG>
	HAL_Delay(120);
 8001ad8:	2078      	movs	r0, #120	@ 0x78
 8001ada:	f001 f885 	bl	8002be8 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 8001ade:	2029      	movs	r0, #41	@ 0x29
 8001ae0:	f7ff fbd0 	bl	8001284 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001aea:	4804      	ldr	r0, [pc, #16]	@ (8001afc <lcd_init+0x2bc>)
 8001aec:	f002 fb62 	bl	80041b4 <HAL_GPIO_WritePin>
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40020800 	.word	0x40020800
 8001af8:	20000480 	.word	0x20000480
 8001afc:	40020000 	.word	0x40020000

08001b00 <lcd_show_string>:
		}
	}
}

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b08b      	sub	sp, #44	@ 0x2c
 8001b04:	af04      	add	r7, sp, #16
 8001b06:	60ba      	str	r2, [r7, #8]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	81fb      	strh	r3, [r7, #14]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	81bb      	strh	r3, [r7, #12]
 8001b12:	4613      	mov	r3, r2
 8001b14:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 8001b16:	89fb      	ldrh	r3, [r7, #14]
 8001b18:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 8001b1e:	e048      	b.n	8001bb2 <lcd_show_string+0xb2>
		if (!bHz) {
 8001b20:	7dfb      	ldrb	r3, [r7, #23]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d145      	bne.n	8001bb2 <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 8001b26:	89fa      	ldrh	r2, [r7, #14]
 8001b28:	4b26      	ldr	r3, [pc, #152]	@ (8001bc4 <lcd_show_string+0xc4>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b32:	085b      	lsrs	r3, r3, #1
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	1acb      	subs	r3, r1, r3
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	dc3f      	bgt.n	8001bbc <lcd_show_string+0xbc>
 8001b3c:	89ba      	ldrh	r2, [r7, #12]
 8001b3e:	4b21      	ldr	r3, [pc, #132]	@ (8001bc4 <lcd_show_string+0xc4>)
 8001b40:	885b      	ldrh	r3, [r3, #2]
 8001b42:	4619      	mov	r1, r3
 8001b44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b48:	1acb      	subs	r3, r1, r3
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	dc36      	bgt.n	8001bbc <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b80      	cmp	r3, #128	@ 0x80
 8001b54:	d902      	bls.n	8001b5c <lcd_show_string+0x5c>
				bHz = 1;
 8001b56:	2301      	movs	r3, #1
 8001b58:	75fb      	strb	r3, [r7, #23]
 8001b5a:	e02a      	b.n	8001bb2 <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b0d      	cmp	r3, #13
 8001b62:	d10b      	bne.n	8001b7c <lcd_show_string+0x7c>
					y += sizey;
 8001b64:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	89bb      	ldrh	r3, [r7, #12]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	81bb      	strh	r3, [r7, #12]
					x = x0;
 8001b70:	8abb      	ldrh	r3, [r7, #20]
 8001b72:	81fb      	strh	r3, [r7, #14]
					str++;
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	3301      	adds	r3, #1
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	e017      	b.n	8001bac <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	781a      	ldrb	r2, [r3, #0]
 8001b80:	88fc      	ldrh	r4, [r7, #6]
 8001b82:	89b9      	ldrh	r1, [r7, #12]
 8001b84:	89f8      	ldrh	r0, [r7, #14]
 8001b86:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	4623      	mov	r3, r4
 8001b98:	f7ff fc3c 	bl	8001414 <lcd_show_char>
					x += sizey / 2;
 8001b9c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ba0:	085b      	lsrs	r3, r3, #1
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	89fb      	ldrh	r3, [r7, #14]
 8001ba8:	4413      	add	r3, r2
 8001baa:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1b2      	bne.n	8001b20 <lcd_show_string+0x20>
 8001bba:	e000      	b.n	8001bbe <lcd_show_string+0xbe>
				return;
 8001bbc:	bf00      	nop
			}
		}
	}
}
 8001bbe:	371c      	adds	r7, #28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd90      	pop	{r4, r7, pc}
 8001bc4:	20000480 	.word	0x20000480

08001bc8 <led_7seg_init>:
/**
 * @brief  	Init led 7 segment
 * @param  	None
 * @retval 	None
 */
void led_7seg_init() {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2140      	movs	r1, #64	@ 0x40
 8001bd0:	4802      	ldr	r0, [pc, #8]	@ (8001bdc <led_7seg_init+0x14>)
 8001bd2:	f002 faef 	bl	80041b4 <HAL_GPIO_WritePin>
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40021800 	.word	0x40021800

08001be0 <led_7seg_display>:
 * @brief	Scan led 7 segment
 * @param	None
 * @note	Call in 1ms interrupt
 * @retval 	None
 */
void led_7seg_display() {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001be4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ce4 <led_7seg_display+0x104>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	4b3d      	ldr	r3, [pc, #244]	@ (8001ce4 <led_7seg_display+0x104>)
 8001bee:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led_7seg[led_7seg_index] << 8;
 8001bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ce8 <led_7seg_display+0x108>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8001cec <led_7seg_display+0x10c>)
 8001bf8:	5c9b      	ldrb	r3, [r3, r2]
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	4b39      	ldr	r3, [pc, #228]	@ (8001ce4 <led_7seg_display+0x104>)
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	4313      	orrs	r3, r2
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	4b36      	ldr	r3, [pc, #216]	@ (8001ce4 <led_7seg_display+0x104>)
 8001c0c:	801a      	strh	r2, [r3, #0]

	switch (led_7seg_index) {
 8001c0e:	4b36      	ldr	r3, [pc, #216]	@ (8001ce8 <led_7seg_display+0x108>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d846      	bhi.n	8001ca4 <led_7seg_display+0xc4>
 8001c16:	a201      	add	r2, pc, #4	@ (adr r2, 8001c1c <led_7seg_display+0x3c>)
 8001c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1c:	08001c2d 	.word	0x08001c2d
 8001c20:	08001c4b 	.word	0x08001c4b
 8001c24:	08001c69 	.word	0x08001c69
 8001c28:	08001c87 	.word	0x08001c87
	case 0:
		spi_buffer |= 0x00b0;
 8001c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce4 <led_7seg_display+0x104>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce4 <led_7seg_display+0x104>)
 8001c38:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8001c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce4 <led_7seg_display+0x104>)
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	4b27      	ldr	r3, [pc, #156]	@ (8001ce4 <led_7seg_display+0x104>)
 8001c46:	801a      	strh	r2, [r3, #0]
		break;
 8001c48:	e02d      	b.n	8001ca6 <led_7seg_display+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001c4a:	4b26      	ldr	r3, [pc, #152]	@ (8001ce4 <led_7seg_display+0x104>)
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	4b23      	ldr	r3, [pc, #140]	@ (8001ce4 <led_7seg_display+0x104>)
 8001c56:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001c58:	4b22      	ldr	r3, [pc, #136]	@ (8001ce4 <led_7seg_display+0x104>)
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	f023 0320 	bic.w	r3, r3, #32
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	4b20      	ldr	r3, [pc, #128]	@ (8001ce4 <led_7seg_display+0x104>)
 8001c64:	801a      	strh	r2, [r3, #0]
		break;
 8001c66:	e01e      	b.n	8001ca6 <led_7seg_display+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001c68:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce4 <led_7seg_display+0x104>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce4 <led_7seg_display+0x104>)
 8001c74:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001c76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce4 <led_7seg_display+0x104>)
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	f023 0310 	bic.w	r3, r3, #16
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	4b18      	ldr	r3, [pc, #96]	@ (8001ce4 <led_7seg_display+0x104>)
 8001c82:	801a      	strh	r2, [r3, #0]
		break;
 8001c84:	e00f      	b.n	8001ca6 <led_7seg_display+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001c86:	4b17      	ldr	r3, [pc, #92]	@ (8001ce4 <led_7seg_display+0x104>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <led_7seg_display+0x104>)
 8001c92:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8001c94:	4b13      	ldr	r3, [pc, #76]	@ (8001ce4 <led_7seg_display+0x104>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <led_7seg_display+0x104>)
 8001ca0:	801a      	strh	r2, [r3, #0]
		break;
 8001ca2:	e000      	b.n	8001ca6 <led_7seg_display+0xc6>
	default:
		break;
 8001ca4:	bf00      	nop
	}

	led_7seg_index = (led_7seg_index + 1) % 4;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <led_7seg_display+0x108>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	3301      	adds	r3, #1
 8001cac:	425a      	negs	r2, r3
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	f002 0203 	and.w	r2, r2, #3
 8001cb6:	bf58      	it	pl
 8001cb8:	4253      	negpl	r3, r2
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <led_7seg_display+0x108>)
 8001cbe:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2140      	movs	r1, #64	@ 0x40
 8001cc4:	480a      	ldr	r0, [pc, #40]	@ (8001cf0 <led_7seg_display+0x110>)
 8001cc6:	f002 fa75 	bl	80041b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 2, 1);
 8001cca:	2301      	movs	r3, #1
 8001ccc:	2202      	movs	r2, #2
 8001cce:	4905      	ldr	r1, [pc, #20]	@ (8001ce4 <led_7seg_display+0x104>)
 8001cd0:	4808      	ldr	r0, [pc, #32]	@ (8001cf4 <led_7seg_display+0x114>)
 8001cd2:	f002 ff6a 	bl	8004baa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	2140      	movs	r1, #64	@ 0x40
 8001cda:	4805      	ldr	r0, [pc, #20]	@ (8001cf0 <led_7seg_display+0x110>)
 8001cdc:	f002 fa6a 	bl	80041b4 <HAL_GPIO_WritePin>
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000238 	.word	0x20000238
 8001ce8:	20000486 	.word	0x20000486
 8001cec:	20000224 	.word	0x20000224
 8001cf0:	40021800 	.word	0x40021800
 8001cf4:	200006b0 	.word	0x200006b0

08001cf8 <led_7seg_set_digit>:
 * @param  	num	Number displayed
 * @param  	pos	The position displayed (index from 0)
 * @param  	show_dot Show dot in the led or not
 * @retval 	None
 */
void led_7seg_set_digit(int num, int position, uint8_t show_dot) {
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	4613      	mov	r3, r2
 8001d04:	71fb      	strb	r3, [r7, #7]
	if (num >= 0 && num <= 15) {
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db0e      	blt.n	8001d2a <led_7seg_set_digit+0x32>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b0f      	cmp	r3, #15
 8001d10:	dc0b      	bgt.n	8001d2a <led_7seg_set_digit+0x32>
		led_7seg[position] = led_7seg_map_of_output[num] - show_dot;
 8001d12:	4a09      	ldr	r2, [pc, #36]	@ (8001d38 <led_7seg_set_digit+0x40>)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	781a      	ldrb	r2, [r3, #0]
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	b2d9      	uxtb	r1, r3
 8001d20:	4a06      	ldr	r2, [pc, #24]	@ (8001d3c <led_7seg_set_digit+0x44>)
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	4413      	add	r3, r2
 8001d26:	460a      	mov	r2, r1
 8001d28:	701a      	strb	r2, [r3, #0]
	}
}
 8001d2a:	bf00      	nop
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000228 	.word	0x20000228
 8001d3c:	20000224 	.word	0x20000224

08001d40 <led_7seg_set_colon>:
 *          This parameter can be one of the following values:
 *				@arg 0: Turn off
 *				@arg 1: Turn on
 * @retval None
 */
void led_7seg_set_colon(uint8_t status) {
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	if (status == 1)
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d107      	bne.n	8001d60 <led_7seg_set_colon+0x20>
		spi_buffer &= ~(1 << 3);
 8001d50:	4b0a      	ldr	r3, [pc, #40]	@ (8001d7c <led_7seg_set_colon+0x3c>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	f023 0308 	bic.w	r3, r3, #8
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	4b08      	ldr	r3, [pc, #32]	@ (8001d7c <led_7seg_set_colon+0x3c>)
 8001d5c:	801a      	strh	r2, [r3, #0]
	else
		spi_buffer |= (1 << 3);
}
 8001d5e:	e006      	b.n	8001d6e <led_7seg_set_colon+0x2e>
		spi_buffer |= (1 << 3);
 8001d60:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <led_7seg_set_colon+0x3c>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	f043 0308 	orr.w	r3, r3, #8
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	4b04      	ldr	r3, [pc, #16]	@ (8001d7c <led_7seg_set_colon+0x3c>)
 8001d6c:	801a      	strh	r2, [r3, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000238 	.word	0x20000238

08001d80 <led_7seg_debug_turn_off>:
 *            	@arg 6
 *            	@arg 7
 *            	@arg 8
 * @retval None
 */
void led_7seg_debug_turn_off(uint8_t index) {
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
	if (index >= 6 && index <= 8) {
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	2b05      	cmp	r3, #5
 8001d8e:	d912      	bls.n	8001db6 <led_7seg_debug_turn_off+0x36>
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d80f      	bhi.n	8001db6 <led_7seg_debug_turn_off+0x36>
		spi_buffer &= ~(1 << (index - 6));
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	3b06      	subs	r3, #6
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	b21b      	sxth	r3, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	b21a      	sxth	r2, r3
 8001da6:	4b07      	ldr	r3, [pc, #28]	@ (8001dc4 <led_7seg_debug_turn_off+0x44>)
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	b21b      	sxth	r3, r3
 8001dac:	4013      	ands	r3, r2
 8001dae:	b21b      	sxth	r3, r3
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	4b04      	ldr	r3, [pc, #16]	@ (8001dc4 <led_7seg_debug_turn_off+0x44>)
 8001db4:	801a      	strh	r2, [r3, #0]
	}
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000238 	.word	0x20000238

08001dc8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TestADC();
void lcd_run();
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a04      	ldr	r2, [pc, #16]	@ (8001de8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_TIM_PeriodElapsedCallback+0x16>
		timerRun();
 8001dda:	f000 fb99 	bl	8002510 <timerRun>
	}
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40000400 	.word	0x40000400

08001dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001df0:	f000 fe88 	bl	8002b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001df4:	f000 f86a 	bl	8001ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001df8:	f7ff f964 	bl	80010c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dfc:	f7ff f872 	bl	8000ee4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001e00:	f000 fc20 	bl	8002644 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001e04:	f000 fbf4 	bl	80025f0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001e08:	f000 fbc8 	bl	800259c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001e0c:	f7fe fdf8 	bl	8000a00 <MX_ADC1_Init>
  MX_FSMC_Init();
 8001e10:	f7ff f888 	bl	8000f24 <MX_FSMC_Init>
  MX_SPI1_Init();
 8001e14:	f000 f9b2 	bl	800217c <MX_SPI1_Init>
  MX_TIM3_Init();
 8001e18:	f000 faec 	bl	80023f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  led_7seg_init();
 8001e1c:	f7ff fed4 	bl	8001bc8 <led_7seg_init>
  led_7seg_set_colon(1);
 8001e20:	2001      	movs	r0, #1
 8001e22:	f7ff ff8d 	bl	8001d40 <led_7seg_set_colon>
  led_7seg_debug_turn_off(6);
 8001e26:	2006      	movs	r0, #6
 8001e28:	f7ff ffaa 	bl	8001d80 <led_7seg_debug_turn_off>
  led_7seg_debug_turn_off(7);
 8001e2c:	2007      	movs	r0, #7
 8001e2e:	f7ff ffa7 	bl	8001d80 <led_7seg_debug_turn_off>
  led_7seg_debug_turn_off(8);
 8001e32:	2008      	movs	r0, #8
 8001e34:	f7ff ffa4 	bl	8001d80 <led_7seg_debug_turn_off>
  led_7seg_set_digit(0, 0, 0 );
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f7ff ff5b 	bl	8001cf8 <led_7seg_set_digit>
  led_7seg_set_digit(0, 1, 0 );
 8001e42:	2200      	movs	r2, #0
 8001e44:	2101      	movs	r1, #1
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff ff56 	bl	8001cf8 <led_7seg_set_digit>
  led_7seg_set_digit(0, 2, 0 );
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2102      	movs	r1, #2
 8001e50:	2000      	movs	r0, #0
 8001e52:	f7ff ff51 	bl	8001cf8 <led_7seg_set_digit>
  led_7seg_set_digit(0, 3, 0 );
 8001e56:	2200      	movs	r2, #0
 8001e58:	2103      	movs	r1, #3
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f7ff ff4c 	bl	8001cf8 <led_7seg_set_digit>
  lcd_init();
 8001e60:	f7ff fcee 	bl	8001840 <lcd_init>
  sensor_init();
 8001e64:	f000 f97c 	bl	8002160 <sensor_init>
  lcd_clear(BLACK);
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7ff fa89 	bl	8001380 <lcd_clear>
  HAL_TIM_Base_Start_IT(&htim3);
 8001e6e:	4816      	ldr	r0, [pc, #88]	@ (8001ec8 <main+0xdc>)
 8001e70:	f003 fc7c 	bl	800576c <HAL_TIM_Base_Start_IT>
  setTimer(TI_BUTTON_SCAN_TIMER, TI_BUTTON_SCAN_TIME);
 8001e74:	2114      	movs	r1, #20
 8001e76:	2000      	movs	r0, #0
 8001e78:	f000 fb32 	bl	80024e0 <setTimer>
  setTimer(TI_7SEG_SCAN_TIMER, TI_7SEG_SCAN_TIME);
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f000 fb2e 	bl	80024e0 <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(isFlag(TI_BUTTON_SCAN_TIMER)){
 8001e84:	2000      	movs	r0, #0
 8001e86:	f000 fb73 	bl	8002570 <isFlag>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <main+0xb0>
		  button_scan();
 8001e90:	f7fe fecc 	bl	8000c2c <button_scan>
		  setTimer(TI_BUTTON_SCAN_TIMER, TI_BUTTON_SCAN_TIME);
 8001e94:	2114      	movs	r1, #20
 8001e96:	2000      	movs	r0, #0
 8001e98:	f000 fb22 	bl	80024e0 <setTimer>
	  }
	  if(isFlag(TI_7SEG_SCAN_TIMER)){
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f000 fb67 	bl	8002570 <isFlag>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <main+0xc8>
		  led_7seg_display();
 8001ea8:	f7ff fe9a 	bl	8001be0 <led_7seg_display>
		  setTimer(TI_7SEG_SCAN_TIMER, TI_7SEG_SCAN_TIME);
 8001eac:	2102      	movs	r1, #2
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f000 fb16 	bl	80024e0 <setTimer>
	  }
	  lcd_run();
 8001eb4:	f000 f874 	bl	8001fa0 <lcd_run>
	  f_user_interface();
 8001eb8:	f000 fcaa 	bl	8002810 <f_user_interface>
	  f_rs485_fsm();
 8001ebc:	f000 f926 	bl	800210c <f_rs485_fsm>
	  f_master_fsm();
 8001ec0:	f7fe fbf8 	bl	80006b4 <f_master_fsm>
	  if(isFlag(TI_BUTTON_SCAN_TIMER)){
 8001ec4:	e7de      	b.n	8001e84 <main+0x98>
 8001ec6:	bf00      	nop
 8001ec8:	2000070c 	.word	0x2000070c

08001ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b094      	sub	sp, #80	@ 0x50
 8001ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed2:	f107 0320 	add.w	r3, r7, #32
 8001ed6:	2230      	movs	r2, #48	@ 0x30
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f005 f876 	bl	8006fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	4b28      	ldr	r3, [pc, #160]	@ (8001f98 <SystemClock_Config+0xcc>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	4a27      	ldr	r2, [pc, #156]	@ (8001f98 <SystemClock_Config+0xcc>)
 8001efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001efe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f00:	4b25      	ldr	r3, [pc, #148]	@ (8001f98 <SystemClock_Config+0xcc>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	4b22      	ldr	r3, [pc, #136]	@ (8001f9c <SystemClock_Config+0xd0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a21      	ldr	r2, [pc, #132]	@ (8001f9c <SystemClock_Config+0xd0>)
 8001f16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f9c <SystemClock_Config+0xd0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f30:	2310      	movs	r3, #16
 8001f32:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f34:	2302      	movs	r3, #2
 8001f36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f40:	23a8      	movs	r3, #168	@ 0xa8
 8001f42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f44:	2302      	movs	r3, #2
 8001f46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f48:	2304      	movs	r3, #4
 8001f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f4c:	f107 0320 	add.w	r3, r7, #32
 8001f50:	4618      	mov	r0, r3
 8001f52:	f002 f949 	bl	80041e8 <HAL_RCC_OscConfig>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f5c:	f000 f8c4 	bl	80020e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f60:	230f      	movs	r3, #15
 8001f62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f64:	2302      	movs	r3, #2
 8001f66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f6c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001f72:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	2105      	movs	r1, #5
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f002 fbaa 	bl	80046d8 <HAL_RCC_ClockConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f8a:	f000 f8ad 	bl	80020e8 <Error_Handler>
  }
}
 8001f8e:	bf00      	nop
 8001f90:	3750      	adds	r7, #80	@ 0x50
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40007000 	.word	0x40007000

08001fa0 <lcd_run>:
		lcd_show_string(10, 180, "Temperature:", RED, BLACK, 16, 0);
		lcd_show_float_num(130, 180, sensor_get_temperature(), 4, RED, BLACK,
				16);
	}
}
void lcd_run(){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af04      	add	r7, sp, #16
	lcd_show_string(10, 100, "Temperature:", RED, BLACK, 16, 0);
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	9302      	str	r3, [sp, #8]
 8001faa:	2310      	movs	r3, #16
 8001fac:	9301      	str	r3, [sp, #4]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001fb6:	4a47      	ldr	r2, [pc, #284]	@ (80020d4 <lcd_run+0x134>)
 8001fb8:	2164      	movs	r1, #100	@ 0x64
 8001fba:	200a      	movs	r0, #10
 8001fbc:	f7ff fda0 	bl	8001b00 <lcd_show_string>
	lcd_show_float_num(130, 100, f_master_get_temperature(), 4, RED, BLACK, 16);
 8001fc0:	f7fe fca4 	bl	800090c <f_master_get_temperature>
 8001fc4:	eef0 7a40 	vmov.f32	s15, s0
 8001fc8:	2310      	movs	r3, #16
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fda:	2164      	movs	r1, #100	@ 0x64
 8001fdc:	2082      	movs	r0, #130	@ 0x82
 8001fde:	f7ff fb83 	bl	80016e8 <lcd_show_float_num>
	lcd_show_string(10, 120, "Current:", RED, BLACK, 16, 0);
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	9302      	str	r3, [sp, #8]
 8001fe6:	2310      	movs	r3, #16
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	2300      	movs	r3, #0
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001ff2:	4a39      	ldr	r2, [pc, #228]	@ (80020d8 <lcd_run+0x138>)
 8001ff4:	2178      	movs	r1, #120	@ 0x78
 8001ff6:	200a      	movs	r0, #10
 8001ff8:	f7ff fd82 	bl	8001b00 <lcd_show_string>
	lcd_show_float_num(130, 120, f_master_get_current(), 4, RED, BLACK, 16);
 8001ffc:	f7fe fc94 	bl	8000928 <f_master_get_current>
 8002000:	eef0 7a40 	vmov.f32	s15, s0
 8002004:	2310      	movs	r3, #16
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	2300      	movs	r3, #0
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002010:	2204      	movs	r2, #4
 8002012:	eeb0 0a67 	vmov.f32	s0, s15
 8002016:	2178      	movs	r1, #120	@ 0x78
 8002018:	2082      	movs	r0, #130	@ 0x82
 800201a:	f7ff fb65 	bl	80016e8 <lcd_show_float_num>
	lcd_show_string(10, 140, "Voltage:", RED, BLACK, 16, 0);
 800201e:	2300      	movs	r3, #0
 8002020:	9302      	str	r3, [sp, #8]
 8002022:	2310      	movs	r3, #16
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	2300      	movs	r3, #0
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800202e:	4a2b      	ldr	r2, [pc, #172]	@ (80020dc <lcd_run+0x13c>)
 8002030:	218c      	movs	r1, #140	@ 0x8c
 8002032:	200a      	movs	r0, #10
 8002034:	f7ff fd64 	bl	8001b00 <lcd_show_string>
	lcd_show_float_num(130, 140, f_master_get_voltage(), 4, RED, BLACK, 16);
 8002038:	f7fe fc84 	bl	8000944 <f_master_get_voltage>
 800203c:	eef0 7a40 	vmov.f32	s15, s0
 8002040:	2310      	movs	r3, #16
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	2300      	movs	r3, #0
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800204c:	2204      	movs	r2, #4
 800204e:	eeb0 0a67 	vmov.f32	s0, s15
 8002052:	218c      	movs	r1, #140	@ 0x8c
 8002054:	2082      	movs	r0, #130	@ 0x82
 8002056:	f7ff fb47 	bl	80016e8 <lcd_show_float_num>
	lcd_show_string(10, 160, "Light:", RED, BLACK, 16, 0);
 800205a:	2300      	movs	r3, #0
 800205c:	9302      	str	r3, [sp, #8]
 800205e:	2310      	movs	r3, #16
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	2300      	movs	r3, #0
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800206a:	4a1d      	ldr	r2, [pc, #116]	@ (80020e0 <lcd_run+0x140>)
 800206c:	21a0      	movs	r1, #160	@ 0xa0
 800206e:	200a      	movs	r0, #10
 8002070:	f7ff fd46 	bl	8001b00 <lcd_show_string>
	lcd_show_int_num(130, 160, f_master_get_light(), 4, RED, BLACK, 16);
 8002074:	f7fe fc74 	bl	8000960 <f_master_get_light>
 8002078:	4603      	mov	r3, r0
 800207a:	461a      	mov	r2, r3
 800207c:	2310      	movs	r3, #16
 800207e:	9302      	str	r3, [sp, #8]
 8002080:	2300      	movs	r3, #0
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2304      	movs	r3, #4
 800208c:	21a0      	movs	r1, #160	@ 0xa0
 800208e:	2082      	movs	r0, #130	@ 0x82
 8002090:	f7ff faac 	bl	80015ec <lcd_show_int_num>
	lcd_show_string(10, 180, "Potentiometer:", RED, BLACK, 16, 0);
 8002094:	2300      	movs	r3, #0
 8002096:	9302      	str	r3, [sp, #8]
 8002098:	2310      	movs	r3, #16
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	2300      	movs	r3, #0
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020a4:	4a0f      	ldr	r2, [pc, #60]	@ (80020e4 <lcd_run+0x144>)
 80020a6:	21b4      	movs	r1, #180	@ 0xb4
 80020a8:	200a      	movs	r0, #10
 80020aa:	f7ff fd29 	bl	8001b00 <lcd_show_string>
	lcd_show_int_num(130, 180, f_master_get_potention(), 4, RED, BLACK,16);
 80020ae:	f7fe fc7f 	bl	80009b0 <f_master_get_potention>
 80020b2:	4603      	mov	r3, r0
 80020b4:	461a      	mov	r2, r3
 80020b6:	2310      	movs	r3, #16
 80020b8:	9302      	str	r3, [sp, #8]
 80020ba:	2300      	movs	r3, #0
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	2304      	movs	r3, #4
 80020c6:	21b4      	movs	r1, #180	@ 0xb4
 80020c8:	2082      	movs	r0, #130	@ 0x82
 80020ca:	f7ff fa8f 	bl	80015ec <lcd_show_int_num>
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	08007914 	.word	0x08007914
 80020d8:	080078f0 	.word	0x080078f0
 80020dc:	080078e4 	.word	0x080078e4
 80020e0:	080078fc 	.word	0x080078fc
 80020e4:	08007904 	.word	0x08007904

080020e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020ec:	b672      	cpsid	i
}
 80020ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020f0:	bf00      	nop
 80020f2:	e7fd      	b.n	80020f0 <Error_Handler+0x8>

080020f4 <f_rs485_send_cmd>:

void f_rs485_init(uint8_t* tx_buf, uint8_t tx_size, uint8_t* rx_buf){

}

void f_rs485_send_cmd(uint8_t* tx_buf, uint8_t tx_size){
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	70fb      	strb	r3, [r7, #3]

}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <f_rs485_fsm>:

void f_rs485_fsm(){
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0

}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <f_rs485_parserFrame>:

void f_rs485_parserFrame(uint8_t *pFrame, uint8_t FrameSize, uint8_t *Address, uint8_t *Function, uint8_t *Data, uint8_t *Datasize, uint16_t *Crc){
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	460b      	mov	r3, r1
 8002128:	72fb      	strb	r3, [r7, #11]

}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <f_rs485_received>:

int f_rs485_received(){
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
	return -1;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]

}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <sensor_init>:

/* Variables */
uint16_t adc_receive[5];

/* Functions */
void sensor_init() {
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (void*) adc_receive, 5);
 8002164:	2205      	movs	r2, #5
 8002166:	4903      	ldr	r1, [pc, #12]	@ (8002174 <sensor_init+0x14>)
 8002168:	4803      	ldr	r0, [pc, #12]	@ (8002178 <sensor_init+0x18>)
 800216a:	f000 fda5 	bl	8002cb8 <HAL_ADC_Start_DMA>
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200006a4 	.word	0x200006a4
 8002178:	200002bc 	.word	0x200002bc

0800217c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002180:	4b17      	ldr	r3, [pc, #92]	@ (80021e0 <MX_SPI1_Init+0x64>)
 8002182:	4a18      	ldr	r2, [pc, #96]	@ (80021e4 <MX_SPI1_Init+0x68>)
 8002184:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002186:	4b16      	ldr	r3, [pc, #88]	@ (80021e0 <MX_SPI1_Init+0x64>)
 8002188:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800218c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800218e:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <MX_SPI1_Init+0x64>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002194:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <MX_SPI1_Init+0x64>)
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800219a:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <MX_SPI1_Init+0x64>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	@ (80021e0 <MX_SPI1_Init+0x64>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <MX_SPI1_Init+0x64>)
 80021a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021ae:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <MX_SPI1_Init+0x64>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021b4:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <MX_SPI1_Init+0x64>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021ba:	4b09      	ldr	r3, [pc, #36]	@ (80021e0 <MX_SPI1_Init+0x64>)
 80021bc:	2200      	movs	r2, #0
 80021be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021c0:	4b07      	ldr	r3, [pc, #28]	@ (80021e0 <MX_SPI1_Init+0x64>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021c6:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <MX_SPI1_Init+0x64>)
 80021c8:	220a      	movs	r2, #10
 80021ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021cc:	4804      	ldr	r0, [pc, #16]	@ (80021e0 <MX_SPI1_Init+0x64>)
 80021ce:	f002 fc63 	bl	8004a98 <HAL_SPI_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80021d8:	f7ff ff86 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	200006b0 	.word	0x200006b0
 80021e4:	40013000 	.word	0x40013000

080021e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	@ 0x28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a19      	ldr	r2, [pc, #100]	@ (800226c <HAL_SPI_MspInit+0x84>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d12b      	bne.n	8002262 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	4b18      	ldr	r3, [pc, #96]	@ (8002270 <HAL_SPI_MspInit+0x88>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	4a17      	ldr	r2, [pc, #92]	@ (8002270 <HAL_SPI_MspInit+0x88>)
 8002214:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002218:	6453      	str	r3, [r2, #68]	@ 0x44
 800221a:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <HAL_SPI_MspInit+0x88>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	4b11      	ldr	r3, [pc, #68]	@ (8002270 <HAL_SPI_MspInit+0x88>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	4a10      	ldr	r2, [pc, #64]	@ (8002270 <HAL_SPI_MspInit+0x88>)
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	6313      	str	r3, [r2, #48]	@ 0x30
 8002236:	4b0e      	ldr	r3, [pc, #56]	@ (8002270 <HAL_SPI_MspInit+0x88>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002242:	2338      	movs	r3, #56	@ 0x38
 8002244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224e:	2303      	movs	r3, #3
 8002250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002252:	2305      	movs	r3, #5
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002256:	f107 0314 	add.w	r3, r7, #20
 800225a:	4619      	mov	r1, r3
 800225c:	4805      	ldr	r0, [pc, #20]	@ (8002274 <HAL_SPI_MspInit+0x8c>)
 800225e:	f001 fe0d 	bl	8003e7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002262:	bf00      	nop
 8002264:	3728      	adds	r7, #40	@ 0x28
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40013000 	.word	0x40013000
 8002270:	40023800 	.word	0x40023800
 8002274:	40020400 	.word	0x40020400

08002278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	4b10      	ldr	r3, [pc, #64]	@ (80022c4 <HAL_MspInit+0x4c>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002286:	4a0f      	ldr	r2, [pc, #60]	@ (80022c4 <HAL_MspInit+0x4c>)
 8002288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800228c:	6453      	str	r3, [r2, #68]	@ 0x44
 800228e:	4b0d      	ldr	r3, [pc, #52]	@ (80022c4 <HAL_MspInit+0x4c>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002296:	607b      	str	r3, [r7, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	603b      	str	r3, [r7, #0]
 800229e:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <HAL_MspInit+0x4c>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	4a08      	ldr	r2, [pc, #32]	@ (80022c4 <HAL_MspInit+0x4c>)
 80022a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022aa:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <HAL_MspInit+0x4c>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800

080022c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <NMI_Handler+0x4>

080022d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d4:	bf00      	nop
 80022d6:	e7fd      	b.n	80022d4 <HardFault_Handler+0x4>

080022d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022dc:	bf00      	nop
 80022de:	e7fd      	b.n	80022dc <MemManage_Handler+0x4>

080022e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <BusFault_Handler+0x4>

080022e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <UsageFault_Handler+0x4>

080022f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800231e:	f000 fc43 	bl	8002ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800232c:	4802      	ldr	r0, [pc, #8]	@ (8002338 <TIM3_IRQHandler+0x10>)
 800232e:	f003 fa8d 	bl	800584c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	2000070c 	.word	0x2000070c

0800233c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002340:	4802      	ldr	r0, [pc, #8]	@ (800234c <USART3_IRQHandler+0x10>)
 8002342:	f003 fe89 	bl	8006058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000834 	.word	0x20000834

08002350 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <DMA2_Stream0_IRQHandler+0x10>)
 8002356:	f001 fb27 	bl	80039a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000304 	.word	0x20000304

08002364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800236c:	4a14      	ldr	r2, [pc, #80]	@ (80023c0 <_sbrk+0x5c>)
 800236e:	4b15      	ldr	r3, [pc, #84]	@ (80023c4 <_sbrk+0x60>)
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002378:	4b13      	ldr	r3, [pc, #76]	@ (80023c8 <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002380:	4b11      	ldr	r3, [pc, #68]	@ (80023c8 <_sbrk+0x64>)
 8002382:	4a12      	ldr	r2, [pc, #72]	@ (80023cc <_sbrk+0x68>)
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002386:	4b10      	ldr	r3, [pc, #64]	@ (80023c8 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	429a      	cmp	r2, r3
 8002392:	d207      	bcs.n	80023a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002394:	f004 fe22 	bl	8006fdc <__errno>
 8002398:	4603      	mov	r3, r0
 800239a:	220c      	movs	r2, #12
 800239c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
 80023a2:	e009      	b.n	80023b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a4:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <_sbrk+0x64>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023aa:	4b07      	ldr	r3, [pc, #28]	@ (80023c8 <_sbrk+0x64>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	4a05      	ldr	r2, [pc, #20]	@ (80023c8 <_sbrk+0x64>)
 80023b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023b6:	68fb      	ldr	r3, [r7, #12]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20020000 	.word	0x20020000
 80023c4:	00000400 	.word	0x00000400
 80023c8:	20000708 	.word	0x20000708
 80023cc:	200009d0 	.word	0x200009d0

080023d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d4:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <SystemInit+0x20>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023da:	4a05      	ldr	r2, [pc, #20]	@ (80023f0 <SystemInit+0x20>)
 80023dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023fa:	f107 0308 	add.w	r3, r7, #8
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002408:	463b      	mov	r3, r7
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002410:	4b1d      	ldr	r3, [pc, #116]	@ (8002488 <MX_TIM3_Init+0x94>)
 8002412:	4a1e      	ldr	r2, [pc, #120]	@ (800248c <MX_TIM3_Init+0x98>)
 8002414:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8002416:	4b1c      	ldr	r3, [pc, #112]	@ (8002488 <MX_TIM3_Init+0x94>)
 8002418:	f240 3247 	movw	r2, #839	@ 0x347
 800241c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800241e:	4b1a      	ldr	r3, [pc, #104]	@ (8002488 <MX_TIM3_Init+0x94>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002424:	4b18      	ldr	r3, [pc, #96]	@ (8002488 <MX_TIM3_Init+0x94>)
 8002426:	2263      	movs	r2, #99	@ 0x63
 8002428:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800242a:	4b17      	ldr	r3, [pc, #92]	@ (8002488 <MX_TIM3_Init+0x94>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002430:	4b15      	ldr	r3, [pc, #84]	@ (8002488 <MX_TIM3_Init+0x94>)
 8002432:	2200      	movs	r2, #0
 8002434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002436:	4814      	ldr	r0, [pc, #80]	@ (8002488 <MX_TIM3_Init+0x94>)
 8002438:	f003 f948 	bl	80056cc <HAL_TIM_Base_Init>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002442:	f7ff fe51 	bl	80020e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002446:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800244a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800244c:	f107 0308 	add.w	r3, r7, #8
 8002450:	4619      	mov	r1, r3
 8002452:	480d      	ldr	r0, [pc, #52]	@ (8002488 <MX_TIM3_Init+0x94>)
 8002454:	f003 faea 	bl	8005a2c <HAL_TIM_ConfigClockSource>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800245e:	f7ff fe43 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800246a:	463b      	mov	r3, r7
 800246c:	4619      	mov	r1, r3
 800246e:	4806      	ldr	r0, [pc, #24]	@ (8002488 <MX_TIM3_Init+0x94>)
 8002470:	f003 fd12 	bl	8005e98 <HAL_TIMEx_MasterConfigSynchronization>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800247a:	f7ff fe35 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800247e:	bf00      	nop
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	2000070c 	.word	0x2000070c
 800248c:	40000400 	.word	0x40000400

08002490 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0e      	ldr	r2, [pc, #56]	@ (80024d8 <HAL_TIM_Base_MspInit+0x48>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d115      	bne.n	80024ce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	4b0d      	ldr	r3, [pc, #52]	@ (80024dc <HAL_TIM_Base_MspInit+0x4c>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	4a0c      	ldr	r2, [pc, #48]	@ (80024dc <HAL_TIM_Base_MspInit+0x4c>)
 80024ac:	f043 0302 	orr.w	r3, r3, #2
 80024b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024b2:	4b0a      	ldr	r3, [pc, #40]	@ (80024dc <HAL_TIM_Base_MspInit+0x4c>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024be:	2200      	movs	r2, #0
 80024c0:	2100      	movs	r1, #0
 80024c2:	201d      	movs	r0, #29
 80024c4:	f001 f8a1 	bl	800360a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024c8:	201d      	movs	r0, #29
 80024ca:	f001 f8ba 	bl	8003642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40000400 	.word	0x40000400
 80024dc:	40023800 	.word	0x40023800

080024e0 <setTimer>:
#include "timer.h"

struct TimerStruct timer[10];

void setTimer(int idx, int counter)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
	timer[idx].counter = counter / TICK;
 80024ea:	4908      	ldr	r1, [pc, #32]	@ (800250c <setTimer+0x2c>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	timer[idx].flag = 0;
 80024f4:	4a05      	ldr	r2, [pc, #20]	@ (800250c <setTimer+0x2c>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4413      	add	r3, r2
 80024fc:	2200      	movs	r2, #0
 80024fe:	605a      	str	r2, [r3, #4]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	20000754 	.word	0x20000754

08002510 <timerRun>:

void timerRun()
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; ++i)
 8002516:	2300      	movs	r3, #0
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	e01d      	b.n	8002558 <timerRun+0x48>
	{
		if (timer[i].counter > 0)
 800251c:	4a13      	ldr	r2, [pc, #76]	@ (800256c <timerRun+0x5c>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002524:	2b00      	cmp	r3, #0
 8002526:	dd14      	ble.n	8002552 <timerRun+0x42>
		{
			--timer[i].counter;
 8002528:	4a10      	ldr	r2, [pc, #64]	@ (800256c <timerRun+0x5c>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002530:	1e5a      	subs	r2, r3, #1
 8002532:	490e      	ldr	r1, [pc, #56]	@ (800256c <timerRun+0x5c>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			if (timer[i].counter <= 0)
 800253a:	4a0c      	ldr	r2, [pc, #48]	@ (800256c <timerRun+0x5c>)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002542:	2b00      	cmp	r3, #0
 8002544:	dc05      	bgt.n	8002552 <timerRun+0x42>
			{
				timer[i].flag = 1;
 8002546:	4a09      	ldr	r2, [pc, #36]	@ (800256c <timerRun+0x5c>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	2201      	movs	r2, #1
 8002550:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 10; ++i)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3301      	adds	r3, #1
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b09      	cmp	r3, #9
 800255c:	ddde      	ble.n	800251c <timerRun+0xc>
			}
		}
	}
}
 800255e:	bf00      	nop
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	20000754 	.word	0x20000754

08002570 <isFlag>:

int isFlag(int idx)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	if (timer[idx].flag)
 8002578:	4a07      	ldr	r2, [pc, #28]	@ (8002598 <isFlag+0x28>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <isFlag+0x1a>
	{
		return 1;
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <isFlag+0x1c>
	}
	return 0;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	20000754 	.word	0x20000754

0800259c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025a0:	4b11      	ldr	r3, [pc, #68]	@ (80025e8 <MX_USART1_UART_Init+0x4c>)
 80025a2:	4a12      	ldr	r2, [pc, #72]	@ (80025ec <MX_USART1_UART_Init+0x50>)
 80025a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80025a6:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <MX_USART1_UART_Init+0x4c>)
 80025a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80025ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025ae:	4b0e      	ldr	r3, [pc, #56]	@ (80025e8 <MX_USART1_UART_Init+0x4c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025b4:	4b0c      	ldr	r3, [pc, #48]	@ (80025e8 <MX_USART1_UART_Init+0x4c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025ba:	4b0b      	ldr	r3, [pc, #44]	@ (80025e8 <MX_USART1_UART_Init+0x4c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025c0:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <MX_USART1_UART_Init+0x4c>)
 80025c2:	220c      	movs	r2, #12
 80025c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c6:	4b08      	ldr	r3, [pc, #32]	@ (80025e8 <MX_USART1_UART_Init+0x4c>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025cc:	4b06      	ldr	r3, [pc, #24]	@ (80025e8 <MX_USART1_UART_Init+0x4c>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025d2:	4805      	ldr	r0, [pc, #20]	@ (80025e8 <MX_USART1_UART_Init+0x4c>)
 80025d4:	f003 fcf0 	bl	8005fb8 <HAL_UART_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80025de:	f7ff fd83 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200007a4 	.word	0x200007a4
 80025ec:	40011000 	.word	0x40011000

080025f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025f4:	4b11      	ldr	r3, [pc, #68]	@ (800263c <MX_USART2_UART_Init+0x4c>)
 80025f6:	4a12      	ldr	r2, [pc, #72]	@ (8002640 <MX_USART2_UART_Init+0x50>)
 80025f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025fa:	4b10      	ldr	r3, [pc, #64]	@ (800263c <MX_USART2_UART_Init+0x4c>)
 80025fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002600:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002602:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <MX_USART2_UART_Init+0x4c>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002608:	4b0c      	ldr	r3, [pc, #48]	@ (800263c <MX_USART2_UART_Init+0x4c>)
 800260a:	2200      	movs	r2, #0
 800260c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800260e:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <MX_USART2_UART_Init+0x4c>)
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002614:	4b09      	ldr	r3, [pc, #36]	@ (800263c <MX_USART2_UART_Init+0x4c>)
 8002616:	220c      	movs	r2, #12
 8002618:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800261a:	4b08      	ldr	r3, [pc, #32]	@ (800263c <MX_USART2_UART_Init+0x4c>)
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002620:	4b06      	ldr	r3, [pc, #24]	@ (800263c <MX_USART2_UART_Init+0x4c>)
 8002622:	2200      	movs	r2, #0
 8002624:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002626:	4805      	ldr	r0, [pc, #20]	@ (800263c <MX_USART2_UART_Init+0x4c>)
 8002628:	f003 fcc6 	bl	8005fb8 <HAL_UART_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002632:	f7ff fd59 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200007ec 	.word	0x200007ec
 8002640:	40004400 	.word	0x40004400

08002644 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002648:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <MX_USART3_UART_Init+0x4c>)
 800264a:	4a12      	ldr	r2, [pc, #72]	@ (8002694 <MX_USART3_UART_Init+0x50>)
 800264c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800264e:	4b10      	ldr	r3, [pc, #64]	@ (8002690 <MX_USART3_UART_Init+0x4c>)
 8002650:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002654:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002656:	4b0e      	ldr	r3, [pc, #56]	@ (8002690 <MX_USART3_UART_Init+0x4c>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800265c:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <MX_USART3_UART_Init+0x4c>)
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002662:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <MX_USART3_UART_Init+0x4c>)
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002668:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <MX_USART3_UART_Init+0x4c>)
 800266a:	220c      	movs	r2, #12
 800266c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266e:	4b08      	ldr	r3, [pc, #32]	@ (8002690 <MX_USART3_UART_Init+0x4c>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002674:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <MX_USART3_UART_Init+0x4c>)
 8002676:	2200      	movs	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800267a:	4805      	ldr	r0, [pc, #20]	@ (8002690 <MX_USART3_UART_Init+0x4c>)
 800267c:	f003 fc9c 	bl	8005fb8 <HAL_UART_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002686:	f7ff fd2f 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000834 	.word	0x20000834
 8002694:	40004800 	.word	0x40004800

08002698 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08e      	sub	sp, #56	@ 0x38
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a50      	ldr	r2, [pc, #320]	@ (80027f8 <HAL_UART_MspInit+0x160>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d12d      	bne.n	8002716 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	623b      	str	r3, [r7, #32]
 80026be:	4b4f      	ldr	r3, [pc, #316]	@ (80027fc <HAL_UART_MspInit+0x164>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c2:	4a4e      	ldr	r2, [pc, #312]	@ (80027fc <HAL_UART_MspInit+0x164>)
 80026c4:	f043 0310 	orr.w	r3, r3, #16
 80026c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ca:	4b4c      	ldr	r3, [pc, #304]	@ (80027fc <HAL_UART_MspInit+0x164>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	623b      	str	r3, [r7, #32]
 80026d4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	4b48      	ldr	r3, [pc, #288]	@ (80027fc <HAL_UART_MspInit+0x164>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	4a47      	ldr	r2, [pc, #284]	@ (80027fc <HAL_UART_MspInit+0x164>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e6:	4b45      	ldr	r3, [pc, #276]	@ (80027fc <HAL_UART_MspInit+0x164>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	61fb      	str	r3, [r7, #28]
 80026f0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002704:	2307      	movs	r3, #7
 8002706:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800270c:	4619      	mov	r1, r3
 800270e:	483c      	ldr	r0, [pc, #240]	@ (8002800 <HAL_UART_MspInit+0x168>)
 8002710:	f001 fbb4 	bl	8003e7c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002714:	e06b      	b.n	80027ee <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART2)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a3a      	ldr	r2, [pc, #232]	@ (8002804 <HAL_UART_MspInit+0x16c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d12c      	bne.n	800277a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002720:	2300      	movs	r3, #0
 8002722:	61bb      	str	r3, [r7, #24]
 8002724:	4b35      	ldr	r3, [pc, #212]	@ (80027fc <HAL_UART_MspInit+0x164>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	4a34      	ldr	r2, [pc, #208]	@ (80027fc <HAL_UART_MspInit+0x164>)
 800272a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800272e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002730:	4b32      	ldr	r3, [pc, #200]	@ (80027fc <HAL_UART_MspInit+0x164>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	4b2e      	ldr	r3, [pc, #184]	@ (80027fc <HAL_UART_MspInit+0x164>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002744:	4a2d      	ldr	r2, [pc, #180]	@ (80027fc <HAL_UART_MspInit+0x164>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6313      	str	r3, [r2, #48]	@ 0x30
 800274c:	4b2b      	ldr	r3, [pc, #172]	@ (80027fc <HAL_UART_MspInit+0x164>)
 800274e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002758:	230c      	movs	r3, #12
 800275a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002764:	2303      	movs	r3, #3
 8002766:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002768:	2307      	movs	r3, #7
 800276a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002770:	4619      	mov	r1, r3
 8002772:	4823      	ldr	r0, [pc, #140]	@ (8002800 <HAL_UART_MspInit+0x168>)
 8002774:	f001 fb82 	bl	8003e7c <HAL_GPIO_Init>
}
 8002778:	e039      	b.n	80027ee <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART3)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a22      	ldr	r2, [pc, #136]	@ (8002808 <HAL_UART_MspInit+0x170>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d134      	bne.n	80027ee <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002784:	2300      	movs	r3, #0
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	4b1c      	ldr	r3, [pc, #112]	@ (80027fc <HAL_UART_MspInit+0x164>)
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	4a1b      	ldr	r2, [pc, #108]	@ (80027fc <HAL_UART_MspInit+0x164>)
 800278e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002792:	6413      	str	r3, [r2, #64]	@ 0x40
 8002794:	4b19      	ldr	r3, [pc, #100]	@ (80027fc <HAL_UART_MspInit+0x164>)
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <HAL_UART_MspInit+0x164>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a8:	4a14      	ldr	r2, [pc, #80]	@ (80027fc <HAL_UART_MspInit+0x164>)
 80027aa:	f043 0304 	orr.w	r3, r3, #4
 80027ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b0:	4b12      	ldr	r3, [pc, #72]	@ (80027fc <HAL_UART_MspInit+0x164>)
 80027b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027bc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80027c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c2:	2302      	movs	r3, #2
 80027c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ca:	2303      	movs	r3, #3
 80027cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027ce:	2307      	movs	r3, #7
 80027d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027d6:	4619      	mov	r1, r3
 80027d8:	480c      	ldr	r0, [pc, #48]	@ (800280c <HAL_UART_MspInit+0x174>)
 80027da:	f001 fb4f 	bl	8003e7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	2027      	movs	r0, #39	@ 0x27
 80027e4:	f000 ff11 	bl	800360a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027e8:	2027      	movs	r0, #39	@ 0x27
 80027ea:	f000 ff2a 	bl	8003642 <HAL_NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3738      	adds	r7, #56	@ 0x38
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40011000 	.word	0x40011000
 80027fc:	40023800 	.word	0x40023800
 8002800:	40020000 	.word	0x40020000
 8002804:	40004400 	.word	0x40004400
 8002808:	40004800 	.word	0x40004800
 800280c:	40020800 	.word	0x40020800

08002810 <f_user_interface>:
 *      Author: ADMIN
 */
#include "user.h"
enum user_behavior_t user_state = INIT;
uint8_t led_7seg_colon_index = 0;
void f_user_interface(){
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	@ 0x28
 8002814:	af04      	add	r7, sp, #16
	if(flag_slave_not_respond == 1){
 8002816:	4b9f      	ldr	r3, [pc, #636]	@ (8002a94 <f_user_interface+0x284>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d114      	bne.n	8002848 <f_user_interface+0x38>
		char _buf[22];
		sprintf(_buf,"Slave %d not respond", slave_address);
 800281e:	4b9e      	ldr	r3, [pc, #632]	@ (8002a98 <f_user_interface+0x288>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	463b      	mov	r3, r7
 8002826:	499d      	ldr	r1, [pc, #628]	@ (8002a9c <f_user_interface+0x28c>)
 8002828:	4618      	mov	r0, r3
 800282a:	f004 fbaf 	bl	8006f8c <siprintf>
		lcd_show_string(10, 200, _buf, RED, BLACK, 16, 0);
 800282e:	463a      	mov	r2, r7
 8002830:	2300      	movs	r3, #0
 8002832:	9302      	str	r3, [sp, #8]
 8002834:	2310      	movs	r3, #16
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	2300      	movs	r3, #0
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002840:	21c8      	movs	r1, #200	@ 0xc8
 8002842:	200a      	movs	r0, #10
 8002844:	f7ff f95c 	bl	8001b00 <lcd_show_string>
	}
	switch(user_state){
 8002848:	4b95      	ldr	r3, [pc, #596]	@ (8002aa0 <f_user_interface+0x290>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b02      	cmp	r3, #2
 800284e:	f000 8102 	beq.w	8002a56 <f_user_interface+0x246>
 8002852:	2b02      	cmp	r3, #2
 8002854:	f300 8114 	bgt.w	8002a80 <f_user_interface+0x270>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <f_user_interface+0x52>
 800285c:	2b01      	cmp	r3, #1
 800285e:	d004      	beq.n	800286a <f_user_interface+0x5a>
					cmd_send = 0x01;
				}
			}
			break;
		default:
			break;
 8002860:	e10e      	b.n	8002a80 <f_user_interface+0x270>
			user_state = SEND_MANUAL;
 8002862:	4b8f      	ldr	r3, [pc, #572]	@ (8002aa0 <f_user_interface+0x290>)
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
			break;
 8002868:	e10f      	b.n	8002a8a <f_user_interface+0x27a>
			if(isPress(0)){
 800286a:	2000      	movs	r0, #0
 800286c:	f7fe faca 	bl	8000e04 <isPress>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d033      	beq.n	80028de <f_user_interface+0xce>
				if(led_7seg_colon_index==0){
 8002876:	4b8b      	ldr	r3, [pc, #556]	@ (8002aa4 <f_user_interface+0x294>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d116      	bne.n	80028ac <f_user_interface+0x9c>
					slave_address+= 0x10;
 800287e:	4b86      	ldr	r3, [pc, #536]	@ (8002a98 <f_user_interface+0x288>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	3310      	adds	r3, #16
 8002884:	b2da      	uxtb	r2, r3
 8002886:	4b84      	ldr	r3, [pc, #528]	@ (8002a98 <f_user_interface+0x288>)
 8002888:	701a      	strb	r2, [r3, #0]
					led_7seg_set_digit(slave_address>>4, 0, led_7seg_colon_index==0);
 800288a:	4b83      	ldr	r3, [pc, #524]	@ (8002a98 <f_user_interface+0x288>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	091b      	lsrs	r3, r3, #4
 8002890:	b2db      	uxtb	r3, r3
 8002892:	4618      	mov	r0, r3
 8002894:	4b83      	ldr	r3, [pc, #524]	@ (8002aa4 <f_user_interface+0x294>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	2100      	movs	r1, #0
 80028a6:	f7ff fa27 	bl	8001cf8 <led_7seg_set_digit>
 80028aa:	e018      	b.n	80028de <f_user_interface+0xce>
				else if(led_7seg_colon_index==1){
 80028ac:	4b7d      	ldr	r3, [pc, #500]	@ (8002aa4 <f_user_interface+0x294>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d114      	bne.n	80028de <f_user_interface+0xce>
					slave_address+= 0x01;
 80028b4:	4b78      	ldr	r3, [pc, #480]	@ (8002a98 <f_user_interface+0x288>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	3301      	adds	r3, #1
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	4b76      	ldr	r3, [pc, #472]	@ (8002a98 <f_user_interface+0x288>)
 80028be:	701a      	strb	r2, [r3, #0]
					led_7seg_set_digit(slave_address & 0x0F, 1, led_7seg_colon_index==1);
 80028c0:	4b75      	ldr	r3, [pc, #468]	@ (8002a98 <f_user_interface+0x288>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	f003 000f 	and.w	r0, r3, #15
 80028c8:	4b76      	ldr	r3, [pc, #472]	@ (8002aa4 <f_user_interface+0x294>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	2101      	movs	r1, #1
 80028da:	f7ff fa0d 	bl	8001cf8 <led_7seg_set_digit>
			if(isLongPress(0)){
 80028de:	2000      	movs	r0, #0
 80028e0:	f7fe fab0 	bl	8000e44 <isLongPress>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d033      	beq.n	8002952 <f_user_interface+0x142>
				if(led_7seg_colon_index==0){
 80028ea:	4b6e      	ldr	r3, [pc, #440]	@ (8002aa4 <f_user_interface+0x294>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d116      	bne.n	8002920 <f_user_interface+0x110>
					slave_address+= 0x50;
 80028f2:	4b69      	ldr	r3, [pc, #420]	@ (8002a98 <f_user_interface+0x288>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	3350      	adds	r3, #80	@ 0x50
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4b67      	ldr	r3, [pc, #412]	@ (8002a98 <f_user_interface+0x288>)
 80028fc:	701a      	strb	r2, [r3, #0]
					led_7seg_set_digit(slave_address>>4, 0, led_7seg_colon_index==0);
 80028fe:	4b66      	ldr	r3, [pc, #408]	@ (8002a98 <f_user_interface+0x288>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	091b      	lsrs	r3, r3, #4
 8002904:	b2db      	uxtb	r3, r3
 8002906:	4618      	mov	r0, r3
 8002908:	4b66      	ldr	r3, [pc, #408]	@ (8002aa4 <f_user_interface+0x294>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	2100      	movs	r1, #0
 800291a:	f7ff f9ed 	bl	8001cf8 <led_7seg_set_digit>
 800291e:	e018      	b.n	8002952 <f_user_interface+0x142>
				else if(led_7seg_colon_index==1){
 8002920:	4b60      	ldr	r3, [pc, #384]	@ (8002aa4 <f_user_interface+0x294>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d114      	bne.n	8002952 <f_user_interface+0x142>
					slave_address+= 0x05;
 8002928:	4b5b      	ldr	r3, [pc, #364]	@ (8002a98 <f_user_interface+0x288>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	3305      	adds	r3, #5
 800292e:	b2da      	uxtb	r2, r3
 8002930:	4b59      	ldr	r3, [pc, #356]	@ (8002a98 <f_user_interface+0x288>)
 8002932:	701a      	strb	r2, [r3, #0]
					led_7seg_set_digit(slave_address & 0x0F, 1, led_7seg_colon_index==1);
 8002934:	4b58      	ldr	r3, [pc, #352]	@ (8002a98 <f_user_interface+0x288>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	f003 000f 	and.w	r0, r3, #15
 800293c:	4b59      	ldr	r3, [pc, #356]	@ (8002aa4 <f_user_interface+0x294>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b01      	cmp	r3, #1
 8002942:	bf0c      	ite	eq
 8002944:	2301      	moveq	r3, #1
 8002946:	2300      	movne	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	2101      	movs	r1, #1
 800294e:	f7ff f9d3 	bl	8001cf8 <led_7seg_set_digit>
			if(isPress(4)){
 8002952:	2004      	movs	r0, #4
 8002954:	f7fe fa56 	bl	8000e04 <isPress>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d02b      	beq.n	80029b6 <f_user_interface+0x1a6>
				led_7seg_colon_index++;
 800295e:	4b51      	ldr	r3, [pc, #324]	@ (8002aa4 <f_user_interface+0x294>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	3301      	adds	r3, #1
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4b4f      	ldr	r3, [pc, #316]	@ (8002aa4 <f_user_interface+0x294>)
 8002968:	701a      	strb	r2, [r3, #0]
				if(led_7seg_colon_index > 3) led_7seg_colon_index = 0;
 800296a:	4b4e      	ldr	r3, [pc, #312]	@ (8002aa4 <f_user_interface+0x294>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d902      	bls.n	8002978 <f_user_interface+0x168>
 8002972:	4b4c      	ldr	r3, [pc, #304]	@ (8002aa4 <f_user_interface+0x294>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
				led_7seg_set_digit(slave_address>>4, 0, led_7seg_colon_index==0);
 8002978:	4b47      	ldr	r3, [pc, #284]	@ (8002a98 <f_user_interface+0x288>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	b2db      	uxtb	r3, r3
 8002980:	4618      	mov	r0, r3
 8002982:	4b48      	ldr	r3, [pc, #288]	@ (8002aa4 <f_user_interface+0x294>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	bf0c      	ite	eq
 800298a:	2301      	moveq	r3, #1
 800298c:	2300      	movne	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	2100      	movs	r1, #0
 8002994:	f7ff f9b0 	bl	8001cf8 <led_7seg_set_digit>
				led_7seg_set_digit(slave_address & 0x0F, 1, led_7seg_colon_index==1);
 8002998:	4b3f      	ldr	r3, [pc, #252]	@ (8002a98 <f_user_interface+0x288>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	f003 000f 	and.w	r0, r3, #15
 80029a0:	4b40      	ldr	r3, [pc, #256]	@ (8002aa4 <f_user_interface+0x294>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	bf0c      	ite	eq
 80029a8:	2301      	moveq	r3, #1
 80029aa:	2300      	movne	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	2101      	movs	r1, #1
 80029b2:	f7ff f9a1 	bl	8001cf8 <led_7seg_set_digit>
			if(isPress(1)){
 80029b6:	2001      	movs	r0, #1
 80029b8:	f7fe fa24 	bl	8000e04 <isPress>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <f_user_interface+0x1b8>
				cmd_send = READ_POTENTION;
 80029c2:	4b39      	ldr	r3, [pc, #228]	@ (8002aa8 <f_user_interface+0x298>)
 80029c4:	2206      	movs	r2, #6
 80029c6:	701a      	strb	r2, [r3, #0]
			if(isPress(2)){
 80029c8:	2002      	movs	r0, #2
 80029ca:	f7fe fa1b 	bl	8000e04 <isPress>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <f_user_interface+0x1ca>
				cmd_send = READ_POTENTION;
 80029d4:	4b34      	ldr	r3, [pc, #208]	@ (8002aa8 <f_user_interface+0x298>)
 80029d6:	2206      	movs	r2, #6
 80029d8:	701a      	strb	r2, [r3, #0]
			if(isPress(3)){
 80029da:	2003      	movs	r0, #3
 80029dc:	f7fe fa12 	bl	8000e04 <isPress>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <f_user_interface+0x1dc>
				cmd_send = READ_LIGHT;
 80029e6:	4b30      	ldr	r3, [pc, #192]	@ (8002aa8 <f_user_interface+0x298>)
 80029e8:	2204      	movs	r2, #4
 80029ea:	701a      	strb	r2, [r3, #0]
			if(isPress(5)){
 80029ec:	2005      	movs	r0, #5
 80029ee:	f7fe fa09 	bl	8000e04 <isPress>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <f_user_interface+0x1ee>
				cmd_send = READ_TEMPERATURE;
 80029f8:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa8 <f_user_interface+0x298>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
			if(isPress(6)){
 80029fe:	2006      	movs	r0, #6
 8002a00:	f7fe fa00 	bl	8000e04 <isPress>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <f_user_interface+0x200>
				cmd_send = READ_CURRENT;
 8002a0a:	4b27      	ldr	r3, [pc, #156]	@ (8002aa8 <f_user_interface+0x298>)
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	701a      	strb	r2, [r3, #0]
			if(isPress(7)){
 8002a10:	2007      	movs	r0, #7
 8002a12:	f7fe f9f7 	bl	8000e04 <isPress>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <f_user_interface+0x212>
				cmd_send = READ_VOLTAGE;
 8002a1c:	4b22      	ldr	r3, [pc, #136]	@ (8002aa8 <f_user_interface+0x298>)
 8002a1e:	2203      	movs	r2, #3
 8002a20:	701a      	strb	r2, [r3, #0]
			if(isPress(9)){
 8002a22:	2009      	movs	r0, #9
 8002a24:	f7fe f9ee 	bl	8000e04 <isPress>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <f_user_interface+0x224>
				cmd_send = READ_LED;
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa8 <f_user_interface+0x298>)
 8002a30:	2205      	movs	r2, #5
 8002a32:	701a      	strb	r2, [r3, #0]
			if(isPress(10)){
 8002a34:	200a      	movs	r0, #10
 8002a36:	f7fe f9e5 	bl	8000e04 <isPress>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <f_user_interface+0x236>
				cmd_send = WRITE_LIGHT;
 8002a40:	4b19      	ldr	r3, [pc, #100]	@ (8002aa8 <f_user_interface+0x298>)
 8002a42:	220a      	movs	r2, #10
 8002a44:	701a      	strb	r2, [r3, #0]
			if(cmd_send != 0x00) flag_send_cmd = 1;
 8002a46:	4b18      	ldr	r3, [pc, #96]	@ (8002aa8 <f_user_interface+0x298>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d01a      	beq.n	8002a84 <f_user_interface+0x274>
 8002a4e:	4b17      	ldr	r3, [pc, #92]	@ (8002aac <f_user_interface+0x29c>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	701a      	strb	r2, [r3, #0]
			break;
 8002a54:	e016      	b.n	8002a84 <f_user_interface+0x274>
			if(flag_send_cmd == 0){
 8002a56:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <f_user_interface+0x29c>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d114      	bne.n	8002a88 <f_user_interface+0x278>
				cmd_send++;
 8002a5e:	4b12      	ldr	r3, [pc, #72]	@ (8002aa8 <f_user_interface+0x298>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <f_user_interface+0x298>)
 8002a68:	701a      	strb	r2, [r3, #0]
				flag_send_cmd = 1;
 8002a6a:	4b10      	ldr	r3, [pc, #64]	@ (8002aac <f_user_interface+0x29c>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	701a      	strb	r2, [r3, #0]
				if(cmd_send >= 0x0B){
 8002a70:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa8 <f_user_interface+0x298>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b0a      	cmp	r3, #10
 8002a76:	d907      	bls.n	8002a88 <f_user_interface+0x278>
					cmd_send = 0x01;
 8002a78:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <f_user_interface+0x298>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	701a      	strb	r2, [r3, #0]
			break;
 8002a7e:	e003      	b.n	8002a88 <f_user_interface+0x278>
			break;
 8002a80:	bf00      	nop
 8002a82:	e002      	b.n	8002a8a <f_user_interface+0x27a>
			break;
 8002a84:	bf00      	nop
 8002a86:	e000      	b.n	8002a8a <f_user_interface+0x27a>
			break;
 8002a88:	bf00      	nop
	}
}
 8002a8a:	bf00      	nop
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	2000047e 	.word	0x2000047e
 8002a98:	20000220 	.word	0x20000220
 8002a9c:	08007924 	.word	0x08007924
 8002aa0:	2000087c 	.word	0x2000087c
 8002aa4:	2000087d 	.word	0x2000087d
 8002aa8:	2000047c 	.word	0x2000047c
 8002aac:	2000047d 	.word	0x2000047d

08002ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ab0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ae8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ab4:	f7ff fc8c 	bl	80023d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ab8:	480c      	ldr	r0, [pc, #48]	@ (8002aec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002aba:	490d      	ldr	r1, [pc, #52]	@ (8002af0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002abc:	4a0d      	ldr	r2, [pc, #52]	@ (8002af4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ac0:	e002      	b.n	8002ac8 <LoopCopyDataInit>

08002ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ac6:	3304      	adds	r3, #4

08002ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002acc:	d3f9      	bcc.n	8002ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ace:	4a0a      	ldr	r2, [pc, #40]	@ (8002af8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8002afc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ad4:	e001      	b.n	8002ada <LoopFillZerobss>

08002ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ad8:	3204      	adds	r2, #4

08002ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002adc:	d3fb      	bcc.n	8002ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ade:	f004 fa83 	bl	8006fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ae2:	f7ff f983 	bl	8001dec <main>
  bx  lr    
 8002ae6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ae8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002af0:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 8002af4:	0800a920 	.word	0x0800a920
  ldr r2, =_sbss
 8002af8:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 8002afc:	200009cc 	.word	0x200009cc

08002b00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b00:	e7fe      	b.n	8002b00 <ADC_IRQHandler>
	...

08002b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b08:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <HAL_Init+0x40>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b44 <HAL_Init+0x40>)
 8002b0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b14:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <HAL_Init+0x40>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0a      	ldr	r2, [pc, #40]	@ (8002b44 <HAL_Init+0x40>)
 8002b1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b20:	4b08      	ldr	r3, [pc, #32]	@ (8002b44 <HAL_Init+0x40>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a07      	ldr	r2, [pc, #28]	@ (8002b44 <HAL_Init+0x40>)
 8002b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b2c:	2003      	movs	r0, #3
 8002b2e:	f000 fd61 	bl	80035f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b32:	200f      	movs	r0, #15
 8002b34:	f000 f808 	bl	8002b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b38:	f7ff fb9e 	bl	8002278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40023c00 	.word	0x40023c00

08002b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b50:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <HAL_InitTick+0x54>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b12      	ldr	r3, [pc, #72]	@ (8002ba0 <HAL_InitTick+0x58>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fd79 	bl	800365e <HAL_SYSTICK_Config>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e00e      	b.n	8002b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b0f      	cmp	r3, #15
 8002b7a:	d80a      	bhi.n	8002b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295
 8002b84:	f000 fd41 	bl	800360a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b88:	4a06      	ldr	r2, [pc, #24]	@ (8002ba4 <HAL_InitTick+0x5c>)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e000      	b.n	8002b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	2000023c 	.word	0x2000023c
 8002ba0:	20000244 	.word	0x20000244
 8002ba4:	20000240 	.word	0x20000240

08002ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bac:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <HAL_IncTick+0x20>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <HAL_IncTick+0x24>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	4a04      	ldr	r2, [pc, #16]	@ (8002bcc <HAL_IncTick+0x24>)
 8002bba:	6013      	str	r3, [r2, #0]
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	20000244 	.word	0x20000244
 8002bcc:	20000880 	.word	0x20000880

08002bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd4:	4b03      	ldr	r3, [pc, #12]	@ (8002be4 <HAL_GetTick+0x14>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000880 	.word	0x20000880

08002be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf0:	f7ff ffee 	bl	8002bd0 <HAL_GetTick>
 8002bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d005      	beq.n	8002c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c02:	4b0a      	ldr	r3, [pc, #40]	@ (8002c2c <HAL_Delay+0x44>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c0e:	bf00      	nop
 8002c10:	f7ff ffde 	bl	8002bd0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d8f7      	bhi.n	8002c10 <HAL_Delay+0x28>
  {
  }
}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000244 	.word	0x20000244

08002c30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e033      	b.n	8002cae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fd ff58 	bl	8000b04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d118      	bne.n	8002ca0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c76:	f023 0302 	bic.w	r3, r3, #2
 8002c7a:	f043 0202 	orr.w	r2, r3, #2
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fa68 	bl	8003158 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	f023 0303 	bic.w	r3, r3, #3
 8002c96:	f043 0201 	orr.w	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c9e:	e001      	b.n	8002ca4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_ADC_Start_DMA+0x1e>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e0e9      	b.n	8002eaa <HAL_ADC_Start_DMA+0x1f2>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d018      	beq.n	8002d1e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002cfc:	4b6d      	ldr	r3, [pc, #436]	@ (8002eb4 <HAL_ADC_Start_DMA+0x1fc>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a6d      	ldr	r2, [pc, #436]	@ (8002eb8 <HAL_ADC_Start_DMA+0x200>)
 8002d02:	fba2 2303 	umull	r2, r3, r2, r3
 8002d06:	0c9a      	lsrs	r2, r3, #18
 8002d08:	4613      	mov	r3, r2
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	4413      	add	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002d10:	e002      	b.n	8002d18 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f9      	bne.n	8002d12 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d2c:	d107      	bne.n	8002d3e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d3c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	f040 80a1 	bne.w	8002e90 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002d56:	f023 0301 	bic.w	r3, r3, #1
 8002d5a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d007      	beq.n	8002d80 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d74:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d78:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d8c:	d106      	bne.n	8002d9c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d92:	f023 0206 	bic.w	r2, r3, #6
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	645a      	str	r2, [r3, #68]	@ 0x44
 8002d9a:	e002      	b.n	8002da2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002daa:	4b44      	ldr	r3, [pc, #272]	@ (8002ebc <HAL_ADC_Start_DMA+0x204>)
 8002dac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db2:	4a43      	ldr	r2, [pc, #268]	@ (8002ec0 <HAL_ADC_Start_DMA+0x208>)
 8002db4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dba:	4a42      	ldr	r2, [pc, #264]	@ (8002ec4 <HAL_ADC_Start_DMA+0x20c>)
 8002dbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc2:	4a41      	ldr	r2, [pc, #260]	@ (8002ec8 <HAL_ADC_Start_DMA+0x210>)
 8002dc4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002dce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002dde:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dee:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	334c      	adds	r3, #76	@ 0x4c
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f000 fce8 	bl	80037d4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d12a      	bne.n	8002e66 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a2d      	ldr	r2, [pc, #180]	@ (8002ecc <HAL_ADC_Start_DMA+0x214>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d015      	beq.n	8002e46 <HAL_ADC_Start_DMA+0x18e>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed0 <HAL_ADC_Start_DMA+0x218>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d105      	bne.n	8002e30 <HAL_ADC_Start_DMA+0x178>
 8002e24:	4b25      	ldr	r3, [pc, #148]	@ (8002ebc <HAL_ADC_Start_DMA+0x204>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a27      	ldr	r2, [pc, #156]	@ (8002ed4 <HAL_ADC_Start_DMA+0x21c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d136      	bne.n	8002ea8 <HAL_ADC_Start_DMA+0x1f0>
 8002e3a:	4b20      	ldr	r3, [pc, #128]	@ (8002ebc <HAL_ADC_Start_DMA+0x204>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d130      	bne.n	8002ea8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d129      	bne.n	8002ea8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	e020      	b.n	8002ea8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a18      	ldr	r2, [pc, #96]	@ (8002ecc <HAL_ADC_Start_DMA+0x214>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d11b      	bne.n	8002ea8 <HAL_ADC_Start_DMA+0x1f0>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d114      	bne.n	8002ea8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	e00b      	b.n	8002ea8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	f043 0210 	orr.w	r2, r3, #16
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea0:	f043 0201 	orr.w	r2, r3, #1
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	2000023c 	.word	0x2000023c
 8002eb8:	431bde83 	.word	0x431bde83
 8002ebc:	40012300 	.word	0x40012300
 8002ec0:	08003351 	.word	0x08003351
 8002ec4:	0800340b 	.word	0x0800340b
 8002ec8:	08003427 	.word	0x08003427
 8002ecc:	40012000 	.word	0x40012000
 8002ed0:	40012100 	.word	0x40012100
 8002ed4:	40012200 	.word	0x40012200

08002ed8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x1c>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e105      	b.n	800313c <HAL_ADC_ConfigChannel+0x228>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b09      	cmp	r3, #9
 8002f3e:	d925      	bls.n	8002f8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68d9      	ldr	r1, [r3, #12]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4613      	mov	r3, r2
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4413      	add	r3, r2
 8002f54:	3b1e      	subs	r3, #30
 8002f56:	2207      	movs	r2, #7
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43da      	mvns	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	400a      	ands	r2, r1
 8002f64:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68d9      	ldr	r1, [r3, #12]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	4618      	mov	r0, r3
 8002f78:	4603      	mov	r3, r0
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4403      	add	r3, r0
 8002f7e:	3b1e      	subs	r3, #30
 8002f80:	409a      	lsls	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	e022      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6919      	ldr	r1, [r3, #16]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4413      	add	r3, r2
 8002fa0:	2207      	movs	r2, #7
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	400a      	ands	r2, r1
 8002fae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6919      	ldr	r1, [r3, #16]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4403      	add	r3, r0
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d824      	bhi.n	8003024 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	3b05      	subs	r3, #5
 8002fec:	221f      	movs	r2, #31
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	400a      	ands	r2, r1
 8002ffa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	b29b      	uxth	r3, r3
 8003008:	4618      	mov	r0, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	3b05      	subs	r3, #5
 8003016:	fa00 f203 	lsl.w	r2, r0, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	635a      	str	r2, [r3, #52]	@ 0x34
 8003022:	e04c      	b.n	80030be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b0c      	cmp	r3, #12
 800302a:	d824      	bhi.n	8003076 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	3b23      	subs	r3, #35	@ 0x23
 800303e:	221f      	movs	r2, #31
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43da      	mvns	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	400a      	ands	r2, r1
 800304c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	b29b      	uxth	r3, r3
 800305a:	4618      	mov	r0, r3
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	3b23      	subs	r3, #35	@ 0x23
 8003068:	fa00 f203 	lsl.w	r2, r0, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30
 8003074:	e023      	b.n	80030be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	3b41      	subs	r3, #65	@ 0x41
 8003088:	221f      	movs	r2, #31
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43da      	mvns	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	400a      	ands	r2, r1
 8003096:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	4618      	mov	r0, r3
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	3b41      	subs	r3, #65	@ 0x41
 80030b2:	fa00 f203 	lsl.w	r2, r0, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030be:	4b22      	ldr	r3, [pc, #136]	@ (8003148 <HAL_ADC_ConfigChannel+0x234>)
 80030c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a21      	ldr	r2, [pc, #132]	@ (800314c <HAL_ADC_ConfigChannel+0x238>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d109      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x1cc>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b12      	cmp	r3, #18
 80030d2:	d105      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a19      	ldr	r2, [pc, #100]	@ (800314c <HAL_ADC_ConfigChannel+0x238>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d123      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x21e>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b10      	cmp	r3, #16
 80030f0:	d003      	beq.n	80030fa <HAL_ADC_ConfigChannel+0x1e6>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b11      	cmp	r3, #17
 80030f8:	d11b      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b10      	cmp	r3, #16
 800310c:	d111      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800310e:	4b10      	ldr	r3, [pc, #64]	@ (8003150 <HAL_ADC_ConfigChannel+0x23c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a10      	ldr	r2, [pc, #64]	@ (8003154 <HAL_ADC_ConfigChannel+0x240>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	0c9a      	lsrs	r2, r3, #18
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003124:	e002      	b.n	800312c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	3b01      	subs	r3, #1
 800312a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f9      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	40012300 	.word	0x40012300
 800314c:	40012000 	.word	0x40012000
 8003150:	2000023c 	.word	0x2000023c
 8003154:	431bde83 	.word	0x431bde83

08003158 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003160:	4b79      	ldr	r3, [pc, #484]	@ (8003348 <ADC_Init+0x1f0>)
 8003162:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	431a      	orrs	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800318c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	021a      	lsls	r2, r3, #8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80031b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6859      	ldr	r1, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6899      	ldr	r1, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ea:	4a58      	ldr	r2, [pc, #352]	@ (800334c <ADC_Init+0x1f4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d022      	beq.n	8003236 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6899      	ldr	r1, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003220:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6899      	ldr	r1, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	e00f      	b.n	8003256 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003244:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003254:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0202 	bic.w	r2, r2, #2
 8003264:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6899      	ldr	r1, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	7e1b      	ldrb	r3, [r3, #24]
 8003270:	005a      	lsls	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01b      	beq.n	80032bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003292:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80032a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6859      	ldr	r1, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	3b01      	subs	r3, #1
 80032b0:	035a      	lsls	r2, r3, #13
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	e007      	b.n	80032cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032ca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80032da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	051a      	lsls	r2, r3, #20
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6899      	ldr	r1, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800330e:	025a      	lsls	r2, r3, #9
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6899      	ldr	r1, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	029a      	lsls	r2, r3, #10
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	609a      	str	r2, [r3, #8]
}
 800333c:	bf00      	nop
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	40012300 	.word	0x40012300
 800334c:	0f000001 	.word	0x0f000001

08003350 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800335c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003366:	2b00      	cmp	r3, #0
 8003368:	d13c      	bne.n	80033e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d12b      	bne.n	80033dc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003388:	2b00      	cmp	r3, #0
 800338a:	d127      	bne.n	80033dc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003392:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003396:	2b00      	cmp	r3, #0
 8003398:	d006      	beq.n	80033a8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d119      	bne.n	80033dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0220 	bic.w	r2, r2, #32
 80033b6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d105      	bne.n	80033dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d4:	f043 0201 	orr.w	r2, r3, #1
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f7ff fd7b 	bl	8002ed8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033e2:	e00e      	b.n	8003402 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f7ff fd85 	bl	8002f00 <HAL_ADC_ErrorCallback>
}
 80033f6:	e004      	b.n	8003402 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	4798      	blx	r3
}
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003416:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f7ff fd67 	bl	8002eec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800341e:	bf00      	nop
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003432:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2240      	movs	r2, #64	@ 0x40
 8003438:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343e:	f043 0204 	orr.w	r2, r3, #4
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f7ff fd5a 	bl	8002f00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800344c:	bf00      	nop
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003464:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <__NVIC_SetPriorityGrouping+0x44>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003470:	4013      	ands	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800347c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003486:	4a04      	ldr	r2, [pc, #16]	@ (8003498 <__NVIC_SetPriorityGrouping+0x44>)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	60d3      	str	r3, [r2, #12]
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034a0:	4b04      	ldr	r3, [pc, #16]	@ (80034b4 <__NVIC_GetPriorityGrouping+0x18>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	0a1b      	lsrs	r3, r3, #8
 80034a6:	f003 0307 	and.w	r3, r3, #7
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	db0b      	blt.n	80034e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	f003 021f 	and.w	r2, r3, #31
 80034d0:	4907      	ldr	r1, [pc, #28]	@ (80034f0 <__NVIC_EnableIRQ+0x38>)
 80034d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	2001      	movs	r0, #1
 80034da:	fa00 f202 	lsl.w	r2, r0, r2
 80034de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	e000e100 	.word	0xe000e100

080034f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	6039      	str	r1, [r7, #0]
 80034fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003504:	2b00      	cmp	r3, #0
 8003506:	db0a      	blt.n	800351e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	b2da      	uxtb	r2, r3
 800350c:	490c      	ldr	r1, [pc, #48]	@ (8003540 <__NVIC_SetPriority+0x4c>)
 800350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003512:	0112      	lsls	r2, r2, #4
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	440b      	add	r3, r1
 8003518:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800351c:	e00a      	b.n	8003534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	b2da      	uxtb	r2, r3
 8003522:	4908      	ldr	r1, [pc, #32]	@ (8003544 <__NVIC_SetPriority+0x50>)
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	3b04      	subs	r3, #4
 800352c:	0112      	lsls	r2, r2, #4
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	440b      	add	r3, r1
 8003532:	761a      	strb	r2, [r3, #24]
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	e000e100 	.word	0xe000e100
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003548:	b480      	push	{r7}
 800354a:	b089      	sub	sp, #36	@ 0x24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f1c3 0307 	rsb	r3, r3, #7
 8003562:	2b04      	cmp	r3, #4
 8003564:	bf28      	it	cs
 8003566:	2304      	movcs	r3, #4
 8003568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	3304      	adds	r3, #4
 800356e:	2b06      	cmp	r3, #6
 8003570:	d902      	bls.n	8003578 <NVIC_EncodePriority+0x30>
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3b03      	subs	r3, #3
 8003576:	e000      	b.n	800357a <NVIC_EncodePriority+0x32>
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800357c:	f04f 32ff 	mov.w	r2, #4294967295
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43da      	mvns	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	401a      	ands	r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003590:	f04f 31ff 	mov.w	r1, #4294967295
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	fa01 f303 	lsl.w	r3, r1, r3
 800359a:	43d9      	mvns	r1, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a0:	4313      	orrs	r3, r2
         );
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3724      	adds	r7, #36	@ 0x24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035c0:	d301      	bcc.n	80035c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035c2:	2301      	movs	r3, #1
 80035c4:	e00f      	b.n	80035e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035c6:	4a0a      	ldr	r2, [pc, #40]	@ (80035f0 <SysTick_Config+0x40>)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ce:	210f      	movs	r1, #15
 80035d0:	f04f 30ff 	mov.w	r0, #4294967295
 80035d4:	f7ff ff8e 	bl	80034f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035d8:	4b05      	ldr	r3, [pc, #20]	@ (80035f0 <SysTick_Config+0x40>)
 80035da:	2200      	movs	r2, #0
 80035dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035de:	4b04      	ldr	r3, [pc, #16]	@ (80035f0 <SysTick_Config+0x40>)
 80035e0:	2207      	movs	r2, #7
 80035e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	e000e010 	.word	0xe000e010

080035f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff ff29 	bl	8003454 <__NVIC_SetPriorityGrouping>
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800360a:	b580      	push	{r7, lr}
 800360c:	b086      	sub	sp, #24
 800360e:	af00      	add	r7, sp, #0
 8003610:	4603      	mov	r3, r0
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
 8003616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800361c:	f7ff ff3e 	bl	800349c <__NVIC_GetPriorityGrouping>
 8003620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	6978      	ldr	r0, [r7, #20]
 8003628:	f7ff ff8e 	bl	8003548 <NVIC_EncodePriority>
 800362c:	4602      	mov	r2, r0
 800362e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003632:	4611      	mov	r1, r2
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff ff5d 	bl	80034f4 <__NVIC_SetPriority>
}
 800363a:	bf00      	nop
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	4603      	mov	r3, r0
 800364a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800364c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ff31 	bl	80034b8 <__NVIC_EnableIRQ>
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff ffa2 	bl	80035b0 <SysTick_Config>
 800366c:	4603      	mov	r3, r0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003684:	f7ff faa4 	bl	8002bd0 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e099      	b.n	80037c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036b4:	e00f      	b.n	80036d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036b6:	f7ff fa8b 	bl	8002bd0 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b05      	cmp	r3, #5
 80036c2:	d908      	bls.n	80036d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2203      	movs	r2, #3
 80036ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e078      	b.n	80037c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e8      	bne.n	80036b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	4b38      	ldr	r3, [pc, #224]	@ (80037d0 <HAL_DMA_Init+0x158>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003702:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800371a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	2b04      	cmp	r3, #4
 800372e:	d107      	bne.n	8003740 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003738:	4313      	orrs	r3, r2
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f023 0307 	bic.w	r3, r3, #7
 8003756:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	4313      	orrs	r3, r2
 8003760:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	2b04      	cmp	r3, #4
 8003768:	d117      	bne.n	800379a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00e      	beq.n	800379a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 fb01 	bl	8003d84 <DMA_CheckFifoParam>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2240      	movs	r2, #64	@ 0x40
 800378c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003796:	2301      	movs	r3, #1
 8003798:	e016      	b.n	80037c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fab8 	bl	8003d18 <DMA_CalcBaseAndBitshift>
 80037a8:	4603      	mov	r3, r0
 80037aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b0:	223f      	movs	r2, #63	@ 0x3f
 80037b2:	409a      	lsls	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	f010803f 	.word	0xf010803f

080037d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_DMA_Start_IT+0x26>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e040      	b.n	800387c <HAL_DMA_Start_IT+0xa8>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	d12f      	bne.n	800386e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2202      	movs	r2, #2
 8003812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 fa4a 	bl	8003cbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382c:	223f      	movs	r2, #63	@ 0x3f
 800382e:	409a      	lsls	r2, r3
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0216 	orr.w	r2, r2, #22
 8003842:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	d007      	beq.n	800385c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0208 	orr.w	r2, r2, #8
 800385a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	e005      	b.n	800387a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003876:	2302      	movs	r3, #2
 8003878:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800387a:	7dfb      	ldrb	r3, [r7, #23]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003890:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003892:	f7ff f99d 	bl	8002bd0 <HAL_GetTick>
 8003896:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d008      	beq.n	80038b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2280      	movs	r2, #128	@ 0x80
 80038a8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e052      	b.n	800395c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0216 	bic.w	r2, r2, #22
 80038c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695a      	ldr	r2, [r3, #20]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d103      	bne.n	80038e6 <HAL_DMA_Abort+0x62>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0208 	bic.w	r2, r2, #8
 80038f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003906:	e013      	b.n	8003930 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003908:	f7ff f962 	bl	8002bd0 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b05      	cmp	r3, #5
 8003914:	d90c      	bls.n	8003930 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2203      	movs	r2, #3
 8003920:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e015      	b.n	800395c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e4      	bne.n	8003908 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003942:	223f      	movs	r2, #63	@ 0x3f
 8003944:	409a      	lsls	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d004      	beq.n	8003982 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2280      	movs	r2, #128	@ 0x80
 800397c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e00c      	b.n	800399c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2205      	movs	r2, #5
 8003986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039b4:	4b8e      	ldr	r3, [pc, #568]	@ (8003bf0 <HAL_DMA_IRQHandler+0x248>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a8e      	ldr	r2, [pc, #568]	@ (8003bf4 <HAL_DMA_IRQHandler+0x24c>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	0a9b      	lsrs	r3, r3, #10
 80039c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d2:	2208      	movs	r2, #8
 80039d4:	409a      	lsls	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d01a      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d013      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0204 	bic.w	r2, r2, #4
 80039fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a00:	2208      	movs	r2, #8
 8003a02:	409a      	lsls	r2, r3
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0c:	f043 0201 	orr.w	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a18:	2201      	movs	r2, #1
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d012      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a36:	2201      	movs	r2, #1
 8003a38:	409a      	lsls	r2, r3
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a42:	f043 0202 	orr.w	r2, r3, #2
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4e:	2204      	movs	r2, #4
 8003a50:	409a      	lsls	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d012      	beq.n	8003a80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00b      	beq.n	8003a80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a78:	f043 0204 	orr.w	r2, r3, #4
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a84:	2210      	movs	r2, #16
 8003a86:	409a      	lsls	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d043      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d03c      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa2:	2210      	movs	r2, #16
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d018      	beq.n	8003aea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d108      	bne.n	8003ad8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d024      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	4798      	blx	r3
 8003ad6:	e01f      	b.n	8003b18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01b      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4798      	blx	r3
 8003ae8:	e016      	b.n	8003b18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d107      	bne.n	8003b08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0208 	bic.w	r2, r2, #8
 8003b06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 808f 	beq.w	8003c48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8087 	beq.w	8003c48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b3e:	2220      	movs	r2, #32
 8003b40:	409a      	lsls	r2, r3
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b05      	cmp	r3, #5
 8003b50:	d136      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0216 	bic.w	r2, r2, #22
 8003b60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d103      	bne.n	8003b82 <HAL_DMA_IRQHandler+0x1da>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d007      	beq.n	8003b92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0208 	bic.w	r2, r2, #8
 8003b90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b96:	223f      	movs	r2, #63	@ 0x3f
 8003b98:	409a      	lsls	r2, r3
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d07e      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4798      	blx	r3
        }
        return;
 8003bbe:	e079      	b.n	8003cb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d01d      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10d      	bne.n	8003bf8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d031      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	4798      	blx	r3
 8003bec:	e02c      	b.n	8003c48 <HAL_DMA_IRQHandler+0x2a0>
 8003bee:	bf00      	nop
 8003bf0:	2000023c 	.word	0x2000023c
 8003bf4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d023      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	4798      	blx	r3
 8003c08:	e01e      	b.n	8003c48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10f      	bne.n	8003c38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0210 	bic.w	r2, r2, #16
 8003c26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d032      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d022      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2205      	movs	r2, #5
 8003c60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	3301      	adds	r3, #1
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d307      	bcc.n	8003c90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f2      	bne.n	8003c74 <HAL_DMA_IRQHandler+0x2cc>
 8003c8e:	e000      	b.n	8003c92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d005      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
 8003cb2:	e000      	b.n	8003cb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cb4:	bf00      	nop
    }
  }
}
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003cd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b40      	cmp	r3, #64	@ 0x40
 8003ce8:	d108      	bne.n	8003cfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cfa:	e007      	b.n	8003d0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	60da      	str	r2, [r3, #12]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	3b10      	subs	r3, #16
 8003d28:	4a14      	ldr	r2, [pc, #80]	@ (8003d7c <DMA_CalcBaseAndBitshift+0x64>)
 8003d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d32:	4a13      	ldr	r2, [pc, #76]	@ (8003d80 <DMA_CalcBaseAndBitshift+0x68>)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4413      	add	r3, r2
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d909      	bls.n	8003d5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d4e:	f023 0303 	bic.w	r3, r3, #3
 8003d52:	1d1a      	adds	r2, r3, #4
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d58:	e007      	b.n	8003d6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d62:	f023 0303 	bic.w	r3, r3, #3
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	aaaaaaab 	.word	0xaaaaaaab
 8003d80:	0800a8d4 	.word	0x0800a8d4

08003d84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d11f      	bne.n	8003dde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d856      	bhi.n	8003e52 <DMA_CheckFifoParam+0xce>
 8003da4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dac <DMA_CheckFifoParam+0x28>)
 8003da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003daa:	bf00      	nop
 8003dac:	08003dbd 	.word	0x08003dbd
 8003db0:	08003dcf 	.word	0x08003dcf
 8003db4:	08003dbd 	.word	0x08003dbd
 8003db8:	08003e53 	.word	0x08003e53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d046      	beq.n	8003e56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dcc:	e043      	b.n	8003e56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003dd6:	d140      	bne.n	8003e5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ddc:	e03d      	b.n	8003e5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003de6:	d121      	bne.n	8003e2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d837      	bhi.n	8003e5e <DMA_CheckFifoParam+0xda>
 8003dee:	a201      	add	r2, pc, #4	@ (adr r2, 8003df4 <DMA_CheckFifoParam+0x70>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e05 	.word	0x08003e05
 8003df8:	08003e0b 	.word	0x08003e0b
 8003dfc:	08003e05 	.word	0x08003e05
 8003e00:	08003e1d 	.word	0x08003e1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
      break;
 8003e08:	e030      	b.n	8003e6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d025      	beq.n	8003e62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e1a:	e022      	b.n	8003e62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e20:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e24:	d11f      	bne.n	8003e66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e2a:	e01c      	b.n	8003e66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d903      	bls.n	8003e3a <DMA_CheckFifoParam+0xb6>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d003      	beq.n	8003e40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e38:	e018      	b.n	8003e6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e3e:	e015      	b.n	8003e6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00e      	beq.n	8003e6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e50:	e00b      	b.n	8003e6a <DMA_CheckFifoParam+0xe6>
      break;
 8003e52:	bf00      	nop
 8003e54:	e00a      	b.n	8003e6c <DMA_CheckFifoParam+0xe8>
      break;
 8003e56:	bf00      	nop
 8003e58:	e008      	b.n	8003e6c <DMA_CheckFifoParam+0xe8>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e006      	b.n	8003e6c <DMA_CheckFifoParam+0xe8>
      break;
 8003e5e:	bf00      	nop
 8003e60:	e004      	b.n	8003e6c <DMA_CheckFifoParam+0xe8>
      break;
 8003e62:	bf00      	nop
 8003e64:	e002      	b.n	8003e6c <DMA_CheckFifoParam+0xe8>
      break;   
 8003e66:	bf00      	nop
 8003e68:	e000      	b.n	8003e6c <DMA_CheckFifoParam+0xe8>
      break;
 8003e6a:	bf00      	nop
    }
  } 
  
  return status; 
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop

08003e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b089      	sub	sp, #36	@ 0x24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
 8003e96:	e16b      	b.n	8004170 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e98:	2201      	movs	r2, #1
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	f040 815a 	bne.w	800416a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d005      	beq.n	8003ece <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d130      	bne.n	8003f30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	2203      	movs	r2, #3
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f04:	2201      	movs	r2, #1
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4013      	ands	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	f003 0201 	and.w	r2, r3, #1
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	d017      	beq.n	8003f6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	2203      	movs	r2, #3
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4013      	ands	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 0303 	and.w	r3, r3, #3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d123      	bne.n	8003fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	08da      	lsrs	r2, r3, #3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3208      	adds	r2, #8
 8003f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	220f      	movs	r2, #15
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	691a      	ldr	r2, [r3, #16]
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	08da      	lsrs	r2, r3, #3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3208      	adds	r2, #8
 8003fba:	69b9      	ldr	r1, [r7, #24]
 8003fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	2203      	movs	r2, #3
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f003 0203 	and.w	r2, r3, #3
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80b4 	beq.w	800416a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	4b60      	ldr	r3, [pc, #384]	@ (8004188 <HAL_GPIO_Init+0x30c>)
 8004008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400a:	4a5f      	ldr	r2, [pc, #380]	@ (8004188 <HAL_GPIO_Init+0x30c>)
 800400c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004010:	6453      	str	r3, [r2, #68]	@ 0x44
 8004012:	4b5d      	ldr	r3, [pc, #372]	@ (8004188 <HAL_GPIO_Init+0x30c>)
 8004014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800401e:	4a5b      	ldr	r2, [pc, #364]	@ (800418c <HAL_GPIO_Init+0x310>)
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	089b      	lsrs	r3, r3, #2
 8004024:	3302      	adds	r3, #2
 8004026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800402a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	220f      	movs	r2, #15
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43db      	mvns	r3, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4013      	ands	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a52      	ldr	r2, [pc, #328]	@ (8004190 <HAL_GPIO_Init+0x314>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d02b      	beq.n	80040a2 <HAL_GPIO_Init+0x226>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a51      	ldr	r2, [pc, #324]	@ (8004194 <HAL_GPIO_Init+0x318>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d025      	beq.n	800409e <HAL_GPIO_Init+0x222>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a50      	ldr	r2, [pc, #320]	@ (8004198 <HAL_GPIO_Init+0x31c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d01f      	beq.n	800409a <HAL_GPIO_Init+0x21e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a4f      	ldr	r2, [pc, #316]	@ (800419c <HAL_GPIO_Init+0x320>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d019      	beq.n	8004096 <HAL_GPIO_Init+0x21a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a4e      	ldr	r2, [pc, #312]	@ (80041a0 <HAL_GPIO_Init+0x324>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d013      	beq.n	8004092 <HAL_GPIO_Init+0x216>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a4d      	ldr	r2, [pc, #308]	@ (80041a4 <HAL_GPIO_Init+0x328>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00d      	beq.n	800408e <HAL_GPIO_Init+0x212>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4c      	ldr	r2, [pc, #304]	@ (80041a8 <HAL_GPIO_Init+0x32c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d007      	beq.n	800408a <HAL_GPIO_Init+0x20e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a4b      	ldr	r2, [pc, #300]	@ (80041ac <HAL_GPIO_Init+0x330>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d101      	bne.n	8004086 <HAL_GPIO_Init+0x20a>
 8004082:	2307      	movs	r3, #7
 8004084:	e00e      	b.n	80040a4 <HAL_GPIO_Init+0x228>
 8004086:	2308      	movs	r3, #8
 8004088:	e00c      	b.n	80040a4 <HAL_GPIO_Init+0x228>
 800408a:	2306      	movs	r3, #6
 800408c:	e00a      	b.n	80040a4 <HAL_GPIO_Init+0x228>
 800408e:	2305      	movs	r3, #5
 8004090:	e008      	b.n	80040a4 <HAL_GPIO_Init+0x228>
 8004092:	2304      	movs	r3, #4
 8004094:	e006      	b.n	80040a4 <HAL_GPIO_Init+0x228>
 8004096:	2303      	movs	r3, #3
 8004098:	e004      	b.n	80040a4 <HAL_GPIO_Init+0x228>
 800409a:	2302      	movs	r3, #2
 800409c:	e002      	b.n	80040a4 <HAL_GPIO_Init+0x228>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <HAL_GPIO_Init+0x228>
 80040a2:	2300      	movs	r3, #0
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	f002 0203 	and.w	r2, r2, #3
 80040aa:	0092      	lsls	r2, r2, #2
 80040ac:	4093      	lsls	r3, r2
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040b4:	4935      	ldr	r1, [pc, #212]	@ (800418c <HAL_GPIO_Init+0x310>)
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	089b      	lsrs	r3, r3, #2
 80040ba:	3302      	adds	r3, #2
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040c2:	4b3b      	ldr	r3, [pc, #236]	@ (80041b0 <HAL_GPIO_Init+0x334>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040e6:	4a32      	ldr	r2, [pc, #200]	@ (80041b0 <HAL_GPIO_Init+0x334>)
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040ec:	4b30      	ldr	r3, [pc, #192]	@ (80041b0 <HAL_GPIO_Init+0x334>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	43db      	mvns	r3, r3
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4013      	ands	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004110:	4a27      	ldr	r2, [pc, #156]	@ (80041b0 <HAL_GPIO_Init+0x334>)
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004116:	4b26      	ldr	r3, [pc, #152]	@ (80041b0 <HAL_GPIO_Init+0x334>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	43db      	mvns	r3, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4013      	ands	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800413a:	4a1d      	ldr	r2, [pc, #116]	@ (80041b0 <HAL_GPIO_Init+0x334>)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004140:	4b1b      	ldr	r3, [pc, #108]	@ (80041b0 <HAL_GPIO_Init+0x334>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	43db      	mvns	r3, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4013      	ands	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004164:	4a12      	ldr	r2, [pc, #72]	@ (80041b0 <HAL_GPIO_Init+0x334>)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	3301      	adds	r3, #1
 800416e:	61fb      	str	r3, [r7, #28]
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	2b0f      	cmp	r3, #15
 8004174:	f67f ae90 	bls.w	8003e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	3724      	adds	r7, #36	@ 0x24
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40023800 	.word	0x40023800
 800418c:	40013800 	.word	0x40013800
 8004190:	40020000 	.word	0x40020000
 8004194:	40020400 	.word	0x40020400
 8004198:	40020800 	.word	0x40020800
 800419c:	40020c00 	.word	0x40020c00
 80041a0:	40021000 	.word	0x40021000
 80041a4:	40021400 	.word	0x40021400
 80041a8:	40021800 	.word	0x40021800
 80041ac:	40021c00 	.word	0x40021c00
 80041b0:	40013c00 	.word	0x40013c00

080041b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	807b      	strh	r3, [r7, #2]
 80041c0:	4613      	mov	r3, r2
 80041c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041c4:	787b      	ldrb	r3, [r7, #1]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ca:	887a      	ldrh	r2, [r7, #2]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041d0:	e003      	b.n	80041da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041d2:	887b      	ldrh	r3, [r7, #2]
 80041d4:	041a      	lsls	r2, r3, #16
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	619a      	str	r2, [r3, #24]
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e267      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d075      	beq.n	80042f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004206:	4b88      	ldr	r3, [pc, #544]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 030c 	and.w	r3, r3, #12
 800420e:	2b04      	cmp	r3, #4
 8004210:	d00c      	beq.n	800422c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004212:	4b85      	ldr	r3, [pc, #532]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800421a:	2b08      	cmp	r3, #8
 800421c:	d112      	bne.n	8004244 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800421e:	4b82      	ldr	r3, [pc, #520]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004226:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800422a:	d10b      	bne.n	8004244 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422c:	4b7e      	ldr	r3, [pc, #504]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d05b      	beq.n	80042f0 <HAL_RCC_OscConfig+0x108>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d157      	bne.n	80042f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e242      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800424c:	d106      	bne.n	800425c <HAL_RCC_OscConfig+0x74>
 800424e:	4b76      	ldr	r3, [pc, #472]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a75      	ldr	r2, [pc, #468]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	e01d      	b.n	8004298 <HAL_RCC_OscConfig+0xb0>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004264:	d10c      	bne.n	8004280 <HAL_RCC_OscConfig+0x98>
 8004266:	4b70      	ldr	r3, [pc, #448]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a6f      	ldr	r2, [pc, #444]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 800426c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	4b6d      	ldr	r3, [pc, #436]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a6c      	ldr	r2, [pc, #432]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	e00b      	b.n	8004298 <HAL_RCC_OscConfig+0xb0>
 8004280:	4b69      	ldr	r3, [pc, #420]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a68      	ldr	r2, [pc, #416]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	4b66      	ldr	r3, [pc, #408]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a65      	ldr	r2, [pc, #404]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004292:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d013      	beq.n	80042c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a0:	f7fe fc96 	bl	8002bd0 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fe fc92 	bl	8002bd0 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	@ 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e207      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0xc0>
 80042c6:	e014      	b.n	80042f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c8:	f7fe fc82 	bl	8002bd0 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d0:	f7fe fc7e 	bl	8002bd0 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b64      	cmp	r3, #100	@ 0x64
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e1f3      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e2:	4b51      	ldr	r3, [pc, #324]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f0      	bne.n	80042d0 <HAL_RCC_OscConfig+0xe8>
 80042ee:	e000      	b.n	80042f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d063      	beq.n	80043c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00b      	beq.n	8004322 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800430a:	4b47      	ldr	r3, [pc, #284]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004312:	2b08      	cmp	r3, #8
 8004314:	d11c      	bne.n	8004350 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004316:	4b44      	ldr	r3, [pc, #272]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d116      	bne.n	8004350 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004322:	4b41      	ldr	r3, [pc, #260]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <HAL_RCC_OscConfig+0x152>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d001      	beq.n	800433a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e1c7      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433a:	4b3b      	ldr	r3, [pc, #236]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	4937      	ldr	r1, [pc, #220]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 800434a:	4313      	orrs	r3, r2
 800434c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800434e:	e03a      	b.n	80043c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d020      	beq.n	800439a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004358:	4b34      	ldr	r3, [pc, #208]	@ (800442c <HAL_RCC_OscConfig+0x244>)
 800435a:	2201      	movs	r2, #1
 800435c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435e:	f7fe fc37 	bl	8002bd0 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004366:	f7fe fc33 	bl	8002bd0 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e1a8      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004378:	4b2b      	ldr	r3, [pc, #172]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004384:	4b28      	ldr	r3, [pc, #160]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	4925      	ldr	r1, [pc, #148]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004394:	4313      	orrs	r3, r2
 8004396:	600b      	str	r3, [r1, #0]
 8004398:	e015      	b.n	80043c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800439a:	4b24      	ldr	r3, [pc, #144]	@ (800442c <HAL_RCC_OscConfig+0x244>)
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7fe fc16 	bl	8002bd0 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a8:	f7fe fc12 	bl	8002bd0 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e187      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d036      	beq.n	8004440 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d016      	beq.n	8004408 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043da:	4b15      	ldr	r3, [pc, #84]	@ (8004430 <HAL_RCC_OscConfig+0x248>)
 80043dc:	2201      	movs	r2, #1
 80043de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e0:	f7fe fbf6 	bl	8002bd0 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e8:	f7fe fbf2 	bl	8002bd0 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e167      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 80043fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0x200>
 8004406:	e01b      	b.n	8004440 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004408:	4b09      	ldr	r3, [pc, #36]	@ (8004430 <HAL_RCC_OscConfig+0x248>)
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440e:	f7fe fbdf 	bl	8002bd0 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004414:	e00e      	b.n	8004434 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004416:	f7fe fbdb 	bl	8002bd0 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d907      	bls.n	8004434 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e150      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
 8004428:	40023800 	.word	0x40023800
 800442c:	42470000 	.word	0x42470000
 8004430:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004434:	4b88      	ldr	r3, [pc, #544]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1ea      	bne.n	8004416 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 8097 	beq.w	800457c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444e:	2300      	movs	r3, #0
 8004450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004452:	4b81      	ldr	r3, [pc, #516]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10f      	bne.n	800447e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800445e:	2300      	movs	r3, #0
 8004460:	60bb      	str	r3, [r7, #8]
 8004462:	4b7d      	ldr	r3, [pc, #500]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004466:	4a7c      	ldr	r2, [pc, #496]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800446c:	6413      	str	r3, [r2, #64]	@ 0x40
 800446e:	4b7a      	ldr	r3, [pc, #488]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004476:	60bb      	str	r3, [r7, #8]
 8004478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800447a:	2301      	movs	r3, #1
 800447c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447e:	4b77      	ldr	r3, [pc, #476]	@ (800465c <HAL_RCC_OscConfig+0x474>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004486:	2b00      	cmp	r3, #0
 8004488:	d118      	bne.n	80044bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800448a:	4b74      	ldr	r3, [pc, #464]	@ (800465c <HAL_RCC_OscConfig+0x474>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a73      	ldr	r2, [pc, #460]	@ (800465c <HAL_RCC_OscConfig+0x474>)
 8004490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004496:	f7fe fb9b 	bl	8002bd0 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449e:	f7fe fb97 	bl	8002bd0 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e10c      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b0:	4b6a      	ldr	r3, [pc, #424]	@ (800465c <HAL_RCC_OscConfig+0x474>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d106      	bne.n	80044d2 <HAL_RCC_OscConfig+0x2ea>
 80044c4:	4b64      	ldr	r3, [pc, #400]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80044c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c8:	4a63      	ldr	r2, [pc, #396]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80044d0:	e01c      	b.n	800450c <HAL_RCC_OscConfig+0x324>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b05      	cmp	r3, #5
 80044d8:	d10c      	bne.n	80044f4 <HAL_RCC_OscConfig+0x30c>
 80044da:	4b5f      	ldr	r3, [pc, #380]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80044dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044de:	4a5e      	ldr	r2, [pc, #376]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80044e0:	f043 0304 	orr.w	r3, r3, #4
 80044e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80044e6:	4b5c      	ldr	r3, [pc, #368]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f2:	e00b      	b.n	800450c <HAL_RCC_OscConfig+0x324>
 80044f4:	4b58      	ldr	r3, [pc, #352]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80044f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f8:	4a57      	ldr	r2, [pc, #348]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80044fa:	f023 0301 	bic.w	r3, r3, #1
 80044fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004500:	4b55      	ldr	r3, [pc, #340]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004504:	4a54      	ldr	r2, [pc, #336]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004506:	f023 0304 	bic.w	r3, r3, #4
 800450a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d015      	beq.n	8004540 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004514:	f7fe fb5c 	bl	8002bd0 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451a:	e00a      	b.n	8004532 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451c:	f7fe fb58 	bl	8002bd0 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800452a:	4293      	cmp	r3, r2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e0cb      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004532:	4b49      	ldr	r3, [pc, #292]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0ee      	beq.n	800451c <HAL_RCC_OscConfig+0x334>
 800453e:	e014      	b.n	800456a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004540:	f7fe fb46 	bl	8002bd0 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004546:	e00a      	b.n	800455e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004548:	f7fe fb42 	bl	8002bd0 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e0b5      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800455e:	4b3e      	ldr	r3, [pc, #248]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1ee      	bne.n	8004548 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800456a:	7dfb      	ldrb	r3, [r7, #23]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d105      	bne.n	800457c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004570:	4b39      	ldr	r3, [pc, #228]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004574:	4a38      	ldr	r2, [pc, #224]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004576:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800457a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 80a1 	beq.w	80046c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004586:	4b34      	ldr	r3, [pc, #208]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 030c 	and.w	r3, r3, #12
 800458e:	2b08      	cmp	r3, #8
 8004590:	d05c      	beq.n	800464c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d141      	bne.n	800461e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459a:	4b31      	ldr	r3, [pc, #196]	@ (8004660 <HAL_RCC_OscConfig+0x478>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a0:	f7fe fb16 	bl	8002bd0 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a8:	f7fe fb12 	bl	8002bd0 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e087      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ba:	4b27      	ldr	r3, [pc, #156]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69da      	ldr	r2, [r3, #28]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	019b      	lsls	r3, r3, #6
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045dc:	085b      	lsrs	r3, r3, #1
 80045de:	3b01      	subs	r3, #1
 80045e0:	041b      	lsls	r3, r3, #16
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e8:	061b      	lsls	r3, r3, #24
 80045ea:	491b      	ldr	r1, [pc, #108]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004660 <HAL_RCC_OscConfig+0x478>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f6:	f7fe faeb 	bl	8002bd0 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045fe:	f7fe fae7 	bl	8002bd0 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e05c      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004610:	4b11      	ldr	r3, [pc, #68]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x416>
 800461c:	e054      	b.n	80046c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461e:	4b10      	ldr	r3, [pc, #64]	@ (8004660 <HAL_RCC_OscConfig+0x478>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7fe fad4 	bl	8002bd0 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800462c:	f7fe fad0 	bl	8002bd0 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e045      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463e:	4b06      	ldr	r3, [pc, #24]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0x444>
 800464a:	e03d      	b.n	80046c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d107      	bne.n	8004664 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e038      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
 8004658:	40023800 	.word	0x40023800
 800465c:	40007000 	.word	0x40007000
 8004660:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004664:	4b1b      	ldr	r3, [pc, #108]	@ (80046d4 <HAL_RCC_OscConfig+0x4ec>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d028      	beq.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800467c:	429a      	cmp	r2, r3
 800467e:	d121      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d11a      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004694:	4013      	ands	r3, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800469a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800469c:	4293      	cmp	r3, r2
 800469e:	d111      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046aa:	085b      	lsrs	r3, r3, #1
 80046ac:	3b01      	subs	r3, #1
 80046ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d107      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d001      	beq.n	80046c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40023800 	.word	0x40023800

080046d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0cc      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046ec:	4b68      	ldr	r3, [pc, #416]	@ (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d90c      	bls.n	8004714 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fa:	4b65      	ldr	r3, [pc, #404]	@ (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004702:	4b63      	ldr	r3, [pc, #396]	@ (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d001      	beq.n	8004714 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0b8      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d020      	beq.n	8004762 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800472c:	4b59      	ldr	r3, [pc, #356]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	4a58      	ldr	r2, [pc, #352]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004736:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004744:	4b53      	ldr	r3, [pc, #332]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	4a52      	ldr	r2, [pc, #328]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800474e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004750:	4b50      	ldr	r3, [pc, #320]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	494d      	ldr	r1, [pc, #308]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	4313      	orrs	r3, r2
 8004760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d044      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d107      	bne.n	8004786 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004776:	4b47      	ldr	r3, [pc, #284]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d119      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e07f      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d003      	beq.n	8004796 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004792:	2b03      	cmp	r3, #3
 8004794:	d107      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004796:	4b3f      	ldr	r3, [pc, #252]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e06f      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e067      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047b6:	4b37      	ldr	r3, [pc, #220]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f023 0203 	bic.w	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	4934      	ldr	r1, [pc, #208]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047c8:	f7fe fa02 	bl	8002bd0 <HAL_GetTick>
 80047cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ce:	e00a      	b.n	80047e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d0:	f7fe f9fe 	bl	8002bd0 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047de:	4293      	cmp	r3, r2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e04f      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 020c 	and.w	r2, r3, #12
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d1eb      	bne.n	80047d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047f8:	4b25      	ldr	r3, [pc, #148]	@ (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d20c      	bcs.n	8004820 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004806:	4b22      	ldr	r3, [pc, #136]	@ (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800480e:	4b20      	ldr	r3, [pc, #128]	@ (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d001      	beq.n	8004820 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e032      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800482c:	4b19      	ldr	r3, [pc, #100]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	4916      	ldr	r1, [pc, #88]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	4313      	orrs	r3, r2
 800483c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d009      	beq.n	800485e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800484a:	4b12      	ldr	r3, [pc, #72]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	490e      	ldr	r1, [pc, #56]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	4313      	orrs	r3, r2
 800485c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800485e:	f000 f821 	bl	80048a4 <HAL_RCC_GetSysClockFreq>
 8004862:	4602      	mov	r2, r0
 8004864:	4b0b      	ldr	r3, [pc, #44]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	091b      	lsrs	r3, r3, #4
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	490a      	ldr	r1, [pc, #40]	@ (8004898 <HAL_RCC_ClockConfig+0x1c0>)
 8004870:	5ccb      	ldrb	r3, [r1, r3]
 8004872:	fa22 f303 	lsr.w	r3, r2, r3
 8004876:	4a09      	ldr	r2, [pc, #36]	@ (800489c <HAL_RCC_ClockConfig+0x1c4>)
 8004878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800487a:	4b09      	ldr	r3, [pc, #36]	@ (80048a0 <HAL_RCC_ClockConfig+0x1c8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f7fe f962 	bl	8002b48 <HAL_InitTick>

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40023c00 	.word	0x40023c00
 8004894:	40023800 	.word	0x40023800
 8004898:	0800a8bc 	.word	0x0800a8bc
 800489c:	2000023c 	.word	0x2000023c
 80048a0:	20000240 	.word	0x20000240

080048a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048a8:	b090      	sub	sp, #64	@ 0x40
 80048aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048bc:	4b59      	ldr	r3, [pc, #356]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x180>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 030c 	and.w	r3, r3, #12
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d00d      	beq.n	80048e4 <HAL_RCC_GetSysClockFreq+0x40>
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	f200 80a1 	bhi.w	8004a10 <HAL_RCC_GetSysClockFreq+0x16c>
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_RCC_GetSysClockFreq+0x34>
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d003      	beq.n	80048de <HAL_RCC_GetSysClockFreq+0x3a>
 80048d6:	e09b      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048d8:	4b53      	ldr	r3, [pc, #332]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x184>)
 80048da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048dc:	e09b      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048de:	4b53      	ldr	r3, [pc, #332]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x188>)
 80048e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048e2:	e098      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x180>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ee:	4b4d      	ldr	r3, [pc, #308]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x180>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d028      	beq.n	800494c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x180>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	099b      	lsrs	r3, r3, #6
 8004900:	2200      	movs	r2, #0
 8004902:	623b      	str	r3, [r7, #32]
 8004904:	627a      	str	r2, [r7, #36]	@ 0x24
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800490c:	2100      	movs	r1, #0
 800490e:	4b47      	ldr	r3, [pc, #284]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x188>)
 8004910:	fb03 f201 	mul.w	r2, r3, r1
 8004914:	2300      	movs	r3, #0
 8004916:	fb00 f303 	mul.w	r3, r0, r3
 800491a:	4413      	add	r3, r2
 800491c:	4a43      	ldr	r2, [pc, #268]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x188>)
 800491e:	fba0 1202 	umull	r1, r2, r0, r2
 8004922:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004924:	460a      	mov	r2, r1
 8004926:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004928:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800492a:	4413      	add	r3, r2
 800492c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800492e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004930:	2200      	movs	r2, #0
 8004932:	61bb      	str	r3, [r7, #24]
 8004934:	61fa      	str	r2, [r7, #28]
 8004936:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800493a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800493e:	f7fb fc97 	bl	8000270 <__aeabi_uldivmod>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4613      	mov	r3, r2
 8004948:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800494a:	e053      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800494c:	4b35      	ldr	r3, [pc, #212]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x180>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	099b      	lsrs	r3, r3, #6
 8004952:	2200      	movs	r2, #0
 8004954:	613b      	str	r3, [r7, #16]
 8004956:	617a      	str	r2, [r7, #20]
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800495e:	f04f 0b00 	mov.w	fp, #0
 8004962:	4652      	mov	r2, sl
 8004964:	465b      	mov	r3, fp
 8004966:	f04f 0000 	mov.w	r0, #0
 800496a:	f04f 0100 	mov.w	r1, #0
 800496e:	0159      	lsls	r1, r3, #5
 8004970:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004974:	0150      	lsls	r0, r2, #5
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	ebb2 080a 	subs.w	r8, r2, sl
 800497e:	eb63 090b 	sbc.w	r9, r3, fp
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800498e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004992:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004996:	ebb2 0408 	subs.w	r4, r2, r8
 800499a:	eb63 0509 	sbc.w	r5, r3, r9
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	00eb      	lsls	r3, r5, #3
 80049a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ac:	00e2      	lsls	r2, r4, #3
 80049ae:	4614      	mov	r4, r2
 80049b0:	461d      	mov	r5, r3
 80049b2:	eb14 030a 	adds.w	r3, r4, sl
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	eb45 030b 	adc.w	r3, r5, fp
 80049bc:	607b      	str	r3, [r7, #4]
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049ca:	4629      	mov	r1, r5
 80049cc:	028b      	lsls	r3, r1, #10
 80049ce:	4621      	mov	r1, r4
 80049d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049d4:	4621      	mov	r1, r4
 80049d6:	028a      	lsls	r2, r1, #10
 80049d8:	4610      	mov	r0, r2
 80049da:	4619      	mov	r1, r3
 80049dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049de:	2200      	movs	r2, #0
 80049e0:	60bb      	str	r3, [r7, #8]
 80049e2:	60fa      	str	r2, [r7, #12]
 80049e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049e8:	f7fb fc42 	bl	8000270 <__aeabi_uldivmod>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4613      	mov	r3, r2
 80049f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80049f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x180>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	3301      	adds	r3, #1
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004a04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a0e:	e002      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a10:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3740      	adds	r7, #64	@ 0x40
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a22:	bf00      	nop
 8004a24:	40023800 	.word	0x40023800
 8004a28:	00f42400 	.word	0x00f42400
 8004a2c:	017d7840 	.word	0x017d7840

08004a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a34:	4b03      	ldr	r3, [pc, #12]	@ (8004a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a36:	681b      	ldr	r3, [r3, #0]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	2000023c 	.word	0x2000023c

08004a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a4c:	f7ff fff0 	bl	8004a30 <HAL_RCC_GetHCLKFreq>
 8004a50:	4602      	mov	r2, r0
 8004a52:	4b05      	ldr	r3, [pc, #20]	@ (8004a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	0a9b      	lsrs	r3, r3, #10
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	4903      	ldr	r1, [pc, #12]	@ (8004a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a5e:	5ccb      	ldrb	r3, [r1, r3]
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	0800a8cc 	.word	0x0800a8cc

08004a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a74:	f7ff ffdc 	bl	8004a30 <HAL_RCC_GetHCLKFreq>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	4b05      	ldr	r3, [pc, #20]	@ (8004a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	0b5b      	lsrs	r3, r3, #13
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	4903      	ldr	r1, [pc, #12]	@ (8004a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a86:	5ccb      	ldrb	r3, [r1, r3]
 8004a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40023800 	.word	0x40023800
 8004a94:	0800a8cc 	.word	0x0800a8cc

08004a98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e07b      	b.n	8004ba2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d108      	bne.n	8004ac4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004aba:	d009      	beq.n	8004ad0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	61da      	str	r2, [r3, #28]
 8004ac2:	e005      	b.n	8004ad0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fd fb7c 	bl	80021e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b54:	ea42 0103 	orr.w	r1, r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b5c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	0c1b      	lsrs	r3, r3, #16
 8004b6e:	f003 0104 	and.w	r1, r3, #4
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b76:	f003 0210 	and.w	r2, r3, #16
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69da      	ldr	r2, [r3, #28]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b088      	sub	sp, #32
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	603b      	str	r3, [r7, #0]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bba:	f7fe f809 	bl	8002bd0 <HAL_GetTick>
 8004bbe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d001      	beq.n	8004bd4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e12a      	b.n	8004e2a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <HAL_SPI_Transmit+0x36>
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e122      	b.n	8004e2a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_SPI_Transmit+0x48>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e11b      	b.n	8004e2a <HAL_SPI_Transmit+0x280>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2203      	movs	r2, #3
 8004bfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	88fa      	ldrh	r2, [r7, #6]
 8004c12:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	88fa      	ldrh	r2, [r7, #6]
 8004c18:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c40:	d10f      	bne.n	8004c62 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c6c:	2b40      	cmp	r3, #64	@ 0x40
 8004c6e:	d007      	beq.n	8004c80 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c88:	d152      	bne.n	8004d30 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <HAL_SPI_Transmit+0xee>
 8004c92:	8b7b      	ldrh	r3, [r7, #26]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d145      	bne.n	8004d24 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9c:	881a      	ldrh	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca8:	1c9a      	adds	r2, r3, #2
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cbc:	e032      	b.n	8004d24 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d112      	bne.n	8004cf2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd0:	881a      	ldrh	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cdc:	1c9a      	adds	r2, r3, #2
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004cf0:	e018      	b.n	8004d24 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cf2:	f7fd ff6d 	bl	8002bd0 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d803      	bhi.n	8004d0a <HAL_SPI_Transmit+0x160>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d08:	d102      	bne.n	8004d10 <HAL_SPI_Transmit+0x166>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d109      	bne.n	8004d24 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e082      	b.n	8004e2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1c7      	bne.n	8004cbe <HAL_SPI_Transmit+0x114>
 8004d2e:	e053      	b.n	8004dd8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <HAL_SPI_Transmit+0x194>
 8004d38:	8b7b      	ldrh	r3, [r7, #26]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d147      	bne.n	8004dce <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	330c      	adds	r3, #12
 8004d48:	7812      	ldrb	r2, [r2, #0]
 8004d4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d64:	e033      	b.n	8004dce <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d113      	bne.n	8004d9c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	7812      	ldrb	r2, [r2, #0]
 8004d80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d9a:	e018      	b.n	8004dce <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d9c:	f7fd ff18 	bl	8002bd0 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d803      	bhi.n	8004db4 <HAL_SPI_Transmit+0x20a>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db2:	d102      	bne.n	8004dba <HAL_SPI_Transmit+0x210>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d109      	bne.n	8004dce <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e02d      	b.n	8004e2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1c6      	bne.n	8004d66 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dd8:	69fa      	ldr	r2, [r7, #28]
 8004dda:	6839      	ldr	r1, [r7, #0]
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 fbd9 	bl	8005594 <SPI_EndRxTxTransaction>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2220      	movs	r2, #32
 8004dec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10a      	bne.n	8004e0c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004e28:	2300      	movs	r3, #0
  }
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3720      	adds	r7, #32
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b088      	sub	sp, #32
 8004e36:	af02      	add	r7, sp, #8
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	603b      	str	r3, [r7, #0]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d001      	beq.n	8004e52 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e104      	b.n	800505c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e5a:	d112      	bne.n	8004e82 <HAL_SPI_Receive+0x50>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10e      	bne.n	8004e82 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2204      	movs	r2, #4
 8004e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e6c:	88fa      	ldrh	r2, [r7, #6]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	4613      	mov	r3, r2
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 f8f3 	bl	8005064 <HAL_SPI_TransmitReceive>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	e0ec      	b.n	800505c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e82:	f7fd fea5 	bl	8002bd0 <HAL_GetTick>
 8004e86:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_SPI_Receive+0x62>
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0e1      	b.n	800505c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_SPI_Receive+0x74>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e0da      	b.n	800505c <HAL_SPI_Receive+0x22a>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	88fa      	ldrh	r2, [r7, #6]
 8004ec6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	88fa      	ldrh	r2, [r7, #6]
 8004ecc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ef4:	d10f      	bne.n	8004f16 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f14:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f20:	2b40      	cmp	r3, #64	@ 0x40
 8004f22:	d007      	beq.n	8004f34 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f32:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d170      	bne.n	800501e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f3c:	e035      	b.n	8004faa <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d115      	bne.n	8004f78 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f103 020c 	add.w	r2, r3, #12
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f58:	7812      	ldrb	r2, [r2, #0]
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f76:	e018      	b.n	8004faa <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f78:	f7fd fe2a 	bl	8002bd0 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d803      	bhi.n	8004f90 <HAL_SPI_Receive+0x15e>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8e:	d102      	bne.n	8004f96 <HAL_SPI_Receive+0x164>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d109      	bne.n	8004faa <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e058      	b.n	800505c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1c4      	bne.n	8004f3e <HAL_SPI_Receive+0x10c>
 8004fb4:	e038      	b.n	8005028 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d113      	bne.n	8004fec <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fce:	b292      	uxth	r2, r2
 8004fd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd6:	1c9a      	adds	r2, r3, #2
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004fea:	e018      	b.n	800501e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fec:	f7fd fdf0 	bl	8002bd0 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d803      	bhi.n	8005004 <HAL_SPI_Receive+0x1d2>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005002:	d102      	bne.n	800500a <HAL_SPI_Receive+0x1d8>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d109      	bne.n	800501e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e01e      	b.n	800505c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005022:	b29b      	uxth	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1c6      	bne.n	8004fb6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	6839      	ldr	r1, [r7, #0]
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 fa4b 	bl	80054c8 <SPI_EndRxTransaction>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2220      	movs	r2, #32
 800503c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800505a:	2300      	movs	r3, #0
  }
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	@ 0x28
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005072:	2301      	movs	r3, #1
 8005074:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005076:	f7fd fdab 	bl	8002bd0 <HAL_GetTick>
 800507a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005082:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800508a:	887b      	ldrh	r3, [r7, #2]
 800508c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800508e:	7ffb      	ldrb	r3, [r7, #31]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d00c      	beq.n	80050ae <HAL_SPI_TransmitReceive+0x4a>
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800509a:	d106      	bne.n	80050aa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d102      	bne.n	80050aa <HAL_SPI_TransmitReceive+0x46>
 80050a4:	7ffb      	ldrb	r3, [r7, #31]
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d001      	beq.n	80050ae <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80050aa:	2302      	movs	r3, #2
 80050ac:	e17f      	b.n	80053ae <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <HAL_SPI_TransmitReceive+0x5c>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <HAL_SPI_TransmitReceive+0x5c>
 80050ba:	887b      	ldrh	r3, [r7, #2]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e174      	b.n	80053ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <HAL_SPI_TransmitReceive+0x6e>
 80050ce:	2302      	movs	r3, #2
 80050d0:	e16d      	b.n	80053ae <HAL_SPI_TransmitReceive+0x34a>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d003      	beq.n	80050ee <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2205      	movs	r2, #5
 80050ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	887a      	ldrh	r2, [r7, #2]
 80050fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	887a      	ldrh	r2, [r7, #2]
 8005104:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	887a      	ldrh	r2, [r7, #2]
 8005110:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	887a      	ldrh	r2, [r7, #2]
 8005116:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800512e:	2b40      	cmp	r3, #64	@ 0x40
 8005130:	d007      	beq.n	8005142 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005140:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800514a:	d17e      	bne.n	800524a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <HAL_SPI_TransmitReceive+0xf6>
 8005154:	8afb      	ldrh	r3, [r7, #22]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d16c      	bne.n	8005234 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515e:	881a      	ldrh	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516a:	1c9a      	adds	r2, r3, #2
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800517e:	e059      	b.n	8005234 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b02      	cmp	r3, #2
 800518c:	d11b      	bne.n	80051c6 <HAL_SPI_TransmitReceive+0x162>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005192:	b29b      	uxth	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d016      	beq.n	80051c6 <HAL_SPI_TransmitReceive+0x162>
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	2b01      	cmp	r3, #1
 800519c:	d113      	bne.n	80051c6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a2:	881a      	ldrh	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ae:	1c9a      	adds	r2, r3, #2
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d119      	bne.n	8005208 <HAL_SPI_TransmitReceive+0x1a4>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d014      	beq.n	8005208 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e8:	b292      	uxth	r2, r2
 80051ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f0:	1c9a      	adds	r2, r3, #2
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005204:	2301      	movs	r3, #1
 8005206:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005208:	f7fd fce2 	bl	8002bd0 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005214:	429a      	cmp	r2, r3
 8005216:	d80d      	bhi.n	8005234 <HAL_SPI_TransmitReceive+0x1d0>
 8005218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521e:	d009      	beq.n	8005234 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e0bc      	b.n	80053ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005238:	b29b      	uxth	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1a0      	bne.n	8005180 <HAL_SPI_TransmitReceive+0x11c>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d19b      	bne.n	8005180 <HAL_SPI_TransmitReceive+0x11c>
 8005248:	e082      	b.n	8005350 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d002      	beq.n	8005258 <HAL_SPI_TransmitReceive+0x1f4>
 8005252:	8afb      	ldrh	r3, [r7, #22]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d171      	bne.n	800533c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	330c      	adds	r3, #12
 8005262:	7812      	ldrb	r2, [r2, #0]
 8005264:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800527e:	e05d      	b.n	800533c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b02      	cmp	r3, #2
 800528c:	d11c      	bne.n	80052c8 <HAL_SPI_TransmitReceive+0x264>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d017      	beq.n	80052c8 <HAL_SPI_TransmitReceive+0x264>
 8005298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529a:	2b01      	cmp	r3, #1
 800529c:	d114      	bne.n	80052c8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	330c      	adds	r3, #12
 80052a8:	7812      	ldrb	r2, [r2, #0]
 80052aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d119      	bne.n	800530a <HAL_SPI_TransmitReceive+0x2a6>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d014      	beq.n	800530a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	3b01      	subs	r3, #1
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005306:	2301      	movs	r3, #1
 8005308:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800530a:	f7fd fc61 	bl	8002bd0 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005316:	429a      	cmp	r2, r3
 8005318:	d803      	bhi.n	8005322 <HAL_SPI_TransmitReceive+0x2be>
 800531a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005320:	d102      	bne.n	8005328 <HAL_SPI_TransmitReceive+0x2c4>
 8005322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005324:	2b00      	cmp	r3, #0
 8005326:	d109      	bne.n	800533c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e038      	b.n	80053ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d19c      	bne.n	8005280 <HAL_SPI_TransmitReceive+0x21c>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d197      	bne.n	8005280 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005350:	6a3a      	ldr	r2, [r7, #32]
 8005352:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f91d 	bl	8005594 <SPI_EndRxTxTransaction>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d008      	beq.n	8005372 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e01d      	b.n	80053ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10a      	bne.n	8005390 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800537a:	2300      	movs	r3, #0
 800537c:	613b      	str	r3, [r7, #16]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e000      	b.n	80053ae <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80053ac:	2300      	movs	r3, #0
  }
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3728      	adds	r7, #40	@ 0x28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	603b      	str	r3, [r7, #0]
 80053c4:	4613      	mov	r3, r2
 80053c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053c8:	f7fd fc02 	bl	8002bd0 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d0:	1a9b      	subs	r3, r3, r2
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	4413      	add	r3, r2
 80053d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053d8:	f7fd fbfa 	bl	8002bd0 <HAL_GetTick>
 80053dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053de:	4b39      	ldr	r3, [pc, #228]	@ (80054c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	015b      	lsls	r3, r3, #5
 80053e4:	0d1b      	lsrs	r3, r3, #20
 80053e6:	69fa      	ldr	r2, [r7, #28]
 80053e8:	fb02 f303 	mul.w	r3, r2, r3
 80053ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ee:	e054      	b.n	800549a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f6:	d050      	beq.n	800549a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053f8:	f7fd fbea 	bl	8002bd0 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	69fa      	ldr	r2, [r7, #28]
 8005404:	429a      	cmp	r2, r3
 8005406:	d902      	bls.n	800540e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d13d      	bne.n	800548a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800541c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005426:	d111      	bne.n	800544c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005430:	d004      	beq.n	800543c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800543a:	d107      	bne.n	800544c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800544a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005450:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005454:	d10f      	bne.n	8005476 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005474:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e017      	b.n	80054ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	3b01      	subs	r3, #1
 8005498:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4013      	ands	r3, r2
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	bf0c      	ite	eq
 80054aa:	2301      	moveq	r3, #1
 80054ac:	2300      	movne	r3, #0
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	79fb      	ldrb	r3, [r7, #7]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d19b      	bne.n	80053f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3720      	adds	r7, #32
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	2000023c 	.word	0x2000023c

080054c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054dc:	d111      	bne.n	8005502 <SPI_EndRxTransaction+0x3a>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054e6:	d004      	beq.n	80054f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054f0:	d107      	bne.n	8005502 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005500:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800550a:	d12a      	bne.n	8005562 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005514:	d012      	beq.n	800553c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2200      	movs	r2, #0
 800551e:	2180      	movs	r1, #128	@ 0x80
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f7ff ff49 	bl	80053b8 <SPI_WaitFlagStateUntilTimeout>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d02d      	beq.n	8005588 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005530:	f043 0220 	orr.w	r2, r3, #32
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e026      	b.n	800558a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2200      	movs	r2, #0
 8005544:	2101      	movs	r1, #1
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f7ff ff36 	bl	80053b8 <SPI_WaitFlagStateUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d01a      	beq.n	8005588 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005556:	f043 0220 	orr.w	r2, r3, #32
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e013      	b.n	800558a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2200      	movs	r2, #0
 800556a:	2101      	movs	r1, #1
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f7ff ff23 	bl	80053b8 <SPI_WaitFlagStateUntilTimeout>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d007      	beq.n	8005588 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557c:	f043 0220 	orr.w	r2, r3, #32
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e000      	b.n	800558a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af02      	add	r7, sp, #8
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2201      	movs	r2, #1
 80055a8:	2102      	movs	r1, #2
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f7ff ff04 	bl	80053b8 <SPI_WaitFlagStateUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e032      	b.n	800562c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80055c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005634 <SPI_EndRxTxTransaction+0xa0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005638 <SPI_EndRxTxTransaction+0xa4>)
 80055cc:	fba2 2303 	umull	r2, r3, r2, r3
 80055d0:	0d5b      	lsrs	r3, r3, #21
 80055d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80055d6:	fb02 f303 	mul.w	r3, r2, r3
 80055da:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055e4:	d112      	bne.n	800560c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2200      	movs	r2, #0
 80055ee:	2180      	movs	r1, #128	@ 0x80
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f7ff fee1 	bl	80053b8 <SPI_WaitFlagStateUntilTimeout>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d016      	beq.n	800562a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005600:	f043 0220 	orr.w	r2, r3, #32
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e00f      	b.n	800562c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	3b01      	subs	r3, #1
 8005616:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005622:	2b80      	cmp	r3, #128	@ 0x80
 8005624:	d0f2      	beq.n	800560c <SPI_EndRxTxTransaction+0x78>
 8005626:	e000      	b.n	800562a <SPI_EndRxTxTransaction+0x96>
        break;
 8005628:	bf00      	nop
  }

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	2000023c 	.word	0x2000023c
 8005638:	165e9f81 	.word	0x165e9f81

0800563c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e038      	b.n	80056c4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f7fb fd22 	bl	80010b0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3308      	adds	r3, #8
 8005674:	4619      	mov	r1, r3
 8005676:	4610      	mov	r0, r2
 8005678:	f001 fbb0 	bl	8006ddc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6818      	ldr	r0, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	461a      	mov	r2, r3
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	f001 fc12 	bl	8006eb0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6858      	ldr	r0, [r3, #4]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	f001 fc3f 	bl	8006f1c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	6892      	ldr	r2, [r2, #8]
 80056a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	6892      	ldr	r2, [r2, #8]
 80056b2:	f041 0101 	orr.w	r1, r1, #1
 80056b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e041      	b.n	8005762 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d106      	bne.n	80056f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fc fecc 	bl	8002490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3304      	adds	r3, #4
 8005708:	4619      	mov	r1, r3
 800570a:	4610      	mov	r0, r2
 800570c:	f000 fa7e 	bl	8005c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	d001      	beq.n	8005784 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e04e      	b.n	8005822 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a23      	ldr	r2, [pc, #140]	@ (8005830 <HAL_TIM_Base_Start_IT+0xc4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d022      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x80>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ae:	d01d      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x80>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005834 <HAL_TIM_Base_Start_IT+0xc8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d018      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x80>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1e      	ldr	r2, [pc, #120]	@ (8005838 <HAL_TIM_Base_Start_IT+0xcc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d013      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x80>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a1c      	ldr	r2, [pc, #112]	@ (800583c <HAL_TIM_Base_Start_IT+0xd0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00e      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x80>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005840 <HAL_TIM_Base_Start_IT+0xd4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d009      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x80>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a19      	ldr	r2, [pc, #100]	@ (8005844 <HAL_TIM_Base_Start_IT+0xd8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d004      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x80>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a18      	ldr	r2, [pc, #96]	@ (8005848 <HAL_TIM_Base_Start_IT+0xdc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d111      	bne.n	8005810 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b06      	cmp	r3, #6
 80057fc:	d010      	beq.n	8005820 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f042 0201 	orr.w	r2, r2, #1
 800580c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800580e:	e007      	b.n	8005820 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0201 	orr.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40010000 	.word	0x40010000
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40000c00 	.word	0x40000c00
 8005840:	40010400 	.word	0x40010400
 8005844:	40014000 	.word	0x40014000
 8005848:	40001800 	.word	0x40001800

0800584c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d020      	beq.n	80058b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01b      	beq.n	80058b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0202 	mvn.w	r2, #2
 8005880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f999 	bl	8005bce <HAL_TIM_IC_CaptureCallback>
 800589c:	e005      	b.n	80058aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f98b 	bl	8005bba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f99c 	bl	8005be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d020      	beq.n	80058fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d01b      	beq.n	80058fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f06f 0204 	mvn.w	r2, #4
 80058cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2202      	movs	r2, #2
 80058d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f973 	bl	8005bce <HAL_TIM_IC_CaptureCallback>
 80058e8:	e005      	b.n	80058f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f965 	bl	8005bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f976 	bl	8005be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d020      	beq.n	8005948 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01b      	beq.n	8005948 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f06f 0208 	mvn.w	r2, #8
 8005918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2204      	movs	r2, #4
 800591e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f94d 	bl	8005bce <HAL_TIM_IC_CaptureCallback>
 8005934:	e005      	b.n	8005942 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f93f 	bl	8005bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f950 	bl	8005be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f003 0310 	and.w	r3, r3, #16
 800594e:	2b00      	cmp	r3, #0
 8005950:	d020      	beq.n	8005994 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01b      	beq.n	8005994 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0210 	mvn.w	r2, #16
 8005964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2208      	movs	r2, #8
 800596a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f927 	bl	8005bce <HAL_TIM_IC_CaptureCallback>
 8005980:	e005      	b.n	800598e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f919 	bl	8005bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f92a 	bl	8005be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00c      	beq.n	80059b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d007      	beq.n	80059b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f06f 0201 	mvn.w	r2, #1
 80059b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7fc fa08 	bl	8001dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00c      	beq.n	80059dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d007      	beq.n	80059dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80059d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fae4 	bl	8005fa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00c      	beq.n	8005a00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80059f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f8fb 	bl	8005bf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00c      	beq.n	8005a24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d007      	beq.n	8005a24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0220 	mvn.w	r2, #32
 8005a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fab6 	bl	8005f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a24:	bf00      	nop
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d101      	bne.n	8005a48 <HAL_TIM_ConfigClockSource+0x1c>
 8005a44:	2302      	movs	r3, #2
 8005a46:	e0b4      	b.n	8005bb2 <HAL_TIM_ConfigClockSource+0x186>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a80:	d03e      	beq.n	8005b00 <HAL_TIM_ConfigClockSource+0xd4>
 8005a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a86:	f200 8087 	bhi.w	8005b98 <HAL_TIM_ConfigClockSource+0x16c>
 8005a8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a8e:	f000 8086 	beq.w	8005b9e <HAL_TIM_ConfigClockSource+0x172>
 8005a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a96:	d87f      	bhi.n	8005b98 <HAL_TIM_ConfigClockSource+0x16c>
 8005a98:	2b70      	cmp	r3, #112	@ 0x70
 8005a9a:	d01a      	beq.n	8005ad2 <HAL_TIM_ConfigClockSource+0xa6>
 8005a9c:	2b70      	cmp	r3, #112	@ 0x70
 8005a9e:	d87b      	bhi.n	8005b98 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa0:	2b60      	cmp	r3, #96	@ 0x60
 8005aa2:	d050      	beq.n	8005b46 <HAL_TIM_ConfigClockSource+0x11a>
 8005aa4:	2b60      	cmp	r3, #96	@ 0x60
 8005aa6:	d877      	bhi.n	8005b98 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa8:	2b50      	cmp	r3, #80	@ 0x50
 8005aaa:	d03c      	beq.n	8005b26 <HAL_TIM_ConfigClockSource+0xfa>
 8005aac:	2b50      	cmp	r3, #80	@ 0x50
 8005aae:	d873      	bhi.n	8005b98 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab0:	2b40      	cmp	r3, #64	@ 0x40
 8005ab2:	d058      	beq.n	8005b66 <HAL_TIM_ConfigClockSource+0x13a>
 8005ab4:	2b40      	cmp	r3, #64	@ 0x40
 8005ab6:	d86f      	bhi.n	8005b98 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab8:	2b30      	cmp	r3, #48	@ 0x30
 8005aba:	d064      	beq.n	8005b86 <HAL_TIM_ConfigClockSource+0x15a>
 8005abc:	2b30      	cmp	r3, #48	@ 0x30
 8005abe:	d86b      	bhi.n	8005b98 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d060      	beq.n	8005b86 <HAL_TIM_ConfigClockSource+0x15a>
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d867      	bhi.n	8005b98 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d05c      	beq.n	8005b86 <HAL_TIM_ConfigClockSource+0x15a>
 8005acc:	2b10      	cmp	r3, #16
 8005ace:	d05a      	beq.n	8005b86 <HAL_TIM_ConfigClockSource+0x15a>
 8005ad0:	e062      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ae2:	f000 f9b9 	bl	8005e58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005af4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	609a      	str	r2, [r3, #8]
      break;
 8005afe:	e04f      	b.n	8005ba0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b10:	f000 f9a2 	bl	8005e58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b22:	609a      	str	r2, [r3, #8]
      break;
 8005b24:	e03c      	b.n	8005ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b32:	461a      	mov	r2, r3
 8005b34:	f000 f916 	bl	8005d64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2150      	movs	r1, #80	@ 0x50
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 f96f 	bl	8005e22 <TIM_ITRx_SetConfig>
      break;
 8005b44:	e02c      	b.n	8005ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b52:	461a      	mov	r2, r3
 8005b54:	f000 f935 	bl	8005dc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2160      	movs	r1, #96	@ 0x60
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 f95f 	bl	8005e22 <TIM_ITRx_SetConfig>
      break;
 8005b64:	e01c      	b.n	8005ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b72:	461a      	mov	r2, r3
 8005b74:	f000 f8f6 	bl	8005d64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2140      	movs	r1, #64	@ 0x40
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 f94f 	bl	8005e22 <TIM_ITRx_SetConfig>
      break;
 8005b84:	e00c      	b.n	8005ba0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4610      	mov	r0, r2
 8005b92:	f000 f946 	bl	8005e22 <TIM_ITRx_SetConfig>
      break;
 8005b96:	e003      	b.n	8005ba0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b9c:	e000      	b.n	8005ba0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
	...

08005c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a46      	ldr	r2, [pc, #280]	@ (8005d38 <TIM_Base_SetConfig+0x12c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d013      	beq.n	8005c4c <TIM_Base_SetConfig+0x40>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c2a:	d00f      	beq.n	8005c4c <TIM_Base_SetConfig+0x40>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a43      	ldr	r2, [pc, #268]	@ (8005d3c <TIM_Base_SetConfig+0x130>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00b      	beq.n	8005c4c <TIM_Base_SetConfig+0x40>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a42      	ldr	r2, [pc, #264]	@ (8005d40 <TIM_Base_SetConfig+0x134>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d007      	beq.n	8005c4c <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a41      	ldr	r2, [pc, #260]	@ (8005d44 <TIM_Base_SetConfig+0x138>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d003      	beq.n	8005c4c <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a40      	ldr	r2, [pc, #256]	@ (8005d48 <TIM_Base_SetConfig+0x13c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d108      	bne.n	8005c5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a35      	ldr	r2, [pc, #212]	@ (8005d38 <TIM_Base_SetConfig+0x12c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d02b      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c6c:	d027      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a32      	ldr	r2, [pc, #200]	@ (8005d3c <TIM_Base_SetConfig+0x130>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d023      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a31      	ldr	r2, [pc, #196]	@ (8005d40 <TIM_Base_SetConfig+0x134>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d01f      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a30      	ldr	r2, [pc, #192]	@ (8005d44 <TIM_Base_SetConfig+0x138>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d01b      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a2f      	ldr	r2, [pc, #188]	@ (8005d48 <TIM_Base_SetConfig+0x13c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d017      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2e      	ldr	r2, [pc, #184]	@ (8005d4c <TIM_Base_SetConfig+0x140>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d013      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2d      	ldr	r2, [pc, #180]	@ (8005d50 <TIM_Base_SetConfig+0x144>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00f      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a2c      	ldr	r2, [pc, #176]	@ (8005d54 <TIM_Base_SetConfig+0x148>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00b      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8005d58 <TIM_Base_SetConfig+0x14c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d007      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a2a      	ldr	r2, [pc, #168]	@ (8005d5c <TIM_Base_SetConfig+0x150>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d003      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a29      	ldr	r2, [pc, #164]	@ (8005d60 <TIM_Base_SetConfig+0x154>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d108      	bne.n	8005cd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a10      	ldr	r2, [pc, #64]	@ (8005d38 <TIM_Base_SetConfig+0x12c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d003      	beq.n	8005d04 <TIM_Base_SetConfig+0xf8>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a12      	ldr	r2, [pc, #72]	@ (8005d48 <TIM_Base_SetConfig+0x13c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d103      	bne.n	8005d0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d105      	bne.n	8005d2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f023 0201 	bic.w	r2, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	611a      	str	r2, [r3, #16]
  }
}
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40000400 	.word	0x40000400
 8005d40:	40000800 	.word	0x40000800
 8005d44:	40000c00 	.word	0x40000c00
 8005d48:	40010400 	.word	0x40010400
 8005d4c:	40014000 	.word	0x40014000
 8005d50:	40014400 	.word	0x40014400
 8005d54:	40014800 	.word	0x40014800
 8005d58:	40001800 	.word	0x40001800
 8005d5c:	40001c00 	.word	0x40001c00
 8005d60:	40002000 	.word	0x40002000

08005d64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f023 0201 	bic.w	r2, r3, #1
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f023 030a 	bic.w	r3, r3, #10
 8005da0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b087      	sub	sp, #28
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	60f8      	str	r0, [r7, #12]
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	f023 0210 	bic.w	r2, r3, #16
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005dec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	031b      	lsls	r3, r3, #12
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005dfe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	621a      	str	r2, [r3, #32]
}
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	f043 0307 	orr.w	r3, r3, #7
 8005e44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	609a      	str	r2, [r3, #8]
}
 8005e4c:	bf00      	nop
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	021a      	lsls	r2, r3, #8
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	609a      	str	r2, [r3, #8]
}
 8005e8c:	bf00      	nop
 8005e8e:	371c      	adds	r7, #28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d101      	bne.n	8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005eac:	2302      	movs	r3, #2
 8005eae:	e05a      	b.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a21      	ldr	r2, [pc, #132]	@ (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d022      	beq.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005efc:	d01d      	beq.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a1d      	ldr	r2, [pc, #116]	@ (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d018      	beq.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d013      	beq.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1a      	ldr	r2, [pc, #104]	@ (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d00e      	beq.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a18      	ldr	r2, [pc, #96]	@ (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d009      	beq.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a17      	ldr	r2, [pc, #92]	@ (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d004      	beq.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a15      	ldr	r2, [pc, #84]	@ (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d10c      	bne.n	8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40010000 	.word	0x40010000
 8005f78:	40000400 	.word	0x40000400
 8005f7c:	40000800 	.word	0x40000800
 8005f80:	40000c00 	.word	0x40000c00
 8005f84:	40010400 	.word	0x40010400
 8005f88:	40014000 	.word	0x40014000
 8005f8c:	40001800 	.word	0x40001800

08005f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e042      	b.n	8006050 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d106      	bne.n	8005fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fc fb5a 	bl	8002698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2224      	movs	r2, #36	@ 0x24
 8005fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fc79 	bl	80068f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	695a      	ldr	r2, [r3, #20]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68da      	ldr	r2, [r3, #12]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2220      	movs	r2, #32
 800603c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b0ba      	sub	sp, #232	@ 0xe8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800607e:	2300      	movs	r3, #0
 8006080:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006084:	2300      	movs	r3, #0
 8006086:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800608a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800608e:	f003 030f 	and.w	r3, r3, #15
 8006092:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006096:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10f      	bne.n	80060be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800609e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a2:	f003 0320 	and.w	r3, r3, #32
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d009      	beq.n	80060be <HAL_UART_IRQHandler+0x66>
 80060aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fb5d 	bl	8006776 <UART_Receive_IT>
      return;
 80060bc:	e25b      	b.n	8006576 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 80de 	beq.w	8006284 <HAL_UART_IRQHandler+0x22c>
 80060c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d106      	bne.n	80060e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 80d1 	beq.w	8006284 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00b      	beq.n	8006106 <HAL_UART_IRQHandler+0xae>
 80060ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060fe:	f043 0201 	orr.w	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800610a:	f003 0304 	and.w	r3, r3, #4
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00b      	beq.n	800612a <HAL_UART_IRQHandler+0xd2>
 8006112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d005      	beq.n	800612a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006122:	f043 0202 	orr.w	r2, r3, #2
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800612a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00b      	beq.n	800614e <HAL_UART_IRQHandler+0xf6>
 8006136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006146:	f043 0204 	orr.w	r2, r3, #4
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800614e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d011      	beq.n	800617e <HAL_UART_IRQHandler+0x126>
 800615a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800615e:	f003 0320 	and.w	r3, r3, #32
 8006162:	2b00      	cmp	r3, #0
 8006164:	d105      	bne.n	8006172 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d005      	beq.n	800617e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006176:	f043 0208 	orr.w	r2, r3, #8
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 81f2 	beq.w	800656c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800618c:	f003 0320 	and.w	r3, r3, #32
 8006190:	2b00      	cmp	r3, #0
 8006192:	d008      	beq.n	80061a6 <HAL_UART_IRQHandler+0x14e>
 8006194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006198:	f003 0320 	and.w	r3, r3, #32
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fae8 	bl	8006776 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b0:	2b40      	cmp	r3, #64	@ 0x40
 80061b2:	bf0c      	ite	eq
 80061b4:	2301      	moveq	r3, #1
 80061b6:	2300      	movne	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c2:	f003 0308 	and.w	r3, r3, #8
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d103      	bne.n	80061d2 <HAL_UART_IRQHandler+0x17a>
 80061ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d04f      	beq.n	8006272 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f9f0 	bl	80065b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e2:	2b40      	cmp	r3, #64	@ 0x40
 80061e4:	d141      	bne.n	800626a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3314      	adds	r3, #20
 80061ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80061fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006200:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006204:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3314      	adds	r3, #20
 800620e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006212:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006216:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800621e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800622a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1d9      	bne.n	80061e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006236:	2b00      	cmp	r3, #0
 8006238:	d013      	beq.n	8006262 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800623e:	4a7e      	ldr	r2, [pc, #504]	@ (8006438 <HAL_UART_IRQHandler+0x3e0>)
 8006240:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006246:	4618      	mov	r0, r3
 8006248:	f7fd fb8c 	bl	8003964 <HAL_DMA_Abort_IT>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d016      	beq.n	8006280 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800625c:	4610      	mov	r0, r2
 800625e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006260:	e00e      	b.n	8006280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f99e 	bl	80065a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006268:	e00a      	b.n	8006280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f99a 	bl	80065a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006270:	e006      	b.n	8006280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f996 	bl	80065a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800627e:	e175      	b.n	800656c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006280:	bf00      	nop
    return;
 8006282:	e173      	b.n	800656c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006288:	2b01      	cmp	r3, #1
 800628a:	f040 814f 	bne.w	800652c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800628e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006292:	f003 0310 	and.w	r3, r3, #16
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 8148 	beq.w	800652c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800629c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062a0:	f003 0310 	and.w	r3, r3, #16
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 8141 	beq.w	800652c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062aa:	2300      	movs	r3, #0
 80062ac:	60bb      	str	r3, [r7, #8]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	60bb      	str	r3, [r7, #8]
 80062be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ca:	2b40      	cmp	r3, #64	@ 0x40
 80062cc:	f040 80b6 	bne.w	800643c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8145 	beq.w	8006570 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062ee:	429a      	cmp	r2, r3
 80062f0:	f080 813e 	bcs.w	8006570 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006306:	f000 8088 	beq.w	800641a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	330c      	adds	r3, #12
 8006310:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006318:	e853 3f00 	ldrex	r3, [r3]
 800631c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006320:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006328:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	330c      	adds	r3, #12
 8006332:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006336:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800633a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006342:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800634e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1d9      	bne.n	800630a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3314      	adds	r3, #20
 800635c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006366:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006368:	f023 0301 	bic.w	r3, r3, #1
 800636c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3314      	adds	r3, #20
 8006376:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800637a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800637e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006382:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800638c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e1      	bne.n	8006356 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3314      	adds	r3, #20
 8006398:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800639c:	e853 3f00 	ldrex	r3, [r3]
 80063a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80063a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3314      	adds	r3, #20
 80063b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80063b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80063b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80063bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80063c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1e3      	bne.n	8006392 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	330c      	adds	r3, #12
 80063de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063e2:	e853 3f00 	ldrex	r3, [r3]
 80063e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063ea:	f023 0310 	bic.w	r3, r3, #16
 80063ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	330c      	adds	r3, #12
 80063f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80063fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80063fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006402:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006404:	e841 2300 	strex	r3, r2, [r1]
 8006408:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800640a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e3      	bne.n	80063d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006414:	4618      	mov	r0, r3
 8006416:	f7fd fa35 	bl	8003884 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2202      	movs	r2, #2
 800641e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006428:	b29b      	uxth	r3, r3
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	b29b      	uxth	r3, r3
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7fb fe89 	bl	8002148 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006436:	e09b      	b.n	8006570 <HAL_UART_IRQHandler+0x518>
 8006438:	0800667f 	.word	0x0800667f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006444:	b29b      	uxth	r3, r3
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006450:	b29b      	uxth	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 808e 	beq.w	8006574 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006458:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 8089 	beq.w	8006574 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	330c      	adds	r3, #12
 8006468:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006474:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006478:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	330c      	adds	r3, #12
 8006482:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006486:	647a      	str	r2, [r7, #68]	@ 0x44
 8006488:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800648c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e3      	bne.n	8006462 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3314      	adds	r3, #20
 80064a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	623b      	str	r3, [r7, #32]
   return(result);
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	f023 0301 	bic.w	r3, r3, #1
 80064b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3314      	adds	r3, #20
 80064ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80064be:	633a      	str	r2, [r7, #48]	@ 0x30
 80064c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e3      	bne.n	800649a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	330c      	adds	r3, #12
 80064e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	e853 3f00 	ldrex	r3, [r3]
 80064ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f023 0310 	bic.w	r3, r3, #16
 80064f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	330c      	adds	r3, #12
 8006500:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006504:	61fa      	str	r2, [r7, #28]
 8006506:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006508:	69b9      	ldr	r1, [r7, #24]
 800650a:	69fa      	ldr	r2, [r7, #28]
 800650c:	e841 2300 	strex	r3, r2, [r1]
 8006510:	617b      	str	r3, [r7, #20]
   return(result);
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e3      	bne.n	80064e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800651e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7fb fe0f 	bl	8002148 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800652a:	e023      	b.n	8006574 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800652c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006534:	2b00      	cmp	r3, #0
 8006536:	d009      	beq.n	800654c <HAL_UART_IRQHandler+0x4f4>
 8006538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800653c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006540:	2b00      	cmp	r3, #0
 8006542:	d003      	beq.n	800654c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f8ae 	bl	80066a6 <UART_Transmit_IT>
    return;
 800654a:	e014      	b.n	8006576 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800654c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00e      	beq.n	8006576 <HAL_UART_IRQHandler+0x51e>
 8006558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800655c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006560:	2b00      	cmp	r3, #0
 8006562:	d008      	beq.n	8006576 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f8ee 	bl	8006746 <UART_EndTransmit_IT>
    return;
 800656a:	e004      	b.n	8006576 <HAL_UART_IRQHandler+0x51e>
    return;
 800656c:	bf00      	nop
 800656e:	e002      	b.n	8006576 <HAL_UART_IRQHandler+0x51e>
      return;
 8006570:	bf00      	nop
 8006572:	e000      	b.n	8006576 <HAL_UART_IRQHandler+0x51e>
      return;
 8006574:	bf00      	nop
  }
}
 8006576:	37e8      	adds	r7, #232	@ 0xe8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b095      	sub	sp, #84	@ 0x54
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	330c      	adds	r3, #12
 80065c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ca:	e853 3f00 	ldrex	r3, [r3]
 80065ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	330c      	adds	r3, #12
 80065de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065e0:	643a      	str	r2, [r7, #64]	@ 0x40
 80065e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065e8:	e841 2300 	strex	r3, r2, [r1]
 80065ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1e5      	bne.n	80065c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3314      	adds	r3, #20
 80065fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	e853 3f00 	ldrex	r3, [r3]
 8006602:	61fb      	str	r3, [r7, #28]
   return(result);
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	f023 0301 	bic.w	r3, r3, #1
 800660a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3314      	adds	r3, #20
 8006612:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006614:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006616:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800661a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e5      	bne.n	80065f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662c:	2b01      	cmp	r3, #1
 800662e:	d119      	bne.n	8006664 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	330c      	adds	r3, #12
 8006636:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	e853 3f00 	ldrex	r3, [r3]
 800663e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f023 0310 	bic.w	r3, r3, #16
 8006646:	647b      	str	r3, [r7, #68]	@ 0x44
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	330c      	adds	r3, #12
 800664e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006650:	61ba      	str	r2, [r7, #24]
 8006652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006654:	6979      	ldr	r1, [r7, #20]
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	e841 2300 	strex	r3, r2, [r1]
 800665c:	613b      	str	r3, [r7, #16]
   return(result);
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e5      	bne.n	8006630 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2220      	movs	r2, #32
 8006668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006672:	bf00      	nop
 8006674:	3754      	adds	r7, #84	@ 0x54
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f7ff ff83 	bl	80065a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800669e:	bf00      	nop
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b085      	sub	sp, #20
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b21      	cmp	r3, #33	@ 0x21
 80066b8:	d13e      	bne.n	8006738 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066c2:	d114      	bne.n	80066ee <UART_Transmit_IT+0x48>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d110      	bne.n	80066ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	881b      	ldrh	r3, [r3, #0]
 80066d6:	461a      	mov	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	1c9a      	adds	r2, r3, #2
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	621a      	str	r2, [r3, #32]
 80066ec:	e008      	b.n	8006700 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	1c59      	adds	r1, r3, #1
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6211      	str	r1, [r2, #32]
 80066f8:	781a      	ldrb	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006704:	b29b      	uxth	r3, r3
 8006706:	3b01      	subs	r3, #1
 8006708:	b29b      	uxth	r3, r3
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	4619      	mov	r1, r3
 800670e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10f      	bne.n	8006734 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68da      	ldr	r2, [r3, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006722:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006732:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	e000      	b.n	800673a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006738:	2302      	movs	r3, #2
  }
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b082      	sub	sp, #8
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800675c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7ff ff08 	bl	800657c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b08c      	sub	sp, #48	@ 0x30
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b22      	cmp	r3, #34	@ 0x22
 8006788:	f040 80ae 	bne.w	80068e8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006794:	d117      	bne.n	80067c6 <UART_Receive_IT+0x50>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d113      	bne.n	80067c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800679e:	2300      	movs	r3, #0
 80067a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067be:	1c9a      	adds	r2, r3, #2
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80067c4:	e026      	b.n	8006814 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80067cc:	2300      	movs	r3, #0
 80067ce:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067d8:	d007      	beq.n	80067ea <UART_Receive_IT+0x74>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <UART_Receive_IT+0x82>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d106      	bne.n	80067f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	e008      	b.n	800680a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006804:	b2da      	uxtb	r2, r3
 8006806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006808:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006818:	b29b      	uxth	r3, r3
 800681a:	3b01      	subs	r3, #1
 800681c:	b29b      	uxth	r3, r3
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	4619      	mov	r1, r3
 8006822:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006824:	2b00      	cmp	r3, #0
 8006826:	d15d      	bne.n	80068e4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0220 	bic.w	r2, r2, #32
 8006836:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68da      	ldr	r2, [r3, #12]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006846:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	695a      	ldr	r2, [r3, #20]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0201 	bic.w	r2, r2, #1
 8006856:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2220      	movs	r2, #32
 800685c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800686a:	2b01      	cmp	r3, #1
 800686c:	d135      	bne.n	80068da <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	330c      	adds	r3, #12
 800687a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	e853 3f00 	ldrex	r3, [r3]
 8006882:	613b      	str	r3, [r7, #16]
   return(result);
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f023 0310 	bic.w	r3, r3, #16
 800688a:	627b      	str	r3, [r7, #36]	@ 0x24
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	330c      	adds	r3, #12
 8006892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006894:	623a      	str	r2, [r7, #32]
 8006896:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006898:	69f9      	ldr	r1, [r7, #28]
 800689a:	6a3a      	ldr	r2, [r7, #32]
 800689c:	e841 2300 	strex	r3, r2, [r1]
 80068a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e5      	bne.n	8006874 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0310 	and.w	r3, r3, #16
 80068b2:	2b10      	cmp	r3, #16
 80068b4:	d10a      	bne.n	80068cc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068b6:	2300      	movs	r3, #0
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068d0:	4619      	mov	r1, r3
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7fb fc38 	bl	8002148 <HAL_UARTEx_RxEventCallback>
 80068d8:	e002      	b.n	80068e0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff fe58 	bl	8006590 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	e002      	b.n	80068ea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	e000      	b.n	80068ea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80068e8:	2302      	movs	r3, #2
  }
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3730      	adds	r7, #48	@ 0x30
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068f8:	b0c0      	sub	sp, #256	@ 0x100
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800690c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006910:	68d9      	ldr	r1, [r3, #12]
 8006912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	ea40 0301 	orr.w	r3, r0, r1
 800691c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800691e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	431a      	orrs	r2, r3
 800692c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	431a      	orrs	r2, r3
 8006934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	4313      	orrs	r3, r2
 800693c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800694c:	f021 010c 	bic.w	r1, r1, #12
 8006950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800695a:	430b      	orrs	r3, r1
 800695c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800695e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800696a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800696e:	6999      	ldr	r1, [r3, #24]
 8006970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	ea40 0301 	orr.w	r3, r0, r1
 800697a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800697c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	4b8f      	ldr	r3, [pc, #572]	@ (8006bc0 <UART_SetConfig+0x2cc>)
 8006984:	429a      	cmp	r2, r3
 8006986:	d005      	beq.n	8006994 <UART_SetConfig+0xa0>
 8006988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	4b8d      	ldr	r3, [pc, #564]	@ (8006bc4 <UART_SetConfig+0x2d0>)
 8006990:	429a      	cmp	r2, r3
 8006992:	d104      	bne.n	800699e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006994:	f7fe f86c 	bl	8004a70 <HAL_RCC_GetPCLK2Freq>
 8006998:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800699c:	e003      	b.n	80069a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800699e:	f7fe f853 	bl	8004a48 <HAL_RCC_GetPCLK1Freq>
 80069a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069b0:	f040 810c 	bne.w	8006bcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069b8:	2200      	movs	r2, #0
 80069ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80069be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80069c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80069c6:	4622      	mov	r2, r4
 80069c8:	462b      	mov	r3, r5
 80069ca:	1891      	adds	r1, r2, r2
 80069cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80069ce:	415b      	adcs	r3, r3
 80069d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80069d6:	4621      	mov	r1, r4
 80069d8:	eb12 0801 	adds.w	r8, r2, r1
 80069dc:	4629      	mov	r1, r5
 80069de:	eb43 0901 	adc.w	r9, r3, r1
 80069e2:	f04f 0200 	mov.w	r2, #0
 80069e6:	f04f 0300 	mov.w	r3, #0
 80069ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069f6:	4690      	mov	r8, r2
 80069f8:	4699      	mov	r9, r3
 80069fa:	4623      	mov	r3, r4
 80069fc:	eb18 0303 	adds.w	r3, r8, r3
 8006a00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a04:	462b      	mov	r3, r5
 8006a06:	eb49 0303 	adc.w	r3, r9, r3
 8006a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006a1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006a22:	460b      	mov	r3, r1
 8006a24:	18db      	adds	r3, r3, r3
 8006a26:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a28:	4613      	mov	r3, r2
 8006a2a:	eb42 0303 	adc.w	r3, r2, r3
 8006a2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006a34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006a38:	f7f9 fc1a 	bl	8000270 <__aeabi_uldivmod>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4b61      	ldr	r3, [pc, #388]	@ (8006bc8 <UART_SetConfig+0x2d4>)
 8006a42:	fba3 2302 	umull	r2, r3, r3, r2
 8006a46:	095b      	lsrs	r3, r3, #5
 8006a48:	011c      	lsls	r4, r3, #4
 8006a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006a58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006a5c:	4642      	mov	r2, r8
 8006a5e:	464b      	mov	r3, r9
 8006a60:	1891      	adds	r1, r2, r2
 8006a62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006a64:	415b      	adcs	r3, r3
 8006a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006a6c:	4641      	mov	r1, r8
 8006a6e:	eb12 0a01 	adds.w	sl, r2, r1
 8006a72:	4649      	mov	r1, r9
 8006a74:	eb43 0b01 	adc.w	fp, r3, r1
 8006a78:	f04f 0200 	mov.w	r2, #0
 8006a7c:	f04f 0300 	mov.w	r3, #0
 8006a80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a8c:	4692      	mov	sl, r2
 8006a8e:	469b      	mov	fp, r3
 8006a90:	4643      	mov	r3, r8
 8006a92:	eb1a 0303 	adds.w	r3, sl, r3
 8006a96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a9a:	464b      	mov	r3, r9
 8006a9c:	eb4b 0303 	adc.w	r3, fp, r3
 8006aa0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ab0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006ab4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	18db      	adds	r3, r3, r3
 8006abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006abe:	4613      	mov	r3, r2
 8006ac0:	eb42 0303 	adc.w	r3, r2, r3
 8006ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ac6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006aca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006ace:	f7f9 fbcf 	bl	8000270 <__aeabi_uldivmod>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8006bc8 <UART_SetConfig+0x2d4>)
 8006ada:	fba3 2301 	umull	r2, r3, r3, r1
 8006ade:	095b      	lsrs	r3, r3, #5
 8006ae0:	2264      	movs	r2, #100	@ 0x64
 8006ae2:	fb02 f303 	mul.w	r3, r2, r3
 8006ae6:	1acb      	subs	r3, r1, r3
 8006ae8:	00db      	lsls	r3, r3, #3
 8006aea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006aee:	4b36      	ldr	r3, [pc, #216]	@ (8006bc8 <UART_SetConfig+0x2d4>)
 8006af0:	fba3 2302 	umull	r2, r3, r3, r2
 8006af4:	095b      	lsrs	r3, r3, #5
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006afc:	441c      	add	r4, r3
 8006afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006b0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006b10:	4642      	mov	r2, r8
 8006b12:	464b      	mov	r3, r9
 8006b14:	1891      	adds	r1, r2, r2
 8006b16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006b18:	415b      	adcs	r3, r3
 8006b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006b20:	4641      	mov	r1, r8
 8006b22:	1851      	adds	r1, r2, r1
 8006b24:	6339      	str	r1, [r7, #48]	@ 0x30
 8006b26:	4649      	mov	r1, r9
 8006b28:	414b      	adcs	r3, r1
 8006b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b2c:	f04f 0200 	mov.w	r2, #0
 8006b30:	f04f 0300 	mov.w	r3, #0
 8006b34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006b38:	4659      	mov	r1, fp
 8006b3a:	00cb      	lsls	r3, r1, #3
 8006b3c:	4651      	mov	r1, sl
 8006b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b42:	4651      	mov	r1, sl
 8006b44:	00ca      	lsls	r2, r1, #3
 8006b46:	4610      	mov	r0, r2
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	4642      	mov	r2, r8
 8006b4e:	189b      	adds	r3, r3, r2
 8006b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b54:	464b      	mov	r3, r9
 8006b56:	460a      	mov	r2, r1
 8006b58:	eb42 0303 	adc.w	r3, r2, r3
 8006b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006b70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006b74:	460b      	mov	r3, r1
 8006b76:	18db      	adds	r3, r3, r3
 8006b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	eb42 0303 	adc.w	r3, r2, r3
 8006b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006b8a:	f7f9 fb71 	bl	8000270 <__aeabi_uldivmod>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc8 <UART_SetConfig+0x2d4>)
 8006b94:	fba3 1302 	umull	r1, r3, r3, r2
 8006b98:	095b      	lsrs	r3, r3, #5
 8006b9a:	2164      	movs	r1, #100	@ 0x64
 8006b9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	00db      	lsls	r3, r3, #3
 8006ba4:	3332      	adds	r3, #50	@ 0x32
 8006ba6:	4a08      	ldr	r2, [pc, #32]	@ (8006bc8 <UART_SetConfig+0x2d4>)
 8006ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bac:	095b      	lsrs	r3, r3, #5
 8006bae:	f003 0207 	and.w	r2, r3, #7
 8006bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4422      	add	r2, r4
 8006bba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006bbc:	e106      	b.n	8006dcc <UART_SetConfig+0x4d8>
 8006bbe:	bf00      	nop
 8006bc0:	40011000 	.word	0x40011000
 8006bc4:	40011400 	.word	0x40011400
 8006bc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006bd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006bda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006bde:	4642      	mov	r2, r8
 8006be0:	464b      	mov	r3, r9
 8006be2:	1891      	adds	r1, r2, r2
 8006be4:	6239      	str	r1, [r7, #32]
 8006be6:	415b      	adcs	r3, r3
 8006be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bee:	4641      	mov	r1, r8
 8006bf0:	1854      	adds	r4, r2, r1
 8006bf2:	4649      	mov	r1, r9
 8006bf4:	eb43 0501 	adc.w	r5, r3, r1
 8006bf8:	f04f 0200 	mov.w	r2, #0
 8006bfc:	f04f 0300 	mov.w	r3, #0
 8006c00:	00eb      	lsls	r3, r5, #3
 8006c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c06:	00e2      	lsls	r2, r4, #3
 8006c08:	4614      	mov	r4, r2
 8006c0a:	461d      	mov	r5, r3
 8006c0c:	4643      	mov	r3, r8
 8006c0e:	18e3      	adds	r3, r4, r3
 8006c10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c14:	464b      	mov	r3, r9
 8006c16:	eb45 0303 	adc.w	r3, r5, r3
 8006c1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	f04f 0300 	mov.w	r3, #0
 8006c36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	008b      	lsls	r3, r1, #2
 8006c3e:	4621      	mov	r1, r4
 8006c40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c44:	4621      	mov	r1, r4
 8006c46:	008a      	lsls	r2, r1, #2
 8006c48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006c4c:	f7f9 fb10 	bl	8000270 <__aeabi_uldivmod>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4b60      	ldr	r3, [pc, #384]	@ (8006dd8 <UART_SetConfig+0x4e4>)
 8006c56:	fba3 2302 	umull	r2, r3, r3, r2
 8006c5a:	095b      	lsrs	r3, r3, #5
 8006c5c:	011c      	lsls	r4, r3, #4
 8006c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006c6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006c70:	4642      	mov	r2, r8
 8006c72:	464b      	mov	r3, r9
 8006c74:	1891      	adds	r1, r2, r2
 8006c76:	61b9      	str	r1, [r7, #24]
 8006c78:	415b      	adcs	r3, r3
 8006c7a:	61fb      	str	r3, [r7, #28]
 8006c7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c80:	4641      	mov	r1, r8
 8006c82:	1851      	adds	r1, r2, r1
 8006c84:	6139      	str	r1, [r7, #16]
 8006c86:	4649      	mov	r1, r9
 8006c88:	414b      	adcs	r3, r1
 8006c8a:	617b      	str	r3, [r7, #20]
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	f04f 0300 	mov.w	r3, #0
 8006c94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c98:	4659      	mov	r1, fp
 8006c9a:	00cb      	lsls	r3, r1, #3
 8006c9c:	4651      	mov	r1, sl
 8006c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ca2:	4651      	mov	r1, sl
 8006ca4:	00ca      	lsls	r2, r1, #3
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4603      	mov	r3, r0
 8006cac:	4642      	mov	r2, r8
 8006cae:	189b      	adds	r3, r3, r2
 8006cb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006cb4:	464b      	mov	r3, r9
 8006cb6:	460a      	mov	r2, r1
 8006cb8:	eb42 0303 	adc.w	r3, r2, r3
 8006cbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006cca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ccc:	f04f 0200 	mov.w	r2, #0
 8006cd0:	f04f 0300 	mov.w	r3, #0
 8006cd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006cd8:	4649      	mov	r1, r9
 8006cda:	008b      	lsls	r3, r1, #2
 8006cdc:	4641      	mov	r1, r8
 8006cde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ce2:	4641      	mov	r1, r8
 8006ce4:	008a      	lsls	r2, r1, #2
 8006ce6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006cea:	f7f9 fac1 	bl	8000270 <__aeabi_uldivmod>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	4b38      	ldr	r3, [pc, #224]	@ (8006dd8 <UART_SetConfig+0x4e4>)
 8006cf6:	fba3 2301 	umull	r2, r3, r3, r1
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	2264      	movs	r2, #100	@ 0x64
 8006cfe:	fb02 f303 	mul.w	r3, r2, r3
 8006d02:	1acb      	subs	r3, r1, r3
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	3332      	adds	r3, #50	@ 0x32
 8006d08:	4a33      	ldr	r2, [pc, #204]	@ (8006dd8 <UART_SetConfig+0x4e4>)
 8006d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0e:	095b      	lsrs	r3, r3, #5
 8006d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d14:	441c      	add	r4, r3
 8006d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006d20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006d24:	4642      	mov	r2, r8
 8006d26:	464b      	mov	r3, r9
 8006d28:	1891      	adds	r1, r2, r2
 8006d2a:	60b9      	str	r1, [r7, #8]
 8006d2c:	415b      	adcs	r3, r3
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d34:	4641      	mov	r1, r8
 8006d36:	1851      	adds	r1, r2, r1
 8006d38:	6039      	str	r1, [r7, #0]
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	414b      	adcs	r3, r1
 8006d3e:	607b      	str	r3, [r7, #4]
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d4c:	4659      	mov	r1, fp
 8006d4e:	00cb      	lsls	r3, r1, #3
 8006d50:	4651      	mov	r1, sl
 8006d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d56:	4651      	mov	r1, sl
 8006d58:	00ca      	lsls	r2, r1, #3
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4603      	mov	r3, r0
 8006d60:	4642      	mov	r2, r8
 8006d62:	189b      	adds	r3, r3, r2
 8006d64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d66:	464b      	mov	r3, r9
 8006d68:	460a      	mov	r2, r1
 8006d6a:	eb42 0303 	adc.w	r3, r2, r3
 8006d6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	f04f 0300 	mov.w	r3, #0
 8006d84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006d88:	4649      	mov	r1, r9
 8006d8a:	008b      	lsls	r3, r1, #2
 8006d8c:	4641      	mov	r1, r8
 8006d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d92:	4641      	mov	r1, r8
 8006d94:	008a      	lsls	r2, r1, #2
 8006d96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006d9a:	f7f9 fa69 	bl	8000270 <__aeabi_uldivmod>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd8 <UART_SetConfig+0x4e4>)
 8006da4:	fba3 1302 	umull	r1, r3, r3, r2
 8006da8:	095b      	lsrs	r3, r3, #5
 8006daa:	2164      	movs	r1, #100	@ 0x64
 8006dac:	fb01 f303 	mul.w	r3, r1, r3
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	3332      	adds	r3, #50	@ 0x32
 8006db6:	4a08      	ldr	r2, [pc, #32]	@ (8006dd8 <UART_SetConfig+0x4e4>)
 8006db8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dbc:	095b      	lsrs	r3, r3, #5
 8006dbe:	f003 020f 	and.w	r2, r3, #15
 8006dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4422      	add	r2, r4
 8006dca:	609a      	str	r2, [r3, #8]
}
 8006dcc:	bf00      	nop
 8006dce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dd8:	51eb851f 	.word	0x51eb851f

08006ddc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	6812      	ldr	r2, [r2, #0]
 8006df4:	f023 0101 	bic.w	r1, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d102      	bne.n	8006e0c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006e06:	2340      	movs	r3, #64	@ 0x40
 8006e08:	617b      	str	r3, [r7, #20]
 8006e0a:	e001      	b.n	8006e10 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006e1c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006e22:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006e28:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006e2e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006e34:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006e3a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8006e40:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8006e46:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8006e4c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8006e52:	4313      	orrs	r3, r2
 8006e54:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8006e6a:	4b10      	ldr	r3, [pc, #64]	@ (8006eac <FSMC_NORSRAM_Init+0xd0>)
 8006e6c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006e74:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006e7c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	43db      	mvns	r3, r3
 8006e8c:	ea02 0103 	and.w	r1, r2, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	4319      	orrs	r1, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	371c      	adds	r7, #28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	0008fb7f 	.word	0x0008fb7f

08006eb0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	1c5a      	adds	r2, r3, #1
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec6:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	021b      	lsls	r3, r3, #8
 8006edc:	431a      	orrs	r2, r3
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	041b      	lsls	r3, r3, #16
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	051b      	lsls	r3, r3, #20
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	3b02      	subs	r3, #2
 8006ef6:	061b      	lsls	r3, r3, #24
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	3201      	adds	r2, #1
 8006f04:	4319      	orrs	r1, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3714      	adds	r7, #20
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
	...

08006f1c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f30:	d11d      	bne.n	8006f6e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f3a:	4b13      	ldr	r3, [pc, #76]	@ (8006f88 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	6811      	ldr	r1, [r2, #0]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	6852      	ldr	r2, [r2, #4]
 8006f46:	0112      	lsls	r2, r2, #4
 8006f48:	4311      	orrs	r1, r2
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	6892      	ldr	r2, [r2, #8]
 8006f4e:	0212      	lsls	r2, r2, #8
 8006f50:	4311      	orrs	r1, r2
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	6992      	ldr	r2, [r2, #24]
 8006f56:	4311      	orrs	r1, r2
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	68d2      	ldr	r2, [r2, #12]
 8006f5c:	0412      	lsls	r2, r2, #16
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	ea43 0102 	orr.w	r1, r3, r2
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006f6c:	e005      	b.n	8006f7a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8006f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	cff00000 	.word	0xcff00000

08006f8c <siprintf>:
 8006f8c:	b40e      	push	{r1, r2, r3}
 8006f8e:	b500      	push	{lr}
 8006f90:	b09c      	sub	sp, #112	@ 0x70
 8006f92:	ab1d      	add	r3, sp, #116	@ 0x74
 8006f94:	9002      	str	r0, [sp, #8]
 8006f96:	9006      	str	r0, [sp, #24]
 8006f98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f9c:	4809      	ldr	r0, [pc, #36]	@ (8006fc4 <siprintf+0x38>)
 8006f9e:	9107      	str	r1, [sp, #28]
 8006fa0:	9104      	str	r1, [sp, #16]
 8006fa2:	4909      	ldr	r1, [pc, #36]	@ (8006fc8 <siprintf+0x3c>)
 8006fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fa8:	9105      	str	r1, [sp, #20]
 8006faa:	6800      	ldr	r0, [r0, #0]
 8006fac:	9301      	str	r3, [sp, #4]
 8006fae:	a902      	add	r1, sp, #8
 8006fb0:	f000 f994 	bl	80072dc <_svfiprintf_r>
 8006fb4:	9b02      	ldr	r3, [sp, #8]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	701a      	strb	r2, [r3, #0]
 8006fba:	b01c      	add	sp, #112	@ 0x70
 8006fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fc0:	b003      	add	sp, #12
 8006fc2:	4770      	bx	lr
 8006fc4:	20000248 	.word	0x20000248
 8006fc8:	ffff0208 	.word	0xffff0208

08006fcc <memset>:
 8006fcc:	4402      	add	r2, r0
 8006fce:	4603      	mov	r3, r0
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d100      	bne.n	8006fd6 <memset+0xa>
 8006fd4:	4770      	bx	lr
 8006fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006fda:	e7f9      	b.n	8006fd0 <memset+0x4>

08006fdc <__errno>:
 8006fdc:	4b01      	ldr	r3, [pc, #4]	@ (8006fe4 <__errno+0x8>)
 8006fde:	6818      	ldr	r0, [r3, #0]
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20000248 	.word	0x20000248

08006fe8 <__libc_init_array>:
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	4d0d      	ldr	r5, [pc, #52]	@ (8007020 <__libc_init_array+0x38>)
 8006fec:	4c0d      	ldr	r4, [pc, #52]	@ (8007024 <__libc_init_array+0x3c>)
 8006fee:	1b64      	subs	r4, r4, r5
 8006ff0:	10a4      	asrs	r4, r4, #2
 8006ff2:	2600      	movs	r6, #0
 8006ff4:	42a6      	cmp	r6, r4
 8006ff6:	d109      	bne.n	800700c <__libc_init_array+0x24>
 8006ff8:	4d0b      	ldr	r5, [pc, #44]	@ (8007028 <__libc_init_array+0x40>)
 8006ffa:	4c0c      	ldr	r4, [pc, #48]	@ (800702c <__libc_init_array+0x44>)
 8006ffc:	f000 fc66 	bl	80078cc <_init>
 8007000:	1b64      	subs	r4, r4, r5
 8007002:	10a4      	asrs	r4, r4, #2
 8007004:	2600      	movs	r6, #0
 8007006:	42a6      	cmp	r6, r4
 8007008:	d105      	bne.n	8007016 <__libc_init_array+0x2e>
 800700a:	bd70      	pop	{r4, r5, r6, pc}
 800700c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007010:	4798      	blx	r3
 8007012:	3601      	adds	r6, #1
 8007014:	e7ee      	b.n	8006ff4 <__libc_init_array+0xc>
 8007016:	f855 3b04 	ldr.w	r3, [r5], #4
 800701a:	4798      	blx	r3
 800701c:	3601      	adds	r6, #1
 800701e:	e7f2      	b.n	8007006 <__libc_init_array+0x1e>
 8007020:	0800a918 	.word	0x0800a918
 8007024:	0800a918 	.word	0x0800a918
 8007028:	0800a918 	.word	0x0800a918
 800702c:	0800a91c 	.word	0x0800a91c

08007030 <__retarget_lock_acquire_recursive>:
 8007030:	4770      	bx	lr

08007032 <__retarget_lock_release_recursive>:
 8007032:	4770      	bx	lr

08007034 <_free_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	4605      	mov	r5, r0
 8007038:	2900      	cmp	r1, #0
 800703a:	d041      	beq.n	80070c0 <_free_r+0x8c>
 800703c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007040:	1f0c      	subs	r4, r1, #4
 8007042:	2b00      	cmp	r3, #0
 8007044:	bfb8      	it	lt
 8007046:	18e4      	addlt	r4, r4, r3
 8007048:	f000 f8e0 	bl	800720c <__malloc_lock>
 800704c:	4a1d      	ldr	r2, [pc, #116]	@ (80070c4 <_free_r+0x90>)
 800704e:	6813      	ldr	r3, [r2, #0]
 8007050:	b933      	cbnz	r3, 8007060 <_free_r+0x2c>
 8007052:	6063      	str	r3, [r4, #4]
 8007054:	6014      	str	r4, [r2, #0]
 8007056:	4628      	mov	r0, r5
 8007058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800705c:	f000 b8dc 	b.w	8007218 <__malloc_unlock>
 8007060:	42a3      	cmp	r3, r4
 8007062:	d908      	bls.n	8007076 <_free_r+0x42>
 8007064:	6820      	ldr	r0, [r4, #0]
 8007066:	1821      	adds	r1, r4, r0
 8007068:	428b      	cmp	r3, r1
 800706a:	bf01      	itttt	eq
 800706c:	6819      	ldreq	r1, [r3, #0]
 800706e:	685b      	ldreq	r3, [r3, #4]
 8007070:	1809      	addeq	r1, r1, r0
 8007072:	6021      	streq	r1, [r4, #0]
 8007074:	e7ed      	b.n	8007052 <_free_r+0x1e>
 8007076:	461a      	mov	r2, r3
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	b10b      	cbz	r3, 8007080 <_free_r+0x4c>
 800707c:	42a3      	cmp	r3, r4
 800707e:	d9fa      	bls.n	8007076 <_free_r+0x42>
 8007080:	6811      	ldr	r1, [r2, #0]
 8007082:	1850      	adds	r0, r2, r1
 8007084:	42a0      	cmp	r0, r4
 8007086:	d10b      	bne.n	80070a0 <_free_r+0x6c>
 8007088:	6820      	ldr	r0, [r4, #0]
 800708a:	4401      	add	r1, r0
 800708c:	1850      	adds	r0, r2, r1
 800708e:	4283      	cmp	r3, r0
 8007090:	6011      	str	r1, [r2, #0]
 8007092:	d1e0      	bne.n	8007056 <_free_r+0x22>
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	6053      	str	r3, [r2, #4]
 800709a:	4408      	add	r0, r1
 800709c:	6010      	str	r0, [r2, #0]
 800709e:	e7da      	b.n	8007056 <_free_r+0x22>
 80070a0:	d902      	bls.n	80070a8 <_free_r+0x74>
 80070a2:	230c      	movs	r3, #12
 80070a4:	602b      	str	r3, [r5, #0]
 80070a6:	e7d6      	b.n	8007056 <_free_r+0x22>
 80070a8:	6820      	ldr	r0, [r4, #0]
 80070aa:	1821      	adds	r1, r4, r0
 80070ac:	428b      	cmp	r3, r1
 80070ae:	bf04      	itt	eq
 80070b0:	6819      	ldreq	r1, [r3, #0]
 80070b2:	685b      	ldreq	r3, [r3, #4]
 80070b4:	6063      	str	r3, [r4, #4]
 80070b6:	bf04      	itt	eq
 80070b8:	1809      	addeq	r1, r1, r0
 80070ba:	6021      	streq	r1, [r4, #0]
 80070bc:	6054      	str	r4, [r2, #4]
 80070be:	e7ca      	b.n	8007056 <_free_r+0x22>
 80070c0:	bd38      	pop	{r3, r4, r5, pc}
 80070c2:	bf00      	nop
 80070c4:	200009c8 	.word	0x200009c8

080070c8 <sbrk_aligned>:
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	4e0f      	ldr	r6, [pc, #60]	@ (8007108 <sbrk_aligned+0x40>)
 80070cc:	460c      	mov	r4, r1
 80070ce:	6831      	ldr	r1, [r6, #0]
 80070d0:	4605      	mov	r5, r0
 80070d2:	b911      	cbnz	r1, 80070da <sbrk_aligned+0x12>
 80070d4:	f000 fba6 	bl	8007824 <_sbrk_r>
 80070d8:	6030      	str	r0, [r6, #0]
 80070da:	4621      	mov	r1, r4
 80070dc:	4628      	mov	r0, r5
 80070de:	f000 fba1 	bl	8007824 <_sbrk_r>
 80070e2:	1c43      	adds	r3, r0, #1
 80070e4:	d103      	bne.n	80070ee <sbrk_aligned+0x26>
 80070e6:	f04f 34ff 	mov.w	r4, #4294967295
 80070ea:	4620      	mov	r0, r4
 80070ec:	bd70      	pop	{r4, r5, r6, pc}
 80070ee:	1cc4      	adds	r4, r0, #3
 80070f0:	f024 0403 	bic.w	r4, r4, #3
 80070f4:	42a0      	cmp	r0, r4
 80070f6:	d0f8      	beq.n	80070ea <sbrk_aligned+0x22>
 80070f8:	1a21      	subs	r1, r4, r0
 80070fa:	4628      	mov	r0, r5
 80070fc:	f000 fb92 	bl	8007824 <_sbrk_r>
 8007100:	3001      	adds	r0, #1
 8007102:	d1f2      	bne.n	80070ea <sbrk_aligned+0x22>
 8007104:	e7ef      	b.n	80070e6 <sbrk_aligned+0x1e>
 8007106:	bf00      	nop
 8007108:	200009c4 	.word	0x200009c4

0800710c <_malloc_r>:
 800710c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007110:	1ccd      	adds	r5, r1, #3
 8007112:	f025 0503 	bic.w	r5, r5, #3
 8007116:	3508      	adds	r5, #8
 8007118:	2d0c      	cmp	r5, #12
 800711a:	bf38      	it	cc
 800711c:	250c      	movcc	r5, #12
 800711e:	2d00      	cmp	r5, #0
 8007120:	4606      	mov	r6, r0
 8007122:	db01      	blt.n	8007128 <_malloc_r+0x1c>
 8007124:	42a9      	cmp	r1, r5
 8007126:	d904      	bls.n	8007132 <_malloc_r+0x26>
 8007128:	230c      	movs	r3, #12
 800712a:	6033      	str	r3, [r6, #0]
 800712c:	2000      	movs	r0, #0
 800712e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007132:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007208 <_malloc_r+0xfc>
 8007136:	f000 f869 	bl	800720c <__malloc_lock>
 800713a:	f8d8 3000 	ldr.w	r3, [r8]
 800713e:	461c      	mov	r4, r3
 8007140:	bb44      	cbnz	r4, 8007194 <_malloc_r+0x88>
 8007142:	4629      	mov	r1, r5
 8007144:	4630      	mov	r0, r6
 8007146:	f7ff ffbf 	bl	80070c8 <sbrk_aligned>
 800714a:	1c43      	adds	r3, r0, #1
 800714c:	4604      	mov	r4, r0
 800714e:	d158      	bne.n	8007202 <_malloc_r+0xf6>
 8007150:	f8d8 4000 	ldr.w	r4, [r8]
 8007154:	4627      	mov	r7, r4
 8007156:	2f00      	cmp	r7, #0
 8007158:	d143      	bne.n	80071e2 <_malloc_r+0xd6>
 800715a:	2c00      	cmp	r4, #0
 800715c:	d04b      	beq.n	80071f6 <_malloc_r+0xea>
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	4639      	mov	r1, r7
 8007162:	4630      	mov	r0, r6
 8007164:	eb04 0903 	add.w	r9, r4, r3
 8007168:	f000 fb5c 	bl	8007824 <_sbrk_r>
 800716c:	4581      	cmp	r9, r0
 800716e:	d142      	bne.n	80071f6 <_malloc_r+0xea>
 8007170:	6821      	ldr	r1, [r4, #0]
 8007172:	1a6d      	subs	r5, r5, r1
 8007174:	4629      	mov	r1, r5
 8007176:	4630      	mov	r0, r6
 8007178:	f7ff ffa6 	bl	80070c8 <sbrk_aligned>
 800717c:	3001      	adds	r0, #1
 800717e:	d03a      	beq.n	80071f6 <_malloc_r+0xea>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	442b      	add	r3, r5
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	f8d8 3000 	ldr.w	r3, [r8]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	bb62      	cbnz	r2, 80071e8 <_malloc_r+0xdc>
 800718e:	f8c8 7000 	str.w	r7, [r8]
 8007192:	e00f      	b.n	80071b4 <_malloc_r+0xa8>
 8007194:	6822      	ldr	r2, [r4, #0]
 8007196:	1b52      	subs	r2, r2, r5
 8007198:	d420      	bmi.n	80071dc <_malloc_r+0xd0>
 800719a:	2a0b      	cmp	r2, #11
 800719c:	d917      	bls.n	80071ce <_malloc_r+0xc2>
 800719e:	1961      	adds	r1, r4, r5
 80071a0:	42a3      	cmp	r3, r4
 80071a2:	6025      	str	r5, [r4, #0]
 80071a4:	bf18      	it	ne
 80071a6:	6059      	strne	r1, [r3, #4]
 80071a8:	6863      	ldr	r3, [r4, #4]
 80071aa:	bf08      	it	eq
 80071ac:	f8c8 1000 	streq.w	r1, [r8]
 80071b0:	5162      	str	r2, [r4, r5]
 80071b2:	604b      	str	r3, [r1, #4]
 80071b4:	4630      	mov	r0, r6
 80071b6:	f000 f82f 	bl	8007218 <__malloc_unlock>
 80071ba:	f104 000b 	add.w	r0, r4, #11
 80071be:	1d23      	adds	r3, r4, #4
 80071c0:	f020 0007 	bic.w	r0, r0, #7
 80071c4:	1ac2      	subs	r2, r0, r3
 80071c6:	bf1c      	itt	ne
 80071c8:	1a1b      	subne	r3, r3, r0
 80071ca:	50a3      	strne	r3, [r4, r2]
 80071cc:	e7af      	b.n	800712e <_malloc_r+0x22>
 80071ce:	6862      	ldr	r2, [r4, #4]
 80071d0:	42a3      	cmp	r3, r4
 80071d2:	bf0c      	ite	eq
 80071d4:	f8c8 2000 	streq.w	r2, [r8]
 80071d8:	605a      	strne	r2, [r3, #4]
 80071da:	e7eb      	b.n	80071b4 <_malloc_r+0xa8>
 80071dc:	4623      	mov	r3, r4
 80071de:	6864      	ldr	r4, [r4, #4]
 80071e0:	e7ae      	b.n	8007140 <_malloc_r+0x34>
 80071e2:	463c      	mov	r4, r7
 80071e4:	687f      	ldr	r7, [r7, #4]
 80071e6:	e7b6      	b.n	8007156 <_malloc_r+0x4a>
 80071e8:	461a      	mov	r2, r3
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	42a3      	cmp	r3, r4
 80071ee:	d1fb      	bne.n	80071e8 <_malloc_r+0xdc>
 80071f0:	2300      	movs	r3, #0
 80071f2:	6053      	str	r3, [r2, #4]
 80071f4:	e7de      	b.n	80071b4 <_malloc_r+0xa8>
 80071f6:	230c      	movs	r3, #12
 80071f8:	6033      	str	r3, [r6, #0]
 80071fa:	4630      	mov	r0, r6
 80071fc:	f000 f80c 	bl	8007218 <__malloc_unlock>
 8007200:	e794      	b.n	800712c <_malloc_r+0x20>
 8007202:	6005      	str	r5, [r0, #0]
 8007204:	e7d6      	b.n	80071b4 <_malloc_r+0xa8>
 8007206:	bf00      	nop
 8007208:	200009c8 	.word	0x200009c8

0800720c <__malloc_lock>:
 800720c:	4801      	ldr	r0, [pc, #4]	@ (8007214 <__malloc_lock+0x8>)
 800720e:	f7ff bf0f 	b.w	8007030 <__retarget_lock_acquire_recursive>
 8007212:	bf00      	nop
 8007214:	200009c0 	.word	0x200009c0

08007218 <__malloc_unlock>:
 8007218:	4801      	ldr	r0, [pc, #4]	@ (8007220 <__malloc_unlock+0x8>)
 800721a:	f7ff bf0a 	b.w	8007032 <__retarget_lock_release_recursive>
 800721e:	bf00      	nop
 8007220:	200009c0 	.word	0x200009c0

08007224 <__ssputs_r>:
 8007224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007228:	688e      	ldr	r6, [r1, #8]
 800722a:	461f      	mov	r7, r3
 800722c:	42be      	cmp	r6, r7
 800722e:	680b      	ldr	r3, [r1, #0]
 8007230:	4682      	mov	sl, r0
 8007232:	460c      	mov	r4, r1
 8007234:	4690      	mov	r8, r2
 8007236:	d82d      	bhi.n	8007294 <__ssputs_r+0x70>
 8007238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800723c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007240:	d026      	beq.n	8007290 <__ssputs_r+0x6c>
 8007242:	6965      	ldr	r5, [r4, #20]
 8007244:	6909      	ldr	r1, [r1, #16]
 8007246:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800724a:	eba3 0901 	sub.w	r9, r3, r1
 800724e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007252:	1c7b      	adds	r3, r7, #1
 8007254:	444b      	add	r3, r9
 8007256:	106d      	asrs	r5, r5, #1
 8007258:	429d      	cmp	r5, r3
 800725a:	bf38      	it	cc
 800725c:	461d      	movcc	r5, r3
 800725e:	0553      	lsls	r3, r2, #21
 8007260:	d527      	bpl.n	80072b2 <__ssputs_r+0x8e>
 8007262:	4629      	mov	r1, r5
 8007264:	f7ff ff52 	bl	800710c <_malloc_r>
 8007268:	4606      	mov	r6, r0
 800726a:	b360      	cbz	r0, 80072c6 <__ssputs_r+0xa2>
 800726c:	6921      	ldr	r1, [r4, #16]
 800726e:	464a      	mov	r2, r9
 8007270:	f000 fae8 	bl	8007844 <memcpy>
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800727a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800727e:	81a3      	strh	r3, [r4, #12]
 8007280:	6126      	str	r6, [r4, #16]
 8007282:	6165      	str	r5, [r4, #20]
 8007284:	444e      	add	r6, r9
 8007286:	eba5 0509 	sub.w	r5, r5, r9
 800728a:	6026      	str	r6, [r4, #0]
 800728c:	60a5      	str	r5, [r4, #8]
 800728e:	463e      	mov	r6, r7
 8007290:	42be      	cmp	r6, r7
 8007292:	d900      	bls.n	8007296 <__ssputs_r+0x72>
 8007294:	463e      	mov	r6, r7
 8007296:	6820      	ldr	r0, [r4, #0]
 8007298:	4632      	mov	r2, r6
 800729a:	4641      	mov	r1, r8
 800729c:	f000 faa8 	bl	80077f0 <memmove>
 80072a0:	68a3      	ldr	r3, [r4, #8]
 80072a2:	1b9b      	subs	r3, r3, r6
 80072a4:	60a3      	str	r3, [r4, #8]
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	4433      	add	r3, r6
 80072aa:	6023      	str	r3, [r4, #0]
 80072ac:	2000      	movs	r0, #0
 80072ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b2:	462a      	mov	r2, r5
 80072b4:	f000 fad4 	bl	8007860 <_realloc_r>
 80072b8:	4606      	mov	r6, r0
 80072ba:	2800      	cmp	r0, #0
 80072bc:	d1e0      	bne.n	8007280 <__ssputs_r+0x5c>
 80072be:	6921      	ldr	r1, [r4, #16]
 80072c0:	4650      	mov	r0, sl
 80072c2:	f7ff feb7 	bl	8007034 <_free_r>
 80072c6:	230c      	movs	r3, #12
 80072c8:	f8ca 3000 	str.w	r3, [sl]
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072d2:	81a3      	strh	r3, [r4, #12]
 80072d4:	f04f 30ff 	mov.w	r0, #4294967295
 80072d8:	e7e9      	b.n	80072ae <__ssputs_r+0x8a>
	...

080072dc <_svfiprintf_r>:
 80072dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	4698      	mov	r8, r3
 80072e2:	898b      	ldrh	r3, [r1, #12]
 80072e4:	061b      	lsls	r3, r3, #24
 80072e6:	b09d      	sub	sp, #116	@ 0x74
 80072e8:	4607      	mov	r7, r0
 80072ea:	460d      	mov	r5, r1
 80072ec:	4614      	mov	r4, r2
 80072ee:	d510      	bpl.n	8007312 <_svfiprintf_r+0x36>
 80072f0:	690b      	ldr	r3, [r1, #16]
 80072f2:	b973      	cbnz	r3, 8007312 <_svfiprintf_r+0x36>
 80072f4:	2140      	movs	r1, #64	@ 0x40
 80072f6:	f7ff ff09 	bl	800710c <_malloc_r>
 80072fa:	6028      	str	r0, [r5, #0]
 80072fc:	6128      	str	r0, [r5, #16]
 80072fe:	b930      	cbnz	r0, 800730e <_svfiprintf_r+0x32>
 8007300:	230c      	movs	r3, #12
 8007302:	603b      	str	r3, [r7, #0]
 8007304:	f04f 30ff 	mov.w	r0, #4294967295
 8007308:	b01d      	add	sp, #116	@ 0x74
 800730a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730e:	2340      	movs	r3, #64	@ 0x40
 8007310:	616b      	str	r3, [r5, #20]
 8007312:	2300      	movs	r3, #0
 8007314:	9309      	str	r3, [sp, #36]	@ 0x24
 8007316:	2320      	movs	r3, #32
 8007318:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800731c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007320:	2330      	movs	r3, #48	@ 0x30
 8007322:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80074c0 <_svfiprintf_r+0x1e4>
 8007326:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800732a:	f04f 0901 	mov.w	r9, #1
 800732e:	4623      	mov	r3, r4
 8007330:	469a      	mov	sl, r3
 8007332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007336:	b10a      	cbz	r2, 800733c <_svfiprintf_r+0x60>
 8007338:	2a25      	cmp	r2, #37	@ 0x25
 800733a:	d1f9      	bne.n	8007330 <_svfiprintf_r+0x54>
 800733c:	ebba 0b04 	subs.w	fp, sl, r4
 8007340:	d00b      	beq.n	800735a <_svfiprintf_r+0x7e>
 8007342:	465b      	mov	r3, fp
 8007344:	4622      	mov	r2, r4
 8007346:	4629      	mov	r1, r5
 8007348:	4638      	mov	r0, r7
 800734a:	f7ff ff6b 	bl	8007224 <__ssputs_r>
 800734e:	3001      	adds	r0, #1
 8007350:	f000 80a7 	beq.w	80074a2 <_svfiprintf_r+0x1c6>
 8007354:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007356:	445a      	add	r2, fp
 8007358:	9209      	str	r2, [sp, #36]	@ 0x24
 800735a:	f89a 3000 	ldrb.w	r3, [sl]
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 809f 	beq.w	80074a2 <_svfiprintf_r+0x1c6>
 8007364:	2300      	movs	r3, #0
 8007366:	f04f 32ff 	mov.w	r2, #4294967295
 800736a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800736e:	f10a 0a01 	add.w	sl, sl, #1
 8007372:	9304      	str	r3, [sp, #16]
 8007374:	9307      	str	r3, [sp, #28]
 8007376:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800737a:	931a      	str	r3, [sp, #104]	@ 0x68
 800737c:	4654      	mov	r4, sl
 800737e:	2205      	movs	r2, #5
 8007380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007384:	484e      	ldr	r0, [pc, #312]	@ (80074c0 <_svfiprintf_r+0x1e4>)
 8007386:	f7f8 ff23 	bl	80001d0 <memchr>
 800738a:	9a04      	ldr	r2, [sp, #16]
 800738c:	b9d8      	cbnz	r0, 80073c6 <_svfiprintf_r+0xea>
 800738e:	06d0      	lsls	r0, r2, #27
 8007390:	bf44      	itt	mi
 8007392:	2320      	movmi	r3, #32
 8007394:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007398:	0711      	lsls	r1, r2, #28
 800739a:	bf44      	itt	mi
 800739c:	232b      	movmi	r3, #43	@ 0x2b
 800739e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073a2:	f89a 3000 	ldrb.w	r3, [sl]
 80073a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80073a8:	d015      	beq.n	80073d6 <_svfiprintf_r+0xfa>
 80073aa:	9a07      	ldr	r2, [sp, #28]
 80073ac:	4654      	mov	r4, sl
 80073ae:	2000      	movs	r0, #0
 80073b0:	f04f 0c0a 	mov.w	ip, #10
 80073b4:	4621      	mov	r1, r4
 80073b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073ba:	3b30      	subs	r3, #48	@ 0x30
 80073bc:	2b09      	cmp	r3, #9
 80073be:	d94b      	bls.n	8007458 <_svfiprintf_r+0x17c>
 80073c0:	b1b0      	cbz	r0, 80073f0 <_svfiprintf_r+0x114>
 80073c2:	9207      	str	r2, [sp, #28]
 80073c4:	e014      	b.n	80073f0 <_svfiprintf_r+0x114>
 80073c6:	eba0 0308 	sub.w	r3, r0, r8
 80073ca:	fa09 f303 	lsl.w	r3, r9, r3
 80073ce:	4313      	orrs	r3, r2
 80073d0:	9304      	str	r3, [sp, #16]
 80073d2:	46a2      	mov	sl, r4
 80073d4:	e7d2      	b.n	800737c <_svfiprintf_r+0xa0>
 80073d6:	9b03      	ldr	r3, [sp, #12]
 80073d8:	1d19      	adds	r1, r3, #4
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	9103      	str	r1, [sp, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	bfbb      	ittet	lt
 80073e2:	425b      	neglt	r3, r3
 80073e4:	f042 0202 	orrlt.w	r2, r2, #2
 80073e8:	9307      	strge	r3, [sp, #28]
 80073ea:	9307      	strlt	r3, [sp, #28]
 80073ec:	bfb8      	it	lt
 80073ee:	9204      	strlt	r2, [sp, #16]
 80073f0:	7823      	ldrb	r3, [r4, #0]
 80073f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80073f4:	d10a      	bne.n	800740c <_svfiprintf_r+0x130>
 80073f6:	7863      	ldrb	r3, [r4, #1]
 80073f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80073fa:	d132      	bne.n	8007462 <_svfiprintf_r+0x186>
 80073fc:	9b03      	ldr	r3, [sp, #12]
 80073fe:	1d1a      	adds	r2, r3, #4
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	9203      	str	r2, [sp, #12]
 8007404:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007408:	3402      	adds	r4, #2
 800740a:	9305      	str	r3, [sp, #20]
 800740c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80074d0 <_svfiprintf_r+0x1f4>
 8007410:	7821      	ldrb	r1, [r4, #0]
 8007412:	2203      	movs	r2, #3
 8007414:	4650      	mov	r0, sl
 8007416:	f7f8 fedb 	bl	80001d0 <memchr>
 800741a:	b138      	cbz	r0, 800742c <_svfiprintf_r+0x150>
 800741c:	9b04      	ldr	r3, [sp, #16]
 800741e:	eba0 000a 	sub.w	r0, r0, sl
 8007422:	2240      	movs	r2, #64	@ 0x40
 8007424:	4082      	lsls	r2, r0
 8007426:	4313      	orrs	r3, r2
 8007428:	3401      	adds	r4, #1
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007430:	4824      	ldr	r0, [pc, #144]	@ (80074c4 <_svfiprintf_r+0x1e8>)
 8007432:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007436:	2206      	movs	r2, #6
 8007438:	f7f8 feca 	bl	80001d0 <memchr>
 800743c:	2800      	cmp	r0, #0
 800743e:	d036      	beq.n	80074ae <_svfiprintf_r+0x1d2>
 8007440:	4b21      	ldr	r3, [pc, #132]	@ (80074c8 <_svfiprintf_r+0x1ec>)
 8007442:	bb1b      	cbnz	r3, 800748c <_svfiprintf_r+0x1b0>
 8007444:	9b03      	ldr	r3, [sp, #12]
 8007446:	3307      	adds	r3, #7
 8007448:	f023 0307 	bic.w	r3, r3, #7
 800744c:	3308      	adds	r3, #8
 800744e:	9303      	str	r3, [sp, #12]
 8007450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007452:	4433      	add	r3, r6
 8007454:	9309      	str	r3, [sp, #36]	@ 0x24
 8007456:	e76a      	b.n	800732e <_svfiprintf_r+0x52>
 8007458:	fb0c 3202 	mla	r2, ip, r2, r3
 800745c:	460c      	mov	r4, r1
 800745e:	2001      	movs	r0, #1
 8007460:	e7a8      	b.n	80073b4 <_svfiprintf_r+0xd8>
 8007462:	2300      	movs	r3, #0
 8007464:	3401      	adds	r4, #1
 8007466:	9305      	str	r3, [sp, #20]
 8007468:	4619      	mov	r1, r3
 800746a:	f04f 0c0a 	mov.w	ip, #10
 800746e:	4620      	mov	r0, r4
 8007470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007474:	3a30      	subs	r2, #48	@ 0x30
 8007476:	2a09      	cmp	r2, #9
 8007478:	d903      	bls.n	8007482 <_svfiprintf_r+0x1a6>
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0c6      	beq.n	800740c <_svfiprintf_r+0x130>
 800747e:	9105      	str	r1, [sp, #20]
 8007480:	e7c4      	b.n	800740c <_svfiprintf_r+0x130>
 8007482:	fb0c 2101 	mla	r1, ip, r1, r2
 8007486:	4604      	mov	r4, r0
 8007488:	2301      	movs	r3, #1
 800748a:	e7f0      	b.n	800746e <_svfiprintf_r+0x192>
 800748c:	ab03      	add	r3, sp, #12
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	462a      	mov	r2, r5
 8007492:	4b0e      	ldr	r3, [pc, #56]	@ (80074cc <_svfiprintf_r+0x1f0>)
 8007494:	a904      	add	r1, sp, #16
 8007496:	4638      	mov	r0, r7
 8007498:	f3af 8000 	nop.w
 800749c:	1c42      	adds	r2, r0, #1
 800749e:	4606      	mov	r6, r0
 80074a0:	d1d6      	bne.n	8007450 <_svfiprintf_r+0x174>
 80074a2:	89ab      	ldrh	r3, [r5, #12]
 80074a4:	065b      	lsls	r3, r3, #25
 80074a6:	f53f af2d 	bmi.w	8007304 <_svfiprintf_r+0x28>
 80074aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074ac:	e72c      	b.n	8007308 <_svfiprintf_r+0x2c>
 80074ae:	ab03      	add	r3, sp, #12
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	462a      	mov	r2, r5
 80074b4:	4b05      	ldr	r3, [pc, #20]	@ (80074cc <_svfiprintf_r+0x1f0>)
 80074b6:	a904      	add	r1, sp, #16
 80074b8:	4638      	mov	r0, r7
 80074ba:	f000 f879 	bl	80075b0 <_printf_i>
 80074be:	e7ed      	b.n	800749c <_svfiprintf_r+0x1c0>
 80074c0:	0800a8dc 	.word	0x0800a8dc
 80074c4:	0800a8e6 	.word	0x0800a8e6
 80074c8:	00000000 	.word	0x00000000
 80074cc:	08007225 	.word	0x08007225
 80074d0:	0800a8e2 	.word	0x0800a8e2

080074d4 <_printf_common>:
 80074d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074d8:	4616      	mov	r6, r2
 80074da:	4698      	mov	r8, r3
 80074dc:	688a      	ldr	r2, [r1, #8]
 80074de:	690b      	ldr	r3, [r1, #16]
 80074e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074e4:	4293      	cmp	r3, r2
 80074e6:	bfb8      	it	lt
 80074e8:	4613      	movlt	r3, r2
 80074ea:	6033      	str	r3, [r6, #0]
 80074ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074f0:	4607      	mov	r7, r0
 80074f2:	460c      	mov	r4, r1
 80074f4:	b10a      	cbz	r2, 80074fa <_printf_common+0x26>
 80074f6:	3301      	adds	r3, #1
 80074f8:	6033      	str	r3, [r6, #0]
 80074fa:	6823      	ldr	r3, [r4, #0]
 80074fc:	0699      	lsls	r1, r3, #26
 80074fe:	bf42      	ittt	mi
 8007500:	6833      	ldrmi	r3, [r6, #0]
 8007502:	3302      	addmi	r3, #2
 8007504:	6033      	strmi	r3, [r6, #0]
 8007506:	6825      	ldr	r5, [r4, #0]
 8007508:	f015 0506 	ands.w	r5, r5, #6
 800750c:	d106      	bne.n	800751c <_printf_common+0x48>
 800750e:	f104 0a19 	add.w	sl, r4, #25
 8007512:	68e3      	ldr	r3, [r4, #12]
 8007514:	6832      	ldr	r2, [r6, #0]
 8007516:	1a9b      	subs	r3, r3, r2
 8007518:	42ab      	cmp	r3, r5
 800751a:	dc26      	bgt.n	800756a <_printf_common+0x96>
 800751c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007520:	6822      	ldr	r2, [r4, #0]
 8007522:	3b00      	subs	r3, #0
 8007524:	bf18      	it	ne
 8007526:	2301      	movne	r3, #1
 8007528:	0692      	lsls	r2, r2, #26
 800752a:	d42b      	bmi.n	8007584 <_printf_common+0xb0>
 800752c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007530:	4641      	mov	r1, r8
 8007532:	4638      	mov	r0, r7
 8007534:	47c8      	blx	r9
 8007536:	3001      	adds	r0, #1
 8007538:	d01e      	beq.n	8007578 <_printf_common+0xa4>
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	6922      	ldr	r2, [r4, #16]
 800753e:	f003 0306 	and.w	r3, r3, #6
 8007542:	2b04      	cmp	r3, #4
 8007544:	bf02      	ittt	eq
 8007546:	68e5      	ldreq	r5, [r4, #12]
 8007548:	6833      	ldreq	r3, [r6, #0]
 800754a:	1aed      	subeq	r5, r5, r3
 800754c:	68a3      	ldr	r3, [r4, #8]
 800754e:	bf0c      	ite	eq
 8007550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007554:	2500      	movne	r5, #0
 8007556:	4293      	cmp	r3, r2
 8007558:	bfc4      	itt	gt
 800755a:	1a9b      	subgt	r3, r3, r2
 800755c:	18ed      	addgt	r5, r5, r3
 800755e:	2600      	movs	r6, #0
 8007560:	341a      	adds	r4, #26
 8007562:	42b5      	cmp	r5, r6
 8007564:	d11a      	bne.n	800759c <_printf_common+0xc8>
 8007566:	2000      	movs	r0, #0
 8007568:	e008      	b.n	800757c <_printf_common+0xa8>
 800756a:	2301      	movs	r3, #1
 800756c:	4652      	mov	r2, sl
 800756e:	4641      	mov	r1, r8
 8007570:	4638      	mov	r0, r7
 8007572:	47c8      	blx	r9
 8007574:	3001      	adds	r0, #1
 8007576:	d103      	bne.n	8007580 <_printf_common+0xac>
 8007578:	f04f 30ff 	mov.w	r0, #4294967295
 800757c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007580:	3501      	adds	r5, #1
 8007582:	e7c6      	b.n	8007512 <_printf_common+0x3e>
 8007584:	18e1      	adds	r1, r4, r3
 8007586:	1c5a      	adds	r2, r3, #1
 8007588:	2030      	movs	r0, #48	@ 0x30
 800758a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800758e:	4422      	add	r2, r4
 8007590:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007594:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007598:	3302      	adds	r3, #2
 800759a:	e7c7      	b.n	800752c <_printf_common+0x58>
 800759c:	2301      	movs	r3, #1
 800759e:	4622      	mov	r2, r4
 80075a0:	4641      	mov	r1, r8
 80075a2:	4638      	mov	r0, r7
 80075a4:	47c8      	blx	r9
 80075a6:	3001      	adds	r0, #1
 80075a8:	d0e6      	beq.n	8007578 <_printf_common+0xa4>
 80075aa:	3601      	adds	r6, #1
 80075ac:	e7d9      	b.n	8007562 <_printf_common+0x8e>
	...

080075b0 <_printf_i>:
 80075b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075b4:	7e0f      	ldrb	r7, [r1, #24]
 80075b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075b8:	2f78      	cmp	r7, #120	@ 0x78
 80075ba:	4691      	mov	r9, r2
 80075bc:	4680      	mov	r8, r0
 80075be:	460c      	mov	r4, r1
 80075c0:	469a      	mov	sl, r3
 80075c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075c6:	d807      	bhi.n	80075d8 <_printf_i+0x28>
 80075c8:	2f62      	cmp	r7, #98	@ 0x62
 80075ca:	d80a      	bhi.n	80075e2 <_printf_i+0x32>
 80075cc:	2f00      	cmp	r7, #0
 80075ce:	f000 80d2 	beq.w	8007776 <_printf_i+0x1c6>
 80075d2:	2f58      	cmp	r7, #88	@ 0x58
 80075d4:	f000 80b9 	beq.w	800774a <_printf_i+0x19a>
 80075d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075e0:	e03a      	b.n	8007658 <_printf_i+0xa8>
 80075e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075e6:	2b15      	cmp	r3, #21
 80075e8:	d8f6      	bhi.n	80075d8 <_printf_i+0x28>
 80075ea:	a101      	add	r1, pc, #4	@ (adr r1, 80075f0 <_printf_i+0x40>)
 80075ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075f0:	08007649 	.word	0x08007649
 80075f4:	0800765d 	.word	0x0800765d
 80075f8:	080075d9 	.word	0x080075d9
 80075fc:	080075d9 	.word	0x080075d9
 8007600:	080075d9 	.word	0x080075d9
 8007604:	080075d9 	.word	0x080075d9
 8007608:	0800765d 	.word	0x0800765d
 800760c:	080075d9 	.word	0x080075d9
 8007610:	080075d9 	.word	0x080075d9
 8007614:	080075d9 	.word	0x080075d9
 8007618:	080075d9 	.word	0x080075d9
 800761c:	0800775d 	.word	0x0800775d
 8007620:	08007687 	.word	0x08007687
 8007624:	08007717 	.word	0x08007717
 8007628:	080075d9 	.word	0x080075d9
 800762c:	080075d9 	.word	0x080075d9
 8007630:	0800777f 	.word	0x0800777f
 8007634:	080075d9 	.word	0x080075d9
 8007638:	08007687 	.word	0x08007687
 800763c:	080075d9 	.word	0x080075d9
 8007640:	080075d9 	.word	0x080075d9
 8007644:	0800771f 	.word	0x0800771f
 8007648:	6833      	ldr	r3, [r6, #0]
 800764a:	1d1a      	adds	r2, r3, #4
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6032      	str	r2, [r6, #0]
 8007650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007654:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007658:	2301      	movs	r3, #1
 800765a:	e09d      	b.n	8007798 <_printf_i+0x1e8>
 800765c:	6833      	ldr	r3, [r6, #0]
 800765e:	6820      	ldr	r0, [r4, #0]
 8007660:	1d19      	adds	r1, r3, #4
 8007662:	6031      	str	r1, [r6, #0]
 8007664:	0606      	lsls	r6, r0, #24
 8007666:	d501      	bpl.n	800766c <_printf_i+0xbc>
 8007668:	681d      	ldr	r5, [r3, #0]
 800766a:	e003      	b.n	8007674 <_printf_i+0xc4>
 800766c:	0645      	lsls	r5, r0, #25
 800766e:	d5fb      	bpl.n	8007668 <_printf_i+0xb8>
 8007670:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007674:	2d00      	cmp	r5, #0
 8007676:	da03      	bge.n	8007680 <_printf_i+0xd0>
 8007678:	232d      	movs	r3, #45	@ 0x2d
 800767a:	426d      	negs	r5, r5
 800767c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007680:	4859      	ldr	r0, [pc, #356]	@ (80077e8 <_printf_i+0x238>)
 8007682:	230a      	movs	r3, #10
 8007684:	e011      	b.n	80076aa <_printf_i+0xfa>
 8007686:	6821      	ldr	r1, [r4, #0]
 8007688:	6833      	ldr	r3, [r6, #0]
 800768a:	0608      	lsls	r0, r1, #24
 800768c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007690:	d402      	bmi.n	8007698 <_printf_i+0xe8>
 8007692:	0649      	lsls	r1, r1, #25
 8007694:	bf48      	it	mi
 8007696:	b2ad      	uxthmi	r5, r5
 8007698:	2f6f      	cmp	r7, #111	@ 0x6f
 800769a:	4853      	ldr	r0, [pc, #332]	@ (80077e8 <_printf_i+0x238>)
 800769c:	6033      	str	r3, [r6, #0]
 800769e:	bf14      	ite	ne
 80076a0:	230a      	movne	r3, #10
 80076a2:	2308      	moveq	r3, #8
 80076a4:	2100      	movs	r1, #0
 80076a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076aa:	6866      	ldr	r6, [r4, #4]
 80076ac:	60a6      	str	r6, [r4, #8]
 80076ae:	2e00      	cmp	r6, #0
 80076b0:	bfa2      	ittt	ge
 80076b2:	6821      	ldrge	r1, [r4, #0]
 80076b4:	f021 0104 	bicge.w	r1, r1, #4
 80076b8:	6021      	strge	r1, [r4, #0]
 80076ba:	b90d      	cbnz	r5, 80076c0 <_printf_i+0x110>
 80076bc:	2e00      	cmp	r6, #0
 80076be:	d04b      	beq.n	8007758 <_printf_i+0x1a8>
 80076c0:	4616      	mov	r6, r2
 80076c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80076c6:	fb03 5711 	mls	r7, r3, r1, r5
 80076ca:	5dc7      	ldrb	r7, [r0, r7]
 80076cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076d0:	462f      	mov	r7, r5
 80076d2:	42bb      	cmp	r3, r7
 80076d4:	460d      	mov	r5, r1
 80076d6:	d9f4      	bls.n	80076c2 <_printf_i+0x112>
 80076d8:	2b08      	cmp	r3, #8
 80076da:	d10b      	bne.n	80076f4 <_printf_i+0x144>
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	07df      	lsls	r7, r3, #31
 80076e0:	d508      	bpl.n	80076f4 <_printf_i+0x144>
 80076e2:	6923      	ldr	r3, [r4, #16]
 80076e4:	6861      	ldr	r1, [r4, #4]
 80076e6:	4299      	cmp	r1, r3
 80076e8:	bfde      	ittt	le
 80076ea:	2330      	movle	r3, #48	@ 0x30
 80076ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076f4:	1b92      	subs	r2, r2, r6
 80076f6:	6122      	str	r2, [r4, #16]
 80076f8:	f8cd a000 	str.w	sl, [sp]
 80076fc:	464b      	mov	r3, r9
 80076fe:	aa03      	add	r2, sp, #12
 8007700:	4621      	mov	r1, r4
 8007702:	4640      	mov	r0, r8
 8007704:	f7ff fee6 	bl	80074d4 <_printf_common>
 8007708:	3001      	adds	r0, #1
 800770a:	d14a      	bne.n	80077a2 <_printf_i+0x1f2>
 800770c:	f04f 30ff 	mov.w	r0, #4294967295
 8007710:	b004      	add	sp, #16
 8007712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	f043 0320 	orr.w	r3, r3, #32
 800771c:	6023      	str	r3, [r4, #0]
 800771e:	4833      	ldr	r0, [pc, #204]	@ (80077ec <_printf_i+0x23c>)
 8007720:	2778      	movs	r7, #120	@ 0x78
 8007722:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	6831      	ldr	r1, [r6, #0]
 800772a:	061f      	lsls	r7, r3, #24
 800772c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007730:	d402      	bmi.n	8007738 <_printf_i+0x188>
 8007732:	065f      	lsls	r7, r3, #25
 8007734:	bf48      	it	mi
 8007736:	b2ad      	uxthmi	r5, r5
 8007738:	6031      	str	r1, [r6, #0]
 800773a:	07d9      	lsls	r1, r3, #31
 800773c:	bf44      	itt	mi
 800773e:	f043 0320 	orrmi.w	r3, r3, #32
 8007742:	6023      	strmi	r3, [r4, #0]
 8007744:	b11d      	cbz	r5, 800774e <_printf_i+0x19e>
 8007746:	2310      	movs	r3, #16
 8007748:	e7ac      	b.n	80076a4 <_printf_i+0xf4>
 800774a:	4827      	ldr	r0, [pc, #156]	@ (80077e8 <_printf_i+0x238>)
 800774c:	e7e9      	b.n	8007722 <_printf_i+0x172>
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	f023 0320 	bic.w	r3, r3, #32
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	e7f6      	b.n	8007746 <_printf_i+0x196>
 8007758:	4616      	mov	r6, r2
 800775a:	e7bd      	b.n	80076d8 <_printf_i+0x128>
 800775c:	6833      	ldr	r3, [r6, #0]
 800775e:	6825      	ldr	r5, [r4, #0]
 8007760:	6961      	ldr	r1, [r4, #20]
 8007762:	1d18      	adds	r0, r3, #4
 8007764:	6030      	str	r0, [r6, #0]
 8007766:	062e      	lsls	r6, r5, #24
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	d501      	bpl.n	8007770 <_printf_i+0x1c0>
 800776c:	6019      	str	r1, [r3, #0]
 800776e:	e002      	b.n	8007776 <_printf_i+0x1c6>
 8007770:	0668      	lsls	r0, r5, #25
 8007772:	d5fb      	bpl.n	800776c <_printf_i+0x1bc>
 8007774:	8019      	strh	r1, [r3, #0]
 8007776:	2300      	movs	r3, #0
 8007778:	6123      	str	r3, [r4, #16]
 800777a:	4616      	mov	r6, r2
 800777c:	e7bc      	b.n	80076f8 <_printf_i+0x148>
 800777e:	6833      	ldr	r3, [r6, #0]
 8007780:	1d1a      	adds	r2, r3, #4
 8007782:	6032      	str	r2, [r6, #0]
 8007784:	681e      	ldr	r6, [r3, #0]
 8007786:	6862      	ldr	r2, [r4, #4]
 8007788:	2100      	movs	r1, #0
 800778a:	4630      	mov	r0, r6
 800778c:	f7f8 fd20 	bl	80001d0 <memchr>
 8007790:	b108      	cbz	r0, 8007796 <_printf_i+0x1e6>
 8007792:	1b80      	subs	r0, r0, r6
 8007794:	6060      	str	r0, [r4, #4]
 8007796:	6863      	ldr	r3, [r4, #4]
 8007798:	6123      	str	r3, [r4, #16]
 800779a:	2300      	movs	r3, #0
 800779c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077a0:	e7aa      	b.n	80076f8 <_printf_i+0x148>
 80077a2:	6923      	ldr	r3, [r4, #16]
 80077a4:	4632      	mov	r2, r6
 80077a6:	4649      	mov	r1, r9
 80077a8:	4640      	mov	r0, r8
 80077aa:	47d0      	blx	sl
 80077ac:	3001      	adds	r0, #1
 80077ae:	d0ad      	beq.n	800770c <_printf_i+0x15c>
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	079b      	lsls	r3, r3, #30
 80077b4:	d413      	bmi.n	80077de <_printf_i+0x22e>
 80077b6:	68e0      	ldr	r0, [r4, #12]
 80077b8:	9b03      	ldr	r3, [sp, #12]
 80077ba:	4298      	cmp	r0, r3
 80077bc:	bfb8      	it	lt
 80077be:	4618      	movlt	r0, r3
 80077c0:	e7a6      	b.n	8007710 <_printf_i+0x160>
 80077c2:	2301      	movs	r3, #1
 80077c4:	4632      	mov	r2, r6
 80077c6:	4649      	mov	r1, r9
 80077c8:	4640      	mov	r0, r8
 80077ca:	47d0      	blx	sl
 80077cc:	3001      	adds	r0, #1
 80077ce:	d09d      	beq.n	800770c <_printf_i+0x15c>
 80077d0:	3501      	adds	r5, #1
 80077d2:	68e3      	ldr	r3, [r4, #12]
 80077d4:	9903      	ldr	r1, [sp, #12]
 80077d6:	1a5b      	subs	r3, r3, r1
 80077d8:	42ab      	cmp	r3, r5
 80077da:	dcf2      	bgt.n	80077c2 <_printf_i+0x212>
 80077dc:	e7eb      	b.n	80077b6 <_printf_i+0x206>
 80077de:	2500      	movs	r5, #0
 80077e0:	f104 0619 	add.w	r6, r4, #25
 80077e4:	e7f5      	b.n	80077d2 <_printf_i+0x222>
 80077e6:	bf00      	nop
 80077e8:	0800a8ed 	.word	0x0800a8ed
 80077ec:	0800a8fe 	.word	0x0800a8fe

080077f0 <memmove>:
 80077f0:	4288      	cmp	r0, r1
 80077f2:	b510      	push	{r4, lr}
 80077f4:	eb01 0402 	add.w	r4, r1, r2
 80077f8:	d902      	bls.n	8007800 <memmove+0x10>
 80077fa:	4284      	cmp	r4, r0
 80077fc:	4623      	mov	r3, r4
 80077fe:	d807      	bhi.n	8007810 <memmove+0x20>
 8007800:	1e43      	subs	r3, r0, #1
 8007802:	42a1      	cmp	r1, r4
 8007804:	d008      	beq.n	8007818 <memmove+0x28>
 8007806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800780a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800780e:	e7f8      	b.n	8007802 <memmove+0x12>
 8007810:	4402      	add	r2, r0
 8007812:	4601      	mov	r1, r0
 8007814:	428a      	cmp	r2, r1
 8007816:	d100      	bne.n	800781a <memmove+0x2a>
 8007818:	bd10      	pop	{r4, pc}
 800781a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800781e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007822:	e7f7      	b.n	8007814 <memmove+0x24>

08007824 <_sbrk_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	4d06      	ldr	r5, [pc, #24]	@ (8007840 <_sbrk_r+0x1c>)
 8007828:	2300      	movs	r3, #0
 800782a:	4604      	mov	r4, r0
 800782c:	4608      	mov	r0, r1
 800782e:	602b      	str	r3, [r5, #0]
 8007830:	f7fa fd98 	bl	8002364 <_sbrk>
 8007834:	1c43      	adds	r3, r0, #1
 8007836:	d102      	bne.n	800783e <_sbrk_r+0x1a>
 8007838:	682b      	ldr	r3, [r5, #0]
 800783a:	b103      	cbz	r3, 800783e <_sbrk_r+0x1a>
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	bd38      	pop	{r3, r4, r5, pc}
 8007840:	200009bc 	.word	0x200009bc

08007844 <memcpy>:
 8007844:	440a      	add	r2, r1
 8007846:	4291      	cmp	r1, r2
 8007848:	f100 33ff 	add.w	r3, r0, #4294967295
 800784c:	d100      	bne.n	8007850 <memcpy+0xc>
 800784e:	4770      	bx	lr
 8007850:	b510      	push	{r4, lr}
 8007852:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007856:	f803 4f01 	strb.w	r4, [r3, #1]!
 800785a:	4291      	cmp	r1, r2
 800785c:	d1f9      	bne.n	8007852 <memcpy+0xe>
 800785e:	bd10      	pop	{r4, pc}

08007860 <_realloc_r>:
 8007860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007864:	4680      	mov	r8, r0
 8007866:	4615      	mov	r5, r2
 8007868:	460c      	mov	r4, r1
 800786a:	b921      	cbnz	r1, 8007876 <_realloc_r+0x16>
 800786c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007870:	4611      	mov	r1, r2
 8007872:	f7ff bc4b 	b.w	800710c <_malloc_r>
 8007876:	b92a      	cbnz	r2, 8007884 <_realloc_r+0x24>
 8007878:	f7ff fbdc 	bl	8007034 <_free_r>
 800787c:	2400      	movs	r4, #0
 800787e:	4620      	mov	r0, r4
 8007880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007884:	f000 f81a 	bl	80078bc <_malloc_usable_size_r>
 8007888:	4285      	cmp	r5, r0
 800788a:	4606      	mov	r6, r0
 800788c:	d802      	bhi.n	8007894 <_realloc_r+0x34>
 800788e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007892:	d8f4      	bhi.n	800787e <_realloc_r+0x1e>
 8007894:	4629      	mov	r1, r5
 8007896:	4640      	mov	r0, r8
 8007898:	f7ff fc38 	bl	800710c <_malloc_r>
 800789c:	4607      	mov	r7, r0
 800789e:	2800      	cmp	r0, #0
 80078a0:	d0ec      	beq.n	800787c <_realloc_r+0x1c>
 80078a2:	42b5      	cmp	r5, r6
 80078a4:	462a      	mov	r2, r5
 80078a6:	4621      	mov	r1, r4
 80078a8:	bf28      	it	cs
 80078aa:	4632      	movcs	r2, r6
 80078ac:	f7ff ffca 	bl	8007844 <memcpy>
 80078b0:	4621      	mov	r1, r4
 80078b2:	4640      	mov	r0, r8
 80078b4:	f7ff fbbe 	bl	8007034 <_free_r>
 80078b8:	463c      	mov	r4, r7
 80078ba:	e7e0      	b.n	800787e <_realloc_r+0x1e>

080078bc <_malloc_usable_size_r>:
 80078bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078c0:	1f18      	subs	r0, r3, #4
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	bfbc      	itt	lt
 80078c6:	580b      	ldrlt	r3, [r1, r0]
 80078c8:	18c0      	addlt	r0, r0, r3
 80078ca:	4770      	bx	lr

080078cc <_init>:
 80078cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ce:	bf00      	nop
 80078d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d2:	bc08      	pop	{r3}
 80078d4:	469e      	mov	lr, r3
 80078d6:	4770      	bx	lr

080078d8 <_fini>:
 80078d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078da:	bf00      	nop
 80078dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078de:	bc08      	pop	{r3}
 80078e0:	469e      	mov	lr, r3
 80078e2:	4770      	bx	lr
