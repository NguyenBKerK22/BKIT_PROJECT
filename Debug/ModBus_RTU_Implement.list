
ModBus_RTU_Implement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000308c  08008118  08008118  00018118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1a4  0800b1a4  00020280  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1a4  0800b1a4  0001b1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1ac  0800b1ac  00020280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1ac  0800b1ac  0001b1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b1b0  0800b1b0  0001b1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000280  20000000  0800b1b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020280  2**0
                  CONTENTS
 10 .bss          000009a8  20000280  20000280  00020280  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c28  20000c28  00020280  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016800  00000000  00000000  000202f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003eb3  00000000  00000000  00036af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001478  00000000  00000000  0003a9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fb3  00000000  00000000  0003be20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025cb3  00000000  00000000  0003cdd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b0bf  00000000  00000000  00062a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000de423  00000000  00000000  0007db45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000058e0  00000000  00000000  0015bf68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  00161848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000280 	.word	0x20000280
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008100 	.word	0x08008100

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000284 	.word	0x20000284
 80001cc:	08008100 	.word	0x08008100

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <_f_splitfloat_def>:
uint8_t rx_size;
uint8_t tx_size; // for dummy

/*PRIVATE FUNCTION START DEFINE-----------------------------------------------------------------------------------------------------------*/
static void _f_splitfloat_def(float _input, uint8_t *data)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	ed87 0a01 	vstr	s0, [r7, #4]
 8000db2:	6038      	str	r0, [r7, #0]
	data[0] = *(((uint8_t*)&_input) + 0);
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	781a      	ldrb	r2, [r3, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	701a      	strb	r2, [r3, #0]
	data[1] = *(((uint8_t*)&_input) + 1);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	797a      	ldrb	r2, [r7, #5]
 8000dc2:	701a      	strb	r2, [r3, #0]
	data[2] = *(((uint8_t*)&_input) + 2);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	79ba      	ldrb	r2, [r7, #6]
 8000dca:	701a      	strb	r2, [r3, #0]
	data[3] = *(((uint8_t*)&_input) + 3);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	3303      	adds	r3, #3
 8000dd0:	79fa      	ldrb	r2, [r7, #7]
 8000dd2:	701a      	strb	r2, [r3, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_f_splituint16_def>:

static void _f_splituint16_def(uint16_t input, uint8_t *higherByte, uint8_t *lowerByte)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	81fb      	strh	r3, [r7, #14]
    *higherByte = (input >> 8) & 0xFF; // Lấy 8 bit cao
 8000dee:	89fb      	ldrh	r3, [r7, #14]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	701a      	strb	r2, [r3, #0]
    *lowerByte = input & 0xFF;        // Lấy 8 bit thấp
 8000dfa:	89fb      	ldrh	r3, [r7, #14]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	701a      	strb	r2, [r3, #0]
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <_f_slave_read_multiple_holding_register_handler_def>:

static void _f_slave_read_multiple_holding_register_handler_def(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
	uint16_t startReg = (uint16_t)(rx_buf[2]) << 8 | (uint16_t)(rx_buf[3]);
 8000e16:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <_f_slave_read_multiple_holding_register_handler_def+0x90>)
 8000e18:	789b      	ldrb	r3, [r3, #2]
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <_f_slave_read_multiple_holding_register_handler_def+0x90>)
 8000e20:	78db      	ldrb	r3, [r3, #3]
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	4313      	orrs	r3, r2
 8000e26:	b21b      	sxth	r3, r3
 8000e28:	807b      	strh	r3, [r7, #2]
	uint16_t numberOfReg = (uint16_t)(rx_buf[4]) << 8 | (uint16_t)(rx_buf[5]);
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <_f_slave_read_multiple_holding_register_handler_def+0x90>)
 8000e2c:	791b      	ldrb	r3, [r3, #4]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <_f_slave_read_multiple_holding_register_handler_def+0x90>)
 8000e34:	795b      	ldrb	r3, [r3, #5]
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	803b      	strh	r3, [r7, #0]
	tx_buf[0] = _address_def;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <_f_slave_read_multiple_holding_register_handler_def+0x94>)
 8000e40:	781a      	ldrb	r2, [r3, #0]
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <_f_slave_read_multiple_holding_register_handler_def+0x98>)
 8000e44:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = rx_buf[1];
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <_f_slave_read_multiple_holding_register_handler_def+0x90>)
 8000e48:	785a      	ldrb	r2, [r3, #1]
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <_f_slave_read_multiple_holding_register_handler_def+0x98>)
 8000e4c:	705a      	strb	r2, [r3, #1]
	tx_buf[2] = numberOfReg * 2;
 8000e4e:	883b      	ldrh	r3, [r7, #0]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <_f_slave_read_multiple_holding_register_handler_def+0x98>)
 8000e58:	709a      	strb	r2, [r3, #2]
	int i;
	for(i = 0; i < numberOfReg * 2; i++){
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	e009      	b.n	8000e74 <_f_slave_read_multiple_holding_register_handler_def+0x64>
		tx_buf[i + 3] = _register_def[startReg];
 8000e60:	887a      	ldrh	r2, [r7, #2]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3303      	adds	r3, #3
 8000e66:	4911      	ldr	r1, [pc, #68]	; (8000eac <_f_slave_read_multiple_holding_register_handler_def+0x9c>)
 8000e68:	5c89      	ldrb	r1, [r1, r2]
 8000e6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <_f_slave_read_multiple_holding_register_handler_def+0x98>)
 8000e6c:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < numberOfReg * 2; i++){
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3301      	adds	r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	883b      	ldrh	r3, [r7, #0]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	dbf0      	blt.n	8000e60 <_f_slave_read_multiple_holding_register_handler_def+0x50>
	}
	tx_size = i + 3;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	3303      	adds	r3, #3
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <_f_slave_read_multiple_holding_register_handler_def+0xa0>)
 8000e88:	701a      	strb	r2, [r3, #0]
	f_rs485_send_cmd(tx_buf, tx_size);
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <_f_slave_read_multiple_holding_register_handler_def+0xa0>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <_f_slave_read_multiple_holding_register_handler_def+0x98>)
 8000e92:	f001 fbcd 	bl	8002630 <f_rs485_send_cmd>

	//	Modbus_Transmit_Slave(&slave, hDev->Address, slave.Rx_buf[1], &hDev->Register[startReg], numberOfReg * 2, 100);

	return;
 8000e96:	bf00      	nop

}
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200003b4 	.word	0x200003b4
 8000ea4:	200002b0 	.word	0x200002b0
 8000ea8:	200002b4 	.word	0x200002b4
 8000eac:	2000029c 	.word	0x2000029c
 8000eb0:	200004b6 	.word	0x200004b6

08000eb4 <_f_slave_read_holding_register_handler_def>:

static void _f_slave_read_holding_register_handler_def(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
	return;
 8000eb8:	bf00      	nop
}
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <_f_slave_write_holding_register_handler_def>:

static void _f_slave_write_holding_register_handler_def(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	f_rs485_send_cmd(rx_buf, rx_size);
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <_f_slave_write_holding_register_handler_def+0x24>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4807      	ldr	r0, [pc, #28]	; (8000eec <_f_slave_write_holding_register_handler_def+0x28>)
 8000ed0:	f001 fbae 	bl	8002630 <f_rs485_send_cmd>
	_register_def[LED_REGISTER_ADDRESS] = rx_buf[4];
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <_f_slave_write_holding_register_handler_def+0x28>)
 8000ed6:	791a      	ldrb	r2, [r3, #4]
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <_f_slave_write_holding_register_handler_def+0x2c>)
 8000eda:	709a      	strb	r2, [r3, #2]
	_register_def[LED_REGISTER_ADDRESS + 1] = rx_buf[5];
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <_f_slave_write_holding_register_handler_def+0x28>)
 8000ede:	795a      	ldrb	r2, [r3, #5]
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <_f_slave_write_holding_register_handler_def+0x2c>)
 8000ee2:	70da      	strb	r2, [r3, #3]
//	uint8_t CoilState = _register_def[LED_REGISTER_ADDRESS + 1];
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200004b5 	.word	0x200004b5
 8000eec:	200003b4 	.word	0x200003b4
 8000ef0:	2000029c 	.word	0x2000029c

08000ef4 <_f_slave_commandparser_handler_def>:

static void _f_slave_commandparser_handler_def(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
	switch(1){
	case SIGNAL_READ_COIL:
	{
		break;
 8000ef8:	bf00      	nop
		break;
	}
	default:
		break;
	}
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <_f_read_data_def>:

static void _f_read_data_def(void){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
	float tempCur = sensor_get_current();
 8000f0a:	f001 fe29 	bl	8002b60 <sensor_get_current>
 8000f0e:	ed87 0a03 	vstr	s0, [r7, #12]
	uint16_t tempLt = sensor_get_light();
 8000f12:	f001 fdd1 	bl	8002ab8 <sensor_get_light>
 8000f16:	4603      	mov	r3, r0
 8000f18:	817b      	strh	r3, [r7, #10]
	uint16_t tempPt =sensor_get_potentiometer();
 8000f1a:	f001 fdd9 	bl	8002ad0 <sensor_get_potentiometer>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	813b      	strh	r3, [r7, #8]
	float tempT = sensor_get_temperature();
 8000f22:	f001 fe79 	bl	8002c18 <sensor_get_temperature>
 8000f26:	ed87 0a01 	vstr	s0, [r7, #4]
	float tempVol = sensor_get_voltage();
 8000f2a:	f001 fddd 	bl	8002ae8 <sensor_get_voltage>
 8000f2e:	ed87 0a00 	vstr	s0, [r7]

	// Current
	_f_splitfloat_def(tempCur, &_register_def[CURRENT_REGISTER_ADDRESS]);
 8000f32:	480f      	ldr	r0, [pc, #60]	; (8000f70 <_f_read_data_def+0x6c>)
 8000f34:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f38:	f7ff ff36 	bl	8000da8 <_f_splitfloat_def>
	// Temperature
	_f_splitfloat_def(tempT, &_register_def[TEMPERATURE_REGISTER_ADDRESS]);
 8000f3c:	480d      	ldr	r0, [pc, #52]	; (8000f74 <_f_read_data_def+0x70>)
 8000f3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f42:	f7ff ff31 	bl	8000da8 <_f_splitfloat_def>
	// Voltage
	_f_splitfloat_def(tempVol, &_register_def[VOLTAGE_REGISTER_ADDRESS]);
 8000f46:	480c      	ldr	r0, [pc, #48]	; (8000f78 <_f_read_data_def+0x74>)
 8000f48:	ed97 0a00 	vldr	s0, [r7]
 8000f4c:	f7ff ff2c 	bl	8000da8 <_f_splitfloat_def>
	// Light
	_f_splituint16_def(tempLt, &_register_def[LIGHT_REGISTER_ADDRESS], &_register_def[LIGHT_REGISTER_ADDRESS + 1]);
 8000f50:	897b      	ldrh	r3, [r7, #10]
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <_f_read_data_def+0x78>)
 8000f54:	490a      	ldr	r1, [pc, #40]	; (8000f80 <_f_read_data_def+0x7c>)
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff42 	bl	8000de0 <_f_splituint16_def>
	// Potentiometer
	_f_splituint16_def(tempPt, &_register_def[POTENTIOMETER_REGISTER_ADDRESS], &_register_def[POTENTIOMETER_REGISTER_ADDRESS + 1]);
 8000f5c:	893b      	ldrh	r3, [r7, #8]
 8000f5e:	4a09      	ldr	r2, [pc, #36]	; (8000f84 <_f_read_data_def+0x80>)
 8000f60:	4909      	ldr	r1, [pc, #36]	; (8000f88 <_f_read_data_def+0x84>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff3c 	bl	8000de0 <_f_splituint16_def>
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200002a6 	.word	0x200002a6
 8000f74:	200002a2 	.word	0x200002a2
 8000f78:	200002aa 	.word	0x200002aa
 8000f7c:	200002a1 	.word	0x200002a1
 8000f80:	200002a0 	.word	0x200002a0
 8000f84:	2000029d 	.word	0x2000029d
 8000f88:	2000029c 	.word	0x2000029c

08000f8c <_f_is_flag_def>:

static uint8_t _f_is_flag_def(void){
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
	if(flag_rx){
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <_f_is_flag_def+0x24>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d004      	beq.n	8000fa2 <_f_is_flag_def+0x16>
		flag_rx = 0;
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <_f_is_flag_def+0x24>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
		return 1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <_f_is_flag_def+0x18>
	}
	return 0;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	200004b4 	.word	0x200004b4

08000fb4 <f_slave_init_def>:
/*PRIVATE FUNCTION END DEFINE-----------------------------------------------------------------------------------------------------------*/


/*PUBLIC FUNCTION START DEFINE-----------------------------------------------------------------------------------------------------------*/
void f_slave_init_def(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	_slave_signal_def = 0;
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <f_slave_init_def+0x30>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
	_slave_state_def = STATE_IDLE;
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <f_slave_init_def+0x34>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
	_address_def = SLAVE_ADDRESS;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <f_slave_init_def+0x38>)
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	701a      	strb	r2, [r3, #0]
	memset(_register_def, 0, sizeof(_register_def));
 8000fca:	2214      	movs	r2, #20
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <f_slave_init_def+0x3c>)
 8000fd0:	f006 fc12 	bl	80077f8 <memset>
	f_rs485_init(&huart3, rx_buf, &flag_rx, &rx_size);
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <f_slave_init_def+0x40>)
 8000fd6:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <f_slave_init_def+0x44>)
 8000fd8:	4908      	ldr	r1, [pc, #32]	; (8000ffc <f_slave_init_def+0x48>)
 8000fda:	4809      	ldr	r0, [pc, #36]	; (8001000 <f_slave_init_def+0x4c>)
 8000fdc:	f001 fb06 	bl	80025ec <f_rs485_init>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200002b1 	.word	0x200002b1
 8000fe8:	200002b2 	.word	0x200002b2
 8000fec:	200002b0 	.word	0x200002b0
 8000ff0:	2000029c 	.word	0x2000029c
 8000ff4:	200004b5 	.word	0x200004b5
 8000ff8:	200004b4 	.word	0x200004b4
 8000ffc:	200003b4 	.word	0x200003b4
 8001000:	20000a94 	.word	0x20000a94

08001004 <f_slave_behavior_def>:

void f_slave_behavior_def(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	switch(_slave_state_def)
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <f_slave_behavior_def+0x84>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b05      	cmp	r3, #5
 800100e:	d836      	bhi.n	800107e <f_slave_behavior_def+0x7a>
 8001010:	a201      	add	r2, pc, #4	; (adr r2, 8001018 <f_slave_behavior_def+0x14>)
 8001012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001016:	bf00      	nop
 8001018:	08001031 	.word	0x08001031
 800101c:	08001039 	.word	0x08001039
 8001020:	08001055 	.word	0x08001055
 8001024:	0800105b 	.word	0x0800105b
 8001028:	08001067 	.word	0x08001067
 800102c:	08001073 	.word	0x08001073
	{
	case STATE_IDLE:
	{
		if(1){
			_slave_state_def = STATE_WAITTING_FOR_CMD;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <f_slave_behavior_def+0x84>)
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001036:	e025      	b.n	8001084 <f_slave_behavior_def+0x80>
	}
	case STATE_WAITTING_FOR_CMD:
	{
		_f_read_data_def();
 8001038:	f7ff ff64 	bl	8000f04 <_f_read_data_def>
		if(_f_is_flag_def()){
 800103c:	f7ff ffa6 	bl	8000f8c <_f_is_flag_def>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d01d      	beq.n	8001082 <f_slave_behavior_def+0x7e>
			uart_Rs232SendString((uint8_t*)"FLAG_ON\n\r");
 8001046:	4811      	ldr	r0, [pc, #68]	; (800108c <f_slave_behavior_def+0x88>)
 8001048:	f001 fa58 	bl	80024fc <uart_Rs232SendString>
			_slave_state_def = STATE_COMMAND_PARSER;
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <f_slave_behavior_def+0x84>)
 800104e:	2202      	movs	r2, #2
 8001050:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001052:	e016      	b.n	8001082 <f_slave_behavior_def+0x7e>
	}
	case STATE_COMMAND_PARSER:
	{
		_f_slave_commandparser_handler_def();
 8001054:	f7ff ff4e 	bl	8000ef4 <_f_slave_commandparser_handler_def>
		break;
 8001058:	e014      	b.n	8001084 <f_slave_behavior_def+0x80>
	}
	case STATE_READ_MULTIPLE_HOLDING_REGISTER_HANDLER:
	{
		_f_slave_read_multiple_holding_register_handler_def();
 800105a:	f7ff fed9 	bl	8000e10 <_f_slave_read_multiple_holding_register_handler_def>
		if(1){
			_slave_state_def = STATE_IDLE;
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <f_slave_behavior_def+0x84>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001064:	e00e      	b.n	8001084 <f_slave_behavior_def+0x80>
	}
	case STATE_READ_HOLDING_REGISTER_HANDLER:
	{
		_f_slave_read_holding_register_handler_def();
 8001066:	f7ff ff25 	bl	8000eb4 <_f_slave_read_holding_register_handler_def>
		if(1){
			_slave_state_def = STATE_IDLE;
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <f_slave_behavior_def+0x84>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001070:	e008      	b.n	8001084 <f_slave_behavior_def+0x80>
	}
	case STATE_WRITE_HOLDING_REGISTER_HANDLER:
	{
		_f_slave_write_holding_register_handler_def();
 8001072:	f7ff ff27 	bl	8000ec4 <_f_slave_write_holding_register_handler_def>
		if(1){
			_slave_state_def = STATE_IDLE;
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <f_slave_behavior_def+0x84>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800107c:	e002      	b.n	8001084 <f_slave_behavior_def+0x80>
	}
	default:
		break;
 800107e:	bf00      	nop
 8001080:	e000      	b.n	8001084 <f_slave_behavior_def+0x80>
		break;
 8001082:	bf00      	nop
	}
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200002b2 	.word	0x200002b2
 800108c:	08008118 	.word	0x08008118

08001090 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001096:	463b      	mov	r3, r7
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010a2:	4b39      	ldr	r3, [pc, #228]	; (8001188 <MX_ADC1_Init+0xf8>)
 80010a4:	4a39      	ldr	r2, [pc, #228]	; (800118c <MX_ADC1_Init+0xfc>)
 80010a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010a8:	4b37      	ldr	r3, [pc, #220]	; (8001188 <MX_ADC1_Init+0xf8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ae:	4b36      	ldr	r3, [pc, #216]	; (8001188 <MX_ADC1_Init+0xf8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010b4:	4b34      	ldr	r3, [pc, #208]	; (8001188 <MX_ADC1_Init+0xf8>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ba:	4b33      	ldr	r3, [pc, #204]	; (8001188 <MX_ADC1_Init+0xf8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c0:	4b31      	ldr	r3, [pc, #196]	; (8001188 <MX_ADC1_Init+0xf8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c8:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <MX_ADC1_Init+0xf8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ce:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <MX_ADC1_Init+0xf8>)
 80010d0:	4a2f      	ldr	r2, [pc, #188]	; (8001190 <MX_ADC1_Init+0x100>)
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d4:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <MX_ADC1_Init+0xf8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <MX_ADC1_Init+0xf8>)
 80010dc:	2205      	movs	r2, #5
 80010de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <MX_ADC1_Init+0xf8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e8:	4b27      	ldr	r3, [pc, #156]	; (8001188 <MX_ADC1_Init+0xf8>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ee:	4826      	ldr	r0, [pc, #152]	; (8001188 <MX_ADC1_Init+0xf8>)
 80010f0:	f002 f9b4 	bl	800345c <HAL_ADC_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010fa:	f001 f9f9 	bl	80024f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010fe:	2308      	movs	r3, #8
 8001100:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001102:	2301      	movs	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001106:	2301      	movs	r3, #1
 8001108:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	481e      	ldr	r0, [pc, #120]	; (8001188 <MX_ADC1_Init+0xf8>)
 8001110:	f002 fb16 	bl	8003740 <HAL_ADC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800111a:	f001 f9e9 	bl	80024f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 800111e:	2302      	movs	r3, #2
 8001120:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	4619      	mov	r1, r3
 8001126:	4818      	ldr	r0, [pc, #96]	; (8001188 <MX_ADC1_Init+0xf8>)
 8001128:	f002 fb0a 	bl	8003740 <HAL_ADC_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001132:	f001 f9dd 	bl	80024f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8001136:	2303      	movs	r3, #3
 8001138:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	4812      	ldr	r0, [pc, #72]	; (8001188 <MX_ADC1_Init+0xf8>)
 8001140:	f002 fafe 	bl	8003740 <HAL_ADC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800114a:	f001 f9d1 	bl	80024f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 800114e:	2304      	movs	r3, #4
 8001150:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001152:	463b      	mov	r3, r7
 8001154:	4619      	mov	r1, r3
 8001156:	480c      	ldr	r0, [pc, #48]	; (8001188 <MX_ADC1_Init+0xf8>)
 8001158:	f002 faf2 	bl	8003740 <HAL_ADC_ConfigChannel>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8001162:	f001 f9c5 	bl	80024f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 8001166:	2305      	movs	r3, #5
 8001168:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	4619      	mov	r1, r3
 800116e:	4806      	ldr	r0, [pc, #24]	; (8001188 <MX_ADC1_Init+0xf8>)
 8001170:	f002 fae6 	bl	8003740 <HAL_ADC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800117a:	f001 f9b9 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200004b8 	.word	0x200004b8
 800118c:	40012000 	.word	0x40012000
 8001190:	0f000001 	.word	0x0f000001

08001194 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a3c      	ldr	r2, [pc, #240]	; (80012a4 <HAL_ADC_MspInit+0x110>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d171      	bne.n	800129a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <HAL_ADC_MspInit+0x114>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a3a      	ldr	r2, [pc, #232]	; (80012a8 <HAL_ADC_MspInit+0x114>)
 80011c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <HAL_ADC_MspInit+0x114>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <HAL_ADC_MspInit+0x114>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a33      	ldr	r2, [pc, #204]	; (80012a8 <HAL_ADC_MspInit+0x114>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b31      	ldr	r3, [pc, #196]	; (80012a8 <HAL_ADC_MspInit+0x114>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <HAL_ADC_MspInit+0x114>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a2c      	ldr	r2, [pc, #176]	; (80012a8 <HAL_ADC_MspInit+0x114>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <HAL_ADC_MspInit+0x114>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800120a:	2307      	movs	r3, #7
 800120c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120e:	2303      	movs	r3, #3
 8001210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	4823      	ldr	r0, [pc, #140]	; (80012ac <HAL_ADC_MspInit+0x118>)
 800121e:	f003 fa43 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001222:	2303      	movs	r3, #3
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001226:	2303      	movs	r3, #3
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	481e      	ldr	r0, [pc, #120]	; (80012b0 <HAL_ADC_MspInit+0x11c>)
 8001236:	f003 fa37 	bl	80046a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800123a:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <HAL_ADC_MspInit+0x120>)
 800123c:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <HAL_ADC_MspInit+0x124>)
 800123e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <HAL_ADC_MspInit+0x120>)
 8001242:	2200      	movs	r2, #0
 8001244:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <HAL_ADC_MspInit+0x120>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <HAL_ADC_MspInit+0x120>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_ADC_MspInit+0x120>)
 8001254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001258:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <HAL_ADC_MspInit+0x120>)
 800125c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001260:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_ADC_MspInit+0x120>)
 8001264:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001268:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_ADC_MspInit+0x120>)
 800126c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001270:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HAL_ADC_MspInit+0x120>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <HAL_ADC_MspInit+0x120>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800127e:	480d      	ldr	r0, [pc, #52]	; (80012b4 <HAL_ADC_MspInit+0x120>)
 8001280:	f002 fe10 	bl	8003ea4 <HAL_DMA_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800128a:	f001 f931 	bl	80024f0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <HAL_ADC_MspInit+0x120>)
 8001292:	639a      	str	r2, [r3, #56]	; 0x38
 8001294:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <HAL_ADC_MspInit+0x120>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	; 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40012000 	.word	0x40012000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020400 	.word	0x40020400
 80012b4:	20000500 	.word	0x20000500
 80012b8:	40026410 	.word	0x40026410

080012bc <button_scan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void button_scan() {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
	// Shift button input
	for (int i = 0; i < 16; i++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	e012      	b.n	80012ee <button_scan+0x32>
	{
		button_count2[i] = button_count1[i];
 80012c8:	4a68      	ldr	r2, [pc, #416]	; (800146c <button_scan+0x1b0>)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80012d0:	4a67      	ldr	r2, [pc, #412]	; (8001470 <button_scan+0x1b4>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		button_count1[i] = button_count[i];
 80012d8:	4a66      	ldr	r2, [pc, #408]	; (8001474 <button_scan+0x1b8>)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80012e0:	4a62      	ldr	r2, [pc, #392]	; (800146c <button_scan+0x1b0>)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 16; i++)
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3301      	adds	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	dde9      	ble.n	80012c8 <button_scan+0xc>
	}

	// Get new key input to button_count
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2108      	movs	r1, #8
 80012f8:	485f      	ldr	r0, [pc, #380]	; (8001478 <button_scan+0x1bc>)
 80012fa:	f003 fb71 	bl	80049e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80012fe:	2201      	movs	r2, #1
 8001300:	2108      	movs	r1, #8
 8001302:	485d      	ldr	r0, [pc, #372]	; (8001478 <button_scan+0x1bc>)
 8001304:	f003 fb6c 	bl	80049e0 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 8001308:	230a      	movs	r3, #10
 800130a:	2202      	movs	r2, #2
 800130c:	495b      	ldr	r1, [pc, #364]	; (800147c <button_scan+0x1c0>)
 800130e:	485c      	ldr	r0, [pc, #368]	; (8001480 <button_scan+0x1c4>)
 8001310:	f004 f861 	bl	80053d6 <HAL_SPI_Receive>

	int button_index = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
	uint16_t mask = 0x8000;
 8001318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800131c:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++) {
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	e03a      	b.n	800139a <button_scan+0xde>
		if (i >= 0 && i <= 3) {
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	db06      	blt.n	8001338 <button_scan+0x7c>
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	2b03      	cmp	r3, #3
 800132e:	dc03      	bgt.n	8001338 <button_scan+0x7c>
			button_index = i + 4;
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	3304      	adds	r3, #4
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	e018      	b.n	800136a <button_scan+0xae>
		} else if (i >= 4 && i <= 7) {
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	2b03      	cmp	r3, #3
 800133c:	dd07      	ble.n	800134e <button_scan+0x92>
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	2b07      	cmp	r3, #7
 8001342:	dc04      	bgt.n	800134e <button_scan+0x92>
			button_index = 7 - i;
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	e00d      	b.n	800136a <button_scan+0xae>
		} else if (i >= 8 && i <= 11) {
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	2b07      	cmp	r3, #7
 8001352:	dd06      	ble.n	8001362 <button_scan+0xa6>
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	2b0b      	cmp	r3, #11
 8001358:	dc03      	bgt.n	8001362 <button_scan+0xa6>
			button_index = i + 4;
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	3304      	adds	r3, #4
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	e003      	b.n	800136a <button_scan+0xae>
		} else {
			button_index = 23 - i;
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	f1c3 0317 	rsb	r3, r3, #23
 8001368:	613b      	str	r3, [r7, #16]
		}
		if (button_spi_buffer & mask)
 800136a:	4b44      	ldr	r3, [pc, #272]	; (800147c <button_scan+0x1c0>)
 800136c:	881a      	ldrh	r2, [r3, #0]
 800136e:	89fb      	ldrh	r3, [r7, #14]
 8001370:	4013      	ands	r3, r2
 8001372:	b29b      	uxth	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <button_scan+0xc8>
			button_count[button_index] = 0;
 8001378:	4a3e      	ldr	r2, [pc, #248]	; (8001474 <button_scan+0x1b8>)
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	2100      	movs	r1, #0
 800137e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001382:	e004      	b.n	800138e <button_scan+0xd2>
		else
			button_count[button_index] = 1;
 8001384:	4a3b      	ldr	r2, [pc, #236]	; (8001474 <button_scan+0x1b8>)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	2101      	movs	r1, #1
 800138a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 800138e:	89fb      	ldrh	r3, [r7, #14]
 8001390:	085b      	lsrs	r3, r3, #1
 8001392:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++) {
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	3301      	adds	r3, #1
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	2b0f      	cmp	r3, #15
 800139e:	ddc1      	ble.n	8001324 <button_scan+0x68>
	}

	for (int i = 0; i < 16; i++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	e059      	b.n	800145a <button_scan+0x19e>
	{
		if ((button_count[i] == button_count1[i]) && (button_count1[i] == button_count2[i]))
 80013a6:	4a33      	ldr	r2, [pc, #204]	; (8001474 <button_scan+0x1b8>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80013ae:	492f      	ldr	r1, [pc, #188]	; (800146c <button_scan+0x1b0>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d14c      	bne.n	8001454 <button_scan+0x198>
 80013ba:	4a2c      	ldr	r2, [pc, #176]	; (800146c <button_scan+0x1b0>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80013c2:	492b      	ldr	r1, [pc, #172]	; (8001470 <button_scan+0x1b4>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d142      	bne.n	8001454 <button_scan+0x198>
		{
			if (button_count2[i] != button_count3[i])
 80013ce:	4a28      	ldr	r2, [pc, #160]	; (8001470 <button_scan+0x1b4>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80013d6:	492b      	ldr	r1, [pc, #172]	; (8001484 <button_scan+0x1c8>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d018      	beq.n	8001414 <button_scan+0x158>
			{
				button_count3[i] = button_count2[i];
 80013e2:	4a23      	ldr	r2, [pc, #140]	; (8001470 <button_scan+0x1b4>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80013ea:	4a26      	ldr	r2, [pc, #152]	; (8001484 <button_scan+0x1c8>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				if (button_count3[i] == 1) // PRESSED
 80013f2:	4a24      	ldr	r2, [pc, #144]	; (8001484 <button_scan+0x1c8>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d12a      	bne.n	8001454 <button_scan+0x198>
				{
					timeOutForPress[i] = TIME_OUT_FOR_LONG_PRESS / TI_BUTTON_SCAN_TIME;
 80013fe:	4a22      	ldr	r2, [pc, #136]	; (8001488 <button_scan+0x1cc>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2119      	movs	r1, #25
 8001404:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					isPressed[i] = 1;
 8001408:	4a20      	ldr	r2, [pc, #128]	; (800148c <button_scan+0x1d0>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2101      	movs	r1, #1
 800140e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001412:	e01f      	b.n	8001454 <button_scan+0x198>
				}
			}
			else
			{
				timeOutForPress[i]--;
 8001414:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <button_scan+0x1cc>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800141c:	3b01      	subs	r3, #1
 800141e:	b299      	uxth	r1, r3
 8001420:	4a19      	ldr	r2, [pc, #100]	; (8001488 <button_scan+0x1cc>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if (timeOutForPress[i] <= 0)
 8001428:	4a17      	ldr	r2, [pc, #92]	; (8001488 <button_scan+0x1cc>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10f      	bne.n	8001454 <button_scan+0x198>
				{
					timeOutForPress[i] = TIME_OUT_FOR_LONG_PRESS / TI_BUTTON_SCAN_TIME;
 8001434:	4a14      	ldr	r2, [pc, #80]	; (8001488 <button_scan+0x1cc>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2119      	movs	r1, #25
 800143a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (button_count3[i] == 1) // PRESSED
 800143e:	4a11      	ldr	r2, [pc, #68]	; (8001484 <button_scan+0x1c8>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d104      	bne.n	8001454 <button_scan+0x198>
					{
						isLongPressed[i] = 1;
 800144a:	4a11      	ldr	r2, [pc, #68]	; (8001490 <button_scan+0x1d4>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2101      	movs	r1, #1
 8001450:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 16; i++)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3301      	adds	r3, #1
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b0f      	cmp	r3, #15
 800145e:	dda2      	ble.n	80013a6 <button_scan+0xea>
					}
				}
			}
		}
	}
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200005e0 	.word	0x200005e0
 8001470:	200005c0 	.word	0x200005c0
 8001474:	20000600 	.word	0x20000600
 8001478:	40020c00 	.word	0x40020c00
 800147c:	20000620 	.word	0x20000620
 8001480:	20000910 	.word	0x20000910
 8001484:	200005a0 	.word	0x200005a0
 8001488:	20000000 	.word	0x20000000
 800148c:	20000560 	.word	0x20000560
 8001490:	20000580 	.word	0x20000580

08001494 <crc16>:
    0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641,
    0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040
};

uint16_t crc16(const uint8_t *data, uint16_t num_bytes)
{
 8001494:	b480      	push	{r7}
 8001496:	b087      	sub	sp, #28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]

    uint16_t crc = 0xFFFF;
 80014a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a4:	82fb      	strh	r3, [r7, #22]
    const uint8_t *ptr = data;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	613b      	str	r3, [r7, #16]

    if (ptr != NULL)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d018      	beq.n	80014e2 <crc16+0x4e>
    {
        for (uint16_t i = 0; i < num_bytes; i++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	81fb      	strh	r3, [r7, #14]
 80014b4:	e011      	b.n	80014da <crc16+0x46>
        {
            crc = (crc >> 8) ^ crc16_lookup_table[(crc ^ (uint16_t)*ptr++) & 0x00FF];
 80014b6:	8afb      	ldrh	r3, [r7, #22]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	8af9      	ldrh	r1, [r7, #22]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1c58      	adds	r0, r3, #1
 80014c2:	6138      	str	r0, [r7, #16]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	404b      	eors	r3, r1
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	4909      	ldr	r1, [pc, #36]	; (80014f0 <crc16+0x5c>)
 80014cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014d0:	4053      	eors	r3, r2
 80014d2:	82fb      	strh	r3, [r7, #22]
        for (uint16_t i = 0; i < num_bytes; i++)
 80014d4:	89fb      	ldrh	r3, [r7, #14]
 80014d6:	3301      	adds	r3, #1
 80014d8:	81fb      	strh	r3, [r7, #14]
 80014da:	89fa      	ldrh	r2, [r7, #14]
 80014dc:	887b      	ldrh	r3, [r7, #2]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d3e9      	bcc.n	80014b6 <crc16+0x22>
        }
    }

    return crc;
 80014e2:	8afb      	ldrh	r3, [r7, #22]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	371c      	adds	r7, #28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	20000020 	.word	0x20000020

080014f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_DMA_Init+0x3c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <MX_DMA_Init+0x3c>)
 8001504:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_DMA_Init+0x3c>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	2038      	movs	r0, #56	; 0x38
 800151c:	f002 fc8b 	bl	8003e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001520:	2038      	movs	r0, #56	; 0x38
 8001522:	f002 fca4 	bl	8003e6e <HAL_NVIC_EnableIRQ>

}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08e      	sub	sp, #56	; 0x38
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]
 800154a:	615a      	str	r2, [r3, #20]
 800154c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800154e:	463b      	mov	r3, r7
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
 800155c:	615a      	str	r2, [r3, #20]
 800155e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001560:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <MX_FSMC_Init+0xec>)
 8001562:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001566:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001568:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <MX_FSMC_Init+0xec>)
 800156a:	4a2e      	ldr	r2, [pc, #184]	; (8001624 <MX_FSMC_Init+0xf0>)
 800156c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800156e:	4b2c      	ldr	r3, [pc, #176]	; (8001620 <MX_FSMC_Init+0xec>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001574:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <MX_FSMC_Init+0xec>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800157a:	4b29      	ldr	r3, [pc, #164]	; (8001620 <MX_FSMC_Init+0xec>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001580:	4b27      	ldr	r3, [pc, #156]	; (8001620 <MX_FSMC_Init+0xec>)
 8001582:	2210      	movs	r2, #16
 8001584:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <MX_FSMC_Init+0xec>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800158c:	4b24      	ldr	r3, [pc, #144]	; (8001620 <MX_FSMC_Init+0xec>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001592:	4b23      	ldr	r3, [pc, #140]	; (8001620 <MX_FSMC_Init+0xec>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001598:	4b21      	ldr	r3, [pc, #132]	; (8001620 <MX_FSMC_Init+0xec>)
 800159a:	2200      	movs	r2, #0
 800159c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800159e:	4b20      	ldr	r3, [pc, #128]	; (8001620 <MX_FSMC_Init+0xec>)
 80015a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015a4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80015a6:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <MX_FSMC_Init+0xec>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80015ac:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <MX_FSMC_Init+0xec>)
 80015ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015b2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <MX_FSMC_Init+0xec>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <MX_FSMC_Init+0xec>)
 80015bc:	2200      	movs	r2, #0
 80015be:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <MX_FSMC_Init+0xec>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80015c6:	230f      	movs	r3, #15
 80015c8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80015ca:	230f      	movs	r3, #15
 80015cc:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80015ce:	233c      	movs	r3, #60	; 0x3c
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80015d6:	2310      	movs	r3, #16
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80015da:	2311      	movs	r3, #17
 80015dc:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80015de:	2300      	movs	r3, #0
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80015e2:	2308      	movs	r3, #8
 80015e4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80015e6:	230f      	movs	r3, #15
 80015e8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80015ea:	2309      	movs	r3, #9
 80015ec:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80015f2:	2310      	movs	r3, #16
 80015f4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80015f6:	2311      	movs	r3, #17
 80015f8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80015fe:	463a      	mov	r2, r7
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <MX_FSMC_Init+0xec>)
 8001608:	f004 faea 	bl	8005be0 <HAL_SRAM_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001612:	f000 ff6d 	bl	80024f0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001616:	bf00      	nop
 8001618:	3738      	adds	r7, #56	; 0x38
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000624 	.word	0x20000624
 8001624:	a0000104 	.word	0xa0000104

08001628 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800163c:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <HAL_FSMC_MspInit+0x88>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d131      	bne.n	80016a8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <HAL_FSMC_MspInit+0x88>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_FSMC_MspInit+0x8c>)
 8001650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001652:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <HAL_FSMC_MspInit+0x8c>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6393      	str	r3, [r2, #56]	; 0x38
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_FSMC_MspInit+0x8c>)
 800165c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001666:	f64f 7388 	movw	r3, #65416	; 0xff88
 800166a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	2302      	movs	r3, #2
 800166e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	2303      	movs	r3, #3
 8001676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001678:	230c      	movs	r3, #12
 800167a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	4619      	mov	r1, r3
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <HAL_FSMC_MspInit+0x90>)
 8001682:	f003 f811 	bl	80046a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001686:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800168a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001698:	230c      	movs	r3, #12
 800169a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4806      	ldr	r0, [pc, #24]	; (80016bc <HAL_FSMC_MspInit+0x94>)
 80016a2:	f003 f801 	bl	80046a8 <HAL_GPIO_Init>
 80016a6:	e000      	b.n	80016aa <HAL_FSMC_MspInit+0x82>
    return;
 80016a8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000674 	.word	0x20000674
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40020c00 	.word	0x40020c00

080016c0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80016c8:	f7ff ffae 	bl	8001628 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08c      	sub	sp, #48	; 0x30
 80016d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	4b63      	ldr	r3, [pc, #396]	; (800187c <MX_GPIO_Init+0x1a8>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a62      	ldr	r2, [pc, #392]	; (800187c <MX_GPIO_Init+0x1a8>)
 80016f4:	f043 0310 	orr.w	r3, r3, #16
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b60      	ldr	r3, [pc, #384]	; (800187c <MX_GPIO_Init+0x1a8>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	61bb      	str	r3, [r7, #24]
 8001704:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	4b5c      	ldr	r3, [pc, #368]	; (800187c <MX_GPIO_Init+0x1a8>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a5b      	ldr	r2, [pc, #364]	; (800187c <MX_GPIO_Init+0x1a8>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b59      	ldr	r3, [pc, #356]	; (800187c <MX_GPIO_Init+0x1a8>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b55      	ldr	r3, [pc, #340]	; (800187c <MX_GPIO_Init+0x1a8>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a54      	ldr	r2, [pc, #336]	; (800187c <MX_GPIO_Init+0x1a8>)
 800172c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b52      	ldr	r3, [pc, #328]	; (800187c <MX_GPIO_Init+0x1a8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b4e      	ldr	r3, [pc, #312]	; (800187c <MX_GPIO_Init+0x1a8>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a4d      	ldr	r2, [pc, #308]	; (800187c <MX_GPIO_Init+0x1a8>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b4b      	ldr	r3, [pc, #300]	; (800187c <MX_GPIO_Init+0x1a8>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b47      	ldr	r3, [pc, #284]	; (800187c <MX_GPIO_Init+0x1a8>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a46      	ldr	r2, [pc, #280]	; (800187c <MX_GPIO_Init+0x1a8>)
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b44      	ldr	r3, [pc, #272]	; (800187c <MX_GPIO_Init+0x1a8>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	4b40      	ldr	r3, [pc, #256]	; (800187c <MX_GPIO_Init+0x1a8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a3f      	ldr	r2, [pc, #252]	; (800187c <MX_GPIO_Init+0x1a8>)
 8001780:	f043 0308 	orr.w	r3, r3, #8
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b3d      	ldr	r3, [pc, #244]	; (800187c <MX_GPIO_Init+0x1a8>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	4b39      	ldr	r3, [pc, #228]	; (800187c <MX_GPIO_Init+0x1a8>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a38      	ldr	r2, [pc, #224]	; (800187c <MX_GPIO_Init+0x1a8>)
 800179c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b36      	ldr	r3, [pc, #216]	; (800187c <MX_GPIO_Init+0x1a8>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2110      	movs	r1, #16
 80017b2:	4833      	ldr	r0, [pc, #204]	; (8001880 <MX_GPIO_Init+0x1ac>)
 80017b4:	f003 f914 	bl	80049e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017be:	4831      	ldr	r0, [pc, #196]	; (8001884 <MX_GPIO_Init+0x1b0>)
 80017c0:	f003 f90e 	bl	80049e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2140      	movs	r1, #64	; 0x40
 80017c8:	482f      	ldr	r0, [pc, #188]	; (8001888 <MX_GPIO_Init+0x1b4>)
 80017ca:	f003 f909 	bl	80049e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FSMC_BLK_Pin|EN_RS485_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80017d4:	482d      	ldr	r0, [pc, #180]	; (800188c <MX_GPIO_Init+0x1b8>)
 80017d6:	f003 f903 	bl	80049e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	2108      	movs	r1, #8
 80017de:	482c      	ldr	r0, [pc, #176]	; (8001890 <MX_GPIO_Init+0x1bc>)
 80017e0:	f003 f8fe 	bl	80049e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017e4:	2310      	movs	r3, #16
 80017e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e8:	2301      	movs	r3, #1
 80017ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4619      	mov	r1, r3
 80017fa:	4821      	ldr	r0, [pc, #132]	; (8001880 <MX_GPIO_Init+0x1ac>)
 80017fc:	f002 ff54 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	2301      	movs	r3, #1
 8001808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	481a      	ldr	r0, [pc, #104]	; (8001884 <MX_GPIO_Init+0x1b0>)
 800181a:	f002 ff45 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800181e:	2340      	movs	r3, #64	; 0x40
 8001820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	4619      	mov	r1, r3
 8001834:	4814      	ldr	r0, [pc, #80]	; (8001888 <MX_GPIO_Init+0x1b4>)
 8001836:	f002 ff37 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin|EN_RS485_Pin;
 800183a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800183e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	4619      	mov	r1, r3
 8001852:	480e      	ldr	r0, [pc, #56]	; (800188c <MX_GPIO_Init+0x1b8>)
 8001854:	f002 ff28 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001858:	2308      	movs	r3, #8
 800185a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185c:	2301      	movs	r3, #1
 800185e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	4619      	mov	r1, r3
 800186e:	4808      	ldr	r0, [pc, #32]	; (8001890 <MX_GPIO_Init+0x1bc>)
 8001870:	f002 ff1a 	bl	80046a8 <HAL_GPIO_Init>

}
 8001874:	bf00      	nop
 8001876:	3730      	adds	r7, #48	; 0x30
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	40021000 	.word	0x40021000
 8001884:	40020800 	.word	0x40020800
 8001888:	40021800 	.word	0x40021800
 800188c:	40020000 	.word	0x40020000
 8001890:	40020c00 	.word	0x40020c00

08001894 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 800189e:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <LCD_WR_REG+0x1c>)
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	8013      	strh	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	600ffffe 	.word	0x600ffffe

080018b4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 80018be:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <LCD_WR_DATA+0x1c>)
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	8053      	strh	r3, [r2, #2]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	600ffffe 	.word	0x600ffffe

080018d4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <LCD_RD_DATA+0x20>)
 80018dc:	885b      	ldrh	r3, [r3, #2]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	80fb      	strh	r3, [r7, #6]
	return ram;
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	b29b      	uxth	r3, r3
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	600ffffe 	.word	0x600ffffe

080018f8 <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4604      	mov	r4, r0
 8001900:	4608      	mov	r0, r1
 8001902:	4611      	mov	r1, r2
 8001904:	461a      	mov	r2, r3
 8001906:	4623      	mov	r3, r4
 8001908:	80fb      	strh	r3, [r7, #6]
 800190a:	4603      	mov	r3, r0
 800190c:	80bb      	strh	r3, [r7, #4]
 800190e:	460b      	mov	r3, r1
 8001910:	807b      	strh	r3, [r7, #2]
 8001912:	4613      	mov	r3, r2
 8001914:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 8001916:	202a      	movs	r0, #42	; 0x2a
 8001918:	f7ff ffbc 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	0a1b      	lsrs	r3, r3, #8
 8001920:	b29b      	uxth	r3, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff ffc6 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	b29b      	uxth	r3, r3
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ffc0 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 8001934:	887b      	ldrh	r3, [r7, #2]
 8001936:	0a1b      	lsrs	r3, r3, #8
 8001938:	b29b      	uxth	r3, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ffba 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 8001940:	887b      	ldrh	r3, [r7, #2]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	b29b      	uxth	r3, r3
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ffb4 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 800194c:	202b      	movs	r0, #43	; 0x2b
 800194e:	f7ff ffa1 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 8001952:	88bb      	ldrh	r3, [r7, #4]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	b29b      	uxth	r3, r3
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ffab 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 800195e:	88bb      	ldrh	r3, [r7, #4]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	b29b      	uxth	r3, r3
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ffa5 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 800196a:	883b      	ldrh	r3, [r7, #0]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	b29b      	uxth	r3, r3
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff9f 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 8001976:	883b      	ldrh	r3, [r7, #0]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	b29b      	uxth	r3, r3
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff99 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 8001982:	202c      	movs	r0, #44	; 0x2c
 8001984:	f7ff ff86 	bl	8001894 <LCD_WR_REG>
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bd90      	pop	{r4, r7, pc}

08001990 <lcd_clear>:
/**
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <lcd_clear+0x60>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	3b01      	subs	r3, #1
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <lcd_clear+0x60>)
 80019a4:	885b      	ldrh	r3, [r3, #2]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	2100      	movs	r1, #0
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff ffa3 	bl	80018f8 <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 80019b2:	2300      	movs	r3, #0
 80019b4:	81fb      	strh	r3, [r7, #14]
 80019b6:	e011      	b.n	80019dc <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 80019b8:	2300      	movs	r3, #0
 80019ba:	81bb      	strh	r3, [r7, #12]
 80019bc:	e006      	b.n	80019cc <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff77 	bl	80018b4 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 80019c6:	89bb      	ldrh	r3, [r7, #12]
 80019c8:	3301      	adds	r3, #1
 80019ca:	81bb      	strh	r3, [r7, #12]
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <lcd_clear+0x60>)
 80019ce:	885b      	ldrh	r3, [r3, #2]
 80019d0:	89ba      	ldrh	r2, [r7, #12]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d3f3      	bcc.n	80019be <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 80019d6:	89fb      	ldrh	r3, [r7, #14]
 80019d8:	3301      	adds	r3, #1
 80019da:	81fb      	strh	r3, [r7, #14]
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <lcd_clear+0x60>)
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	89fa      	ldrh	r2, [r7, #14]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d3e8      	bcc.n	80019b8 <lcd_clear+0x28>
		}
	}
}
 80019e6:	bf00      	nop
 80019e8:	bf00      	nop
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000678 	.word	0x20000678

080019f4 <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	80fb      	strh	r3, [r7, #6]
 80019fe:	460b      	mov	r3, r1
 8001a00:	80bb      	strh	r3, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 8001a06:	88bb      	ldrh	r3, [r7, #4]
 8001a08:	88fa      	ldrh	r2, [r7, #6]
 8001a0a:	88b9      	ldrh	r1, [r7, #4]
 8001a0c:	88f8      	ldrh	r0, [r7, #6]
 8001a0e:	f7ff ff73 	bl	80018f8 <lcd_set_address>
	LCD_WR_DATA(color);
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff4d 	bl	80018b4 <LCD_WR_DATA>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <lcd_show_char>:
	lcd_draw_line(x1, y2, x2, y2, color);
	lcd_draw_line(x2, y1, x2, y2, color);
}

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	4608      	mov	r0, r1
 8001a2e:	4611      	mov	r1, r2
 8001a30:	461a      	mov	r2, r3
 8001a32:	4623      	mov	r3, r4
 8001a34:	80fb      	strh	r3, [r7, #6]
 8001a36:	4603      	mov	r3, r0
 8001a38:	80bb      	strh	r3, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	70fb      	strb	r3, [r7, #3]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 8001a4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a4e:	085b      	lsrs	r3, r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	08db      	lsrs	r3, r3, #3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	bf14      	ite	ne
 8001a66:	2301      	movne	r3, #1
 8001a68:	2300      	moveq	r3, #0
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	fb12 f303 	smulbb	r3, r2, r3
 8001a7a:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	3b20      	subs	r3, #32
 8001a80:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	4413      	add	r3, r2
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	b29c      	uxth	r4, r3
 8001a90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	88bb      	ldrh	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	88b9      	ldrh	r1, [r7, #4]
 8001aa2:	88f8      	ldrh	r0, [r7, #6]
 8001aa4:	4622      	mov	r2, r4
 8001aa6:	f7ff ff27 	bl	80018f8 <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 8001aaa:	2300      	movs	r3, #0
 8001aac:	827b      	strh	r3, [r7, #18]
 8001aae:	e07a      	b.n	8001ba6 <lcd_show_char+0x182>
		if (sizey == 12)
 8001ab0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ab4:	2b0c      	cmp	r3, #12
 8001ab6:	d028      	beq.n	8001b0a <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 8001ab8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001abc:	2b10      	cmp	r3, #16
 8001abe:	d108      	bne.n	8001ad2 <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 8001ac0:	78fa      	ldrb	r2, [r7, #3]
 8001ac2:	8a7b      	ldrh	r3, [r7, #18]
 8001ac4:	493c      	ldr	r1, [pc, #240]	; (8001bb8 <lcd_show_char+0x194>)
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	440a      	add	r2, r1
 8001aca:	4413      	add	r3, r2
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	75fb      	strb	r3, [r7, #23]
 8001ad0:	e01b      	b.n	8001b0a <lcd_show_char+0xe6>
		else if (sizey == 24)
 8001ad2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ad6:	2b18      	cmp	r3, #24
 8001ad8:	d10b      	bne.n	8001af2 <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	8a79      	ldrh	r1, [r7, #18]
 8001ade:	4837      	ldr	r0, [pc, #220]	; (8001bbc <lcd_show_char+0x198>)
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	4403      	add	r3, r0
 8001aea:	440b      	add	r3, r1
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	75fb      	strb	r3, [r7, #23]
 8001af0:	e00b      	b.n	8001b0a <lcd_show_char+0xe6>
		else if (sizey == 32)
 8001af2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001af6:	2b20      	cmp	r3, #32
 8001af8:	d15a      	bne.n	8001bb0 <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	8a7b      	ldrh	r3, [r7, #18]
 8001afe:	4930      	ldr	r1, [pc, #192]	; (8001bc0 <lcd_show_char+0x19c>)
 8001b00:	0192      	lsls	r2, r2, #6
 8001b02:	440a      	add	r2, r1
 8001b04:	4413      	add	r3, r2
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	75bb      	strb	r3, [r7, #22]
 8001b0e:	e044      	b.n	8001b9a <lcd_show_char+0x176>
			if (!mode) {
 8001b10:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d120      	bne.n	8001b5a <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 8001b18:	7dfa      	ldrb	r2, [r7, #23]
 8001b1a:	7dbb      	ldrb	r3, [r7, #22]
 8001b1c:	fa42 f303 	asr.w	r3, r2, r3
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 8001b28:	883b      	ldrh	r3, [r7, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fec2 	bl	80018b4 <LCD_WR_DATA>
 8001b30:	e003      	b.n	8001b3a <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 8001b32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff febd 	bl	80018b4 <LCD_WR_DATA>
				m++;
 8001b3a:	7d7b      	ldrb	r3, [r7, #21]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 8001b40:	7d7b      	ldrb	r3, [r7, #21]
 8001b42:	7bfa      	ldrb	r2, [r7, #15]
 8001b44:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b48:	fb01 f202 	mul.w	r2, r1, r2
 8001b4c:	1a9b      	subs	r3, r3, r2
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d11f      	bne.n	8001b94 <lcd_show_char+0x170>
					m = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	757b      	strb	r3, [r7, #21]
					break;
 8001b58:	e022      	b.n	8001ba0 <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 8001b5a:	7dfa      	ldrb	r2, [r7, #23]
 8001b5c:	7dbb      	ldrb	r3, [r7, #22]
 8001b5e:	fa42 f303 	asr.w	r3, r2, r3
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 8001b6a:	883a      	ldrh	r2, [r7, #0]
 8001b6c:	88b9      	ldrh	r1, [r7, #4]
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff3f 	bl	80019f4 <lcd_draw_point>
				x++;
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 8001b7c:	88fa      	ldrh	r2, [r7, #6]
 8001b7e:	8a3b      	ldrh	r3, [r7, #16]
 8001b80:	1ad2      	subs	r2, r2, r3
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d105      	bne.n	8001b94 <lcd_show_char+0x170>
					x = x0;
 8001b88:	8a3b      	ldrh	r3, [r7, #16]
 8001b8a:	80fb      	strh	r3, [r7, #6]
					y++;
 8001b8c:	88bb      	ldrh	r3, [r7, #4]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	80bb      	strh	r3, [r7, #4]
					break;
 8001b92:	e005      	b.n	8001ba0 <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 8001b94:	7dbb      	ldrb	r3, [r7, #22]
 8001b96:	3301      	adds	r3, #1
 8001b98:	75bb      	strb	r3, [r7, #22]
 8001b9a:	7dbb      	ldrb	r3, [r7, #22]
 8001b9c:	2b07      	cmp	r3, #7
 8001b9e:	d9b7      	bls.n	8001b10 <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 8001ba0:	8a7b      	ldrh	r3, [r7, #18]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	827b      	strh	r3, [r7, #18]
 8001ba6:	8a7a      	ldrh	r2, [r7, #18]
 8001ba8:	89bb      	ldrh	r3, [r7, #12]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d380      	bcc.n	8001ab0 <lcd_show_char+0x8c>
 8001bae:	e000      	b.n	8001bb2 <lcd_show_char+0x18e>
			return;
 8001bb0:	bf00      	nop
				}
			}
		}
	}
}
 8001bb2:	371c      	adds	r7, #28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd90      	pop	{r4, r7, pc}
 8001bb8:	080081d0 	.word	0x080081d0
 8001bbc:	080087c0 	.word	0x080087c0
 8001bc0:	08009990 	.word	0x08009990

08001bc4 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	460a      	mov	r2, r1
 8001bce:	71fb      	strb	r3, [r7, #7]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001bd8:	e004      	b.n	8001be4 <mypow+0x20>
		result *= m;
 8001bda:	79fa      	ldrb	r2, [r7, #7]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001be4:	79bb      	ldrb	r3, [r7, #6]
 8001be6:	1e5a      	subs	r2, r3, #1
 8001be8:	71ba      	strb	r2, [r7, #6]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f5      	bne.n	8001bda <mypow+0x16>
	return result;
 8001bee:	68fb      	ldr	r3, [r7, #12]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <lcd_show_int_num>:

void lcd_show_int_num(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af04      	add	r7, sp, #16
 8001c02:	4604      	mov	r4, r0
 8001c04:	4608      	mov	r0, r1
 8001c06:	4611      	mov	r1, r2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4623      	mov	r3, r4
 8001c0c:	80fb      	strh	r3, [r7, #6]
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80bb      	strh	r3, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	807b      	strh	r3, [r7, #2]
 8001c16:	4613      	mov	r3, r2
 8001c18:	707b      	strb	r3, [r7, #1]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex = sizey / 2;
 8001c1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c22:	085b      	lsrs	r3, r3, #1
 8001c24:	737b      	strb	r3, [r7, #13]
	for (t = 0; t < len; t++) {
 8001c26:	2300      	movs	r3, #0
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	e059      	b.n	8001ce0 <lcd_show_int_num+0xe4>
		temp = (num / mypow(10, len - t - 1)) % 10;
 8001c2c:	887c      	ldrh	r4, [r7, #2]
 8001c2e:	787a      	ldrb	r2, [r7, #1]
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	200a      	movs	r0, #10
 8001c3e:	f7ff ffc1 	bl	8001bc4 <mypow>
 8001c42:	4603      	mov	r3, r0
 8001c44:	fbb4 f1f3 	udiv	r1, r4, r3
 8001c48:	4b2a      	ldr	r3, [pc, #168]	; (8001cf4 <lcd_show_int_num+0xf8>)
 8001c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8001c4e:	08da      	lsrs	r2, r3, #3
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	1aca      	subs	r2, r1, r3
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	733b      	strb	r3, [r7, #12]
		if (enshow == 0 && t < (len - 1)) {
 8001c5e:	7bbb      	ldrb	r3, [r7, #14]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d121      	bne.n	8001ca8 <lcd_show_int_num+0xac>
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	787b      	ldrb	r3, [r7, #1]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	da1c      	bge.n	8001ca8 <lcd_show_int_num+0xac>
			if (temp == 0) {
 8001c6e:	7b3b      	ldrb	r3, [r7, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d117      	bne.n	8001ca4 <lcd_show_int_num+0xa8>
				lcd_show_char(x + t * sizex, y, ' ', fc, bc, sizey, 0);
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	7b7b      	ldrb	r3, [r7, #13]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	fb12 f303 	smulbb	r3, r2, r3
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	4413      	add	r3, r2
 8001c86:	b298      	uxth	r0, r3
 8001c88:	8c3a      	ldrh	r2, [r7, #32]
 8001c8a:	88b9      	ldrh	r1, [r7, #4]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	9302      	str	r3, [sp, #8]
 8001c90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	f7ff fec1 	bl	8001a24 <lcd_show_char>
				continue;
 8001ca2:	e01a      	b.n	8001cda <lcd_show_int_num+0xde>
			} else
				enshow = 1;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	73bb      	strb	r3, [r7, #14]

		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	7b7b      	ldrb	r3, [r7, #13]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	fb12 f303 	smulbb	r3, r2, r3
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	4413      	add	r3, r2
 8001cba:	b298      	uxth	r0, r3
 8001cbc:	7b3b      	ldrb	r3, [r7, #12]
 8001cbe:	3330      	adds	r3, #48	; 0x30
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	8c3c      	ldrh	r4, [r7, #32]
 8001cc4:	88b9      	ldrh	r1, [r7, #4]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	9302      	str	r3, [sp, #8]
 8001cca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001cce:	9301      	str	r3, [sp, #4]
 8001cd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	4623      	mov	r3, r4
 8001cd6:	f7ff fea5 	bl	8001a24 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	787b      	ldrb	r3, [r7, #1]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d3a1      	bcc.n	8001c2c <lcd_show_int_num+0x30>
	}
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd90      	pop	{r4, r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	cccccccd 	.word	0xcccccccd

08001cf8 <lcd_show_float_num>:

void lcd_show_float_num(uint16_t x, uint16_t y, float num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b08b      	sub	sp, #44	; 0x2c
 8001cfc:	af04      	add	r7, sp, #16
 8001cfe:	4604      	mov	r4, r0
 8001d00:	4608      	mov	r0, r1
 8001d02:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d06:	4611      	mov	r1, r2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	81fb      	strh	r3, [r7, #14]
 8001d0e:	4603      	mov	r3, r0
 8001d10:	81bb      	strh	r3, [r7, #12]
 8001d12:	460b      	mov	r3, r1
 8001d14:	71fb      	strb	r3, [r7, #7]
 8001d16:	4613      	mov	r3, r2
 8001d18:	80bb      	strh	r3, [r7, #4]
	uint8_t t, temp, sizex;
	uint16_t num1;
	sizex = sizey / 2;
 8001d1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d1e:	085b      	lsrs	r3, r3, #1
 8001d20:	75bb      	strb	r3, [r7, #22]
	num1 = num * 100;
 8001d22:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d26:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001e00 <lcd_show_float_num+0x108>
 8001d2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d32:	ee17 3a90 	vmov	r3, s15
 8001d36:	82bb      	strh	r3, [r7, #20]
	for (t = 0; t < len; t++) {
 8001d38:	2300      	movs	r3, #0
 8001d3a:	75fb      	strb	r3, [r7, #23]
 8001d3c:	e057      	b.n	8001dee <lcd_show_float_num+0xf6>
		temp = (num1 / mypow(10, len - t - 1)) % 10;
 8001d3e:	8abc      	ldrh	r4, [r7, #20]
 8001d40:	79fa      	ldrb	r2, [r7, #7]
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	200a      	movs	r0, #10
 8001d50:	f7ff ff38 	bl	8001bc4 <mypow>
 8001d54:	4603      	mov	r3, r0
 8001d56:	fbb4 f1f3 	udiv	r1, r4, r3
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <lcd_show_float_num+0x10c>)
 8001d5c:	fba3 2301 	umull	r2, r3, r3, r1
 8001d60:	08da      	lsrs	r2, r3, #3
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	1aca      	subs	r2, r1, r3
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	74fb      	strb	r3, [r7, #19]
		if (t == (len - 2)) {
 8001d70:	7dfa      	ldrb	r2, [r7, #23]
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	3b02      	subs	r3, #2
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d11d      	bne.n	8001db6 <lcd_show_float_num+0xbe>
			lcd_show_char(x + (len - 2) * sizex, y, '.', fc, bc, sizey, 0);
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	3b02      	subs	r3, #2
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	7dbb      	ldrb	r3, [r7, #22]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	fb12 f303 	smulbb	r3, r2, r3
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	89fb      	ldrh	r3, [r7, #14]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	b298      	uxth	r0, r3
 8001d90:	88ba      	ldrh	r2, [r7, #4]
 8001d92:	89b9      	ldrh	r1, [r7, #12]
 8001d94:	2300      	movs	r3, #0
 8001d96:	9302      	str	r3, [sp, #8]
 8001d98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	4613      	mov	r3, r2
 8001da4:	222e      	movs	r2, #46	; 0x2e
 8001da6:	f7ff fe3d 	bl	8001a24 <lcd_show_char>
			t++;
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
 8001dac:	3301      	adds	r3, #1
 8001dae:	75fb      	strb	r3, [r7, #23]
			len += 1;
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	3301      	adds	r3, #1
 8001db4:	71fb      	strb	r3, [r7, #7]
		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8001db6:	7dfb      	ldrb	r3, [r7, #23]
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	7dbb      	ldrb	r3, [r7, #22]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	fb12 f303 	smulbb	r3, r2, r3
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	89fb      	ldrh	r3, [r7, #14]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	b298      	uxth	r0, r3
 8001dca:	7cfb      	ldrb	r3, [r7, #19]
 8001dcc:	3330      	adds	r3, #48	; 0x30
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	88bc      	ldrh	r4, [r7, #4]
 8001dd2:	89b9      	ldrh	r1, [r7, #12]
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	9302      	str	r3, [sp, #8]
 8001dd8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ddc:	9301      	str	r3, [sp, #4]
 8001dde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	4623      	mov	r3, r4
 8001de4:	f7ff fe1e 	bl	8001a24 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
 8001dea:	3301      	adds	r3, #1
 8001dec:	75fb      	strb	r3, [r7, #23]
 8001dee:	7dfa      	ldrb	r2, [r7, #23]
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d3a3      	bcc.n	8001d3e <lcd_show_float_num+0x46>
	}
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd90      	pop	{r4, r7, pc}
 8001e00:	42c80000 	.word	0x42c80000
 8001e04:	cccccccd 	.word	0xcccccccd

08001e08 <lcd_set_direction>:
			k++;
		}
	}
}

void lcd_set_direction(uint8_t dir) {
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <lcd_set_direction+0x2a>
		lcddev.width = 320;
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <lcd_set_direction+0x44>)
 8001e24:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e28:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <lcd_set_direction+0x44>)
 8001e2c:	22f0      	movs	r2, #240	; 0xf0
 8001e2e:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8001e30:	e006      	b.n	8001e40 <lcd_set_direction+0x38>
		lcddev.width = 240;
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <lcd_set_direction+0x44>)
 8001e34:	22f0      	movs	r2, #240	; 0xf0
 8001e36:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <lcd_set_direction+0x44>)
 8001e3a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e3e:	805a      	strh	r2, [r3, #2]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	20000678 	.word	0x20000678

08001e50 <lcd_init>:

void lcd_init(void) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001e54:	2200      	movs	r2, #0
 8001e56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e5a:	48aa      	ldr	r0, [pc, #680]	; (8002104 <lcd_init+0x2b4>)
 8001e5c:	f002 fdc0 	bl	80049e0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001e60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e64:	f001 fad6 	bl	8003414 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e6e:	48a5      	ldr	r0, [pc, #660]	; (8002104 <lcd_init+0x2b4>)
 8001e70:	f002 fdb6 	bl	80049e0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001e74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e78:	f001 facc 	bl	8003414 <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f7ff ffc3 	bl	8001e08 <lcd_set_direction>
	LCD_WR_REG(0XD3);
 8001e82:	20d3      	movs	r0, #211	; 0xd3
 8001e84:	f7ff fd06 	bl	8001894 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8001e88:	f7ff fd24 	bl	80018d4 <LCD_RD_DATA>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b9d      	ldr	r3, [pc, #628]	; (8002108 <lcd_init+0x2b8>)
 8001e92:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001e94:	f7ff fd1e 	bl	80018d4 <LCD_RD_DATA>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b9a      	ldr	r3, [pc, #616]	; (8002108 <lcd_init+0x2b8>)
 8001e9e:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001ea0:	f7ff fd18 	bl	80018d4 <LCD_RD_DATA>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b97      	ldr	r3, [pc, #604]	; (8002108 <lcd_init+0x2b8>)
 8001eaa:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8001eac:	4b96      	ldr	r3, [pc, #600]	; (8002108 <lcd_init+0x2b8>)
 8001eae:	889b      	ldrh	r3, [r3, #4]
 8001eb0:	021b      	lsls	r3, r3, #8
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	4b94      	ldr	r3, [pc, #592]	; (8002108 <lcd_init+0x2b8>)
 8001eb6:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8001eb8:	f7ff fd0c 	bl	80018d4 <LCD_RD_DATA>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b91      	ldr	r3, [pc, #580]	; (8002108 <lcd_init+0x2b8>)
 8001ec2:	889b      	ldrh	r3, [r3, #4]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	4b8f      	ldr	r3, [pc, #572]	; (8002108 <lcd_init+0x2b8>)
 8001eca:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001ecc:	20cf      	movs	r0, #207	; 0xcf
 8001ece:	f7ff fce1 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7ff fcee 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001ed8:	20c1      	movs	r0, #193	; 0xc1
 8001eda:	f7ff fceb 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001ede:	2030      	movs	r0, #48	; 0x30
 8001ee0:	f7ff fce8 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001ee4:	20ed      	movs	r0, #237	; 0xed
 8001ee6:	f7ff fcd5 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001eea:	2064      	movs	r0, #100	; 0x64
 8001eec:	f7ff fce2 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001ef0:	2003      	movs	r0, #3
 8001ef2:	f7ff fcdf 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001ef6:	2012      	movs	r0, #18
 8001ef8:	f7ff fcdc 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001efc:	2081      	movs	r0, #129	; 0x81
 8001efe:	f7ff fcd9 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001f02:	20e8      	movs	r0, #232	; 0xe8
 8001f04:	f7ff fcc6 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001f08:	2085      	movs	r0, #133	; 0x85
 8001f0a:	f7ff fcd3 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001f0e:	2010      	movs	r0, #16
 8001f10:	f7ff fcd0 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001f14:	207a      	movs	r0, #122	; 0x7a
 8001f16:	f7ff fccd 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001f1a:	20cb      	movs	r0, #203	; 0xcb
 8001f1c:	f7ff fcba 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001f20:	2039      	movs	r0, #57	; 0x39
 8001f22:	f7ff fcc7 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001f26:	202c      	movs	r0, #44	; 0x2c
 8001f28:	f7ff fcc4 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f7ff fcc1 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001f32:	2034      	movs	r0, #52	; 0x34
 8001f34:	f7ff fcbe 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001f38:	2002      	movs	r0, #2
 8001f3a:	f7ff fcbb 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001f3e:	20f7      	movs	r0, #247	; 0xf7
 8001f40:	f7ff fca8 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001f44:	2020      	movs	r0, #32
 8001f46:	f7ff fcb5 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001f4a:	20ea      	movs	r0, #234	; 0xea
 8001f4c:	f7ff fca2 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f50:	2000      	movs	r0, #0
 8001f52:	f7ff fcaf 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f7ff fcac 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001f5c:	20c0      	movs	r0, #192	; 0xc0
 8001f5e:	f7ff fc99 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001f62:	201b      	movs	r0, #27
 8001f64:	f7ff fca6 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001f68:	20c1      	movs	r0, #193	; 0xc1
 8001f6a:	f7ff fc93 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f7ff fca0 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001f74:	20c5      	movs	r0, #197	; 0xc5
 8001f76:	f7ff fc8d 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001f7a:	2030      	movs	r0, #48	; 0x30
 8001f7c:	f7ff fc9a 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001f80:	2030      	movs	r0, #48	; 0x30
 8001f82:	f7ff fc97 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001f86:	20c7      	movs	r0, #199	; 0xc7
 8001f88:	f7ff fc84 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001f8c:	20b7      	movs	r0, #183	; 0xb7
 8001f8e:	f7ff fc91 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001f92:	2036      	movs	r0, #54	; 0x36
 8001f94:	f7ff fc7e 	bl	8001894 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8001f98:	2008      	movs	r0, #8
 8001f9a:	f7ff fc8b 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001f9e:	203a      	movs	r0, #58	; 0x3a
 8001fa0:	f7ff fc78 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001fa4:	2055      	movs	r0, #85	; 0x55
 8001fa6:	f7ff fc85 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001faa:	20b1      	movs	r0, #177	; 0xb1
 8001fac:	f7ff fc72 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f7ff fc7f 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001fb6:	201a      	movs	r0, #26
 8001fb8:	f7ff fc7c 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001fbc:	20b6      	movs	r0, #182	; 0xb6
 8001fbe:	f7ff fc69 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001fc2:	200a      	movs	r0, #10
 8001fc4:	f7ff fc76 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001fc8:	20a2      	movs	r0, #162	; 0xa2
 8001fca:	f7ff fc73 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001fce:	20f2      	movs	r0, #242	; 0xf2
 8001fd0:	f7ff fc60 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f7ff fc6d 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001fda:	2026      	movs	r0, #38	; 0x26
 8001fdc:	f7ff fc5a 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	f7ff fc67 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001fe6:	20e0      	movs	r0, #224	; 0xe0
 8001fe8:	f7ff fc54 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001fec:	200f      	movs	r0, #15
 8001fee:	f7ff fc61 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001ff2:	202a      	movs	r0, #42	; 0x2a
 8001ff4:	f7ff fc5e 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001ff8:	2028      	movs	r0, #40	; 0x28
 8001ffa:	f7ff fc5b 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001ffe:	2008      	movs	r0, #8
 8002000:	f7ff fc58 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002004:	200e      	movs	r0, #14
 8002006:	f7ff fc55 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800200a:	2008      	movs	r0, #8
 800200c:	f7ff fc52 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002010:	2054      	movs	r0, #84	; 0x54
 8002012:	f7ff fc4f 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8002016:	20a9      	movs	r0, #169	; 0xa9
 8002018:	f7ff fc4c 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 800201c:	2043      	movs	r0, #67	; 0x43
 800201e:	f7ff fc49 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002022:	200a      	movs	r0, #10
 8002024:	f7ff fc46 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002028:	200f      	movs	r0, #15
 800202a:	f7ff fc43 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800202e:	2000      	movs	r0, #0
 8002030:	f7ff fc40 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002034:	2000      	movs	r0, #0
 8002036:	f7ff fc3d 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800203a:	2000      	movs	r0, #0
 800203c:	f7ff fc3a 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff fc37 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8002046:	20e1      	movs	r0, #225	; 0xe1
 8002048:	f7ff fc24 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800204c:	2000      	movs	r0, #0
 800204e:	f7ff fc31 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002052:	2015      	movs	r0, #21
 8002054:	f7ff fc2e 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002058:	2017      	movs	r0, #23
 800205a:	f7ff fc2b 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800205e:	2007      	movs	r0, #7
 8002060:	f7ff fc28 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002064:	2011      	movs	r0, #17
 8002066:	f7ff fc25 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800206a:	2006      	movs	r0, #6
 800206c:	f7ff fc22 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002070:	202b      	movs	r0, #43	; 0x2b
 8002072:	f7ff fc1f 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002076:	2056      	movs	r0, #86	; 0x56
 8002078:	f7ff fc1c 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800207c:	203c      	movs	r0, #60	; 0x3c
 800207e:	f7ff fc19 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002082:	2005      	movs	r0, #5
 8002084:	f7ff fc16 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002088:	2010      	movs	r0, #16
 800208a:	f7ff fc13 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800208e:	200f      	movs	r0, #15
 8002090:	f7ff fc10 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002094:	203f      	movs	r0, #63	; 0x3f
 8002096:	f7ff fc0d 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800209a:	203f      	movs	r0, #63	; 0x3f
 800209c:	f7ff fc0a 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020a0:	200f      	movs	r0, #15
 80020a2:	f7ff fc07 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80020a6:	202b      	movs	r0, #43	; 0x2b
 80020a8:	f7ff fbf4 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f7ff fc01 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020b2:	2000      	movs	r0, #0
 80020b4:	f7ff fbfe 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f7ff fbfb 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80020be:	203f      	movs	r0, #63	; 0x3f
 80020c0:	f7ff fbf8 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80020c4:	202a      	movs	r0, #42	; 0x2a
 80020c6:	f7ff fbe5 	bl	8001894 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f7ff fbf2 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020d0:	2000      	movs	r0, #0
 80020d2:	f7ff fbef 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020d6:	2000      	movs	r0, #0
 80020d8:	f7ff fbec 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80020dc:	20ef      	movs	r0, #239	; 0xef
 80020de:	f7ff fbe9 	bl	80018b4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 80020e2:	2011      	movs	r0, #17
 80020e4:	f7ff fbd6 	bl	8001894 <LCD_WR_REG>
	HAL_Delay(120);
 80020e8:	2078      	movs	r0, #120	; 0x78
 80020ea:	f001 f993 	bl	8003414 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 80020ee:	2029      	movs	r0, #41	; 0x29
 80020f0:	f7ff fbd0 	bl	8001894 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80020f4:	2201      	movs	r2, #1
 80020f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020fa:	4804      	ldr	r0, [pc, #16]	; (800210c <lcd_init+0x2bc>)
 80020fc:	f002 fc70 	bl	80049e0 <HAL_GPIO_WritePin>
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40020800 	.word	0x40020800
 8002108:	20000678 	.word	0x20000678
 800210c:	40020000 	.word	0x40020000

08002110 <lcd_show_string>:
		}
	}
}

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b08b      	sub	sp, #44	; 0x2c
 8002114:	af04      	add	r7, sp, #16
 8002116:	60ba      	str	r2, [r7, #8]
 8002118:	461a      	mov	r2, r3
 800211a:	4603      	mov	r3, r0
 800211c:	81fb      	strh	r3, [r7, #14]
 800211e:	460b      	mov	r3, r1
 8002120:	81bb      	strh	r3, [r7, #12]
 8002122:	4613      	mov	r3, r2
 8002124:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 8002126:	89fb      	ldrh	r3, [r7, #14]
 8002128:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 800212e:	e048      	b.n	80021c2 <lcd_show_string+0xb2>
		if (!bHz) {
 8002130:	7dfb      	ldrb	r3, [r7, #23]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d145      	bne.n	80021c2 <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 8002136:	89fa      	ldrh	r2, [r7, #14]
 8002138:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <lcd_show_string+0xc4>)
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	4619      	mov	r1, r3
 800213e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002142:	085b      	lsrs	r3, r3, #1
 8002144:	b2db      	uxtb	r3, r3
 8002146:	1acb      	subs	r3, r1, r3
 8002148:	429a      	cmp	r2, r3
 800214a:	dc3f      	bgt.n	80021cc <lcd_show_string+0xbc>
 800214c:	89ba      	ldrh	r2, [r7, #12]
 800214e:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <lcd_show_string+0xc4>)
 8002150:	885b      	ldrh	r3, [r3, #2]
 8002152:	4619      	mov	r1, r3
 8002154:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002158:	1acb      	subs	r3, r1, r3
 800215a:	429a      	cmp	r2, r3
 800215c:	dc36      	bgt.n	80021cc <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b80      	cmp	r3, #128	; 0x80
 8002164:	d902      	bls.n	800216c <lcd_show_string+0x5c>
				bHz = 1;
 8002166:	2301      	movs	r3, #1
 8002168:	75fb      	strb	r3, [r7, #23]
 800216a:	e02a      	b.n	80021c2 <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b0d      	cmp	r3, #13
 8002172:	d10b      	bne.n	800218c <lcd_show_string+0x7c>
					y += sizey;
 8002174:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002178:	b29a      	uxth	r2, r3
 800217a:	89bb      	ldrh	r3, [r7, #12]
 800217c:	4413      	add	r3, r2
 800217e:	81bb      	strh	r3, [r7, #12]
					x = x0;
 8002180:	8abb      	ldrh	r3, [r7, #20]
 8002182:	81fb      	strh	r3, [r7, #14]
					str++;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	3301      	adds	r3, #1
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	e017      	b.n	80021bc <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	781a      	ldrb	r2, [r3, #0]
 8002190:	88fc      	ldrh	r4, [r7, #6]
 8002192:	89b9      	ldrh	r1, [r7, #12]
 8002194:	89f8      	ldrh	r0, [r7, #14]
 8002196:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800219a:	9302      	str	r3, [sp, #8]
 800219c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	4623      	mov	r3, r4
 80021a8:	f7ff fc3c 	bl	8001a24 <lcd_show_char>
					x += sizey / 2;
 80021ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021b0:	085b      	lsrs	r3, r3, #1
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	89fb      	ldrh	r3, [r7, #14]
 80021b8:	4413      	add	r3, r2
 80021ba:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	3301      	adds	r3, #1
 80021c0:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1b2      	bne.n	8002130 <lcd_show_string+0x20>
 80021ca:	e000      	b.n	80021ce <lcd_show_string+0xbe>
				return;
 80021cc:	bf00      	nop
			}
		}
	}
}
 80021ce:	371c      	adds	r7, #28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd90      	pop	{r4, r7, pc}
 80021d4:	20000678 	.word	0x20000678

080021d8 <HAL_TIM_PeriodElapsedCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_TIM_PeriodElapsedCallback+0x16>
		timerRun();
 80021ea:	f000 fef7 	bl	8002fdc <timerRun>
	}
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40000400 	.word	0x40000400

080021fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	RS485_UART_Callback(huart);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 fc05 	bl	8002a14 <RS485_UART_Callback>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002218:	f001 f88a 	bl	8003330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800221c:	f000 f83e 	bl	800229c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002220:	f7ff fa58 	bl	80016d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002224:	f7ff f966 	bl	80014f4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002228:	f000 ff72 	bl	8003110 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800222c:	f000 ff46 	bl	80030bc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002230:	f000 ff1a 	bl	8003068 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002234:	f7fe ff2c 	bl	8001090 <MX_ADC1_Init>
  MX_FSMC_Init();
 8002238:	f7ff f97c 	bl	8001534 <MX_FSMC_Init>
  MX_SPI1_Init();
 800223c:	f000 fd0a 	bl	8002c54 <MX_SPI1_Init>
  MX_TIM3_Init();
 8002240:	f000 fe3e 	bl	8002ec0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8002244:	f7ff fe04 	bl	8001e50 <lcd_init>
  sensor_init();
 8002248:	f000 fc1a 	bl	8002a80 <sensor_init>
  lcd_clear(BLACK);
 800224c:	2000      	movs	r0, #0
 800224e:	f7ff fb9f 	bl	8001990 <lcd_clear>
  HAL_TIM_Base_Start_IT(&htim3);
 8002252:	4811      	ldr	r0, [pc, #68]	; (8002298 <main+0x84>)
 8002254:	f003 fd5c 	bl	8005d10 <HAL_TIM_Base_Start_IT>
  setTimer(TI_BUTTON_SCAN_TIMER, TI_BUTTON_SCAN_TIME);
 8002258:	2114      	movs	r1, #20
 800225a:	2000      	movs	r0, #0
 800225c:	f000 fea6 	bl	8002fac <setTimer>
  setTimer(TI_7SEG_SCAN_TIMER, TI_7SEG_SCAN_TIME);
 8002260:	2102      	movs	r1, #2
 8002262:	2001      	movs	r0, #1
 8002264:	f000 fea2 	bl	8002fac <setTimer>
  f_rs485_fsm_init();
 8002268:	f000 fa2e 	bl	80026c8 <f_rs485_fsm_init>
  f_slave_init_def();
 800226c:	f7fe fea2 	bl	8000fb4 <f_slave_init_def>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifdef SLAVE
	  if(isFlag(TI_BUTTON_SCAN_TIMER)){
 8002270:	2000      	movs	r0, #0
 8002272:	f000 fee3 	bl	800303c <isFlag>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d007      	beq.n	800228c <main+0x78>
		  TestADC();
 800227c:	f000 f878 	bl	8002370 <TestADC>
		  button_scan();
 8002280:	f7ff f81c 	bl	80012bc <button_scan>
		  setTimer(TI_BUTTON_SCAN_TIMER, TI_BUTTON_SCAN_TIME);
 8002284:	2114      	movs	r1, #20
 8002286:	2000      	movs	r0, #0
 8002288:	f000 fe90 	bl	8002fac <setTimer>
	  }
	  f_slave_behavior_def();
 800228c:	f7fe feba 	bl	8001004 <f_slave_behavior_def>
	  f_rs485_fsm();
 8002290:	f000 fa34 	bl	80026fc <f_rs485_fsm>
	  if(isFlag(TI_BUTTON_SCAN_TIMER)){
 8002294:	e7ec      	b.n	8002270 <main+0x5c>
 8002296:	bf00      	nop
 8002298:	2000096c 	.word	0x2000096c

0800229c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b094      	sub	sp, #80	; 0x50
 80022a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022a2:	f107 0320 	add.w	r3, r7, #32
 80022a6:	2230      	movs	r2, #48	; 0x30
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f005 faa4 	bl	80077f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b0:	f107 030c 	add.w	r3, r7, #12
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	4b28      	ldr	r3, [pc, #160]	; (8002368 <SystemClock_Config+0xcc>)
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	4a27      	ldr	r2, [pc, #156]	; (8002368 <SystemClock_Config+0xcc>)
 80022ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ce:	6413      	str	r3, [r2, #64]	; 0x40
 80022d0:	4b25      	ldr	r3, [pc, #148]	; (8002368 <SystemClock_Config+0xcc>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022dc:	2300      	movs	r3, #0
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	4b22      	ldr	r3, [pc, #136]	; (800236c <SystemClock_Config+0xd0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a21      	ldr	r2, [pc, #132]	; (800236c <SystemClock_Config+0xd0>)
 80022e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <SystemClock_Config+0xd0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f4:	607b      	str	r3, [r7, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022f8:	2302      	movs	r3, #2
 80022fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022fc:	2301      	movs	r3, #1
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002300:	2310      	movs	r3, #16
 8002302:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002304:	2302      	movs	r3, #2
 8002306:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002308:	2300      	movs	r3, #0
 800230a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800230c:	2308      	movs	r3, #8
 800230e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002310:	23a8      	movs	r3, #168	; 0xa8
 8002312:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002314:	2302      	movs	r3, #2
 8002316:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002318:	2304      	movs	r3, #4
 800231a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800231c:	f107 0320 	add.w	r3, r7, #32
 8002320:	4618      	mov	r0, r3
 8002322:	f002 fb77 	bl	8004a14 <HAL_RCC_OscConfig>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800232c:	f000 f8e0 	bl	80024f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002330:	230f      	movs	r3, #15
 8002332:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002334:	2302      	movs	r3, #2
 8002336:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800233c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002340:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002342:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002346:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	2105      	movs	r1, #5
 800234e:	4618      	mov	r0, r3
 8002350:	f002 fdd8 	bl	8004f04 <HAL_RCC_ClockConfig>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800235a:	f000 f8c9 	bl	80024f0 <Error_Handler>
  }
}
 800235e:	bf00      	nop
 8002360:	3750      	adds	r7, #80	; 0x50
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	40007000 	.word	0x40007000

08002370 <TestADC>:

/* USER CODE BEGIN 4 */
uint8_t count_adc = 0;
void TestADC() {
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1) % 20;
 8002376:	4b57      	ldr	r3, [pc, #348]	; (80024d4 <TestADC+0x164>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	4b56      	ldr	r3, [pc, #344]	; (80024d8 <TestADC+0x168>)
 800237e:	fb83 1302 	smull	r1, r3, r3, r2
 8002382:	10d9      	asrs	r1, r3, #3
 8002384:	17d3      	asrs	r3, r2, #31
 8002386:	1ac9      	subs	r1, r1, r3
 8002388:	460b      	mov	r3, r1
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	1ad1      	subs	r1, r2, r3
 8002392:	b2ca      	uxtb	r2, r1
 8002394:	4b4f      	ldr	r3, [pc, #316]	; (80024d4 <TestADC+0x164>)
 8002396:	701a      	strb	r2, [r3, #0]
	if (count_adc == 0) {
 8002398:	4b4e      	ldr	r3, [pc, #312]	; (80024d4 <TestADC+0x164>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	f040 8096 	bne.w	80024ce <TestADC+0x15e>
		sensor_read();
 80023a2:	f000 fb7b 	bl	8002a9c <sensor_read>
		lcd_show_string(10, 100, "Voltage:", RED, BLACK, 16, 0);
 80023a6:	2300      	movs	r3, #0
 80023a8:	9302      	str	r3, [sp, #8]
 80023aa:	2310      	movs	r3, #16
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	2300      	movs	r3, #0
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023b6:	4a49      	ldr	r2, [pc, #292]	; (80024dc <TestADC+0x16c>)
 80023b8:	2164      	movs	r1, #100	; 0x64
 80023ba:	200a      	movs	r0, #10
 80023bc:	f7ff fea8 	bl	8002110 <lcd_show_string>
		lcd_show_float_num(130, 100, sensor_get_voltage(), 4, RED, BLACK, 16);
 80023c0:	f000 fb92 	bl	8002ae8 <sensor_get_voltage>
 80023c4:	eef0 7a40 	vmov.f32	s15, s0
 80023c8:	2310      	movs	r3, #16
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	2300      	movs	r3, #0
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023d4:	2204      	movs	r2, #4
 80023d6:	eeb0 0a67 	vmov.f32	s0, s15
 80023da:	2164      	movs	r1, #100	; 0x64
 80023dc:	2082      	movs	r0, #130	; 0x82
 80023de:	f7ff fc8b 	bl	8001cf8 <lcd_show_float_num>
		lcd_show_string(10, 120, "Current:", RED, BLACK, 16, 0);
 80023e2:	2300      	movs	r3, #0
 80023e4:	9302      	str	r3, [sp, #8]
 80023e6:	2310      	movs	r3, #16
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	2300      	movs	r3, #0
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023f2:	4a3b      	ldr	r2, [pc, #236]	; (80024e0 <TestADC+0x170>)
 80023f4:	2178      	movs	r1, #120	; 0x78
 80023f6:	200a      	movs	r0, #10
 80023f8:	f7ff fe8a 	bl	8002110 <lcd_show_string>
		lcd_show_float_num(130, 120, sensor_get_current(), 4, RED, BLACK, 16);
 80023fc:	f000 fbb0 	bl	8002b60 <sensor_get_current>
 8002400:	eef0 7a40 	vmov.f32	s15, s0
 8002404:	2310      	movs	r3, #16
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	2300      	movs	r3, #0
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002410:	2204      	movs	r2, #4
 8002412:	eeb0 0a67 	vmov.f32	s0, s15
 8002416:	2178      	movs	r1, #120	; 0x78
 8002418:	2082      	movs	r0, #130	; 0x82
 800241a:	f7ff fc6d 	bl	8001cf8 <lcd_show_float_num>
		lcd_show_string(10, 140, "Light:", RED, BLACK, 16, 0);
 800241e:	2300      	movs	r3, #0
 8002420:	9302      	str	r3, [sp, #8]
 8002422:	2310      	movs	r3, #16
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	2300      	movs	r3, #0
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800242e:	4a2d      	ldr	r2, [pc, #180]	; (80024e4 <TestADC+0x174>)
 8002430:	218c      	movs	r1, #140	; 0x8c
 8002432:	200a      	movs	r0, #10
 8002434:	f7ff fe6c 	bl	8002110 <lcd_show_string>
		lcd_show_int_num(130, 140, sensor_get_light(), 4, RED, BLACK, 16);
 8002438:	f000 fb3e 	bl	8002ab8 <sensor_get_light>
 800243c:	4603      	mov	r3, r0
 800243e:	461a      	mov	r2, r3
 8002440:	2310      	movs	r3, #16
 8002442:	9302      	str	r3, [sp, #8]
 8002444:	2300      	movs	r3, #0
 8002446:	9301      	str	r3, [sp, #4]
 8002448:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	2304      	movs	r3, #4
 8002450:	218c      	movs	r1, #140	; 0x8c
 8002452:	2082      	movs	r0, #130	; 0x82
 8002454:	f7ff fbd2 	bl	8001bfc <lcd_show_int_num>
		lcd_show_string(10, 160, "Potentiometer:", RED, BLACK, 16, 0);
 8002458:	2300      	movs	r3, #0
 800245a:	9302      	str	r3, [sp, #8]
 800245c:	2310      	movs	r3, #16
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	2300      	movs	r3, #0
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002468:	4a1f      	ldr	r2, [pc, #124]	; (80024e8 <TestADC+0x178>)
 800246a:	21a0      	movs	r1, #160	; 0xa0
 800246c:	200a      	movs	r0, #10
 800246e:	f7ff fe4f 	bl	8002110 <lcd_show_string>
		lcd_show_int_num(130, 160, sensor_get_potentiometer(), 4, RED, BLACK,
 8002472:	f000 fb2d 	bl	8002ad0 <sensor_get_potentiometer>
 8002476:	4603      	mov	r3, r0
 8002478:	461a      	mov	r2, r3
 800247a:	2310      	movs	r3, #16
 800247c:	9302      	str	r3, [sp, #8]
 800247e:	2300      	movs	r3, #0
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2304      	movs	r3, #4
 800248a:	21a0      	movs	r1, #160	; 0xa0
 800248c:	2082      	movs	r0, #130	; 0x82
 800248e:	f7ff fbb5 	bl	8001bfc <lcd_show_int_num>
				16);
		lcd_show_string(10, 180, "Temperature:", RED, BLACK, 16, 0);
 8002492:	2300      	movs	r3, #0
 8002494:	9302      	str	r3, [sp, #8]
 8002496:	2310      	movs	r3, #16
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	2300      	movs	r3, #0
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024a2:	4a12      	ldr	r2, [pc, #72]	; (80024ec <TestADC+0x17c>)
 80024a4:	21b4      	movs	r1, #180	; 0xb4
 80024a6:	200a      	movs	r0, #10
 80024a8:	f7ff fe32 	bl	8002110 <lcd_show_string>
		lcd_show_float_num(130, 180, sensor_get_temperature(), 4, RED, BLACK,
 80024ac:	f000 fbb4 	bl	8002c18 <sensor_get_temperature>
 80024b0:	eef0 7a40 	vmov.f32	s15, s0
 80024b4:	2310      	movs	r3, #16
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	2300      	movs	r3, #0
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024c0:	2204      	movs	r2, #4
 80024c2:	eeb0 0a67 	vmov.f32	s0, s15
 80024c6:	21b4      	movs	r1, #180	; 0xb4
 80024c8:	2082      	movs	r0, #130	; 0x82
 80024ca:	f7ff fc15 	bl	8001cf8 <lcd_show_float_num>
				16);
	}
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	2000067e 	.word	0x2000067e
 80024d8:	66666667 	.word	0x66666667
 80024dc:	08008124 	.word	0x08008124
 80024e0:	08008130 	.word	0x08008130
 80024e4:	0800813c 	.word	0x0800813c
 80024e8:	08008144 	.word	0x08008144
 80024ec:	08008154 	.word	0x08008154

080024f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024f4:	b672      	cpsid	i
}
 80024f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <Error_Handler+0x8>
	...

080024fc <uart_Rs232SendString>:
};

// FOR DEBUG
#define DEBUG 1
uint8_t msg[100];
void uart_Rs232SendString(uint8_t* str){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), HAL_MAX_DELAY);
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	4908      	ldr	r1, [pc, #32]	; (8002528 <uart_Rs232SendString+0x2c>)
 8002508:	4808      	ldr	r0, [pc, #32]	; (800252c <uart_Rs232SendString+0x30>)
 800250a:	f005 f955 	bl	80077b8 <siprintf>
 800250e:	4603      	mov	r3, r0
 8002510:	b29a      	uxth	r2, r3
 8002512:	f04f 33ff 	mov.w	r3, #4294967295
 8002516:	4905      	ldr	r1, [pc, #20]	; (800252c <uart_Rs232SendString+0x30>)
 8002518:	4805      	ldr	r0, [pc, #20]	; (8002530 <uart_Rs232SendString+0x34>)
 800251a:	f004 f86f 	bl	80065fc <HAL_UART_Transmit>
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	08008164 	.word	0x08008164
 800252c:	20000680 	.word	0x20000680
 8002530:	20000a04 	.word	0x20000a04

08002534 <_is_character_received>:
	}
	return 0;
}

uint8_t _is_character_received()
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
	if (_character_received_flag == 1)
 8002538:	4b07      	ldr	r3, [pc, #28]	; (8002558 <_is_character_received+0x24>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d104      	bne.n	800254a <_is_character_received+0x16>
	{
		_character_received_flag = 0;
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <_is_character_received+0x24>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
		return 1;
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <_is_character_received+0x18>
	}
	return 0;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000900 	.word	0x20000900

0800255c <_is_transmit>:

uint8_t _is_transmit()
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
	if (_transmit_flag == 1)
 8002560:	4b07      	ldr	r3, [pc, #28]	; (8002580 <_is_transmit+0x24>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d104      	bne.n	8002572 <_is_transmit+0x16>
	{
		_transmit_flag = 0;
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <_is_transmit+0x24>)
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
		return 1;
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <_is_transmit+0x18>
	}
	return 0;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000901 	.word	0x20000901

08002584 <_crc_checking>:

uint8_t _crc_checking()
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
	if (_receive_index - 2 >= 0)
 800258a:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <_crc_checking+0x60>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d922      	bls.n	80025d8 <_crc_checking+0x54>
	{
		uint16_t crc = crc16(_receive_buffer, _receive_index - 2);
 8002592:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <_crc_checking+0x60>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b02      	subs	r3, #2
 800259a:	b29b      	uxth	r3, r3
 800259c:	4619      	mov	r1, r3
 800259e:	4812      	ldr	r0, [pc, #72]	; (80025e8 <_crc_checking+0x64>)
 80025a0:	f7fe ff78 	bl	8001494 <crc16>
 80025a4:	4603      	mov	r3, r0
 80025a6:	80fb      	strh	r3, [r7, #6]
		uint8_t crc_high = (crc >> 8) & 0xFF;
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	717b      	strb	r3, [r7, #5]
		uint8_t crc_low = crc & 0xFF;
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	713b      	strb	r3, [r7, #4]
		if (crc_low == _receive_buffer[_receive_index - 2] && crc_high == _receive_buffer[_receive_index - 1])
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <_crc_checking+0x60>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	3b02      	subs	r3, #2
 80025ba:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <_crc_checking+0x64>)
 80025bc:	5cd3      	ldrb	r3, [r2, r3]
 80025be:	793a      	ldrb	r2, [r7, #4]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d109      	bne.n	80025d8 <_crc_checking+0x54>
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <_crc_checking+0x60>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <_crc_checking+0x64>)
 80025cc:	5cd3      	ldrb	r3, [r2, r3]
 80025ce:	797a      	ldrb	r2, [r7, #5]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d101      	bne.n	80025d8 <_crc_checking+0x54>
		{
			return 1;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <_crc_checking+0x56>
		}
	}

	return 0;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	200007f8 	.word	0x200007f8
 80025e8:	200006f8 	.word	0x200006f8

080025ec <f_rs485_init>:
 * @param flag_rx: flag for receive callback fsm
 * @param rx_size: the size of receive command for callback fsm
 * @retval: None
 */
void f_rs485_init(UART_HandleTypeDef *huart, uint8_t *receive_buffer, uint8_t *flag_rx, uint16_t *rx_size)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
	_huart_callback = huart;
 80025fa:	4a09      	ldr	r2, [pc, #36]	; (8002620 <f_rs485_init+0x34>)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6013      	str	r3, [r2, #0]
	_receive_buffer_callback = receive_buffer;
 8002600:	4a08      	ldr	r2, [pc, #32]	; (8002624 <f_rs485_init+0x38>)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	6013      	str	r3, [r2, #0]
	_flag_rx_callback = flag_rx;
 8002606:	4a08      	ldr	r2, [pc, #32]	; (8002628 <f_rs485_init+0x3c>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6013      	str	r3, [r2, #0]
	_rx_size_callback = rx_size;
 800260c:	4a07      	ldr	r2, [pc, #28]	; (800262c <f_rs485_init+0x40>)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6013      	str	r3, [r2, #0]
}
 8002612:	bf00      	nop
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	200006e4 	.word	0x200006e4
 8002624:	200006e8 	.word	0x200006e8
 8002628:	200006ec 	.word	0x200006ec
 800262c:	200006f0 	.word	0x200006f0

08002630 <f_rs485_send_cmd>:
 * @param tx_buffer_without_crc: transmit buffer address, maxsize is 254
 * @param tx_size_without_crc: number of bytes transmit, max is 254
 * @retval: None
 */
void f_rs485_send_cmd(uint8_t *tx_buffer_without_crc, uint8_t tx_size_without_crc)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	70fb      	strb	r3, [r7, #3]
	if (tx_size_without_crc > 254) return;
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	2bff      	cmp	r3, #255	; 0xff
 8002640:	d038      	beq.n	80026b4 <f_rs485_send_cmd+0x84>

	for (int i = 0; i < tx_size_without_crc; i++)
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	e00b      	b.n	8002660 <f_rs485_send_cmd+0x30>
	{
		_transmit_buffer[i] = tx_buffer_without_crc[i];
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	7819      	ldrb	r1, [r3, #0]
 8002650:	4a1a      	ldr	r2, [pc, #104]	; (80026bc <f_rs485_send_cmd+0x8c>)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4413      	add	r3, r2
 8002656:	460a      	mov	r2, r1
 8002658:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < tx_size_without_crc; i++)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3301      	adds	r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	429a      	cmp	r2, r3
 8002666:	dbef      	blt.n	8002648 <f_rs485_send_cmd+0x18>
	}
	//	sprintf((void*)transmit_buffer,"%s",cmd_without_crc);
	_transmit_size = tx_size_without_crc;
 8002668:	4a15      	ldr	r2, [pc, #84]	; (80026c0 <f_rs485_send_cmd+0x90>)
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	7013      	strb	r3, [r2, #0]

	uint16_t crc = crc16(_transmit_buffer, _transmit_size);
 800266e:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <f_rs485_send_cmd+0x90>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	4619      	mov	r1, r3
 8002676:	4811      	ldr	r0, [pc, #68]	; (80026bc <f_rs485_send_cmd+0x8c>)
 8002678:	f7fe ff0c 	bl	8001494 <crc16>
 800267c:	4603      	mov	r3, r0
 800267e:	817b      	strh	r3, [r7, #10]
	_transmit_buffer[_transmit_size] = (uint8_t)(crc & 0x00FF); // CRC low
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <f_rs485_send_cmd+0x90>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	897b      	ldrh	r3, [r7, #10]
 8002688:	b2d9      	uxtb	r1, r3
 800268a:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <f_rs485_send_cmd+0x8c>)
 800268c:	5499      	strb	r1, [r3, r2]
	_transmit_buffer[_transmit_size + 1] = (uint8_t)((crc >> 8) & 0x00FF); // CRC high
 800268e:	897b      	ldrh	r3, [r7, #10]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	b29a      	uxth	r2, r3
 8002694:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <f_rs485_send_cmd+0x90>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	3301      	adds	r3, #1
 800269a:	b2d1      	uxtb	r1, r2
 800269c:	4a07      	ldr	r2, [pc, #28]	; (80026bc <f_rs485_send_cmd+0x8c>)
 800269e:	54d1      	strb	r1, [r2, r3]

	_transmit_size += 2;
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <f_rs485_send_cmd+0x90>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	3302      	adds	r3, #2
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <f_rs485_send_cmd+0x90>)
 80026aa:	701a      	strb	r2, [r3, #0]
	_transmit_flag = 1;
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <f_rs485_send_cmd+0x94>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
 80026b2:	e000      	b.n	80026b6 <f_rs485_send_cmd+0x86>
	if (tx_size_without_crc > 254) return;
 80026b4:	bf00      	nop
}
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	200007fc 	.word	0x200007fc
 80026c0:	200008fc 	.word	0x200008fc
 80026c4:	20000901 	.word	0x20000901

080026c8 <f_rs485_fsm_init>:

void f_rs485_fsm_init()
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
	// DEBUG
	if (DEBUG) uart_Rs232SendString((uint8_t*)"FSM_INIT\n\r");
 80026cc:	4807      	ldr	r0, [pc, #28]	; (80026ec <f_rs485_fsm_init+0x24>)
 80026ce:	f7ff ff15 	bl	80024fc <uart_Rs232SendString>
	// END DEBUG
	HAL_GPIO_WritePin(EN_RS485_GPIO_Port, EN_RS485_Pin, 0);
 80026d2:	2200      	movs	r2, #0
 80026d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026d8:	4805      	ldr	r0, [pc, #20]	; (80026f0 <f_rs485_fsm_init+0x28>)
 80026da:	f002 f981 	bl	80049e0 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart3, &_receive_byte_buffer, 1);
 80026de:	2201      	movs	r2, #1
 80026e0:	4904      	ldr	r1, [pc, #16]	; (80026f4 <f_rs485_fsm_init+0x2c>)
 80026e2:	4805      	ldr	r0, [pc, #20]	; (80026f8 <f_rs485_fsm_init+0x30>)
 80026e4:	f004 f815 	bl	8006712 <HAL_UART_Receive_IT>
}
 80026e8:	bf00      	nop
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	08008168 	.word	0x08008168
 80026f0:	40020000 	.word	0x40020000
 80026f4:	200006f4 	.word	0x200006f4
 80026f8:	20000a94 	.word	0x20000a94

080026fc <f_rs485_fsm>:
/*
 * @brief: RS485 Finite State Machine, this must be put in while loop
 * @retval: None
 */
void f_rs485_fsm()
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
	switch (MODBUS485_STATE) {
 8002702:	4b66      	ldr	r3, [pc, #408]	; (800289c <f_rs485_fsm+0x1a0>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b05      	cmp	r3, #5
 8002708:	f200 80b8 	bhi.w	800287c <f_rs485_fsm+0x180>
 800270c:	a201      	add	r2, pc, #4	; (adr r2, 8002714 <f_rs485_fsm+0x18>)
 800270e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002712:	bf00      	nop
 8002714:	0800272d 	.word	0x0800272d
 8002718:	0800273d 	.word	0x0800273d
 800271c:	0800276f 	.word	0x0800276f
 8002720:	080027c9 	.word	0x080027c9
 8002724:	080027e5 	.word	0x080027e5
 8002728:	08002815 	.word	0x08002815
		case RS485_SUPER_INIT:
			_f_rs485_super_init();
 800272c:	f000 f8ce 	bl	80028cc <_f_rs485_super_init>

			if (1) // CHANGE STATE -> RS485_INIT
			{
				_f_init_rs485_init();
 8002730:	f000 f8d4 	bl	80028dc <_f_init_rs485_init>
				MODBUS485_STATE = RS485_INIT;
 8002734:	4b59      	ldr	r3, [pc, #356]	; (800289c <f_rs485_fsm+0x1a0>)
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]
			}
			break;
 800273a:	e0aa      	b.n	8002892 <f_rs485_fsm+0x196>
		case RS485_INIT:
			_f_rs485_init();
 800273c:	f000 f8dc 	bl	80028f8 <_f_rs485_init>

			if (isFlag(TI_RS485_T35_TIMER)) // CHANGE STATE -> RS485_IDLE
 8002740:	2008      	movs	r0, #8
 8002742:	f000 fc7b 	bl	800303c <isFlag>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d004      	beq.n	8002756 <f_rs485_fsm+0x5a>
			{
				_f_init_rs485_idle();
 800274c:	f000 f8dc 	bl	8002908 <_f_init_rs485_idle>
				MODBUS485_STATE = RS485_IDLE;
 8002750:	4b52      	ldr	r3, [pc, #328]	; (800289c <f_rs485_fsm+0x1a0>)
 8002752:	2202      	movs	r2, #2
 8002754:	701a      	strb	r2, [r3, #0]
			}
			if (_is_character_received()) // CHANGE STATE -> RS485_INIT
 8002756:	f7ff feed 	bl	8002534 <_is_character_received>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 808f 	beq.w	8002880 <f_rs485_fsm+0x184>
			{
				_f_init_rs485_init();
 8002762:	f000 f8bb 	bl	80028dc <_f_init_rs485_init>
				MODBUS485_STATE = RS485_INIT;
 8002766:	4b4d      	ldr	r3, [pc, #308]	; (800289c <f_rs485_fsm+0x1a0>)
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800276c:	e088      	b.n	8002880 <f_rs485_fsm+0x184>
		case RS485_IDLE:
			_f_rs485_idle();
 800276e:	f000 f8df 	bl	8002930 <_f_rs485_idle>

			if (_is_transmit()) // CHANGE STATE -> RS485_TRANSMIT
 8002772:	f7ff fef3 	bl	800255c <_is_transmit>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d01a      	beq.n	80027b2 <f_rs485_fsm+0xb6>
			{
				HAL_GPIO_WritePin(EN_RS485_GPIO_Port, EN_RS485_Pin, 1);
 800277c:	2201      	movs	r2, #1
 800277e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002782:	4847      	ldr	r0, [pc, #284]	; (80028a0 <f_rs485_fsm+0x1a4>)
 8002784:	f002 f92c 	bl	80049e0 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(_huart_callback, _transmit_buffer, _transmit_size, HAL_MAX_DELAY);
 8002788:	4b46      	ldr	r3, [pc, #280]	; (80028a4 <f_rs485_fsm+0x1a8>)
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	4b46      	ldr	r3, [pc, #280]	; (80028a8 <f_rs485_fsm+0x1ac>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	b29a      	uxth	r2, r3
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	4945      	ldr	r1, [pc, #276]	; (80028ac <f_rs485_fsm+0x1b0>)
 8002798:	f003 ff30 	bl	80065fc <HAL_UART_Transmit>
				HAL_GPIO_WritePin(EN_RS485_GPIO_Port, EN_RS485_Pin, 0);
 800279c:	2200      	movs	r2, #0
 800279e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027a2:	483f      	ldr	r0, [pc, #252]	; (80028a0 <f_rs485_fsm+0x1a4>)
 80027a4:	f002 f91c 	bl	80049e0 <HAL_GPIO_WritePin>
				_f_init_rs485_transmit();
 80027a8:	f000 f8ca 	bl	8002940 <_f_init_rs485_transmit>
				MODBUS485_STATE = RS485_TRANSMIT;
 80027ac:	4b3b      	ldr	r3, [pc, #236]	; (800289c <f_rs485_fsm+0x1a0>)
 80027ae:	2203      	movs	r2, #3
 80027b0:	701a      	strb	r2, [r3, #0]
			}
			if (_is_character_received()) // CHANGE STATE -> RS485_RECEIVE
 80027b2:	f7ff febf 	bl	8002534 <_is_character_received>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d063      	beq.n	8002884 <f_rs485_fsm+0x188>
			{
				_f_init_rs485_receive();
 80027bc:	f000 f8d6 	bl	800296c <_f_init_rs485_receive>
				MODBUS485_STATE = RS485_RECEIVE;
 80027c0:	4b36      	ldr	r3, [pc, #216]	; (800289c <f_rs485_fsm+0x1a0>)
 80027c2:	2204      	movs	r2, #4
 80027c4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80027c6:	e05d      	b.n	8002884 <f_rs485_fsm+0x188>
		case RS485_TRANSMIT:
			_f_rs485_transmit();
 80027c8:	f000 f8c8 	bl	800295c <_f_rs485_transmit>

			if (isFlag(TI_RS485_T35_TIMER)) // CHANGE STATE -> IDLE
 80027cc:	2008      	movs	r0, #8
 80027ce:	f000 fc35 	bl	800303c <isFlag>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d057      	beq.n	8002888 <f_rs485_fsm+0x18c>
			{
				_f_init_rs485_idle();
 80027d8:	f000 f896 	bl	8002908 <_f_init_rs485_idle>
				MODBUS485_STATE = RS485_IDLE;
 80027dc:	4b2f      	ldr	r3, [pc, #188]	; (800289c <f_rs485_fsm+0x1a0>)
 80027de:	2202      	movs	r2, #2
 80027e0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80027e2:	e051      	b.n	8002888 <f_rs485_fsm+0x18c>
		case RS485_RECEIVE:
			_f_rs485_receive();
 80027e4:	f000 f8d4 	bl	8002990 <_f_rs485_receive>

			if (_is_character_received()) // CHANGE STATE -> RS485_RECEIVE
 80027e8:	f7ff fea4 	bl	8002534 <_is_character_received>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d004      	beq.n	80027fc <f_rs485_fsm+0x100>
			{
				_f_init_rs485_receive();
 80027f2:	f000 f8bb 	bl	800296c <_f_init_rs485_receive>
				MODBUS485_STATE = RS485_RECEIVE;
 80027f6:	4b29      	ldr	r3, [pc, #164]	; (800289c <f_rs485_fsm+0x1a0>)
 80027f8:	2204      	movs	r2, #4
 80027fa:	701a      	strb	r2, [r3, #0]
			}
			if (isFlag(TI_RS485_T15_TIMER)) // CHANGE STATE -> RS485_WAITING_CONTROL
 80027fc:	2007      	movs	r0, #7
 80027fe:	f000 fc1d 	bl	800303c <isFlag>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d041      	beq.n	800288c <f_rs485_fsm+0x190>
			{
				_f_init_rs485_waiting_control();
 8002808:	f000 f8ca 	bl	80029a0 <_f_init_rs485_waiting_control>
				MODBUS485_STATE = RS485_WAITING_CONTROL;
 800280c:	4b23      	ldr	r3, [pc, #140]	; (800289c <f_rs485_fsm+0x1a0>)
 800280e:	2205      	movs	r2, #5
 8002810:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002812:	e03b      	b.n	800288c <f_rs485_fsm+0x190>
		case RS485_WAITING_CONTROL:
			_f_rs485_waiting_control();
 8002814:	f000 f8d2 	bl	80029bc <_f_rs485_waiting_control>

			if (isFlag(TI_RS485_T35_TIMER)) // CHANGE STATE -> RS485_IDLE
 8002818:	2008      	movs	r0, #8
 800281a:	f000 fc0f 	bl	800303c <isFlag>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d035      	beq.n	8002890 <f_rs485_fsm+0x194>
			{
				if (FRAME_STATUS == FRAME_OK)
 8002824:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <f_rs485_fsm+0x1b4>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d121      	bne.n	8002870 <f_rs485_fsm+0x174>
				{
					if (DEBUG) uart_Rs232SendString((uint8_t*)"S: FRAME_OK\n\r");
 800282c:	4821      	ldr	r0, [pc, #132]	; (80028b4 <f_rs485_fsm+0x1b8>)
 800282e:	f7ff fe65 	bl	80024fc <uart_Rs232SendString>

					// COPY content in _receive_buffer to _receive_buffer_callback
					for (int i = 0; i < _receive_index; i++)
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	e00b      	b.n	8002850 <f_rs485_fsm+0x154>
					{
						_receive_buffer_callback[i] = _receive_buffer[i];
 8002838:	4b1f      	ldr	r3, [pc, #124]	; (80028b8 <f_rs485_fsm+0x1bc>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4413      	add	r3, r2
 8002840:	491e      	ldr	r1, [pc, #120]	; (80028bc <f_rs485_fsm+0x1c0>)
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	440a      	add	r2, r1
 8002846:	7812      	ldrb	r2, [r2, #0]
 8002848:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < _receive_index; i++)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3301      	adds	r3, #1
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <f_rs485_fsm+0x1c4>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4293      	cmp	r3, r2
 800285a:	dbed      	blt.n	8002838 <f_rs485_fsm+0x13c>
					}

					*_flag_rx_callback = 1;
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <f_rs485_fsm+0x1c8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2201      	movs	r2, #1
 8002862:	701a      	strb	r2, [r3, #0]
					*_rx_size_callback = _receive_index;
 8002864:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <f_rs485_fsm+0x1c4>)
 8002866:	781a      	ldrb	r2, [r3, #0]
 8002868:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <f_rs485_fsm+0x1cc>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	b292      	uxth	r2, r2
 800286e:	801a      	strh	r2, [r3, #0]
				}

				_f_init_rs485_idle();
 8002870:	f000 f84a 	bl	8002908 <_f_init_rs485_idle>
				MODBUS485_STATE = RS485_IDLE;
 8002874:	4b09      	ldr	r3, [pc, #36]	; (800289c <f_rs485_fsm+0x1a0>)
 8002876:	2202      	movs	r2, #2
 8002878:	701a      	strb	r2, [r3, #0]
			}
			break;
 800287a:	e009      	b.n	8002890 <f_rs485_fsm+0x194>
		default:
			break;
 800287c:	bf00      	nop
 800287e:	e008      	b.n	8002892 <f_rs485_fsm+0x196>
			break;
 8002880:	bf00      	nop
 8002882:	e006      	b.n	8002892 <f_rs485_fsm+0x196>
			break;
 8002884:	bf00      	nop
 8002886:	e004      	b.n	8002892 <f_rs485_fsm+0x196>
			break;
 8002888:	bf00      	nop
 800288a:	e002      	b.n	8002892 <f_rs485_fsm+0x196>
			break;
 800288c:	bf00      	nop
 800288e:	e000      	b.n	8002892 <f_rs485_fsm+0x196>
			break;
 8002890:	bf00      	nop
	}
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200008ff 	.word	0x200008ff
 80028a0:	40020000 	.word	0x40020000
 80028a4:	200006e4 	.word	0x200006e4
 80028a8:	200008fc 	.word	0x200008fc
 80028ac:	200007fc 	.word	0x200007fc
 80028b0:	20000220 	.word	0x20000220
 80028b4:	08008174 	.word	0x08008174
 80028b8:	200006e8 	.word	0x200006e8
 80028bc:	200006f8 	.word	0x200006f8
 80028c0:	200007f8 	.word	0x200007f8
 80028c4:	200006ec 	.word	0x200006ec
 80028c8:	200006f0 	.word	0x200006f0

080028cc <_f_rs485_super_init>:
	// END DEBUG
	// Do not thing
}

void _f_rs485_super_init()
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
	// Do not thing
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <_f_init_rs485_init>:

void _f_init_rs485_init()
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
	// DEBUG
	if (DEBUG) uart_Rs232SendString((uint8_t*)"S: INIT\n\r");
 80028e0:	4804      	ldr	r0, [pc, #16]	; (80028f4 <_f_init_rs485_init+0x18>)
 80028e2:	f7ff fe0b 	bl	80024fc <uart_Rs232SendString>
	// END DEBUG
	setTimer(TI_RS485_T35_TIMER, TI_RS485_T35_TIME);
 80028e6:	2104      	movs	r1, #4
 80028e8:	2008      	movs	r0, #8
 80028ea:	f000 fb5f 	bl	8002fac <setTimer>
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	08008194 	.word	0x08008194

080028f8 <_f_rs485_init>:

void _f_rs485_init()
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
	// Do not thing
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <_f_init_rs485_idle>:

void _f_init_rs485_idle()
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
	// DEBUG
	if (DEBUG) uart_Rs232SendString((uint8_t*)"S: IDLE\n\r");
 800290c:	4805      	ldr	r0, [pc, #20]	; (8002924 <_f_init_rs485_idle+0x1c>)
 800290e:	f7ff fdf5 	bl	80024fc <uart_Rs232SendString>
	// END DEBUG
	_transmit_flag = 0;
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <_f_init_rs485_idle+0x20>)
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
	_receive_index = 0;
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <_f_init_rs485_idle+0x24>)
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	080081a0 	.word	0x080081a0
 8002928:	20000901 	.word	0x20000901
 800292c:	200007f8 	.word	0x200007f8

08002930 <_f_rs485_idle>:

void _f_rs485_idle()
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
	// Do not thing
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <_f_init_rs485_transmit>:

void _f_init_rs485_transmit()
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
	// DEBUG
	if (DEBUG) uart_Rs232SendString((uint8_t*)"S: TRANS\n\r");
 8002944:	4804      	ldr	r0, [pc, #16]	; (8002958 <_f_init_rs485_transmit+0x18>)
 8002946:	f7ff fdd9 	bl	80024fc <uart_Rs232SendString>
	// END DEBUG
	setTimer(TI_RS485_T35_TIMER, TI_RS485_T35_TIME);
 800294a:	2104      	movs	r1, #4
 800294c:	2008      	movs	r0, #8
 800294e:	f000 fb2d 	bl	8002fac <setTimer>
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	080081ac 	.word	0x080081ac

0800295c <_f_rs485_transmit>:

void _f_rs485_transmit()
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
	// Do not thing
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <_f_init_rs485_receive>:

void _f_init_rs485_receive()
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
	// DEBUG
	if (DEBUG) uart_Rs232SendString((uint8_t*)"S: RECEI\n\r");
 8002970:	4806      	ldr	r0, [pc, #24]	; (800298c <_f_init_rs485_receive+0x20>)
 8002972:	f7ff fdc3 	bl	80024fc <uart_Rs232SendString>
	// END DEBUG
	setTimer(TI_RS485_T35_TIMER, TI_RS485_T35_TIME);
 8002976:	2104      	movs	r1, #4
 8002978:	2008      	movs	r0, #8
 800297a:	f000 fb17 	bl	8002fac <setTimer>
	setTimer(TI_RS485_T15_TIMER, TI_RS485_T15_TIME);
 800297e:	2101      	movs	r1, #1
 8002980:	2007      	movs	r0, #7
 8002982:	f000 fb13 	bl	8002fac <setTimer>
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	080081b8 	.word	0x080081b8

08002990 <_f_rs485_receive>:

void _f_rs485_receive()
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
	// Do not thing
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <_f_init_rs485_waiting_control>:

void _f_init_rs485_waiting_control()
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
	// DEBUG
	if (DEBUG) uart_Rs232SendString((uint8_t*)"S: WAIT\n\r");
 80029a4:	4803      	ldr	r0, [pc, #12]	; (80029b4 <_f_init_rs485_waiting_control+0x14>)
 80029a6:	f7ff fda9 	bl	80024fc <uart_Rs232SendString>
	// END DEBUG
	_isCRCChecking = 0;
 80029aa:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <_f_init_rs485_waiting_control+0x18>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
}
 80029b0:	bf00      	nop
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	080081c4 	.word	0x080081c4
 80029b8:	200008fe 	.word	0x200008fe

080029bc <_f_rs485_waiting_control>:

void _f_rs485_waiting_control()
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
	if (_is_character_received())
 80029c0:	f7ff fdb8 	bl	8002534 <_is_character_received>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <_f_rs485_waiting_control+0x14>
	{
		FRAME_STATUS = FRAME_NOT_OK;
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <_f_rs485_waiting_control+0x48>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]
	}

	if (_isCRCChecking == 0)
 80029d0:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <_f_rs485_waiting_control+0x4c>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d112      	bne.n	80029fe <_f_rs485_waiting_control+0x42>
	{
		// CHECK SLAVE ADDRESS if needed
		if (_crc_checking())
 80029d8:	f7ff fdd4 	bl	8002584 <_crc_checking>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <_f_rs485_waiting_control+0x2e>
		{
			FRAME_STATUS = FRAME_OK;
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <_f_rs485_waiting_control+0x48>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	e002      	b.n	80029f0 <_f_rs485_waiting_control+0x34>
		}
		else
		{
			FRAME_STATUS = FRAME_NOT_OK;
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <_f_rs485_waiting_control+0x48>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
		}
		_frame_size = _receive_index;
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <_f_rs485_waiting_control+0x50>)
 80029f2:	781a      	ldrb	r2, [r3, #0]
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <_f_rs485_waiting_control+0x54>)
 80029f6:	701a      	strb	r2, [r3, #0]
		_isCRCChecking = 1;
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <_f_rs485_waiting_control+0x4c>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
	}
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000220 	.word	0x20000220
 8002a08:	200008fe 	.word	0x200008fe
 8002a0c:	200007f8 	.word	0x200007f8
 8002a10:	200008fd 	.word	0x200008fd

08002a14 <RS485_UART_Callback>:

void RS485_UART_Callback(UART_HandleTypeDef *huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a10      	ldr	r2, [pc, #64]	; (8002a64 <RS485_UART_Callback+0x50>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d119      	bne.n	8002a5a <RS485_UART_Callback+0x46>
	{
		_receive_buffer[_receive_index++] = _receive_byte_buffer;
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <RS485_UART_Callback+0x54>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	b2d1      	uxtb	r1, r2
 8002a2e:	4a0e      	ldr	r2, [pc, #56]	; (8002a68 <RS485_UART_Callback+0x54>)
 8002a30:	7011      	strb	r1, [r2, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <RS485_UART_Callback+0x58>)
 8002a36:	7819      	ldrb	r1, [r3, #0]
 8002a38:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <RS485_UART_Callback+0x5c>)
 8002a3a:	5499      	strb	r1, [r3, r2]
		_character_received_flag = 1;
 8002a3c:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <RS485_UART_Callback+0x60>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	701a      	strb	r2, [r3, #0]
		// DEBUG
		HAL_UART_Transmit(&huart1, &_receive_byte_buffer, 1, HAL_MAX_DELAY);
 8002a42:	f04f 33ff 	mov.w	r3, #4294967295
 8002a46:	2201      	movs	r2, #1
 8002a48:	4908      	ldr	r1, [pc, #32]	; (8002a6c <RS485_UART_Callback+0x58>)
 8002a4a:	480b      	ldr	r0, [pc, #44]	; (8002a78 <RS485_UART_Callback+0x64>)
 8002a4c:	f003 fdd6 	bl	80065fc <HAL_UART_Transmit>
		// END DEBUG

		HAL_UART_Receive_IT(&huart3, &_receive_byte_buffer, 1);
 8002a50:	2201      	movs	r2, #1
 8002a52:	4906      	ldr	r1, [pc, #24]	; (8002a6c <RS485_UART_Callback+0x58>)
 8002a54:	4809      	ldr	r0, [pc, #36]	; (8002a7c <RS485_UART_Callback+0x68>)
 8002a56:	f003 fe5c 	bl	8006712 <HAL_UART_Receive_IT>
	}
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40004800 	.word	0x40004800
 8002a68:	200007f8 	.word	0x200007f8
 8002a6c:	200006f4 	.word	0x200006f4
 8002a70:	200006f8 	.word	0x200006f8
 8002a74:	20000900 	.word	0x20000900
 8002a78:	20000a04 	.word	0x20000a04
 8002a7c:	20000a94 	.word	0x20000a94

08002a80 <sensor_init>:

/* Variables */
uint16_t adc_receive[5];

/* Functions */
void sensor_init() {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (void*) adc_receive, 5);
 8002a84:	2205      	movs	r2, #5
 8002a86:	4903      	ldr	r1, [pc, #12]	; (8002a94 <sensor_init+0x14>)
 8002a88:	4803      	ldr	r0, [pc, #12]	; (8002a98 <sensor_init+0x18>)
 8002a8a:	f000 fd2b 	bl	80034e4 <HAL_ADC_Start_DMA>
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000904 	.word	0x20000904
 8002a98:	200004b8 	.word	0x200004b8

08002a9c <sensor_read>:

void sensor_read() {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_receive, 5);
 8002aa0:	2205      	movs	r2, #5
 8002aa2:	4903      	ldr	r1, [pc, #12]	; (8002ab0 <sensor_read+0x14>)
 8002aa4:	4803      	ldr	r0, [pc, #12]	; (8002ab4 <sensor_read+0x18>)
 8002aa6:	f000 fd1d 	bl	80034e4 <HAL_ADC_Start_DMA>
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000904 	.word	0x20000904
 8002ab4:	200004b8 	.word	0x200004b8

08002ab8 <sensor_get_light>:

uint16_t sensor_get_light() {
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8002abc:	4b03      	ldr	r3, [pc, #12]	; (8002acc <sensor_get_light+0x14>)
 8002abe:	889b      	ldrh	r3, [r3, #4]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	20000904 	.word	0x20000904

08002ad0 <sensor_get_potentiometer>:

uint16_t sensor_get_potentiometer() {
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <sensor_get_potentiometer+0x14>)
 8002ad6:	88db      	ldrh	r3, [r3, #6]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000904 	.word	0x20000904

08002ae8 <sensor_get_voltage>:

float sensor_get_voltage() {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
	return ((float) adc_receive[0] * 3.3 * 12) / (4095 * 1.565);
 8002aec:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <sensor_get_voltage+0x70>)
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af8:	ee17 0a90 	vmov	r0, s15
 8002afc:	f7fd fd1c 	bl	8000538 <__aeabi_f2d>
 8002b00:	a311      	add	r3, pc, #68	; (adr r3, 8002b48 <sensor_get_voltage+0x60>)
 8002b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b06:	f7fd fd6f 	bl	80005e8 <__aeabi_dmul>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <sensor_get_voltage+0x74>)
 8002b18:	f7fd fd66 	bl	80005e8 <__aeabi_dmul>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4610      	mov	r0, r2
 8002b22:	4619      	mov	r1, r3
 8002b24:	a30a      	add	r3, pc, #40	; (adr r3, 8002b50 <sensor_get_voltage+0x68>)
 8002b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2a:	f7fd fe87 	bl	800083c <__aeabi_ddiv>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4610      	mov	r0, r2
 8002b34:	4619      	mov	r1, r3
 8002b36:	f7fd ff69 	bl	8000a0c <__aeabi_d2f>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	ee07 3a90 	vmov	s15, r3
}
 8002b40:	eeb0 0a67 	vmov.f32	s0, s15
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	66666666 	.word	0x66666666
 8002b4c:	400a6666 	.word	0x400a6666
 8002b50:	cccccccd 	.word	0xcccccccd
 8002b54:	40b908ac 	.word	0x40b908ac
 8002b58:	20000904 	.word	0x20000904
 8002b5c:	40280000 	.word	0x40280000

08002b60 <sensor_get_current>:

float sensor_get_current() {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
	return (((float) adc_receive[1] * 3.3 * 1000) / (4095 * 0.647) - 2.5) * 5
 8002b64:	4b28      	ldr	r3, [pc, #160]	; (8002c08 <sensor_get_current+0xa8>)
 8002b66:	885b      	ldrh	r3, [r3, #2]
 8002b68:	ee07 3a90 	vmov	s15, r3
 8002b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b70:	ee17 0a90 	vmov	r0, s15
 8002b74:	f7fd fce0 	bl	8000538 <__aeabi_f2d>
 8002b78:	a31f      	add	r3, pc, #124	; (adr r3, 8002bf8 <sensor_get_current+0x98>)
 8002b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7e:	f7fd fd33 	bl	80005e8 <__aeabi_dmul>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4610      	mov	r0, r2
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <sensor_get_current+0xac>)
 8002b90:	f7fd fd2a 	bl	80005e8 <__aeabi_dmul>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4610      	mov	r0, r2
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	a318      	add	r3, pc, #96	; (adr r3, 8002c00 <sensor_get_current+0xa0>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	f7fd fe4b 	bl	800083c <__aeabi_ddiv>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <sensor_get_current+0xb0>)
 8002bb4:	f7fd fb60 	bl	8000278 <__aeabi_dsub>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <sensor_get_current+0xb4>)
 8002bc6:	f7fd fd0f 	bl	80005e8 <__aeabi_dmul>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4610      	mov	r0, r2
 8002bd0:	4619      	mov	r1, r3
			/ 2.5;
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <sensor_get_current+0xb0>)
 8002bd8:	f7fd fe30 	bl	800083c <__aeabi_ddiv>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4610      	mov	r0, r2
 8002be2:	4619      	mov	r1, r3
 8002be4:	f7fd ff12 	bl	8000a0c <__aeabi_d2f>
 8002be8:	4603      	mov	r3, r0
 8002bea:	ee07 3a90 	vmov	s15, r3
}
 8002bee:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	f3af 8000 	nop.w
 8002bf8:	66666666 	.word	0x66666666
 8002bfc:	400a6666 	.word	0x400a6666
 8002c00:	147ae148 	.word	0x147ae148
 8002c04:	40a4b2ee 	.word	0x40a4b2ee
 8002c08:	20000904 	.word	0x20000904
 8002c0c:	408f4000 	.word	0x408f4000
 8002c10:	40040000 	.word	0x40040000
 8002c14:	40140000 	.word	0x40140000

08002c18 <sensor_get_temperature>:

float sensor_get_temperature() {
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
	return ((float) adc_receive[4] * 330) / (4095);
 8002c1c:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <sensor_get_temperature+0x30>)
 8002c1e:	891b      	ldrh	r3, [r3, #8]
 8002c20:	ee07 3a90 	vmov	s15, r3
 8002c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c28:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002c4c <sensor_get_temperature+0x34>
 8002c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c30:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002c50 <sensor_get_temperature+0x38>
 8002c34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c38:	eef0 7a66 	vmov.f32	s15, s13
}
 8002c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	20000904 	.word	0x20000904
 8002c4c:	43a50000 	.word	0x43a50000
 8002c50:	457ff000 	.word	0x457ff000

08002c54 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c58:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <MX_SPI1_Init+0x64>)
 8002c5a:	4a18      	ldr	r2, [pc, #96]	; (8002cbc <MX_SPI1_Init+0x68>)
 8002c5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c5e:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <MX_SPI1_Init+0x64>)
 8002c60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c66:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <MX_SPI1_Init+0x64>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <MX_SPI1_Init+0x64>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <MX_SPI1_Init+0x64>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c78:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <MX_SPI1_Init+0x64>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <MX_SPI1_Init+0x64>)
 8002c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c86:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <MX_SPI1_Init+0x64>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <MX_SPI1_Init+0x64>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <MX_SPI1_Init+0x64>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c98:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <MX_SPI1_Init+0x64>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <MX_SPI1_Init+0x64>)
 8002ca0:	220a      	movs	r2, #10
 8002ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ca4:	4804      	ldr	r0, [pc, #16]	; (8002cb8 <MX_SPI1_Init+0x64>)
 8002ca6:	f002 fb0d 	bl	80052c4 <HAL_SPI_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002cb0:	f7ff fc1e 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000910 	.word	0x20000910
 8002cbc:	40013000 	.word	0x40013000

08002cc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	; 0x28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc8:	f107 0314 	add.w	r3, r7, #20
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a19      	ldr	r2, [pc, #100]	; (8002d44 <HAL_SPI_MspInit+0x84>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d12b      	bne.n	8002d3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <HAL_SPI_MspInit+0x88>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <HAL_SPI_MspInit+0x88>)
 8002cec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf2:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <HAL_SPI_MspInit+0x88>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <HAL_SPI_MspInit+0x88>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a10      	ldr	r2, [pc, #64]	; (8002d48 <HAL_SPI_MspInit+0x88>)
 8002d08:	f043 0302 	orr.w	r3, r3, #2
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b0e      	ldr	r3, [pc, #56]	; (8002d48 <HAL_SPI_MspInit+0x88>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002d1a:	2338      	movs	r3, #56	; 0x38
 8002d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d26:	2303      	movs	r3, #3
 8002d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d2a:	2305      	movs	r3, #5
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d2e:	f107 0314 	add.w	r3, r7, #20
 8002d32:	4619      	mov	r1, r3
 8002d34:	4805      	ldr	r0, [pc, #20]	; (8002d4c <HAL_SPI_MspInit+0x8c>)
 8002d36:	f001 fcb7 	bl	80046a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	3728      	adds	r7, #40	; 0x28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40013000 	.word	0x40013000
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40020400 	.word	0x40020400

08002d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	607b      	str	r3, [r7, #4]
 8002d5a:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <HAL_MspInit+0x4c>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	4a0f      	ldr	r2, [pc, #60]	; (8002d9c <HAL_MspInit+0x4c>)
 8002d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d64:	6453      	str	r3, [r2, #68]	; 0x44
 8002d66:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <HAL_MspInit+0x4c>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6e:	607b      	str	r3, [r7, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_MspInit+0x4c>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	4a08      	ldr	r2, [pc, #32]	; (8002d9c <HAL_MspInit+0x4c>)
 8002d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d80:	6413      	str	r3, [r2, #64]	; 0x40
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_MspInit+0x4c>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800

08002da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002da4:	e7fe      	b.n	8002da4 <NMI_Handler+0x4>

08002da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002da6:	b480      	push	{r7}
 8002da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002daa:	e7fe      	b.n	8002daa <HardFault_Handler+0x4>

08002dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db0:	e7fe      	b.n	8002db0 <MemManage_Handler+0x4>

08002db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002db6:	e7fe      	b.n	8002db6 <BusFault_Handler+0x4>

08002db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dbc:	e7fe      	b.n	8002dbc <UsageFault_Handler+0x4>

08002dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dd0:	bf00      	nop
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dec:	f000 faf2 	bl	80033d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002df0:	bf00      	nop
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002df8:	4802      	ldr	r0, [pc, #8]	; (8002e04 <TIM3_IRQHandler+0x10>)
 8002dfa:	f002 fff9 	bl	8005df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	2000096c 	.word	0x2000096c

08002e08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e0c:	4802      	ldr	r0, [pc, #8]	; (8002e18 <USART3_IRQHandler+0x10>)
 8002e0e:	f003 fca5 	bl	800675c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000a94 	.word	0x20000a94

08002e1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e20:	4802      	ldr	r0, [pc, #8]	; (8002e2c <DMA2_Stream0_IRQHandler+0x10>)
 8002e22:	f001 f9d7 	bl	80041d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000500 	.word	0x20000500

08002e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e38:	4a14      	ldr	r2, [pc, #80]	; (8002e8c <_sbrk+0x5c>)
 8002e3a:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <_sbrk+0x60>)
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e44:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <_sbrk+0x64>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e4c:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <_sbrk+0x64>)
 8002e4e:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <_sbrk+0x68>)
 8002e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <_sbrk+0x64>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d207      	bcs.n	8002e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e60:	f004 fcd2 	bl	8007808 <__errno>
 8002e64:	4603      	mov	r3, r0
 8002e66:	220c      	movs	r2, #12
 8002e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6e:	e009      	b.n	8002e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <_sbrk+0x64>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e76:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <_sbrk+0x64>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	4a05      	ldr	r2, [pc, #20]	; (8002e94 <_sbrk+0x64>)
 8002e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e82:	68fb      	ldr	r3, [r7, #12]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20020000 	.word	0x20020000
 8002e90:	00000400 	.word	0x00000400
 8002e94:	20000968 	.word	0x20000968
 8002e98:	20000c28 	.word	0x20000c28

08002e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <SystemInit+0x20>)
 8002ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea6:	4a05      	ldr	r2, [pc, #20]	; (8002ebc <SystemInit+0x20>)
 8002ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ec6:	f107 0308 	add.w	r3, r7, #8
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	609a      	str	r2, [r3, #8]
 8002ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ed4:	463b      	mov	r3, r7
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002edc:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <MX_TIM3_Init+0x94>)
 8002ede:	4a1e      	ldr	r2, [pc, #120]	; (8002f58 <MX_TIM3_Init+0x98>)
 8002ee0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8002ee2:	4b1c      	ldr	r3, [pc, #112]	; (8002f54 <MX_TIM3_Init+0x94>)
 8002ee4:	f240 3247 	movw	r2, #839	; 0x347
 8002ee8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eea:	4b1a      	ldr	r3, [pc, #104]	; (8002f54 <MX_TIM3_Init+0x94>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002ef0:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <MX_TIM3_Init+0x94>)
 8002ef2:	2263      	movs	r2, #99	; 0x63
 8002ef4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef6:	4b17      	ldr	r3, [pc, #92]	; (8002f54 <MX_TIM3_Init+0x94>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002efc:	4b15      	ldr	r3, [pc, #84]	; (8002f54 <MX_TIM3_Init+0x94>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f02:	4814      	ldr	r0, [pc, #80]	; (8002f54 <MX_TIM3_Init+0x94>)
 8002f04:	f002 feb4 	bl	8005c70 <HAL_TIM_Base_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002f0e:	f7ff faef 	bl	80024f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f18:	f107 0308 	add.w	r3, r7, #8
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	480d      	ldr	r0, [pc, #52]	; (8002f54 <MX_TIM3_Init+0x94>)
 8002f20:	f003 f856 	bl	8005fd0 <HAL_TIM_ConfigClockSource>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002f2a:	f7ff fae1 	bl	80024f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f32:	2300      	movs	r3, #0
 8002f34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f36:	463b      	mov	r3, r7
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4806      	ldr	r0, [pc, #24]	; (8002f54 <MX_TIM3_Init+0x94>)
 8002f3c:	f003 fa7e 	bl	800643c <HAL_TIMEx_MasterConfigSynchronization>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002f46:	f7ff fad3 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	2000096c 	.word	0x2000096c
 8002f58:	40000400 	.word	0x40000400

08002f5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <HAL_TIM_Base_MspInit+0x48>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d115      	bne.n	8002f9a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <HAL_TIM_Base_MspInit+0x4c>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	4a0c      	ldr	r2, [pc, #48]	; (8002fa8 <HAL_TIM_Base_MspInit+0x4c>)
 8002f78:	f043 0302 	orr.w	r3, r3, #2
 8002f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <HAL_TIM_Base_MspInit+0x4c>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	201d      	movs	r0, #29
 8002f90:	f000 ff51 	bl	8003e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f94:	201d      	movs	r0, #29
 8002f96:	f000 ff6a 	bl	8003e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40000400 	.word	0x40000400
 8002fa8:	40023800 	.word	0x40023800

08002fac <setTimer>:
#include "timer.h"

struct TimerStruct timer[10];

void setTimer(int idx, int counter)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
	timer[idx].counter = counter / TICK;
 8002fb6:	4908      	ldr	r1, [pc, #32]	; (8002fd8 <setTimer+0x2c>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	timer[idx].flag = 0;
 8002fc0:	4a05      	ldr	r2, [pc, #20]	; (8002fd8 <setTimer+0x2c>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	2200      	movs	r2, #0
 8002fca:	605a      	str	r2, [r3, #4]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	200009b4 	.word	0x200009b4

08002fdc <timerRun>:

void timerRun()
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; ++i)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	607b      	str	r3, [r7, #4]
 8002fe6:	e01d      	b.n	8003024 <timerRun+0x48>
	{
		if (timer[i].counter > 0)
 8002fe8:	4a13      	ldr	r2, [pc, #76]	; (8003038 <timerRun+0x5c>)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	dd14      	ble.n	800301e <timerRun+0x42>
		{
			--timer[i].counter;
 8002ff4:	4a10      	ldr	r2, [pc, #64]	; (8003038 <timerRun+0x5c>)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ffc:	1e5a      	subs	r2, r3, #1
 8002ffe:	490e      	ldr	r1, [pc, #56]	; (8003038 <timerRun+0x5c>)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			if (timer[i].counter <= 0)
 8003006:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <timerRun+0x5c>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800300e:	2b00      	cmp	r3, #0
 8003010:	dc05      	bgt.n	800301e <timerRun+0x42>
			{
				timer[i].flag = 1;
 8003012:	4a09      	ldr	r2, [pc, #36]	; (8003038 <timerRun+0x5c>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	2201      	movs	r2, #1
 800301c:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 10; ++i)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3301      	adds	r3, #1
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b09      	cmp	r3, #9
 8003028:	ddde      	ble.n	8002fe8 <timerRun+0xc>
			}
		}
	}
}
 800302a:	bf00      	nop
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	200009b4 	.word	0x200009b4

0800303c <isFlag>:

int isFlag(int idx)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	if (timer[idx].flag)
 8003044:	4a07      	ldr	r2, [pc, #28]	; (8003064 <isFlag+0x28>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4413      	add	r3, r2
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <isFlag+0x1a>
	{
		return 1;
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <isFlag+0x1c>
	}
	return 0;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	200009b4 	.word	0x200009b4

08003068 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800306c:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <MX_USART1_UART_Init+0x4c>)
 800306e:	4a12      	ldr	r2, [pc, #72]	; (80030b8 <MX_USART1_UART_Init+0x50>)
 8003070:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003072:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <MX_USART1_UART_Init+0x4c>)
 8003074:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003078:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <MX_USART1_UART_Init+0x4c>)
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <MX_USART1_UART_Init+0x4c>)
 8003082:	2200      	movs	r2, #0
 8003084:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003086:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <MX_USART1_UART_Init+0x4c>)
 8003088:	2200      	movs	r2, #0
 800308a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <MX_USART1_UART_Init+0x4c>)
 800308e:	220c      	movs	r2, #12
 8003090:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003092:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <MX_USART1_UART_Init+0x4c>)
 8003094:	2200      	movs	r2, #0
 8003096:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <MX_USART1_UART_Init+0x4c>)
 800309a:	2200      	movs	r2, #0
 800309c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800309e:	4805      	ldr	r0, [pc, #20]	; (80030b4 <MX_USART1_UART_Init+0x4c>)
 80030a0:	f003 fa5c 	bl	800655c <HAL_UART_Init>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80030aa:	f7ff fa21 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000a04 	.word	0x20000a04
 80030b8:	40011000 	.word	0x40011000

080030bc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030c2:	4a12      	ldr	r2, [pc, #72]	; (800310c <MX_USART2_UART_Init+0x50>)
 80030c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030c6:	4b10      	ldr	r3, [pc, #64]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030d4:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030dc:	2200      	movs	r2, #0
 80030de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030e0:	4b09      	ldr	r3, [pc, #36]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030e2:	220c      	movs	r2, #12
 80030e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030f2:	4805      	ldr	r0, [pc, #20]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030f4:	f003 fa32 	bl	800655c <HAL_UART_Init>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030fe:	f7ff f9f7 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000a4c 	.word	0x20000a4c
 800310c:	40004400 	.word	0x40004400

08003110 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003114:	4b11      	ldr	r3, [pc, #68]	; (800315c <MX_USART3_UART_Init+0x4c>)
 8003116:	4a12      	ldr	r2, [pc, #72]	; (8003160 <MX_USART3_UART_Init+0x50>)
 8003118:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800311a:	4b10      	ldr	r3, [pc, #64]	; (800315c <MX_USART3_UART_Init+0x4c>)
 800311c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003120:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003122:	4b0e      	ldr	r3, [pc, #56]	; (800315c <MX_USART3_UART_Init+0x4c>)
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003128:	4b0c      	ldr	r3, [pc, #48]	; (800315c <MX_USART3_UART_Init+0x4c>)
 800312a:	2200      	movs	r2, #0
 800312c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800312e:	4b0b      	ldr	r3, [pc, #44]	; (800315c <MX_USART3_UART_Init+0x4c>)
 8003130:	2200      	movs	r2, #0
 8003132:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003134:	4b09      	ldr	r3, [pc, #36]	; (800315c <MX_USART3_UART_Init+0x4c>)
 8003136:	220c      	movs	r2, #12
 8003138:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800313a:	4b08      	ldr	r3, [pc, #32]	; (800315c <MX_USART3_UART_Init+0x4c>)
 800313c:	2200      	movs	r2, #0
 800313e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003140:	4b06      	ldr	r3, [pc, #24]	; (800315c <MX_USART3_UART_Init+0x4c>)
 8003142:	2200      	movs	r2, #0
 8003144:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003146:	4805      	ldr	r0, [pc, #20]	; (800315c <MX_USART3_UART_Init+0x4c>)
 8003148:	f003 fa08 	bl	800655c <HAL_UART_Init>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003152:	f7ff f9cd 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000a94 	.word	0x20000a94
 8003160:	40004800 	.word	0x40004800

08003164 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08e      	sub	sp, #56	; 0x38
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a50      	ldr	r2, [pc, #320]	; (80032c4 <HAL_UART_MspInit+0x160>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d12d      	bne.n	80031e2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	623b      	str	r3, [r7, #32]
 800318a:	4b4f      	ldr	r3, [pc, #316]	; (80032c8 <HAL_UART_MspInit+0x164>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	4a4e      	ldr	r2, [pc, #312]	; (80032c8 <HAL_UART_MspInit+0x164>)
 8003190:	f043 0310 	orr.w	r3, r3, #16
 8003194:	6453      	str	r3, [r2, #68]	; 0x44
 8003196:	4b4c      	ldr	r3, [pc, #304]	; (80032c8 <HAL_UART_MspInit+0x164>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	623b      	str	r3, [r7, #32]
 80031a0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	4b48      	ldr	r3, [pc, #288]	; (80032c8 <HAL_UART_MspInit+0x164>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	4a47      	ldr	r2, [pc, #284]	; (80032c8 <HAL_UART_MspInit+0x164>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6313      	str	r3, [r2, #48]	; 0x30
 80031b2:	4b45      	ldr	r3, [pc, #276]	; (80032c8 <HAL_UART_MspInit+0x164>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	2302      	movs	r3, #2
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031cc:	2303      	movs	r3, #3
 80031ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031d0:	2307      	movs	r3, #7
 80031d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d8:	4619      	mov	r1, r3
 80031da:	483c      	ldr	r0, [pc, #240]	; (80032cc <HAL_UART_MspInit+0x168>)
 80031dc:	f001 fa64 	bl	80046a8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80031e0:	e06b      	b.n	80032ba <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART2)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a3a      	ldr	r2, [pc, #232]	; (80032d0 <HAL_UART_MspInit+0x16c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d12c      	bne.n	8003246 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031ec:	2300      	movs	r3, #0
 80031ee:	61bb      	str	r3, [r7, #24]
 80031f0:	4b35      	ldr	r3, [pc, #212]	; (80032c8 <HAL_UART_MspInit+0x164>)
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	4a34      	ldr	r2, [pc, #208]	; (80032c8 <HAL_UART_MspInit+0x164>)
 80031f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031fa:	6413      	str	r3, [r2, #64]	; 0x40
 80031fc:	4b32      	ldr	r3, [pc, #200]	; (80032c8 <HAL_UART_MspInit+0x164>)
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003204:	61bb      	str	r3, [r7, #24]
 8003206:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	4b2e      	ldr	r3, [pc, #184]	; (80032c8 <HAL_UART_MspInit+0x164>)
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	4a2d      	ldr	r2, [pc, #180]	; (80032c8 <HAL_UART_MspInit+0x164>)
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	6313      	str	r3, [r2, #48]	; 0x30
 8003218:	4b2b      	ldr	r3, [pc, #172]	; (80032c8 <HAL_UART_MspInit+0x164>)
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003224:	230c      	movs	r3, #12
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003228:	2302      	movs	r3, #2
 800322a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322c:	2300      	movs	r3, #0
 800322e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003230:	2303      	movs	r3, #3
 8003232:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003234:	2307      	movs	r3, #7
 8003236:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800323c:	4619      	mov	r1, r3
 800323e:	4823      	ldr	r0, [pc, #140]	; (80032cc <HAL_UART_MspInit+0x168>)
 8003240:	f001 fa32 	bl	80046a8 <HAL_GPIO_Init>
}
 8003244:	e039      	b.n	80032ba <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART3)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a22      	ldr	r2, [pc, #136]	; (80032d4 <HAL_UART_MspInit+0x170>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d134      	bne.n	80032ba <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003250:	2300      	movs	r3, #0
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	4b1c      	ldr	r3, [pc, #112]	; (80032c8 <HAL_UART_MspInit+0x164>)
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <HAL_UART_MspInit+0x164>)
 800325a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800325e:	6413      	str	r3, [r2, #64]	; 0x40
 8003260:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <HAL_UART_MspInit+0x164>)
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <HAL_UART_MspInit+0x164>)
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <HAL_UART_MspInit+0x164>)
 8003276:	f043 0304 	orr.w	r3, r3, #4
 800327a:	6313      	str	r3, [r2, #48]	; 0x30
 800327c:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <HAL_UART_MspInit+0x164>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003288:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328e:	2302      	movs	r3, #2
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003296:	2303      	movs	r3, #3
 8003298:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800329a:	2307      	movs	r3, #7
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800329e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a2:	4619      	mov	r1, r3
 80032a4:	480c      	ldr	r0, [pc, #48]	; (80032d8 <HAL_UART_MspInit+0x174>)
 80032a6:	f001 f9ff 	bl	80046a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80032aa:	2200      	movs	r2, #0
 80032ac:	2100      	movs	r1, #0
 80032ae:	2027      	movs	r0, #39	; 0x27
 80032b0:	f000 fdc1 	bl	8003e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80032b4:	2027      	movs	r0, #39	; 0x27
 80032b6:	f000 fdda 	bl	8003e6e <HAL_NVIC_EnableIRQ>
}
 80032ba:	bf00      	nop
 80032bc:	3738      	adds	r7, #56	; 0x38
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40011000 	.word	0x40011000
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40020000 	.word	0x40020000
 80032d0:	40004400 	.word	0x40004400
 80032d4:	40004800 	.word	0x40004800
 80032d8:	40020800 	.word	0x40020800

080032dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003314 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80032e0:	f7ff fddc 	bl	8002e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032e4:	480c      	ldr	r0, [pc, #48]	; (8003318 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032e6:	490d      	ldr	r1, [pc, #52]	; (800331c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032e8:	4a0d      	ldr	r2, [pc, #52]	; (8003320 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032ec:	e002      	b.n	80032f4 <LoopCopyDataInit>

080032ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032f2:	3304      	adds	r3, #4

080032f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032f8:	d3f9      	bcc.n	80032ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032fa:	4a0a      	ldr	r2, [pc, #40]	; (8003324 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032fc:	4c0a      	ldr	r4, [pc, #40]	; (8003328 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003300:	e001      	b.n	8003306 <LoopFillZerobss>

08003302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003304:	3204      	adds	r2, #4

08003306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003308:	d3fb      	bcc.n	8003302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800330a:	f004 fa83 	bl	8007814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800330e:	f7fe ff81 	bl	8002214 <main>
  bx  lr    
 8003312:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800331c:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8003320:	0800b1b4 	.word	0x0800b1b4
  ldr r2, =_sbss
 8003324:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8003328:	20000c28 	.word	0x20000c28

0800332c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800332c:	e7fe      	b.n	800332c <ADC_IRQHandler>
	...

08003330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003334:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <HAL_Init+0x40>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a0d      	ldr	r2, [pc, #52]	; (8003370 <HAL_Init+0x40>)
 800333a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800333e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_Init+0x40>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0a      	ldr	r2, [pc, #40]	; (8003370 <HAL_Init+0x40>)
 8003346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800334a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800334c:	4b08      	ldr	r3, [pc, #32]	; (8003370 <HAL_Init+0x40>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a07      	ldr	r2, [pc, #28]	; (8003370 <HAL_Init+0x40>)
 8003352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003356:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003358:	2003      	movs	r0, #3
 800335a:	f000 fd61 	bl	8003e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800335e:	200f      	movs	r0, #15
 8003360:	f000 f808 	bl	8003374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003364:	f7ff fcf4 	bl	8002d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40023c00 	.word	0x40023c00

08003374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800337c:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <HAL_InitTick+0x54>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	4b12      	ldr	r3, [pc, #72]	; (80033cc <HAL_InitTick+0x58>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	4619      	mov	r1, r3
 8003386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800338a:	fbb3 f3f1 	udiv	r3, r3, r1
 800338e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fd79 	bl	8003e8a <HAL_SYSTICK_Config>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e00e      	b.n	80033c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b0f      	cmp	r3, #15
 80033a6:	d80a      	bhi.n	80033be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033a8:	2200      	movs	r2, #0
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	f04f 30ff 	mov.w	r0, #4294967295
 80033b0:	f000 fd41 	bl	8003e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033b4:	4a06      	ldr	r2, [pc, #24]	; (80033d0 <HAL_InitTick+0x5c>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	e000      	b.n	80033c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20000224 	.word	0x20000224
 80033cc:	2000022c 	.word	0x2000022c
 80033d0:	20000228 	.word	0x20000228

080033d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <HAL_IncTick+0x20>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_IncTick+0x24>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4413      	add	r3, r2
 80033e4:	4a04      	ldr	r2, [pc, #16]	; (80033f8 <HAL_IncTick+0x24>)
 80033e6:	6013      	str	r3, [r2, #0]
}
 80033e8:	bf00      	nop
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	2000022c 	.word	0x2000022c
 80033f8:	20000adc 	.word	0x20000adc

080033fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <HAL_GetTick+0x14>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	20000adc 	.word	0x20000adc

08003414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800341c:	f7ff ffee 	bl	80033fc <HAL_GetTick>
 8003420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342c:	d005      	beq.n	800343a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800342e:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <HAL_Delay+0x44>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4413      	add	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800343a:	bf00      	nop
 800343c:	f7ff ffde 	bl	80033fc <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	429a      	cmp	r2, r3
 800344a:	d8f7      	bhi.n	800343c <HAL_Delay+0x28>
  {
  }
}
 800344c:	bf00      	nop
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	2000022c 	.word	0x2000022c

0800345c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e033      	b.n	80034da <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fd fe8a 	bl	8001194 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	2b00      	cmp	r3, #0
 8003498:	d118      	bne.n	80034cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034a2:	f023 0302 	bic.w	r3, r3, #2
 80034a6:	f043 0202 	orr.w	r2, r3, #2
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fa68 	bl	8003984 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f023 0303 	bic.w	r3, r3, #3
 80034c2:	f043 0201 	orr.w	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40
 80034ca:	e001      	b.n	80034d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_ADC_Start_DMA+0x1e>
 80034fe:	2302      	movs	r3, #2
 8003500:	e0e9      	b.n	80036d6 <HAL_ADC_Start_DMA+0x1f2>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b01      	cmp	r3, #1
 8003516:	d018      	beq.n	800354a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003528:	4b6d      	ldr	r3, [pc, #436]	; (80036e0 <HAL_ADC_Start_DMA+0x1fc>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a6d      	ldr	r2, [pc, #436]	; (80036e4 <HAL_ADC_Start_DMA+0x200>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	0c9a      	lsrs	r2, r3, #18
 8003534:	4613      	mov	r3, r2
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	4413      	add	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800353c:	e002      	b.n	8003544 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	3b01      	subs	r3, #1
 8003542:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f9      	bne.n	800353e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003558:	d107      	bne.n	800356a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003568:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	f040 80a1 	bne.w	80036bc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003598:	2b00      	cmp	r3, #0
 800359a:	d007      	beq.n	80035ac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b8:	d106      	bne.n	80035c8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	f023 0206 	bic.w	r2, r3, #6
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	645a      	str	r2, [r3, #68]	; 0x44
 80035c6:	e002      	b.n	80035ce <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035d6:	4b44      	ldr	r3, [pc, #272]	; (80036e8 <HAL_ADC_Start_DMA+0x204>)
 80035d8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	4a43      	ldr	r2, [pc, #268]	; (80036ec <HAL_ADC_Start_DMA+0x208>)
 80035e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	4a42      	ldr	r2, [pc, #264]	; (80036f0 <HAL_ADC_Start_DMA+0x20c>)
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ee:	4a41      	ldr	r2, [pc, #260]	; (80036f4 <HAL_ADC_Start_DMA+0x210>)
 80035f0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80035fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800360a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800361a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	334c      	adds	r3, #76	; 0x4c
 8003626:	4619      	mov	r1, r3
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f000 fce8 	bl	8004000 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	2b00      	cmp	r3, #0
 800363a:	d12a      	bne.n	8003692 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a2d      	ldr	r2, [pc, #180]	; (80036f8 <HAL_ADC_Start_DMA+0x214>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d015      	beq.n	8003672 <HAL_ADC_Start_DMA+0x18e>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a2c      	ldr	r2, [pc, #176]	; (80036fc <HAL_ADC_Start_DMA+0x218>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d105      	bne.n	800365c <HAL_ADC_Start_DMA+0x178>
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <HAL_ADC_Start_DMA+0x204>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a27      	ldr	r2, [pc, #156]	; (8003700 <HAL_ADC_Start_DMA+0x21c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d136      	bne.n	80036d4 <HAL_ADC_Start_DMA+0x1f0>
 8003666:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <HAL_ADC_Start_DMA+0x204>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b00      	cmp	r3, #0
 8003670:	d130      	bne.n	80036d4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d129      	bne.n	80036d4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	e020      	b.n	80036d4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <HAL_ADC_Start_DMA+0x214>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d11b      	bne.n	80036d4 <HAL_ADC_Start_DMA+0x1f0>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d114      	bne.n	80036d4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	e00b      	b.n	80036d4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	f043 0210 	orr.w	r2, r3, #16
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036cc:	f043 0201 	orr.w	r2, r3, #1
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20000224 	.word	0x20000224
 80036e4:	431bde83 	.word	0x431bde83
 80036e8:	40012300 	.word	0x40012300
 80036ec:	08003b7d 	.word	0x08003b7d
 80036f0:	08003c37 	.word	0x08003c37
 80036f4:	08003c53 	.word	0x08003c53
 80036f8:	40012000 	.word	0x40012000
 80036fc:	40012100 	.word	0x40012100
 8003700:	40012200 	.word	0x40012200

08003704 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_ADC_ConfigChannel+0x1c>
 8003758:	2302      	movs	r3, #2
 800375a:	e105      	b.n	8003968 <HAL_ADC_ConfigChannel+0x228>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b09      	cmp	r3, #9
 800376a:	d925      	bls.n	80037b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68d9      	ldr	r1, [r3, #12]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	b29b      	uxth	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	4613      	mov	r3, r2
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	4413      	add	r3, r2
 8003780:	3b1e      	subs	r3, #30
 8003782:	2207      	movs	r2, #7
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43da      	mvns	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	400a      	ands	r2, r1
 8003790:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68d9      	ldr	r1, [r3, #12]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	4618      	mov	r0, r3
 80037a4:	4603      	mov	r3, r0
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4403      	add	r3, r0
 80037aa:	3b1e      	subs	r3, #30
 80037ac:	409a      	lsls	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	e022      	b.n	80037fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6919      	ldr	r1, [r3, #16]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	461a      	mov	r2, r3
 80037c6:	4613      	mov	r3, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	4413      	add	r3, r2
 80037cc:	2207      	movs	r2, #7
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43da      	mvns	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	400a      	ands	r2, r1
 80037da:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6919      	ldr	r1, [r3, #16]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	4618      	mov	r0, r3
 80037ee:	4603      	mov	r3, r0
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	4403      	add	r3, r0
 80037f4:	409a      	lsls	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b06      	cmp	r3, #6
 8003804:	d824      	bhi.n	8003850 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	3b05      	subs	r3, #5
 8003818:	221f      	movs	r2, #31
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43da      	mvns	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	400a      	ands	r2, r1
 8003826:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	b29b      	uxth	r3, r3
 8003834:	4618      	mov	r0, r3
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	3b05      	subs	r3, #5
 8003842:	fa00 f203 	lsl.w	r2, r0, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	635a      	str	r2, [r3, #52]	; 0x34
 800384e:	e04c      	b.n	80038ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b0c      	cmp	r3, #12
 8003856:	d824      	bhi.n	80038a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	3b23      	subs	r3, #35	; 0x23
 800386a:	221f      	movs	r2, #31
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43da      	mvns	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	400a      	ands	r2, r1
 8003878:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	b29b      	uxth	r3, r3
 8003886:	4618      	mov	r0, r3
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	3b23      	subs	r3, #35	; 0x23
 8003894:	fa00 f203 	lsl.w	r2, r0, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	631a      	str	r2, [r3, #48]	; 0x30
 80038a0:	e023      	b.n	80038ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	3b41      	subs	r3, #65	; 0x41
 80038b4:	221f      	movs	r2, #31
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43da      	mvns	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	400a      	ands	r2, r1
 80038c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	4618      	mov	r0, r3
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	3b41      	subs	r3, #65	; 0x41
 80038de:	fa00 f203 	lsl.w	r2, r0, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038ea:	4b22      	ldr	r3, [pc, #136]	; (8003974 <HAL_ADC_ConfigChannel+0x234>)
 80038ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a21      	ldr	r2, [pc, #132]	; (8003978 <HAL_ADC_ConfigChannel+0x238>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d109      	bne.n	800390c <HAL_ADC_ConfigChannel+0x1cc>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b12      	cmp	r3, #18
 80038fe:	d105      	bne.n	800390c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a19      	ldr	r2, [pc, #100]	; (8003978 <HAL_ADC_ConfigChannel+0x238>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d123      	bne.n	800395e <HAL_ADC_ConfigChannel+0x21e>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b10      	cmp	r3, #16
 800391c:	d003      	beq.n	8003926 <HAL_ADC_ConfigChannel+0x1e6>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b11      	cmp	r3, #17
 8003924:	d11b      	bne.n	800395e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b10      	cmp	r3, #16
 8003938:	d111      	bne.n	800395e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800393a:	4b10      	ldr	r3, [pc, #64]	; (800397c <HAL_ADC_ConfigChannel+0x23c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a10      	ldr	r2, [pc, #64]	; (8003980 <HAL_ADC_ConfigChannel+0x240>)
 8003940:	fba2 2303 	umull	r2, r3, r2, r3
 8003944:	0c9a      	lsrs	r2, r3, #18
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003950:	e002      	b.n	8003958 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	3b01      	subs	r3, #1
 8003956:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f9      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	40012300 	.word	0x40012300
 8003978:	40012000 	.word	0x40012000
 800397c:	20000224 	.word	0x20000224
 8003980:	431bde83 	.word	0x431bde83

08003984 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800398c:	4b79      	ldr	r3, [pc, #484]	; (8003b74 <ADC_Init+0x1f0>)
 800398e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	431a      	orrs	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	021a      	lsls	r2, r3, #8
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80039dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6859      	ldr	r1, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6899      	ldr	r1, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a16:	4a58      	ldr	r2, [pc, #352]	; (8003b78 <ADC_Init+0x1f4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d022      	beq.n	8003a62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6899      	ldr	r1, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6899      	ldr	r1, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	e00f      	b.n	8003a82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a80:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0202 	bic.w	r2, r2, #2
 8003a90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6899      	ldr	r1, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	7e1b      	ldrb	r3, [r3, #24]
 8003a9c:	005a      	lsls	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01b      	beq.n	8003ae8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003abe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ace:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	3b01      	subs	r3, #1
 8003adc:	035a      	lsls	r2, r3, #13
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	e007      	b.n	8003af8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	051a      	lsls	r2, r3, #20
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6899      	ldr	r1, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b3a:	025a      	lsls	r2, r3, #9
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6899      	ldr	r1, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	029a      	lsls	r2, r3, #10
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	609a      	str	r2, [r3, #8]
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	40012300 	.word	0x40012300
 8003b78:	0f000001 	.word	0x0f000001

08003b7c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d13c      	bne.n	8003c10 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d12b      	bne.n	8003c08 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d127      	bne.n	8003c08 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d006      	beq.n	8003bd4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d119      	bne.n	8003c08 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0220 	bic.w	r2, r2, #32
 8003be2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d105      	bne.n	8003c08 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	f043 0201 	orr.w	r2, r3, #1
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f7ff fd7b 	bl	8003704 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c0e:	e00e      	b.n	8003c2e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f7ff fd85 	bl	800372c <HAL_ADC_ErrorCallback>
}
 8003c22:	e004      	b.n	8003c2e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	4798      	blx	r3
}
 8003c2e:	bf00      	nop
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f7ff fd67 	bl	8003718 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2240      	movs	r2, #64	; 0x40
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	f043 0204 	orr.w	r2, r3, #4
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f7ff fd5a 	bl	800372c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c78:	bf00      	nop
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cb2:	4a04      	ldr	r2, [pc, #16]	; (8003cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	60d3      	str	r3, [r2, #12]
}
 8003cb8:	bf00      	nop
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	e000ed00 	.word	0xe000ed00

08003cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ccc:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	0a1b      	lsrs	r3, r3, #8
 8003cd2:	f003 0307 	and.w	r3, r3, #7
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	e000ed00 	.word	0xe000ed00

08003ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	db0b      	blt.n	8003d0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	f003 021f 	and.w	r2, r3, #31
 8003cfc:	4907      	ldr	r1, [pc, #28]	; (8003d1c <__NVIC_EnableIRQ+0x38>)
 8003cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	2001      	movs	r0, #1
 8003d06:	fa00 f202 	lsl.w	r2, r0, r2
 8003d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	e000e100 	.word	0xe000e100

08003d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	6039      	str	r1, [r7, #0]
 8003d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	db0a      	blt.n	8003d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	490c      	ldr	r1, [pc, #48]	; (8003d6c <__NVIC_SetPriority+0x4c>)
 8003d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3e:	0112      	lsls	r2, r2, #4
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	440b      	add	r3, r1
 8003d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d48:	e00a      	b.n	8003d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	4908      	ldr	r1, [pc, #32]	; (8003d70 <__NVIC_SetPriority+0x50>)
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	3b04      	subs	r3, #4
 8003d58:	0112      	lsls	r2, r2, #4
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	761a      	strb	r2, [r3, #24]
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	e000e100 	.word	0xe000e100
 8003d70:	e000ed00 	.word	0xe000ed00

08003d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b089      	sub	sp, #36	; 0x24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f1c3 0307 	rsb	r3, r3, #7
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	bf28      	it	cs
 8003d92:	2304      	movcs	r3, #4
 8003d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	2b06      	cmp	r3, #6
 8003d9c:	d902      	bls.n	8003da4 <NVIC_EncodePriority+0x30>
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	3b03      	subs	r3, #3
 8003da2:	e000      	b.n	8003da6 <NVIC_EncodePriority+0x32>
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	43da      	mvns	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	401a      	ands	r2, r3
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc6:	43d9      	mvns	r1, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dcc:	4313      	orrs	r3, r2
         );
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3724      	adds	r7, #36	; 0x24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
	...

08003ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dec:	d301      	bcc.n	8003df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dee:	2301      	movs	r3, #1
 8003df0:	e00f      	b.n	8003e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003df2:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <SysTick_Config+0x40>)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dfa:	210f      	movs	r1, #15
 8003dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003e00:	f7ff ff8e 	bl	8003d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <SysTick_Config+0x40>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e0a:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <SysTick_Config+0x40>)
 8003e0c:	2207      	movs	r2, #7
 8003e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	e000e010 	.word	0xe000e010

08003e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff ff29 	bl	8003c80 <__NVIC_SetPriorityGrouping>
}
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b086      	sub	sp, #24
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	607a      	str	r2, [r7, #4]
 8003e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e48:	f7ff ff3e 	bl	8003cc8 <__NVIC_GetPriorityGrouping>
 8003e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	6978      	ldr	r0, [r7, #20]
 8003e54:	f7ff ff8e 	bl	8003d74 <NVIC_EncodePriority>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e5e:	4611      	mov	r1, r2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff ff5d 	bl	8003d20 <__NVIC_SetPriority>
}
 8003e66:	bf00      	nop
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	4603      	mov	r3, r0
 8003e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff ff31 	bl	8003ce4 <__NVIC_EnableIRQ>
}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff ffa2 	bl	8003ddc <SysTick_Config>
 8003e98:	4603      	mov	r3, r0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003eb0:	f7ff faa4 	bl	80033fc <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e099      	b.n	8003ff4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0201 	bic.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ee0:	e00f      	b.n	8003f02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ee2:	f7ff fa8b 	bl	80033fc <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b05      	cmp	r3, #5
 8003eee:	d908      	bls.n	8003f02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2203      	movs	r2, #3
 8003efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e078      	b.n	8003ff4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e8      	bne.n	8003ee2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	4b38      	ldr	r3, [pc, #224]	; (8003ffc <HAL_DMA_Init+0x158>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d107      	bne.n	8003f6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	4313      	orrs	r3, r2
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f023 0307 	bic.w	r3, r3, #7
 8003f82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d117      	bne.n	8003fc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00e      	beq.n	8003fc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 fb01 	bl	80045b0 <DMA_CheckFifoParam>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d008      	beq.n	8003fc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2240      	movs	r2, #64	; 0x40
 8003fb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e016      	b.n	8003ff4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fab8 	bl	8004544 <DMA_CalcBaseAndBitshift>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fdc:	223f      	movs	r2, #63	; 0x3f
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	f010803f 	.word	0xf010803f

08004000 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004016:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_DMA_Start_IT+0x26>
 8004022:	2302      	movs	r3, #2
 8004024:	e040      	b.n	80040a8 <HAL_DMA_Start_IT+0xa8>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b01      	cmp	r3, #1
 8004038:	d12f      	bne.n	800409a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2202      	movs	r2, #2
 800403e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	68b9      	ldr	r1, [r7, #8]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 fa4a 	bl	80044e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004058:	223f      	movs	r2, #63	; 0x3f
 800405a:	409a      	lsls	r2, r3
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0216 	orr.w	r2, r2, #22
 800406e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0208 	orr.w	r2, r2, #8
 8004086:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	e005      	b.n	80040a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040a2:	2302      	movs	r3, #2
 80040a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040be:	f7ff f99d 	bl	80033fc <HAL_GetTick>
 80040c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d008      	beq.n	80040e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2280      	movs	r2, #128	; 0x80
 80040d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e052      	b.n	8004188 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0216 	bic.w	r2, r2, #22
 80040f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004100:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d103      	bne.n	8004112 <HAL_DMA_Abort+0x62>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0208 	bic.w	r2, r2, #8
 8004120:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0201 	bic.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004132:	e013      	b.n	800415c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004134:	f7ff f962 	bl	80033fc <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b05      	cmp	r3, #5
 8004140:	d90c      	bls.n	800415c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2203      	movs	r2, #3
 800414c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e015      	b.n	8004188 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e4      	bne.n	8004134 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416e:	223f      	movs	r2, #63	; 0x3f
 8004170:	409a      	lsls	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d004      	beq.n	80041ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2280      	movs	r2, #128	; 0x80
 80041a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e00c      	b.n	80041c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2205      	movs	r2, #5
 80041b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0201 	bic.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041e0:	4b8e      	ldr	r3, [pc, #568]	; (800441c <HAL_DMA_IRQHandler+0x248>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a8e      	ldr	r2, [pc, #568]	; (8004420 <HAL_DMA_IRQHandler+0x24c>)
 80041e6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ea:	0a9b      	lsrs	r3, r3, #10
 80041ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fe:	2208      	movs	r2, #8
 8004200:	409a      	lsls	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4013      	ands	r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01a      	beq.n	8004240 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d013      	beq.n	8004240 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0204 	bic.w	r2, r2, #4
 8004226:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422c:	2208      	movs	r2, #8
 800422e:	409a      	lsls	r2, r3
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004238:	f043 0201 	orr.w	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004244:	2201      	movs	r2, #1
 8004246:	409a      	lsls	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d012      	beq.n	8004276 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	2201      	movs	r2, #1
 8004264:	409a      	lsls	r2, r3
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426e:	f043 0202 	orr.w	r2, r3, #2
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427a:	2204      	movs	r2, #4
 800427c:	409a      	lsls	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4013      	ands	r3, r2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d012      	beq.n	80042ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00b      	beq.n	80042ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004298:	2204      	movs	r2, #4
 800429a:	409a      	lsls	r2, r3
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	f043 0204 	orr.w	r2, r3, #4
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b0:	2210      	movs	r2, #16
 80042b2:	409a      	lsls	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d043      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d03c      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ce:	2210      	movs	r2, #16
 80042d0:	409a      	lsls	r2, r3
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d018      	beq.n	8004316 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d108      	bne.n	8004304 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d024      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
 8004302:	e01f      	b.n	8004344 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01b      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
 8004314:	e016      	b.n	8004344 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d107      	bne.n	8004334 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0208 	bic.w	r2, r2, #8
 8004332:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004348:	2220      	movs	r2, #32
 800434a:	409a      	lsls	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 808f 	beq.w	8004474 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8087 	beq.w	8004474 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436a:	2220      	movs	r2, #32
 800436c:	409a      	lsls	r2, r3
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b05      	cmp	r3, #5
 800437c:	d136      	bne.n	80043ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0216 	bic.w	r2, r2, #22
 800438c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800439c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d103      	bne.n	80043ae <HAL_DMA_IRQHandler+0x1da>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0208 	bic.w	r2, r2, #8
 80043bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c2:	223f      	movs	r2, #63	; 0x3f
 80043c4:	409a      	lsls	r2, r3
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d07e      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
        }
        return;
 80043ea:	e079      	b.n	80044e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01d      	beq.n	8004436 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10d      	bne.n	8004424 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440c:	2b00      	cmp	r3, #0
 800440e:	d031      	beq.n	8004474 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
 8004418:	e02c      	b.n	8004474 <HAL_DMA_IRQHandler+0x2a0>
 800441a:	bf00      	nop
 800441c:	20000224 	.word	0x20000224
 8004420:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d023      	beq.n	8004474 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	4798      	blx	r3
 8004434:	e01e      	b.n	8004474 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10f      	bne.n	8004464 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0210 	bic.w	r2, r2, #16
 8004452:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004478:	2b00      	cmp	r3, #0
 800447a:	d032      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d022      	beq.n	80044ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2205      	movs	r2, #5
 800448c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0201 	bic.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	3301      	adds	r3, #1
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d307      	bcc.n	80044bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f2      	bne.n	80044a0 <HAL_DMA_IRQHandler+0x2cc>
 80044ba:	e000      	b.n	80044be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d005      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	4798      	blx	r3
 80044de:	e000      	b.n	80044e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80044e0:	bf00      	nop
    }
  }
}
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004504:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	d108      	bne.n	8004528 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004526:	e007      	b.n	8004538 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	60da      	str	r2, [r3, #12]
}
 8004538:	bf00      	nop
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	3b10      	subs	r3, #16
 8004554:	4a14      	ldr	r2, [pc, #80]	; (80045a8 <DMA_CalcBaseAndBitshift+0x64>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	091b      	lsrs	r3, r3, #4
 800455c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800455e:	4a13      	ldr	r2, [pc, #76]	; (80045ac <DMA_CalcBaseAndBitshift+0x68>)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d909      	bls.n	8004586 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800457a:	f023 0303 	bic.w	r3, r3, #3
 800457e:	1d1a      	adds	r2, r3, #4
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	659a      	str	r2, [r3, #88]	; 0x58
 8004584:	e007      	b.n	8004596 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800458e:	f023 0303 	bic.w	r3, r3, #3
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	aaaaaaab 	.word	0xaaaaaaab
 80045ac:	0800b168 	.word	0x0800b168

080045b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d11f      	bne.n	800460a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d856      	bhi.n	800467e <DMA_CheckFifoParam+0xce>
 80045d0:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <DMA_CheckFifoParam+0x28>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	080045e9 	.word	0x080045e9
 80045dc:	080045fb 	.word	0x080045fb
 80045e0:	080045e9 	.word	0x080045e9
 80045e4:	0800467f 	.word	0x0800467f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d046      	beq.n	8004682 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f8:	e043      	b.n	8004682 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004602:	d140      	bne.n	8004686 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004608:	e03d      	b.n	8004686 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004612:	d121      	bne.n	8004658 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b03      	cmp	r3, #3
 8004618:	d837      	bhi.n	800468a <DMA_CheckFifoParam+0xda>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <DMA_CheckFifoParam+0x70>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	08004631 	.word	0x08004631
 8004624:	08004637 	.word	0x08004637
 8004628:	08004631 	.word	0x08004631
 800462c:	08004649 	.word	0x08004649
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
      break;
 8004634:	e030      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d025      	beq.n	800468e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004646:	e022      	b.n	800468e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004650:	d11f      	bne.n	8004692 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004656:	e01c      	b.n	8004692 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d903      	bls.n	8004666 <DMA_CheckFifoParam+0xb6>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b03      	cmp	r3, #3
 8004662:	d003      	beq.n	800466c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004664:	e018      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]
      break;
 800466a:	e015      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00e      	beq.n	8004696 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      break;
 800467c:	e00b      	b.n	8004696 <DMA_CheckFifoParam+0xe6>
      break;
 800467e:	bf00      	nop
 8004680:	e00a      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 8004682:	bf00      	nop
 8004684:	e008      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 8004686:	bf00      	nop
 8004688:	e006      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 800468a:	bf00      	nop
 800468c:	e004      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 800468e:	bf00      	nop
 8004690:	e002      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;   
 8004692:	bf00      	nop
 8004694:	e000      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 8004696:	bf00      	nop
    }
  } 
  
  return status; 
 8004698:	7bfb      	ldrb	r3, [r7, #15]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop

080046a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b089      	sub	sp, #36	; 0x24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	e16b      	b.n	800499c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046c4:	2201      	movs	r2, #1
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4013      	ands	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	429a      	cmp	r2, r3
 80046de:	f040 815a 	bne.w	8004996 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d005      	beq.n	80046fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d130      	bne.n	800475c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	2203      	movs	r2, #3
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	43db      	mvns	r3, r3
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4013      	ands	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4313      	orrs	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004730:	2201      	movs	r2, #1
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43db      	mvns	r3, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4013      	ands	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	091b      	lsrs	r3, r3, #4
 8004746:	f003 0201 	and.w	r2, r3, #1
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	4313      	orrs	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f003 0303 	and.w	r3, r3, #3
 8004764:	2b03      	cmp	r3, #3
 8004766:	d017      	beq.n	8004798 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	2203      	movs	r2, #3
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4013      	ands	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4313      	orrs	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d123      	bne.n	80047ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	08da      	lsrs	r2, r3, #3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3208      	adds	r2, #8
 80047ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	220f      	movs	r2, #15
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	43db      	mvns	r3, r3
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	4013      	ands	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	08da      	lsrs	r2, r3, #3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3208      	adds	r2, #8
 80047e6:	69b9      	ldr	r1, [r7, #24]
 80047e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	2203      	movs	r2, #3
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	43db      	mvns	r3, r3
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4013      	ands	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f003 0203 	and.w	r2, r3, #3
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4313      	orrs	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80b4 	beq.w	8004996 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	4b60      	ldr	r3, [pc, #384]	; (80049b4 <HAL_GPIO_Init+0x30c>)
 8004834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004836:	4a5f      	ldr	r2, [pc, #380]	; (80049b4 <HAL_GPIO_Init+0x30c>)
 8004838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800483c:	6453      	str	r3, [r2, #68]	; 0x44
 800483e:	4b5d      	ldr	r3, [pc, #372]	; (80049b4 <HAL_GPIO_Init+0x30c>)
 8004840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800484a:	4a5b      	ldr	r2, [pc, #364]	; (80049b8 <HAL_GPIO_Init+0x310>)
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	089b      	lsrs	r3, r3, #2
 8004850:	3302      	adds	r3, #2
 8004852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	220f      	movs	r2, #15
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a52      	ldr	r2, [pc, #328]	; (80049bc <HAL_GPIO_Init+0x314>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d02b      	beq.n	80048ce <HAL_GPIO_Init+0x226>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a51      	ldr	r2, [pc, #324]	; (80049c0 <HAL_GPIO_Init+0x318>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d025      	beq.n	80048ca <HAL_GPIO_Init+0x222>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a50      	ldr	r2, [pc, #320]	; (80049c4 <HAL_GPIO_Init+0x31c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d01f      	beq.n	80048c6 <HAL_GPIO_Init+0x21e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a4f      	ldr	r2, [pc, #316]	; (80049c8 <HAL_GPIO_Init+0x320>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d019      	beq.n	80048c2 <HAL_GPIO_Init+0x21a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a4e      	ldr	r2, [pc, #312]	; (80049cc <HAL_GPIO_Init+0x324>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d013      	beq.n	80048be <HAL_GPIO_Init+0x216>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a4d      	ldr	r2, [pc, #308]	; (80049d0 <HAL_GPIO_Init+0x328>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d00d      	beq.n	80048ba <HAL_GPIO_Init+0x212>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a4c      	ldr	r2, [pc, #304]	; (80049d4 <HAL_GPIO_Init+0x32c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d007      	beq.n	80048b6 <HAL_GPIO_Init+0x20e>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a4b      	ldr	r2, [pc, #300]	; (80049d8 <HAL_GPIO_Init+0x330>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d101      	bne.n	80048b2 <HAL_GPIO_Init+0x20a>
 80048ae:	2307      	movs	r3, #7
 80048b0:	e00e      	b.n	80048d0 <HAL_GPIO_Init+0x228>
 80048b2:	2308      	movs	r3, #8
 80048b4:	e00c      	b.n	80048d0 <HAL_GPIO_Init+0x228>
 80048b6:	2306      	movs	r3, #6
 80048b8:	e00a      	b.n	80048d0 <HAL_GPIO_Init+0x228>
 80048ba:	2305      	movs	r3, #5
 80048bc:	e008      	b.n	80048d0 <HAL_GPIO_Init+0x228>
 80048be:	2304      	movs	r3, #4
 80048c0:	e006      	b.n	80048d0 <HAL_GPIO_Init+0x228>
 80048c2:	2303      	movs	r3, #3
 80048c4:	e004      	b.n	80048d0 <HAL_GPIO_Init+0x228>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e002      	b.n	80048d0 <HAL_GPIO_Init+0x228>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <HAL_GPIO_Init+0x228>
 80048ce:	2300      	movs	r3, #0
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	f002 0203 	and.w	r2, r2, #3
 80048d6:	0092      	lsls	r2, r2, #2
 80048d8:	4093      	lsls	r3, r2
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4313      	orrs	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048e0:	4935      	ldr	r1, [pc, #212]	; (80049b8 <HAL_GPIO_Init+0x310>)
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	089b      	lsrs	r3, r3, #2
 80048e6:	3302      	adds	r3, #2
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048ee:	4b3b      	ldr	r3, [pc, #236]	; (80049dc <HAL_GPIO_Init+0x334>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	43db      	mvns	r3, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4013      	ands	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	4313      	orrs	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004912:	4a32      	ldr	r2, [pc, #200]	; (80049dc <HAL_GPIO_Init+0x334>)
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004918:	4b30      	ldr	r3, [pc, #192]	; (80049dc <HAL_GPIO_Init+0x334>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	43db      	mvns	r3, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4013      	ands	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800493c:	4a27      	ldr	r2, [pc, #156]	; (80049dc <HAL_GPIO_Init+0x334>)
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004942:	4b26      	ldr	r3, [pc, #152]	; (80049dc <HAL_GPIO_Init+0x334>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	43db      	mvns	r3, r3
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	4013      	ands	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004966:	4a1d      	ldr	r2, [pc, #116]	; (80049dc <HAL_GPIO_Init+0x334>)
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800496c:	4b1b      	ldr	r3, [pc, #108]	; (80049dc <HAL_GPIO_Init+0x334>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	43db      	mvns	r3, r3
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	4013      	ands	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004990:	4a12      	ldr	r2, [pc, #72]	; (80049dc <HAL_GPIO_Init+0x334>)
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	3301      	adds	r3, #1
 800499a:	61fb      	str	r3, [r7, #28]
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	2b0f      	cmp	r3, #15
 80049a0:	f67f ae90 	bls.w	80046c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop
 80049a8:	3724      	adds	r7, #36	; 0x24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40023800 	.word	0x40023800
 80049b8:	40013800 	.word	0x40013800
 80049bc:	40020000 	.word	0x40020000
 80049c0:	40020400 	.word	0x40020400
 80049c4:	40020800 	.word	0x40020800
 80049c8:	40020c00 	.word	0x40020c00
 80049cc:	40021000 	.word	0x40021000
 80049d0:	40021400 	.word	0x40021400
 80049d4:	40021800 	.word	0x40021800
 80049d8:	40021c00 	.word	0x40021c00
 80049dc:	40013c00 	.word	0x40013c00

080049e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	807b      	strh	r3, [r7, #2]
 80049ec:	4613      	mov	r3, r2
 80049ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049f0:	787b      	ldrb	r3, [r7, #1]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049f6:	887a      	ldrh	r2, [r7, #2]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049fc:	e003      	b.n	8004a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049fe:	887b      	ldrh	r3, [r7, #2]
 8004a00:	041a      	lsls	r2, r3, #16
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	619a      	str	r2, [r3, #24]
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
	...

08004a14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e267      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d075      	beq.n	8004b1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a32:	4b88      	ldr	r3, [pc, #544]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 030c 	and.w	r3, r3, #12
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d00c      	beq.n	8004a58 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a3e:	4b85      	ldr	r3, [pc, #532]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d112      	bne.n	8004a70 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a4a:	4b82      	ldr	r3, [pc, #520]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a56:	d10b      	bne.n	8004a70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a58:	4b7e      	ldr	r3, [pc, #504]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d05b      	beq.n	8004b1c <HAL_RCC_OscConfig+0x108>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d157      	bne.n	8004b1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e242      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a78:	d106      	bne.n	8004a88 <HAL_RCC_OscConfig+0x74>
 8004a7a:	4b76      	ldr	r3, [pc, #472]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a75      	ldr	r2, [pc, #468]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	e01d      	b.n	8004ac4 <HAL_RCC_OscConfig+0xb0>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a90:	d10c      	bne.n	8004aac <HAL_RCC_OscConfig+0x98>
 8004a92:	4b70      	ldr	r3, [pc, #448]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a6f      	ldr	r2, [pc, #444]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	4b6d      	ldr	r3, [pc, #436]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a6c      	ldr	r2, [pc, #432]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e00b      	b.n	8004ac4 <HAL_RCC_OscConfig+0xb0>
 8004aac:	4b69      	ldr	r3, [pc, #420]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a68      	ldr	r2, [pc, #416]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	4b66      	ldr	r3, [pc, #408]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a65      	ldr	r2, [pc, #404]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d013      	beq.n	8004af4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fe fc96 	bl	80033fc <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fe fc92 	bl	80033fc <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	; 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e207      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae6:	4b5b      	ldr	r3, [pc, #364]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0f0      	beq.n	8004ad4 <HAL_RCC_OscConfig+0xc0>
 8004af2:	e014      	b.n	8004b1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af4:	f7fe fc82 	bl	80033fc <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004afc:	f7fe fc7e 	bl	80033fc <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b64      	cmp	r3, #100	; 0x64
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e1f3      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b0e:	4b51      	ldr	r3, [pc, #324]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0xe8>
 8004b1a:	e000      	b.n	8004b1e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d063      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b2a:	4b4a      	ldr	r3, [pc, #296]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00b      	beq.n	8004b4e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b36:	4b47      	ldr	r3, [pc, #284]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d11c      	bne.n	8004b7c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b42:	4b44      	ldr	r3, [pc, #272]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d116      	bne.n	8004b7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4e:	4b41      	ldr	r3, [pc, #260]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d005      	beq.n	8004b66 <HAL_RCC_OscConfig+0x152>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d001      	beq.n	8004b66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e1c7      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b66:	4b3b      	ldr	r3, [pc, #236]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	4937      	ldr	r1, [pc, #220]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7a:	e03a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d020      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b84:	4b34      	ldr	r3, [pc, #208]	; (8004c58 <HAL_RCC_OscConfig+0x244>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8a:	f7fe fc37 	bl	80033fc <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b92:	f7fe fc33 	bl	80033fc <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e1a8      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba4:	4b2b      	ldr	r3, [pc, #172]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb0:	4b28      	ldr	r3, [pc, #160]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	4925      	ldr	r1, [pc, #148]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	600b      	str	r3, [r1, #0]
 8004bc4:	e015      	b.n	8004bf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bc6:	4b24      	ldr	r3, [pc, #144]	; (8004c58 <HAL_RCC_OscConfig+0x244>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fe fc16 	bl	80033fc <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd4:	f7fe fc12 	bl	80033fc <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e187      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be6:	4b1b      	ldr	r3, [pc, #108]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d036      	beq.n	8004c6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d016      	beq.n	8004c34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c06:	4b15      	ldr	r3, [pc, #84]	; (8004c5c <HAL_RCC_OscConfig+0x248>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0c:	f7fe fbf6 	bl	80033fc <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c14:	f7fe fbf2 	bl	80033fc <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e167      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c26:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0x200>
 8004c32:	e01b      	b.n	8004c6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c34:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <HAL_RCC_OscConfig+0x248>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c3a:	f7fe fbdf 	bl	80033fc <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c40:	e00e      	b.n	8004c60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c42:	f7fe fbdb 	bl	80033fc <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d907      	bls.n	8004c60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e150      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
 8004c54:	40023800 	.word	0x40023800
 8004c58:	42470000 	.word	0x42470000
 8004c5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c60:	4b88      	ldr	r3, [pc, #544]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1ea      	bne.n	8004c42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 8097 	beq.w	8004da8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c7e:	4b81      	ldr	r3, [pc, #516]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10f      	bne.n	8004caa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	4b7d      	ldr	r3, [pc, #500]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	4a7c      	ldr	r2, [pc, #496]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c98:	6413      	str	r3, [r2, #64]	; 0x40
 8004c9a:	4b7a      	ldr	r3, [pc, #488]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	60bb      	str	r3, [r7, #8]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004caa:	4b77      	ldr	r3, [pc, #476]	; (8004e88 <HAL_RCC_OscConfig+0x474>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d118      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cb6:	4b74      	ldr	r3, [pc, #464]	; (8004e88 <HAL_RCC_OscConfig+0x474>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a73      	ldr	r2, [pc, #460]	; (8004e88 <HAL_RCC_OscConfig+0x474>)
 8004cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cc2:	f7fe fb9b 	bl	80033fc <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cca:	f7fe fb97 	bl	80033fc <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e10c      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cdc:	4b6a      	ldr	r3, [pc, #424]	; (8004e88 <HAL_RCC_OscConfig+0x474>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d106      	bne.n	8004cfe <HAL_RCC_OscConfig+0x2ea>
 8004cf0:	4b64      	ldr	r3, [pc, #400]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf4:	4a63      	ldr	r2, [pc, #396]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8004cfc:	e01c      	b.n	8004d38 <HAL_RCC_OscConfig+0x324>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b05      	cmp	r3, #5
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x30c>
 8004d06:	4b5f      	ldr	r3, [pc, #380]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0a:	4a5e      	ldr	r2, [pc, #376]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d0c:	f043 0304 	orr.w	r3, r3, #4
 8004d10:	6713      	str	r3, [r2, #112]	; 0x70
 8004d12:	4b5c      	ldr	r3, [pc, #368]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d16:	4a5b      	ldr	r2, [pc, #364]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCC_OscConfig+0x324>
 8004d20:	4b58      	ldr	r3, [pc, #352]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d24:	4a57      	ldr	r2, [pc, #348]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d26:	f023 0301 	bic.w	r3, r3, #1
 8004d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d2c:	4b55      	ldr	r3, [pc, #340]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d30:	4a54      	ldr	r2, [pc, #336]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d32:	f023 0304 	bic.w	r3, r3, #4
 8004d36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d015      	beq.n	8004d6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d40:	f7fe fb5c 	bl	80033fc <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d48:	f7fe fb58 	bl	80033fc <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e0cb      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5e:	4b49      	ldr	r3, [pc, #292]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0ee      	beq.n	8004d48 <HAL_RCC_OscConfig+0x334>
 8004d6a:	e014      	b.n	8004d96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d6c:	f7fe fb46 	bl	80033fc <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d72:	e00a      	b.n	8004d8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d74:	f7fe fb42 	bl	80033fc <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e0b5      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d8a:	4b3e      	ldr	r3, [pc, #248]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1ee      	bne.n	8004d74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d105      	bne.n	8004da8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d9c:	4b39      	ldr	r3, [pc, #228]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	4a38      	ldr	r2, [pc, #224]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004da6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80a1 	beq.w	8004ef4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004db2:	4b34      	ldr	r3, [pc, #208]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d05c      	beq.n	8004e78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d141      	bne.n	8004e4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc6:	4b31      	ldr	r3, [pc, #196]	; (8004e8c <HAL_RCC_OscConfig+0x478>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dcc:	f7fe fb16 	bl	80033fc <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd4:	f7fe fb12 	bl	80033fc <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e087      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de6:	4b27      	ldr	r3, [pc, #156]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69da      	ldr	r2, [r3, #28]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	019b      	lsls	r3, r3, #6
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e08:	085b      	lsrs	r3, r3, #1
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	041b      	lsls	r3, r3, #16
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	061b      	lsls	r3, r3, #24
 8004e16:	491b      	ldr	r1, [pc, #108]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e1c:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <HAL_RCC_OscConfig+0x478>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e22:	f7fe faeb 	bl	80033fc <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e2a:	f7fe fae7 	bl	80033fc <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e05c      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e3c:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f0      	beq.n	8004e2a <HAL_RCC_OscConfig+0x416>
 8004e48:	e054      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4a:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <HAL_RCC_OscConfig+0x478>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e50:	f7fe fad4 	bl	80033fc <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e58:	f7fe fad0 	bl	80033fc <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e045      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6a:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0x444>
 8004e76:	e03d      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d107      	bne.n	8004e90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e038      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
 8004e84:	40023800 	.word	0x40023800
 8004e88:	40007000 	.word	0x40007000
 8004e8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e90:	4b1b      	ldr	r3, [pc, #108]	; (8004f00 <HAL_RCC_OscConfig+0x4ec>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d028      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d121      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d11a      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ec6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d111      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed6:	085b      	lsrs	r3, r3, #1
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d107      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40023800 	.word	0x40023800

08004f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0cc      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f18:	4b68      	ldr	r3, [pc, #416]	; (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d90c      	bls.n	8004f40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f26:	4b65      	ldr	r3, [pc, #404]	; (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2e:	4b63      	ldr	r3, [pc, #396]	; (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0b8      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d020      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f58:	4b59      	ldr	r3, [pc, #356]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	4a58      	ldr	r2, [pc, #352]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f70:	4b53      	ldr	r3, [pc, #332]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	4a52      	ldr	r2, [pc, #328]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f7c:	4b50      	ldr	r3, [pc, #320]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	494d      	ldr	r1, [pc, #308]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d044      	beq.n	8005024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d107      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa2:	4b47      	ldr	r3, [pc, #284]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d119      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e07f      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d003      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d107      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc2:	4b3f      	ldr	r3, [pc, #252]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e06f      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd2:	4b3b      	ldr	r3, [pc, #236]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e067      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fe2:	4b37      	ldr	r3, [pc, #220]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f023 0203 	bic.w	r2, r3, #3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	4934      	ldr	r1, [pc, #208]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ff4:	f7fe fa02 	bl	80033fc <HAL_GetTick>
 8004ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ffa:	e00a      	b.n	8005012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ffc:	f7fe f9fe 	bl	80033fc <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	f241 3288 	movw	r2, #5000	; 0x1388
 800500a:	4293      	cmp	r3, r2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e04f      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005012:	4b2b      	ldr	r3, [pc, #172]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 020c 	and.w	r2, r3, #12
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	429a      	cmp	r2, r3
 8005022:	d1eb      	bne.n	8004ffc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005024:	4b25      	ldr	r3, [pc, #148]	; (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d20c      	bcs.n	800504c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005032:	4b22      	ldr	r3, [pc, #136]	; (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800503a:	4b20      	ldr	r3, [pc, #128]	; (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d001      	beq.n	800504c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e032      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005058:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4916      	ldr	r1, [pc, #88]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	4313      	orrs	r3, r2
 8005068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005076:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	490e      	ldr	r1, [pc, #56]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	4313      	orrs	r3, r2
 8005088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800508a:	f000 f821 	bl	80050d0 <HAL_RCC_GetSysClockFreq>
 800508e:	4602      	mov	r2, r0
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	091b      	lsrs	r3, r3, #4
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	490a      	ldr	r1, [pc, #40]	; (80050c4 <HAL_RCC_ClockConfig+0x1c0>)
 800509c:	5ccb      	ldrb	r3, [r1, r3]
 800509e:	fa22 f303 	lsr.w	r3, r2, r3
 80050a2:	4a09      	ldr	r2, [pc, #36]	; (80050c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80050a6:	4b09      	ldr	r3, [pc, #36]	; (80050cc <HAL_RCC_ClockConfig+0x1c8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fe f962 	bl	8003374 <HAL_InitTick>

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40023c00 	.word	0x40023c00
 80050c0:	40023800 	.word	0x40023800
 80050c4:	0800b150 	.word	0x0800b150
 80050c8:	20000224 	.word	0x20000224
 80050cc:	20000228 	.word	0x20000228

080050d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050d4:	b090      	sub	sp, #64	; 0x40
 80050d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050e8:	4b59      	ldr	r3, [pc, #356]	; (8005250 <HAL_RCC_GetSysClockFreq+0x180>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 030c 	and.w	r3, r3, #12
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d00d      	beq.n	8005110 <HAL_RCC_GetSysClockFreq+0x40>
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	f200 80a1 	bhi.w	800523c <HAL_RCC_GetSysClockFreq+0x16c>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <HAL_RCC_GetSysClockFreq+0x34>
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d003      	beq.n	800510a <HAL_RCC_GetSysClockFreq+0x3a>
 8005102:	e09b      	b.n	800523c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005104:	4b53      	ldr	r3, [pc, #332]	; (8005254 <HAL_RCC_GetSysClockFreq+0x184>)
 8005106:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005108:	e09b      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800510a:	4b53      	ldr	r3, [pc, #332]	; (8005258 <HAL_RCC_GetSysClockFreq+0x188>)
 800510c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800510e:	e098      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005110:	4b4f      	ldr	r3, [pc, #316]	; (8005250 <HAL_RCC_GetSysClockFreq+0x180>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005118:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800511a:	4b4d      	ldr	r3, [pc, #308]	; (8005250 <HAL_RCC_GetSysClockFreq+0x180>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d028      	beq.n	8005178 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005126:	4b4a      	ldr	r3, [pc, #296]	; (8005250 <HAL_RCC_GetSysClockFreq+0x180>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	099b      	lsrs	r3, r3, #6
 800512c:	2200      	movs	r2, #0
 800512e:	623b      	str	r3, [r7, #32]
 8005130:	627a      	str	r2, [r7, #36]	; 0x24
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005138:	2100      	movs	r1, #0
 800513a:	4b47      	ldr	r3, [pc, #284]	; (8005258 <HAL_RCC_GetSysClockFreq+0x188>)
 800513c:	fb03 f201 	mul.w	r2, r3, r1
 8005140:	2300      	movs	r3, #0
 8005142:	fb00 f303 	mul.w	r3, r0, r3
 8005146:	4413      	add	r3, r2
 8005148:	4a43      	ldr	r2, [pc, #268]	; (8005258 <HAL_RCC_GetSysClockFreq+0x188>)
 800514a:	fba0 1202 	umull	r1, r2, r0, r2
 800514e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005150:	460a      	mov	r2, r1
 8005152:	62ba      	str	r2, [r7, #40]	; 0x28
 8005154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005156:	4413      	add	r3, r2
 8005158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800515a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515c:	2200      	movs	r2, #0
 800515e:	61bb      	str	r3, [r7, #24]
 8005160:	61fa      	str	r2, [r7, #28]
 8005162:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005166:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800516a:	f7fb fc9f 	bl	8000aac <__aeabi_uldivmod>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4613      	mov	r3, r2
 8005174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005176:	e053      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005178:	4b35      	ldr	r3, [pc, #212]	; (8005250 <HAL_RCC_GetSysClockFreq+0x180>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	099b      	lsrs	r3, r3, #6
 800517e:	2200      	movs	r2, #0
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	617a      	str	r2, [r7, #20]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800518a:	f04f 0b00 	mov.w	fp, #0
 800518e:	4652      	mov	r2, sl
 8005190:	465b      	mov	r3, fp
 8005192:	f04f 0000 	mov.w	r0, #0
 8005196:	f04f 0100 	mov.w	r1, #0
 800519a:	0159      	lsls	r1, r3, #5
 800519c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051a0:	0150      	lsls	r0, r2, #5
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	ebb2 080a 	subs.w	r8, r2, sl
 80051aa:	eb63 090b 	sbc.w	r9, r3, fp
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80051ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80051be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80051c2:	ebb2 0408 	subs.w	r4, r2, r8
 80051c6:	eb63 0509 	sbc.w	r5, r3, r9
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	00eb      	lsls	r3, r5, #3
 80051d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051d8:	00e2      	lsls	r2, r4, #3
 80051da:	4614      	mov	r4, r2
 80051dc:	461d      	mov	r5, r3
 80051de:	eb14 030a 	adds.w	r3, r4, sl
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	eb45 030b 	adc.w	r3, r5, fp
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051f6:	4629      	mov	r1, r5
 80051f8:	028b      	lsls	r3, r1, #10
 80051fa:	4621      	mov	r1, r4
 80051fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005200:	4621      	mov	r1, r4
 8005202:	028a      	lsls	r2, r1, #10
 8005204:	4610      	mov	r0, r2
 8005206:	4619      	mov	r1, r3
 8005208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520a:	2200      	movs	r2, #0
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	60fa      	str	r2, [r7, #12]
 8005210:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005214:	f7fb fc4a 	bl	8000aac <__aeabi_uldivmod>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4613      	mov	r3, r2
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_RCC_GetSysClockFreq+0x180>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	0c1b      	lsrs	r3, r3, #16
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	3301      	adds	r3, #1
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005230:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005234:	fbb2 f3f3 	udiv	r3, r2, r3
 8005238:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800523a:	e002      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800523c:	4b05      	ldr	r3, [pc, #20]	; (8005254 <HAL_RCC_GetSysClockFreq+0x184>)
 800523e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005244:	4618      	mov	r0, r3
 8005246:	3740      	adds	r7, #64	; 0x40
 8005248:	46bd      	mov	sp, r7
 800524a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800524e:	bf00      	nop
 8005250:	40023800 	.word	0x40023800
 8005254:	00f42400 	.word	0x00f42400
 8005258:	017d7840 	.word	0x017d7840

0800525c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005260:	4b03      	ldr	r3, [pc, #12]	; (8005270 <HAL_RCC_GetHCLKFreq+0x14>)
 8005262:	681b      	ldr	r3, [r3, #0]
}
 8005264:	4618      	mov	r0, r3
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20000224 	.word	0x20000224

08005274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005278:	f7ff fff0 	bl	800525c <HAL_RCC_GetHCLKFreq>
 800527c:	4602      	mov	r2, r0
 800527e:	4b05      	ldr	r3, [pc, #20]	; (8005294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	0a9b      	lsrs	r3, r3, #10
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	4903      	ldr	r1, [pc, #12]	; (8005298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800528a:	5ccb      	ldrb	r3, [r1, r3]
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40023800 	.word	0x40023800
 8005298:	0800b160 	.word	0x0800b160

0800529c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052a0:	f7ff ffdc 	bl	800525c <HAL_RCC_GetHCLKFreq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	0b5b      	lsrs	r3, r3, #13
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	4903      	ldr	r1, [pc, #12]	; (80052c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052b2:	5ccb      	ldrb	r3, [r1, r3]
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40023800 	.word	0x40023800
 80052c0:	0800b160 	.word	0x0800b160

080052c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e07b      	b.n	80053ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d108      	bne.n	80052f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052e6:	d009      	beq.n	80052fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	61da      	str	r2, [r3, #28]
 80052ee:	e005      	b.n	80052fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7fd fcd2 	bl	8002cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005332:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005380:	ea42 0103 	orr.w	r1, r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	0c1b      	lsrs	r3, r3, #16
 800539a:	f003 0104 	and.w	r1, r3, #4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	f003 0210 	and.w	r2, r3, #16
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69da      	ldr	r2, [r3, #28]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b088      	sub	sp, #32
 80053da:	af02      	add	r7, sp, #8
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	603b      	str	r3, [r7, #0]
 80053e2:	4613      	mov	r3, r2
 80053e4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d001      	beq.n	80053f6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80053f2:	2302      	movs	r3, #2
 80053f4:	e104      	b.n	8005600 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053fe:	d112      	bne.n	8005426 <HAL_SPI_Receive+0x50>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10e      	bne.n	8005426 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2204      	movs	r2, #4
 800540c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005410:	88fa      	ldrh	r2, [r7, #6]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	4613      	mov	r3, r2
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 f8f3 	bl	8005608 <HAL_SPI_TransmitReceive>
 8005422:	4603      	mov	r3, r0
 8005424:	e0ec      	b.n	8005600 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005426:	f7fd ffe9 	bl	80033fc <HAL_GetTick>
 800542a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <HAL_SPI_Receive+0x62>
 8005432:	88fb      	ldrh	r3, [r7, #6]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e0e1      	b.n	8005600 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005442:	2b01      	cmp	r3, #1
 8005444:	d101      	bne.n	800544a <HAL_SPI_Receive+0x74>
 8005446:	2302      	movs	r3, #2
 8005448:	e0da      	b.n	8005600 <HAL_SPI_Receive+0x22a>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2204      	movs	r2, #4
 8005456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	88fa      	ldrh	r2, [r7, #6]
 800546a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	88fa      	ldrh	r2, [r7, #6]
 8005470:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005498:	d10f      	bne.n	80054ba <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80054b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c4:	2b40      	cmp	r3, #64	; 0x40
 80054c6:	d007      	beq.n	80054d8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d170      	bne.n	80055c2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80054e0:	e035      	b.n	800554e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d115      	bne.n	800551c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f103 020c 	add.w	r2, r3, #12
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	7812      	ldrb	r2, [r2, #0]
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005510:	b29b      	uxth	r3, r3
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	87da      	strh	r2, [r3, #62]	; 0x3e
 800551a:	e018      	b.n	800554e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800551c:	f7fd ff6e 	bl	80033fc <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	429a      	cmp	r2, r3
 800552a:	d803      	bhi.n	8005534 <HAL_SPI_Receive+0x15e>
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005532:	d102      	bne.n	800553a <HAL_SPI_Receive+0x164>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d109      	bne.n	800554e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e058      	b.n	8005600 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005552:	b29b      	uxth	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1c4      	bne.n	80054e2 <HAL_SPI_Receive+0x10c>
 8005558:	e038      	b.n	80055cc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b01      	cmp	r3, #1
 8005566:	d113      	bne.n	8005590 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	b292      	uxth	r2, r2
 8005574:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	1c9a      	adds	r2, r3, #2
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005584:	b29b      	uxth	r3, r3
 8005586:	3b01      	subs	r3, #1
 8005588:	b29a      	uxth	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800558e:	e018      	b.n	80055c2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005590:	f7fd ff34 	bl	80033fc <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d803      	bhi.n	80055a8 <HAL_SPI_Receive+0x1d2>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a6:	d102      	bne.n	80055ae <HAL_SPI_Receive+0x1d8>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d109      	bne.n	80055c2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e01e      	b.n	8005600 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1c6      	bne.n	800555a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	6839      	ldr	r1, [r7, #0]
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 fa4b 	bl	8005a6c <SPI_EndRxTransaction>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2220      	movs	r2, #32
 80055e0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80055fe:	2300      	movs	r3, #0
  }
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08a      	sub	sp, #40	; 0x28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005616:	2301      	movs	r3, #1
 8005618:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800561a:	f7fd feef 	bl	80033fc <HAL_GetTick>
 800561e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005626:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800562e:	887b      	ldrh	r3, [r7, #2]
 8005630:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005632:	7ffb      	ldrb	r3, [r7, #31]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d00c      	beq.n	8005652 <HAL_SPI_TransmitReceive+0x4a>
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800563e:	d106      	bne.n	800564e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d102      	bne.n	800564e <HAL_SPI_TransmitReceive+0x46>
 8005648:	7ffb      	ldrb	r3, [r7, #31]
 800564a:	2b04      	cmp	r3, #4
 800564c:	d001      	beq.n	8005652 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800564e:	2302      	movs	r3, #2
 8005650:	e17f      	b.n	8005952 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d005      	beq.n	8005664 <HAL_SPI_TransmitReceive+0x5c>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_SPI_TransmitReceive+0x5c>
 800565e:	887b      	ldrh	r3, [r7, #2]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e174      	b.n	8005952 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <HAL_SPI_TransmitReceive+0x6e>
 8005672:	2302      	movs	r3, #2
 8005674:	e16d      	b.n	8005952 <HAL_SPI_TransmitReceive+0x34a>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b04      	cmp	r3, #4
 8005688:	d003      	beq.n	8005692 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2205      	movs	r2, #5
 800568e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	887a      	ldrh	r2, [r7, #2]
 80056a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	887a      	ldrh	r2, [r7, #2]
 80056a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	887a      	ldrh	r2, [r7, #2]
 80056b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	887a      	ldrh	r2, [r7, #2]
 80056ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d007      	beq.n	80056e6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ee:	d17e      	bne.n	80057ee <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <HAL_SPI_TransmitReceive+0xf6>
 80056f8:	8afb      	ldrh	r3, [r7, #22]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d16c      	bne.n	80057d8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	881a      	ldrh	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	1c9a      	adds	r2, r3, #2
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005722:	e059      	b.n	80057d8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b02      	cmp	r3, #2
 8005730:	d11b      	bne.n	800576a <HAL_SPI_TransmitReceive+0x162>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d016      	beq.n	800576a <HAL_SPI_TransmitReceive+0x162>
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	2b01      	cmp	r3, #1
 8005740:	d113      	bne.n	800576a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005746:	881a      	ldrh	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005752:	1c9a      	adds	r2, r3, #2
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b01      	cmp	r3, #1
 8005776:	d119      	bne.n	80057ac <HAL_SPI_TransmitReceive+0x1a4>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577c:	b29b      	uxth	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d014      	beq.n	80057ac <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	b292      	uxth	r2, r2
 800578e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	1c9a      	adds	r2, r3, #2
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057a8:	2301      	movs	r3, #1
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80057ac:	f7fd fe26 	bl	80033fc <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d80d      	bhi.n	80057d8 <HAL_SPI_TransmitReceive+0x1d0>
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c2:	d009      	beq.n	80057d8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e0bc      	b.n	8005952 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1a0      	bne.n	8005724 <HAL_SPI_TransmitReceive+0x11c>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d19b      	bne.n	8005724 <HAL_SPI_TransmitReceive+0x11c>
 80057ec:	e082      	b.n	80058f4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <HAL_SPI_TransmitReceive+0x1f4>
 80057f6:	8afb      	ldrh	r3, [r7, #22]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d171      	bne.n	80058e0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	330c      	adds	r3, #12
 8005806:	7812      	ldrb	r2, [r2, #0]
 8005808:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005822:	e05d      	b.n	80058e0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b02      	cmp	r3, #2
 8005830:	d11c      	bne.n	800586c <HAL_SPI_TransmitReceive+0x264>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005836:	b29b      	uxth	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d017      	beq.n	800586c <HAL_SPI_TransmitReceive+0x264>
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	2b01      	cmp	r3, #1
 8005840:	d114      	bne.n	800586c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	330c      	adds	r3, #12
 800584c:	7812      	ldrb	r2, [r2, #0]
 800584e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800585e:	b29b      	uxth	r3, r3
 8005860:	3b01      	subs	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005868:	2300      	movs	r3, #0
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b01      	cmp	r3, #1
 8005878:	d119      	bne.n	80058ae <HAL_SPI_TransmitReceive+0x2a6>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d014      	beq.n	80058ae <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058aa:	2301      	movs	r3, #1
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80058ae:	f7fd fda5 	bl	80033fc <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d803      	bhi.n	80058c6 <HAL_SPI_TransmitReceive+0x2be>
 80058be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c4:	d102      	bne.n	80058cc <HAL_SPI_TransmitReceive+0x2c4>
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d109      	bne.n	80058e0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e038      	b.n	8005952 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d19c      	bne.n	8005824 <HAL_SPI_TransmitReceive+0x21c>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d197      	bne.n	8005824 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058f4:	6a3a      	ldr	r2, [r7, #32]
 80058f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f91d 	bl	8005b38 <SPI_EndRxTxTransaction>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d008      	beq.n	8005916 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2220      	movs	r2, #32
 8005908:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e01d      	b.n	8005952 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10a      	bne.n	8005934 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800591e:	2300      	movs	r3, #0
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	613b      	str	r3, [r7, #16]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	613b      	str	r3, [r7, #16]
 8005932:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005950:	2300      	movs	r3, #0
  }
}
 8005952:	4618      	mov	r0, r3
 8005954:	3728      	adds	r7, #40	; 0x28
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	4613      	mov	r3, r2
 800596a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800596c:	f7fd fd46 	bl	80033fc <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	4413      	add	r3, r2
 800597a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800597c:	f7fd fd3e 	bl	80033fc <HAL_GetTick>
 8005980:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005982:	4b39      	ldr	r3, [pc, #228]	; (8005a68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	015b      	lsls	r3, r3, #5
 8005988:	0d1b      	lsrs	r3, r3, #20
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	fb02 f303 	mul.w	r3, r2, r3
 8005990:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005992:	e054      	b.n	8005a3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599a:	d050      	beq.n	8005a3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800599c:	f7fd fd2e 	bl	80033fc <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d902      	bls.n	80059b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d13d      	bne.n	8005a2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059ca:	d111      	bne.n	80059f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d4:	d004      	beq.n	80059e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059de:	d107      	bne.n	80059f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f8:	d10f      	bne.n	8005a1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e017      	b.n	8005a5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4013      	ands	r3, r2
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	bf0c      	ite	eq
 8005a4e:	2301      	moveq	r3, #1
 8005a50:	2300      	movne	r3, #0
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	461a      	mov	r2, r3
 8005a56:	79fb      	ldrb	r3, [r7, #7]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d19b      	bne.n	8005994 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3720      	adds	r7, #32
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000224 	.word	0x20000224

08005a6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a80:	d111      	bne.n	8005aa6 <SPI_EndRxTransaction+0x3a>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a8a:	d004      	beq.n	8005a96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a94:	d107      	bne.n	8005aa6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aae:	d12a      	bne.n	8005b06 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab8:	d012      	beq.n	8005ae0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2180      	movs	r1, #128	; 0x80
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f7ff ff49 	bl	800595c <SPI_WaitFlagStateUntilTimeout>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d02d      	beq.n	8005b2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad4:	f043 0220 	orr.w	r2, r3, #32
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e026      	b.n	8005b2e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2101      	movs	r1, #1
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f7ff ff36 	bl	800595c <SPI_WaitFlagStateUntilTimeout>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d01a      	beq.n	8005b2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afa:	f043 0220 	orr.w	r2, r3, #32
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e013      	b.n	8005b2e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	2101      	movs	r1, #1
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f7ff ff23 	bl	800595c <SPI_WaitFlagStateUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d007      	beq.n	8005b2c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b20:	f043 0220 	orr.w	r2, r3, #32
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e000      	b.n	8005b2e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af02      	add	r7, sp, #8
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	2102      	movs	r1, #2
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f7ff ff04 	bl	800595c <SPI_WaitFlagStateUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5e:	f043 0220 	orr.w	r2, r3, #32
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e032      	b.n	8005bd0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b6a:	4b1b      	ldr	r3, [pc, #108]	; (8005bd8 <SPI_EndRxTxTransaction+0xa0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a1b      	ldr	r2, [pc, #108]	; (8005bdc <SPI_EndRxTxTransaction+0xa4>)
 8005b70:	fba2 2303 	umull	r2, r3, r2, r3
 8005b74:	0d5b      	lsrs	r3, r3, #21
 8005b76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b7a:	fb02 f303 	mul.w	r3, r2, r3
 8005b7e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b88:	d112      	bne.n	8005bb0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	2200      	movs	r2, #0
 8005b92:	2180      	movs	r1, #128	; 0x80
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f7ff fee1 	bl	800595c <SPI_WaitFlagStateUntilTimeout>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d016      	beq.n	8005bce <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba4:	f043 0220 	orr.w	r2, r3, #32
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e00f      	b.n	8005bd0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc6:	2b80      	cmp	r3, #128	; 0x80
 8005bc8:	d0f2      	beq.n	8005bb0 <SPI_EndRxTxTransaction+0x78>
 8005bca:	e000      	b.n	8005bce <SPI_EndRxTxTransaction+0x96>
        break;
 8005bcc:	bf00      	nop
  }

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	20000224 	.word	0x20000224
 8005bdc:	165e9f81 	.word	0x165e9f81

08005be0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e038      	b.n	8005c68 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f7fb fd58 	bl	80016c0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3308      	adds	r3, #8
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	f001 fcf4 	bl	8007608 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	f001 fd56 	bl	80076dc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6858      	ldr	r0, [r3, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	f001 fd83 	bl	8007748 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	6892      	ldr	r2, [r2, #8]
 8005c4a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	6892      	ldr	r2, [r2, #8]
 8005c56:	f041 0101 	orr.w	r1, r1, #1
 8005c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e041      	b.n	8005d06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d106      	bne.n	8005c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fd f960 	bl	8002f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4619      	mov	r1, r3
 8005cae:	4610      	mov	r0, r2
 8005cb0:	f000 fa7e 	bl	80061b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d001      	beq.n	8005d28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e04e      	b.n	8005dc6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0201 	orr.w	r2, r2, #1
 8005d3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a23      	ldr	r2, [pc, #140]	; (8005dd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d022      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x80>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d52:	d01d      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x80>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a1f      	ldr	r2, [pc, #124]	; (8005dd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d018      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x80>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a1e      	ldr	r2, [pc, #120]	; (8005ddc <HAL_TIM_Base_Start_IT+0xcc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d013      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x80>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1c      	ldr	r2, [pc, #112]	; (8005de0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d00e      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x80>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a1b      	ldr	r2, [pc, #108]	; (8005de4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d009      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x80>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a19      	ldr	r2, [pc, #100]	; (8005de8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d004      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x80>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a18      	ldr	r2, [pc, #96]	; (8005dec <HAL_TIM_Base_Start_IT+0xdc>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d111      	bne.n	8005db4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b06      	cmp	r3, #6
 8005da0:	d010      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0201 	orr.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db2:	e007      	b.n	8005dc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0201 	orr.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40010000 	.word	0x40010000
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800
 8005de0:	40000c00 	.word	0x40000c00
 8005de4:	40010400 	.word	0x40010400
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40001800 	.word	0x40001800

08005df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d020      	beq.n	8005e54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01b      	beq.n	8005e54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f06f 0202 	mvn.w	r2, #2
 8005e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f999 	bl	8006172 <HAL_TIM_IC_CaptureCallback>
 8005e40:	e005      	b.n	8005e4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f98b 	bl	800615e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f99c 	bl	8006186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f003 0304 	and.w	r3, r3, #4
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d020      	beq.n	8005ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f003 0304 	and.w	r3, r3, #4
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01b      	beq.n	8005ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0204 	mvn.w	r2, #4
 8005e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2202      	movs	r2, #2
 8005e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f973 	bl	8006172 <HAL_TIM_IC_CaptureCallback>
 8005e8c:	e005      	b.n	8005e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f965 	bl	800615e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f976 	bl	8006186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d020      	beq.n	8005eec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f003 0308 	and.w	r3, r3, #8
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d01b      	beq.n	8005eec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0208 	mvn.w	r2, #8
 8005ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2204      	movs	r2, #4
 8005ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f94d 	bl	8006172 <HAL_TIM_IC_CaptureCallback>
 8005ed8:	e005      	b.n	8005ee6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f93f 	bl	800615e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f950 	bl	8006186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d020      	beq.n	8005f38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f003 0310 	and.w	r3, r3, #16
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01b      	beq.n	8005f38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f06f 0210 	mvn.w	r2, #16
 8005f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f927 	bl	8006172 <HAL_TIM_IC_CaptureCallback>
 8005f24:	e005      	b.n	8005f32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f919 	bl	800615e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f92a 	bl	8006186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00c      	beq.n	8005f5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f06f 0201 	mvn.w	r2, #1
 8005f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7fc f93e 	bl	80021d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00c      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d007      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fae4 	bl	8006548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00c      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d007      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f8fb 	bl	800619a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00c      	beq.n	8005fc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f003 0320 	and.w	r3, r3, #32
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d007      	beq.n	8005fc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0220 	mvn.w	r2, #32
 8005fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fab6 	bl	8006534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fc8:	bf00      	nop
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d101      	bne.n	8005fec <HAL_TIM_ConfigClockSource+0x1c>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e0b4      	b.n	8006156 <HAL_TIM_ConfigClockSource+0x186>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800600a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006012:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006024:	d03e      	beq.n	80060a4 <HAL_TIM_ConfigClockSource+0xd4>
 8006026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800602a:	f200 8087 	bhi.w	800613c <HAL_TIM_ConfigClockSource+0x16c>
 800602e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006032:	f000 8086 	beq.w	8006142 <HAL_TIM_ConfigClockSource+0x172>
 8006036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800603a:	d87f      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x16c>
 800603c:	2b70      	cmp	r3, #112	; 0x70
 800603e:	d01a      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0xa6>
 8006040:	2b70      	cmp	r3, #112	; 0x70
 8006042:	d87b      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x16c>
 8006044:	2b60      	cmp	r3, #96	; 0x60
 8006046:	d050      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x11a>
 8006048:	2b60      	cmp	r3, #96	; 0x60
 800604a:	d877      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x16c>
 800604c:	2b50      	cmp	r3, #80	; 0x50
 800604e:	d03c      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0xfa>
 8006050:	2b50      	cmp	r3, #80	; 0x50
 8006052:	d873      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x16c>
 8006054:	2b40      	cmp	r3, #64	; 0x40
 8006056:	d058      	beq.n	800610a <HAL_TIM_ConfigClockSource+0x13a>
 8006058:	2b40      	cmp	r3, #64	; 0x40
 800605a:	d86f      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x16c>
 800605c:	2b30      	cmp	r3, #48	; 0x30
 800605e:	d064      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x15a>
 8006060:	2b30      	cmp	r3, #48	; 0x30
 8006062:	d86b      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x16c>
 8006064:	2b20      	cmp	r3, #32
 8006066:	d060      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x15a>
 8006068:	2b20      	cmp	r3, #32
 800606a:	d867      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x16c>
 800606c:	2b00      	cmp	r3, #0
 800606e:	d05c      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x15a>
 8006070:	2b10      	cmp	r3, #16
 8006072:	d05a      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x15a>
 8006074:	e062      	b.n	800613c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006086:	f000 f9b9 	bl	80063fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006098:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	609a      	str	r2, [r3, #8]
      break;
 80060a2:	e04f      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060b4:	f000 f9a2 	bl	80063fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689a      	ldr	r2, [r3, #8]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060c6:	609a      	str	r2, [r3, #8]
      break;
 80060c8:	e03c      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060d6:	461a      	mov	r2, r3
 80060d8:	f000 f916 	bl	8006308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2150      	movs	r1, #80	; 0x50
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 f96f 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 80060e8:	e02c      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060f6:	461a      	mov	r2, r3
 80060f8:	f000 f935 	bl	8006366 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2160      	movs	r1, #96	; 0x60
 8006102:	4618      	mov	r0, r3
 8006104:	f000 f95f 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 8006108:	e01c      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006116:	461a      	mov	r2, r3
 8006118:	f000 f8f6 	bl	8006308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2140      	movs	r1, #64	; 0x40
 8006122:	4618      	mov	r0, r3
 8006124:	f000 f94f 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 8006128:	e00c      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4619      	mov	r1, r3
 8006134:	4610      	mov	r0, r2
 8006136:	f000 f946 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 800613a:	e003      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	73fb      	strb	r3, [r7, #15]
      break;
 8006140:	e000      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006142:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006154:	7bfb      	ldrb	r3, [r7, #15]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800615e:	b480      	push	{r7}
 8006160:	b083      	sub	sp, #12
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006166:	bf00      	nop
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800617a:	bf00      	nop
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800618e:	bf00      	nop
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
	...

080061b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a46      	ldr	r2, [pc, #280]	; (80062dc <TIM_Base_SetConfig+0x12c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d013      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ce:	d00f      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a43      	ldr	r2, [pc, #268]	; (80062e0 <TIM_Base_SetConfig+0x130>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00b      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a42      	ldr	r2, [pc, #264]	; (80062e4 <TIM_Base_SetConfig+0x134>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d007      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a41      	ldr	r2, [pc, #260]	; (80062e8 <TIM_Base_SetConfig+0x138>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d003      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a40      	ldr	r2, [pc, #256]	; (80062ec <TIM_Base_SetConfig+0x13c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d108      	bne.n	8006202 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a35      	ldr	r2, [pc, #212]	; (80062dc <TIM_Base_SetConfig+0x12c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d02b      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006210:	d027      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a32      	ldr	r2, [pc, #200]	; (80062e0 <TIM_Base_SetConfig+0x130>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d023      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a31      	ldr	r2, [pc, #196]	; (80062e4 <TIM_Base_SetConfig+0x134>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d01f      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a30      	ldr	r2, [pc, #192]	; (80062e8 <TIM_Base_SetConfig+0x138>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d01b      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a2f      	ldr	r2, [pc, #188]	; (80062ec <TIM_Base_SetConfig+0x13c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d017      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a2e      	ldr	r2, [pc, #184]	; (80062f0 <TIM_Base_SetConfig+0x140>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d013      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a2d      	ldr	r2, [pc, #180]	; (80062f4 <TIM_Base_SetConfig+0x144>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00f      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a2c      	ldr	r2, [pc, #176]	; (80062f8 <TIM_Base_SetConfig+0x148>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00b      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a2b      	ldr	r2, [pc, #172]	; (80062fc <TIM_Base_SetConfig+0x14c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d007      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a2a      	ldr	r2, [pc, #168]	; (8006300 <TIM_Base_SetConfig+0x150>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d003      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a29      	ldr	r2, [pc, #164]	; (8006304 <TIM_Base_SetConfig+0x154>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d108      	bne.n	8006274 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a10      	ldr	r2, [pc, #64]	; (80062dc <TIM_Base_SetConfig+0x12c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_Base_SetConfig+0xf8>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a12      	ldr	r2, [pc, #72]	; (80062ec <TIM_Base_SetConfig+0x13c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d103      	bne.n	80062b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d105      	bne.n	80062ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f023 0201 	bic.w	r2, r3, #1
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	611a      	str	r2, [r3, #16]
  }
}
 80062ce:	bf00      	nop
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	40010000 	.word	0x40010000
 80062e0:	40000400 	.word	0x40000400
 80062e4:	40000800 	.word	0x40000800
 80062e8:	40000c00 	.word	0x40000c00
 80062ec:	40010400 	.word	0x40010400
 80062f0:	40014000 	.word	0x40014000
 80062f4:	40014400 	.word	0x40014400
 80062f8:	40014800 	.word	0x40014800
 80062fc:	40001800 	.word	0x40001800
 8006300:	40001c00 	.word	0x40001c00
 8006304:	40002000 	.word	0x40002000

08006308 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	f023 0201 	bic.w	r2, r3, #1
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f023 030a 	bic.w	r3, r3, #10
 8006344:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	621a      	str	r2, [r3, #32]
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006366:	b480      	push	{r7}
 8006368:	b087      	sub	sp, #28
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	f023 0210 	bic.w	r2, r3, #16
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006390:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	031b      	lsls	r3, r3, #12
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	621a      	str	r2, [r3, #32]
}
 80063ba:	bf00      	nop
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b085      	sub	sp, #20
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f043 0307 	orr.w	r3, r3, #7
 80063e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	609a      	str	r2, [r3, #8]
}
 80063f0:	bf00      	nop
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006416:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	021a      	lsls	r2, r3, #8
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	431a      	orrs	r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4313      	orrs	r3, r2
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	609a      	str	r2, [r3, #8]
}
 8006430:	bf00      	nop
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006450:	2302      	movs	r3, #2
 8006452:	e05a      	b.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2202      	movs	r2, #2
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a21      	ldr	r2, [pc, #132]	; (8006518 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d022      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a0:	d01d      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a1d      	ldr	r2, [pc, #116]	; (800651c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d018      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a1b      	ldr	r2, [pc, #108]	; (8006520 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d013      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a1a      	ldr	r2, [pc, #104]	; (8006524 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00e      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a18      	ldr	r2, [pc, #96]	; (8006528 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d009      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a17      	ldr	r2, [pc, #92]	; (800652c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d004      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a15      	ldr	r2, [pc, #84]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d10c      	bne.n	80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	40010000 	.word	0x40010000
 800651c:	40000400 	.word	0x40000400
 8006520:	40000800 	.word	0x40000800
 8006524:	40000c00 	.word	0x40000c00
 8006528:	40010400 	.word	0x40010400
 800652c:	40014000 	.word	0x40014000
 8006530:	40001800 	.word	0x40001800

08006534 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e042      	b.n	80065f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d106      	bne.n	8006588 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7fc fdee 	bl	8003164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2224      	movs	r2, #36	; 0x24
 800658c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800659e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fdbd 	bl	8007120 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691a      	ldr	r2, [r3, #16]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695a      	ldr	r2, [r3, #20]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68da      	ldr	r2, [r3, #12]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2220      	movs	r2, #32
 80065e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b08a      	sub	sp, #40	; 0x28
 8006600:	af02      	add	r7, sp, #8
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	603b      	str	r3, [r7, #0]
 8006608:	4613      	mov	r3, r2
 800660a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b20      	cmp	r3, #32
 800661a:	d175      	bne.n	8006708 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <HAL_UART_Transmit+0x2c>
 8006622:	88fb      	ldrh	r3, [r7, #6]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e06e      	b.n	800670a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2221      	movs	r2, #33	; 0x21
 8006636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800663a:	f7fc fedf 	bl	80033fc <HAL_GetTick>
 800663e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	88fa      	ldrh	r2, [r7, #6]
 8006644:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	88fa      	ldrh	r2, [r7, #6]
 800664a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006654:	d108      	bne.n	8006668 <HAL_UART_Transmit+0x6c>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d104      	bne.n	8006668 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800665e:	2300      	movs	r3, #0
 8006660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	61bb      	str	r3, [r7, #24]
 8006666:	e003      	b.n	8006670 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800666c:	2300      	movs	r3, #0
 800666e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006670:	e02e      	b.n	80066d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2200      	movs	r2, #0
 800667a:	2180      	movs	r1, #128	; 0x80
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 fb1f 	bl	8006cc0 <UART_WaitOnFlagUntilTimeout>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d005      	beq.n	8006694 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e03a      	b.n	800670a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10b      	bne.n	80066b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	3302      	adds	r3, #2
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	e007      	b.n	80066c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	781a      	ldrb	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	3301      	adds	r3, #1
 80066c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1cb      	bne.n	8006672 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2200      	movs	r2, #0
 80066e2:	2140      	movs	r1, #64	; 0x40
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 faeb 	bl	8006cc0 <UART_WaitOnFlagUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e006      	b.n	800670a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2220      	movs	r2, #32
 8006700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	e000      	b.n	800670a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006708:	2302      	movs	r3, #2
  }
}
 800670a:	4618      	mov	r0, r3
 800670c:	3720      	adds	r7, #32
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	60b9      	str	r1, [r7, #8]
 800671c:	4613      	mov	r3, r2
 800671e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b20      	cmp	r3, #32
 800672a:	d112      	bne.n	8006752 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <HAL_UART_Receive_IT+0x26>
 8006732:	88fb      	ldrh	r3, [r7, #6]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e00b      	b.n	8006754 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	461a      	mov	r2, r3
 8006746:	68b9      	ldr	r1, [r7, #8]
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 fb12 	bl	8006d72 <UART_Start_Receive_IT>
 800674e:	4603      	mov	r3, r0
 8006750:	e000      	b.n	8006754 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006752:	2302      	movs	r3, #2
  }
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b0ba      	sub	sp, #232	; 0xe8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006782:	2300      	movs	r3, #0
 8006784:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006788:	2300      	movs	r3, #0
 800678a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800678e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006792:	f003 030f 	and.w	r3, r3, #15
 8006796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800679a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10f      	bne.n	80067c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a6:	f003 0320 	and.w	r3, r3, #32
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d009      	beq.n	80067c2 <HAL_UART_IRQHandler+0x66>
 80067ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fbf2 	bl	8006fa4 <UART_Receive_IT>
      return;
 80067c0:	e25b      	b.n	8006c7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 80de 	beq.w	8006988 <HAL_UART_IRQHandler+0x22c>
 80067cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d106      	bne.n	80067e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 80d1 	beq.w	8006988 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00b      	beq.n	800680a <HAL_UART_IRQHandler+0xae>
 80067f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d005      	beq.n	800680a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006802:	f043 0201 	orr.w	r2, r3, #1
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800680a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680e:	f003 0304 	and.w	r3, r3, #4
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00b      	beq.n	800682e <HAL_UART_IRQHandler+0xd2>
 8006816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d005      	beq.n	800682e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006826:	f043 0202 	orr.w	r2, r3, #2
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00b      	beq.n	8006852 <HAL_UART_IRQHandler+0xf6>
 800683a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d005      	beq.n	8006852 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684a:	f043 0204 	orr.w	r2, r3, #4
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d011      	beq.n	8006882 <HAL_UART_IRQHandler+0x126>
 800685e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006862:	f003 0320 	and.w	r3, r3, #32
 8006866:	2b00      	cmp	r3, #0
 8006868:	d105      	bne.n	8006876 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800686a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687a:	f043 0208 	orr.w	r2, r3, #8
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 81f2 	beq.w	8006c70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800688c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006890:	f003 0320 	and.w	r3, r3, #32
 8006894:	2b00      	cmp	r3, #0
 8006896:	d008      	beq.n	80068aa <HAL_UART_IRQHandler+0x14e>
 8006898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fb7d 	bl	8006fa4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b4:	2b40      	cmp	r3, #64	; 0x40
 80068b6:	bf0c      	ite	eq
 80068b8:	2301      	moveq	r3, #1
 80068ba:	2300      	movne	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d103      	bne.n	80068d6 <HAL_UART_IRQHandler+0x17a>
 80068ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d04f      	beq.n	8006976 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fa85 	bl	8006de6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e6:	2b40      	cmp	r3, #64	; 0x40
 80068e8:	d141      	bne.n	800696e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3314      	adds	r3, #20
 80068f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006900:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3314      	adds	r3, #20
 8006912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006916:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800691a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800692e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1d9      	bne.n	80068ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d013      	beq.n	8006966 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006942:	4a7e      	ldr	r2, [pc, #504]	; (8006b3c <HAL_UART_IRQHandler+0x3e0>)
 8006944:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694a:	4618      	mov	r0, r3
 800694c:	f7fd fc20 	bl	8004190 <HAL_DMA_Abort_IT>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d016      	beq.n	8006984 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006960:	4610      	mov	r0, r2
 8006962:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006964:	e00e      	b.n	8006984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f994 	bl	8006c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800696c:	e00a      	b.n	8006984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f990 	bl	8006c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006974:	e006      	b.n	8006984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f98c 	bl	8006c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006982:	e175      	b.n	8006c70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006984:	bf00      	nop
    return;
 8006986:	e173      	b.n	8006c70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698c:	2b01      	cmp	r3, #1
 800698e:	f040 814f 	bne.w	8006c30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006996:	f003 0310 	and.w	r3, r3, #16
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 8148 	beq.w	8006c30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80069a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a4:	f003 0310 	and.w	r3, r3, #16
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 8141 	beq.w	8006c30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069ae:	2300      	movs	r3, #0
 80069b0:	60bb      	str	r3, [r7, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	60bb      	str	r3, [r7, #8]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	60bb      	str	r3, [r7, #8]
 80069c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ce:	2b40      	cmp	r3, #64	; 0x40
 80069d0:	f040 80b6 	bne.w	8006b40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 8145 	beq.w	8006c74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069f2:	429a      	cmp	r2, r3
 80069f4:	f080 813e 	bcs.w	8006c74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a0a:	f000 8088 	beq.w	8006b1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	330c      	adds	r3, #12
 8006a14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	330c      	adds	r3, #12
 8006a36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1d9      	bne.n	8006a0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3314      	adds	r3, #20
 8006a60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a6c:	f023 0301 	bic.w	r3, r3, #1
 8006a70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	3314      	adds	r3, #20
 8006a7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1e1      	bne.n	8006a5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3314      	adds	r3, #20
 8006a9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006aa0:	e853 3f00 	ldrex	r3, [r3]
 8006aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3314      	adds	r3, #20
 8006ab6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006aba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006abc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ac0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ac2:	e841 2300 	strex	r3, r2, [r1]
 8006ac6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1e3      	bne.n	8006a96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
 8006aea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aee:	f023 0310 	bic.w	r3, r3, #16
 8006af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	330c      	adds	r3, #12
 8006afc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b00:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b08:	e841 2300 	strex	r3, r2, [r1]
 8006b0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e3      	bne.n	8006adc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fd fac9 	bl	80040b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2202      	movs	r2, #2
 8006b22:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f8b7 	bl	8006ca8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b3a:	e09b      	b.n	8006c74 <HAL_UART_IRQHandler+0x518>
 8006b3c:	08006ead 	.word	0x08006ead
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 808e 	beq.w	8006c78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006b5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 8089 	beq.w	8006c78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	330c      	adds	r3, #12
 8006b6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	330c      	adds	r3, #12
 8006b86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b8a:	647a      	str	r2, [r7, #68]	; 0x44
 8006b8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e3      	bne.n	8006b66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3314      	adds	r3, #20
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	623b      	str	r3, [r7, #32]
   return(result);
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	f023 0301 	bic.w	r3, r3, #1
 8006bb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3314      	adds	r3, #20
 8006bbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006bc2:	633a      	str	r2, [r7, #48]	; 0x30
 8006bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e3      	bne.n	8006b9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	330c      	adds	r3, #12
 8006bea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	e853 3f00 	ldrex	r3, [r3]
 8006bf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0310 	bic.w	r3, r3, #16
 8006bfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	330c      	adds	r3, #12
 8006c04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c08:	61fa      	str	r2, [r7, #28]
 8006c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0c:	69b9      	ldr	r1, [r7, #24]
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	e841 2300 	strex	r3, r2, [r1]
 8006c14:	617b      	str	r3, [r7, #20]
   return(result);
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e3      	bne.n	8006be4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f83d 	bl	8006ca8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c2e:	e023      	b.n	8006c78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d009      	beq.n	8006c50 <HAL_UART_IRQHandler+0x4f4>
 8006c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f943 	bl	8006ed4 <UART_Transmit_IT>
    return;
 8006c4e:	e014      	b.n	8006c7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00e      	beq.n	8006c7a <HAL_UART_IRQHandler+0x51e>
 8006c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d008      	beq.n	8006c7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f983 	bl	8006f74 <UART_EndTransmit_IT>
    return;
 8006c6e:	e004      	b.n	8006c7a <HAL_UART_IRQHandler+0x51e>
    return;
 8006c70:	bf00      	nop
 8006c72:	e002      	b.n	8006c7a <HAL_UART_IRQHandler+0x51e>
      return;
 8006c74:	bf00      	nop
 8006c76:	e000      	b.n	8006c7a <HAL_UART_IRQHandler+0x51e>
      return;
 8006c78:	bf00      	nop
  }
}
 8006c7a:	37e8      	adds	r7, #232	; 0xe8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	603b      	str	r3, [r7, #0]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cd0:	e03b      	b.n	8006d4a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd8:	d037      	beq.n	8006d4a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cda:	f7fc fb8f 	bl	80033fc <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	6a3a      	ldr	r2, [r7, #32]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d302      	bcc.n	8006cf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e03a      	b.n	8006d6a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	f003 0304 	and.w	r3, r3, #4
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d023      	beq.n	8006d4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b80      	cmp	r3, #128	; 0x80
 8006d06:	d020      	beq.n	8006d4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2b40      	cmp	r3, #64	; 0x40
 8006d0c:	d01d      	beq.n	8006d4a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0308 	and.w	r3, r3, #8
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d116      	bne.n	8006d4a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	617b      	str	r3, [r7, #20]
 8006d30:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 f857 	bl	8006de6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2208      	movs	r2, #8
 8006d3c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e00f      	b.n	8006d6a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	4013      	ands	r3, r2
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	bf0c      	ite	eq
 8006d5a:	2301      	moveq	r3, #1
 8006d5c:	2300      	movne	r3, #0
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	461a      	mov	r2, r3
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d0b4      	beq.n	8006cd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b085      	sub	sp, #20
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	88fa      	ldrh	r2, [r7, #6]
 8006d8a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	88fa      	ldrh	r2, [r7, #6]
 8006d90:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2222      	movs	r2, #34	; 0x22
 8006d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d007      	beq.n	8006db8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68da      	ldr	r2, [r3, #12]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006db6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	695a      	ldr	r2, [r3, #20]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0201 	orr.w	r2, r2, #1
 8006dc6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0220 	orr.w	r2, r2, #32
 8006dd6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b095      	sub	sp, #84	; 0x54
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	330c      	adds	r3, #12
 8006df4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df8:	e853 3f00 	ldrex	r3, [r3]
 8006dfc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	330c      	adds	r3, #12
 8006e0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e0e:	643a      	str	r2, [r7, #64]	; 0x40
 8006e10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e16:	e841 2300 	strex	r3, r2, [r1]
 8006e1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1e5      	bne.n	8006dee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3314      	adds	r3, #20
 8006e28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	e853 3f00 	ldrex	r3, [r3]
 8006e30:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	f023 0301 	bic.w	r3, r3, #1
 8006e38:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3314      	adds	r3, #20
 8006e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e5      	bne.n	8006e22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d119      	bne.n	8006e92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	330c      	adds	r3, #12
 8006e64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f023 0310 	bic.w	r3, r3, #16
 8006e74:	647b      	str	r3, [r7, #68]	; 0x44
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	330c      	adds	r3, #12
 8006e7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e7e:	61ba      	str	r2, [r7, #24]
 8006e80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e82:	6979      	ldr	r1, [r7, #20]
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	e841 2300 	strex	r3, r2, [r1]
 8006e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1e5      	bne.n	8006e5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2220      	movs	r2, #32
 8006e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ea0:	bf00      	nop
 8006ea2:	3754      	adds	r7, #84	; 0x54
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f7ff fee4 	bl	8006c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ecc:	bf00      	nop
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b21      	cmp	r3, #33	; 0x21
 8006ee6:	d13e      	bne.n	8006f66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef0:	d114      	bne.n	8006f1c <UART_Transmit_IT+0x48>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d110      	bne.n	8006f1c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	1c9a      	adds	r2, r3, #2
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	621a      	str	r2, [r3, #32]
 8006f1a:	e008      	b.n	8006f2e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	1c59      	adds	r1, r3, #1
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	6211      	str	r1, [r2, #32]
 8006f26:	781a      	ldrb	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	3b01      	subs	r3, #1
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10f      	bne.n	8006f62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	e000      	b.n	8006f68 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f66:	2302      	movs	r3, #2
  }
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68da      	ldr	r2, [r3, #12]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7ff fe73 	bl	8006c80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08c      	sub	sp, #48	; 0x30
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b22      	cmp	r3, #34	; 0x22
 8006fb6:	f040 80ae 	bne.w	8007116 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc2:	d117      	bne.n	8006ff4 <UART_Receive_IT+0x50>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d113      	bne.n	8006ff4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fec:	1c9a      	adds	r2, r3, #2
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	629a      	str	r2, [r3, #40]	; 0x28
 8006ff2:	e026      	b.n	8007042 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007006:	d007      	beq.n	8007018 <UART_Receive_IT+0x74>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10a      	bne.n	8007026 <UART_Receive_IT+0x82>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d106      	bne.n	8007026 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	b2da      	uxtb	r2, r3
 8007020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007022:	701a      	strb	r2, [r3, #0]
 8007024:	e008      	b.n	8007038 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	b2db      	uxtb	r3, r3
 800702e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007032:	b2da      	uxtb	r2, r3
 8007034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007036:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703c:	1c5a      	adds	r2, r3, #1
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007046:	b29b      	uxth	r3, r3
 8007048:	3b01      	subs	r3, #1
 800704a:	b29b      	uxth	r3, r3
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	4619      	mov	r1, r3
 8007050:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007052:	2b00      	cmp	r3, #0
 8007054:	d15d      	bne.n	8007112 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0220 	bic.w	r2, r2, #32
 8007064:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007074:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	695a      	ldr	r2, [r3, #20]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 0201 	bic.w	r2, r2, #1
 8007084:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2220      	movs	r2, #32
 800708a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007098:	2b01      	cmp	r3, #1
 800709a:	d135      	bne.n	8007108 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	330c      	adds	r3, #12
 80070a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	e853 3f00 	ldrex	r3, [r3]
 80070b0:	613b      	str	r3, [r7, #16]
   return(result);
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f023 0310 	bic.w	r3, r3, #16
 80070b8:	627b      	str	r3, [r7, #36]	; 0x24
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	330c      	adds	r3, #12
 80070c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c2:	623a      	str	r2, [r7, #32]
 80070c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c6:	69f9      	ldr	r1, [r7, #28]
 80070c8:	6a3a      	ldr	r2, [r7, #32]
 80070ca:	e841 2300 	strex	r3, r2, [r1]
 80070ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1e5      	bne.n	80070a2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0310 	and.w	r3, r3, #16
 80070e0:	2b10      	cmp	r3, #16
 80070e2:	d10a      	bne.n	80070fa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070e4:	2300      	movs	r3, #0
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7ff fdd1 	bl	8006ca8 <HAL_UARTEx_RxEventCallback>
 8007106:	e002      	b.n	800710e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7fb f877 	bl	80021fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	e002      	b.n	8007118 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	e000      	b.n	8007118 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007116:	2302      	movs	r3, #2
  }
}
 8007118:	4618      	mov	r0, r3
 800711a:	3730      	adds	r7, #48	; 0x30
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007124:	b0c0      	sub	sp, #256	; 0x100
 8007126:	af00      	add	r7, sp, #0
 8007128:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800712c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800713c:	68d9      	ldr	r1, [r3, #12]
 800713e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	ea40 0301 	orr.w	r3, r0, r1
 8007148:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800714a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800714e:	689a      	ldr	r2, [r3, #8]
 8007150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	431a      	orrs	r2, r3
 8007158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	431a      	orrs	r2, r3
 8007160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	4313      	orrs	r3, r2
 8007168:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800716c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007178:	f021 010c 	bic.w	r1, r1, #12
 800717c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007186:	430b      	orrs	r3, r1
 8007188:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800718a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719a:	6999      	ldr	r1, [r3, #24]
 800719c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	ea40 0301 	orr.w	r3, r0, r1
 80071a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	4b8f      	ldr	r3, [pc, #572]	; (80073ec <UART_SetConfig+0x2cc>)
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d005      	beq.n	80071c0 <UART_SetConfig+0xa0>
 80071b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	4b8d      	ldr	r3, [pc, #564]	; (80073f0 <UART_SetConfig+0x2d0>)
 80071bc:	429a      	cmp	r2, r3
 80071be:	d104      	bne.n	80071ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071c0:	f7fe f86c 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 80071c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071c8:	e003      	b.n	80071d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071ca:	f7fe f853 	bl	8005274 <HAL_RCC_GetPCLK1Freq>
 80071ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d6:	69db      	ldr	r3, [r3, #28]
 80071d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071dc:	f040 810c 	bne.w	80073f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071e4:	2200      	movs	r2, #0
 80071e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80071f2:	4622      	mov	r2, r4
 80071f4:	462b      	mov	r3, r5
 80071f6:	1891      	adds	r1, r2, r2
 80071f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80071fa:	415b      	adcs	r3, r3
 80071fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007202:	4621      	mov	r1, r4
 8007204:	eb12 0801 	adds.w	r8, r2, r1
 8007208:	4629      	mov	r1, r5
 800720a:	eb43 0901 	adc.w	r9, r3, r1
 800720e:	f04f 0200 	mov.w	r2, #0
 8007212:	f04f 0300 	mov.w	r3, #0
 8007216:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800721a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800721e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007222:	4690      	mov	r8, r2
 8007224:	4699      	mov	r9, r3
 8007226:	4623      	mov	r3, r4
 8007228:	eb18 0303 	adds.w	r3, r8, r3
 800722c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007230:	462b      	mov	r3, r5
 8007232:	eb49 0303 	adc.w	r3, r9, r3
 8007236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800723a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007246:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800724a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800724e:	460b      	mov	r3, r1
 8007250:	18db      	adds	r3, r3, r3
 8007252:	653b      	str	r3, [r7, #80]	; 0x50
 8007254:	4613      	mov	r3, r2
 8007256:	eb42 0303 	adc.w	r3, r2, r3
 800725a:	657b      	str	r3, [r7, #84]	; 0x54
 800725c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007260:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007264:	f7f9 fc22 	bl	8000aac <__aeabi_uldivmod>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4b61      	ldr	r3, [pc, #388]	; (80073f4 <UART_SetConfig+0x2d4>)
 800726e:	fba3 2302 	umull	r2, r3, r3, r2
 8007272:	095b      	lsrs	r3, r3, #5
 8007274:	011c      	lsls	r4, r3, #4
 8007276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800727a:	2200      	movs	r2, #0
 800727c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007280:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007284:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007288:	4642      	mov	r2, r8
 800728a:	464b      	mov	r3, r9
 800728c:	1891      	adds	r1, r2, r2
 800728e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007290:	415b      	adcs	r3, r3
 8007292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007294:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007298:	4641      	mov	r1, r8
 800729a:	eb12 0a01 	adds.w	sl, r2, r1
 800729e:	4649      	mov	r1, r9
 80072a0:	eb43 0b01 	adc.w	fp, r3, r1
 80072a4:	f04f 0200 	mov.w	r2, #0
 80072a8:	f04f 0300 	mov.w	r3, #0
 80072ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072b8:	4692      	mov	sl, r2
 80072ba:	469b      	mov	fp, r3
 80072bc:	4643      	mov	r3, r8
 80072be:	eb1a 0303 	adds.w	r3, sl, r3
 80072c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072c6:	464b      	mov	r3, r9
 80072c8:	eb4b 0303 	adc.w	r3, fp, r3
 80072cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072e4:	460b      	mov	r3, r1
 80072e6:	18db      	adds	r3, r3, r3
 80072e8:	643b      	str	r3, [r7, #64]	; 0x40
 80072ea:	4613      	mov	r3, r2
 80072ec:	eb42 0303 	adc.w	r3, r2, r3
 80072f0:	647b      	str	r3, [r7, #68]	; 0x44
 80072f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80072fa:	f7f9 fbd7 	bl	8000aac <__aeabi_uldivmod>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	4611      	mov	r1, r2
 8007304:	4b3b      	ldr	r3, [pc, #236]	; (80073f4 <UART_SetConfig+0x2d4>)
 8007306:	fba3 2301 	umull	r2, r3, r3, r1
 800730a:	095b      	lsrs	r3, r3, #5
 800730c:	2264      	movs	r2, #100	; 0x64
 800730e:	fb02 f303 	mul.w	r3, r2, r3
 8007312:	1acb      	subs	r3, r1, r3
 8007314:	00db      	lsls	r3, r3, #3
 8007316:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800731a:	4b36      	ldr	r3, [pc, #216]	; (80073f4 <UART_SetConfig+0x2d4>)
 800731c:	fba3 2302 	umull	r2, r3, r3, r2
 8007320:	095b      	lsrs	r3, r3, #5
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007328:	441c      	add	r4, r3
 800732a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800732e:	2200      	movs	r2, #0
 8007330:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007334:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007338:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800733c:	4642      	mov	r2, r8
 800733e:	464b      	mov	r3, r9
 8007340:	1891      	adds	r1, r2, r2
 8007342:	63b9      	str	r1, [r7, #56]	; 0x38
 8007344:	415b      	adcs	r3, r3
 8007346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007348:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800734c:	4641      	mov	r1, r8
 800734e:	1851      	adds	r1, r2, r1
 8007350:	6339      	str	r1, [r7, #48]	; 0x30
 8007352:	4649      	mov	r1, r9
 8007354:	414b      	adcs	r3, r1
 8007356:	637b      	str	r3, [r7, #52]	; 0x34
 8007358:	f04f 0200 	mov.w	r2, #0
 800735c:	f04f 0300 	mov.w	r3, #0
 8007360:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007364:	4659      	mov	r1, fp
 8007366:	00cb      	lsls	r3, r1, #3
 8007368:	4651      	mov	r1, sl
 800736a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800736e:	4651      	mov	r1, sl
 8007370:	00ca      	lsls	r2, r1, #3
 8007372:	4610      	mov	r0, r2
 8007374:	4619      	mov	r1, r3
 8007376:	4603      	mov	r3, r0
 8007378:	4642      	mov	r2, r8
 800737a:	189b      	adds	r3, r3, r2
 800737c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007380:	464b      	mov	r3, r9
 8007382:	460a      	mov	r2, r1
 8007384:	eb42 0303 	adc.w	r3, r2, r3
 8007388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800738c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007398:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800739c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073a0:	460b      	mov	r3, r1
 80073a2:	18db      	adds	r3, r3, r3
 80073a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80073a6:	4613      	mov	r3, r2
 80073a8:	eb42 0303 	adc.w	r3, r2, r3
 80073ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80073b6:	f7f9 fb79 	bl	8000aac <__aeabi_uldivmod>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	4b0d      	ldr	r3, [pc, #52]	; (80073f4 <UART_SetConfig+0x2d4>)
 80073c0:	fba3 1302 	umull	r1, r3, r3, r2
 80073c4:	095b      	lsrs	r3, r3, #5
 80073c6:	2164      	movs	r1, #100	; 0x64
 80073c8:	fb01 f303 	mul.w	r3, r1, r3
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	3332      	adds	r3, #50	; 0x32
 80073d2:	4a08      	ldr	r2, [pc, #32]	; (80073f4 <UART_SetConfig+0x2d4>)
 80073d4:	fba2 2303 	umull	r2, r3, r2, r3
 80073d8:	095b      	lsrs	r3, r3, #5
 80073da:	f003 0207 	and.w	r2, r3, #7
 80073de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4422      	add	r2, r4
 80073e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073e8:	e106      	b.n	80075f8 <UART_SetConfig+0x4d8>
 80073ea:	bf00      	nop
 80073ec:	40011000 	.word	0x40011000
 80073f0:	40011400 	.word	0x40011400
 80073f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073fc:	2200      	movs	r2, #0
 80073fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007402:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007406:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800740a:	4642      	mov	r2, r8
 800740c:	464b      	mov	r3, r9
 800740e:	1891      	adds	r1, r2, r2
 8007410:	6239      	str	r1, [r7, #32]
 8007412:	415b      	adcs	r3, r3
 8007414:	627b      	str	r3, [r7, #36]	; 0x24
 8007416:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800741a:	4641      	mov	r1, r8
 800741c:	1854      	adds	r4, r2, r1
 800741e:	4649      	mov	r1, r9
 8007420:	eb43 0501 	adc.w	r5, r3, r1
 8007424:	f04f 0200 	mov.w	r2, #0
 8007428:	f04f 0300 	mov.w	r3, #0
 800742c:	00eb      	lsls	r3, r5, #3
 800742e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007432:	00e2      	lsls	r2, r4, #3
 8007434:	4614      	mov	r4, r2
 8007436:	461d      	mov	r5, r3
 8007438:	4643      	mov	r3, r8
 800743a:	18e3      	adds	r3, r4, r3
 800743c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007440:	464b      	mov	r3, r9
 8007442:	eb45 0303 	adc.w	r3, r5, r3
 8007446:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800744a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007456:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800745a:	f04f 0200 	mov.w	r2, #0
 800745e:	f04f 0300 	mov.w	r3, #0
 8007462:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007466:	4629      	mov	r1, r5
 8007468:	008b      	lsls	r3, r1, #2
 800746a:	4621      	mov	r1, r4
 800746c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007470:	4621      	mov	r1, r4
 8007472:	008a      	lsls	r2, r1, #2
 8007474:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007478:	f7f9 fb18 	bl	8000aac <__aeabi_uldivmod>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	4b60      	ldr	r3, [pc, #384]	; (8007604 <UART_SetConfig+0x4e4>)
 8007482:	fba3 2302 	umull	r2, r3, r3, r2
 8007486:	095b      	lsrs	r3, r3, #5
 8007488:	011c      	lsls	r4, r3, #4
 800748a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800748e:	2200      	movs	r2, #0
 8007490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007494:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007498:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800749c:	4642      	mov	r2, r8
 800749e:	464b      	mov	r3, r9
 80074a0:	1891      	adds	r1, r2, r2
 80074a2:	61b9      	str	r1, [r7, #24]
 80074a4:	415b      	adcs	r3, r3
 80074a6:	61fb      	str	r3, [r7, #28]
 80074a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074ac:	4641      	mov	r1, r8
 80074ae:	1851      	adds	r1, r2, r1
 80074b0:	6139      	str	r1, [r7, #16]
 80074b2:	4649      	mov	r1, r9
 80074b4:	414b      	adcs	r3, r1
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	f04f 0200 	mov.w	r2, #0
 80074bc:	f04f 0300 	mov.w	r3, #0
 80074c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074c4:	4659      	mov	r1, fp
 80074c6:	00cb      	lsls	r3, r1, #3
 80074c8:	4651      	mov	r1, sl
 80074ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074ce:	4651      	mov	r1, sl
 80074d0:	00ca      	lsls	r2, r1, #3
 80074d2:	4610      	mov	r0, r2
 80074d4:	4619      	mov	r1, r3
 80074d6:	4603      	mov	r3, r0
 80074d8:	4642      	mov	r2, r8
 80074da:	189b      	adds	r3, r3, r2
 80074dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074e0:	464b      	mov	r3, r9
 80074e2:	460a      	mov	r2, r1
 80074e4:	eb42 0303 	adc.w	r3, r2, r3
 80074e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80074f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80074f8:	f04f 0200 	mov.w	r2, #0
 80074fc:	f04f 0300 	mov.w	r3, #0
 8007500:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007504:	4649      	mov	r1, r9
 8007506:	008b      	lsls	r3, r1, #2
 8007508:	4641      	mov	r1, r8
 800750a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800750e:	4641      	mov	r1, r8
 8007510:	008a      	lsls	r2, r1, #2
 8007512:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007516:	f7f9 fac9 	bl	8000aac <__aeabi_uldivmod>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4611      	mov	r1, r2
 8007520:	4b38      	ldr	r3, [pc, #224]	; (8007604 <UART_SetConfig+0x4e4>)
 8007522:	fba3 2301 	umull	r2, r3, r3, r1
 8007526:	095b      	lsrs	r3, r3, #5
 8007528:	2264      	movs	r2, #100	; 0x64
 800752a:	fb02 f303 	mul.w	r3, r2, r3
 800752e:	1acb      	subs	r3, r1, r3
 8007530:	011b      	lsls	r3, r3, #4
 8007532:	3332      	adds	r3, #50	; 0x32
 8007534:	4a33      	ldr	r2, [pc, #204]	; (8007604 <UART_SetConfig+0x4e4>)
 8007536:	fba2 2303 	umull	r2, r3, r2, r3
 800753a:	095b      	lsrs	r3, r3, #5
 800753c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007540:	441c      	add	r4, r3
 8007542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007546:	2200      	movs	r2, #0
 8007548:	673b      	str	r3, [r7, #112]	; 0x70
 800754a:	677a      	str	r2, [r7, #116]	; 0x74
 800754c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007550:	4642      	mov	r2, r8
 8007552:	464b      	mov	r3, r9
 8007554:	1891      	adds	r1, r2, r2
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	415b      	adcs	r3, r3
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007560:	4641      	mov	r1, r8
 8007562:	1851      	adds	r1, r2, r1
 8007564:	6039      	str	r1, [r7, #0]
 8007566:	4649      	mov	r1, r9
 8007568:	414b      	adcs	r3, r1
 800756a:	607b      	str	r3, [r7, #4]
 800756c:	f04f 0200 	mov.w	r2, #0
 8007570:	f04f 0300 	mov.w	r3, #0
 8007574:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007578:	4659      	mov	r1, fp
 800757a:	00cb      	lsls	r3, r1, #3
 800757c:	4651      	mov	r1, sl
 800757e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007582:	4651      	mov	r1, sl
 8007584:	00ca      	lsls	r2, r1, #3
 8007586:	4610      	mov	r0, r2
 8007588:	4619      	mov	r1, r3
 800758a:	4603      	mov	r3, r0
 800758c:	4642      	mov	r2, r8
 800758e:	189b      	adds	r3, r3, r2
 8007590:	66bb      	str	r3, [r7, #104]	; 0x68
 8007592:	464b      	mov	r3, r9
 8007594:	460a      	mov	r2, r1
 8007596:	eb42 0303 	adc.w	r3, r2, r3
 800759a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800759c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	663b      	str	r3, [r7, #96]	; 0x60
 80075a6:	667a      	str	r2, [r7, #100]	; 0x64
 80075a8:	f04f 0200 	mov.w	r2, #0
 80075ac:	f04f 0300 	mov.w	r3, #0
 80075b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80075b4:	4649      	mov	r1, r9
 80075b6:	008b      	lsls	r3, r1, #2
 80075b8:	4641      	mov	r1, r8
 80075ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075be:	4641      	mov	r1, r8
 80075c0:	008a      	lsls	r2, r1, #2
 80075c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075c6:	f7f9 fa71 	bl	8000aac <__aeabi_uldivmod>
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	4b0d      	ldr	r3, [pc, #52]	; (8007604 <UART_SetConfig+0x4e4>)
 80075d0:	fba3 1302 	umull	r1, r3, r3, r2
 80075d4:	095b      	lsrs	r3, r3, #5
 80075d6:	2164      	movs	r1, #100	; 0x64
 80075d8:	fb01 f303 	mul.w	r3, r1, r3
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	011b      	lsls	r3, r3, #4
 80075e0:	3332      	adds	r3, #50	; 0x32
 80075e2:	4a08      	ldr	r2, [pc, #32]	; (8007604 <UART_SetConfig+0x4e4>)
 80075e4:	fba2 2303 	umull	r2, r3, r2, r3
 80075e8:	095b      	lsrs	r3, r3, #5
 80075ea:	f003 020f 	and.w	r2, r3, #15
 80075ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4422      	add	r2, r4
 80075f6:	609a      	str	r2, [r3, #8]
}
 80075f8:	bf00      	nop
 80075fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80075fe:	46bd      	mov	sp, r7
 8007600:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007604:	51eb851f 	.word	0x51eb851f

08007608 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8007608:	b480      	push	{r7}
 800760a:	b087      	sub	sp, #28
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	6812      	ldr	r2, [r2, #0]
 8007620:	f023 0101 	bic.w	r1, r3, #1
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	2b08      	cmp	r3, #8
 8007630:	d102      	bne.n	8007638 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007632:	2340      	movs	r3, #64	; 0x40
 8007634:	617b      	str	r3, [r7, #20]
 8007636:	e001      	b.n	800763c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007638:	2300      	movs	r3, #0
 800763a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007648:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800764e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007654:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800765a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8007660:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8007666:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800766c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8007672:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8007678:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800767e:	4313      	orrs	r3, r2
 8007680:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	4313      	orrs	r3, r2
 800768a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	4313      	orrs	r3, r2
 8007694:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8007696:	4b10      	ldr	r3, [pc, #64]	; (80076d8 <FSMC_NORSRAM_Init+0xd0>)
 8007698:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076a0:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80076a8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	43db      	mvns	r3, r3
 80076b8:	ea02 0103 	and.w	r1, r2, r3
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	4319      	orrs	r1, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	371c      	adds	r7, #28
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	0008fb7f 	.word	0x0008fb7f

080076dc <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	011b      	lsls	r3, r3, #4
 8007700:	431a      	orrs	r2, r3
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	021b      	lsls	r3, r3, #8
 8007708:	431a      	orrs	r2, r3
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	041b      	lsls	r3, r3, #16
 8007710:	431a      	orrs	r2, r3
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	3b01      	subs	r3, #1
 8007718:	051b      	lsls	r3, r3, #20
 800771a:	431a      	orrs	r2, r3
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	3b02      	subs	r3, #2
 8007722:	061b      	lsls	r3, r3, #24
 8007724:	431a      	orrs	r2, r3
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	4313      	orrs	r3, r2
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	3201      	adds	r2, #1
 8007730:	4319      	orrs	r1, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
	...

08007748 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
 8007754:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800775c:	d11d      	bne.n	800779a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007766:	4b13      	ldr	r3, [pc, #76]	; (80077b4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007768:	4013      	ands	r3, r2
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	6811      	ldr	r1, [r2, #0]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	6852      	ldr	r2, [r2, #4]
 8007772:	0112      	lsls	r2, r2, #4
 8007774:	4311      	orrs	r1, r2
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	6892      	ldr	r2, [r2, #8]
 800777a:	0212      	lsls	r2, r2, #8
 800777c:	4311      	orrs	r1, r2
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	6992      	ldr	r2, [r2, #24]
 8007782:	4311      	orrs	r1, r2
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	68d2      	ldr	r2, [r2, #12]
 8007788:	0412      	lsls	r2, r2, #16
 800778a:	430a      	orrs	r2, r1
 800778c:	ea43 0102 	orr.w	r1, r3, r2
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007798:	e005      	b.n	80077a6 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80077a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	cff00000 	.word	0xcff00000

080077b8 <siprintf>:
 80077b8:	b40e      	push	{r1, r2, r3}
 80077ba:	b500      	push	{lr}
 80077bc:	b09c      	sub	sp, #112	; 0x70
 80077be:	ab1d      	add	r3, sp, #116	; 0x74
 80077c0:	9002      	str	r0, [sp, #8]
 80077c2:	9006      	str	r0, [sp, #24]
 80077c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077c8:	4809      	ldr	r0, [pc, #36]	; (80077f0 <siprintf+0x38>)
 80077ca:	9107      	str	r1, [sp, #28]
 80077cc:	9104      	str	r1, [sp, #16]
 80077ce:	4909      	ldr	r1, [pc, #36]	; (80077f4 <siprintf+0x3c>)
 80077d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80077d4:	9105      	str	r1, [sp, #20]
 80077d6:	6800      	ldr	r0, [r0, #0]
 80077d8:	9301      	str	r3, [sp, #4]
 80077da:	a902      	add	r1, sp, #8
 80077dc:	f000 f992 	bl	8007b04 <_svfiprintf_r>
 80077e0:	9b02      	ldr	r3, [sp, #8]
 80077e2:	2200      	movs	r2, #0
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	b01c      	add	sp, #112	; 0x70
 80077e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80077ec:	b003      	add	sp, #12
 80077ee:	4770      	bx	lr
 80077f0:	2000027c 	.word	0x2000027c
 80077f4:	ffff0208 	.word	0xffff0208

080077f8 <memset>:
 80077f8:	4402      	add	r2, r0
 80077fa:	4603      	mov	r3, r0
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d100      	bne.n	8007802 <memset+0xa>
 8007800:	4770      	bx	lr
 8007802:	f803 1b01 	strb.w	r1, [r3], #1
 8007806:	e7f9      	b.n	80077fc <memset+0x4>

08007808 <__errno>:
 8007808:	4b01      	ldr	r3, [pc, #4]	; (8007810 <__errno+0x8>)
 800780a:	6818      	ldr	r0, [r3, #0]
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	2000027c 	.word	0x2000027c

08007814 <__libc_init_array>:
 8007814:	b570      	push	{r4, r5, r6, lr}
 8007816:	4d0d      	ldr	r5, [pc, #52]	; (800784c <__libc_init_array+0x38>)
 8007818:	4c0d      	ldr	r4, [pc, #52]	; (8007850 <__libc_init_array+0x3c>)
 800781a:	1b64      	subs	r4, r4, r5
 800781c:	10a4      	asrs	r4, r4, #2
 800781e:	2600      	movs	r6, #0
 8007820:	42a6      	cmp	r6, r4
 8007822:	d109      	bne.n	8007838 <__libc_init_array+0x24>
 8007824:	4d0b      	ldr	r5, [pc, #44]	; (8007854 <__libc_init_array+0x40>)
 8007826:	4c0c      	ldr	r4, [pc, #48]	; (8007858 <__libc_init_array+0x44>)
 8007828:	f000 fc6a 	bl	8008100 <_init>
 800782c:	1b64      	subs	r4, r4, r5
 800782e:	10a4      	asrs	r4, r4, #2
 8007830:	2600      	movs	r6, #0
 8007832:	42a6      	cmp	r6, r4
 8007834:	d105      	bne.n	8007842 <__libc_init_array+0x2e>
 8007836:	bd70      	pop	{r4, r5, r6, pc}
 8007838:	f855 3b04 	ldr.w	r3, [r5], #4
 800783c:	4798      	blx	r3
 800783e:	3601      	adds	r6, #1
 8007840:	e7ee      	b.n	8007820 <__libc_init_array+0xc>
 8007842:	f855 3b04 	ldr.w	r3, [r5], #4
 8007846:	4798      	blx	r3
 8007848:	3601      	adds	r6, #1
 800784a:	e7f2      	b.n	8007832 <__libc_init_array+0x1e>
 800784c:	0800b1ac 	.word	0x0800b1ac
 8007850:	0800b1ac 	.word	0x0800b1ac
 8007854:	0800b1ac 	.word	0x0800b1ac
 8007858:	0800b1b0 	.word	0x0800b1b0

0800785c <__retarget_lock_acquire_recursive>:
 800785c:	4770      	bx	lr

0800785e <__retarget_lock_release_recursive>:
 800785e:	4770      	bx	lr

08007860 <_free_r>:
 8007860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007862:	2900      	cmp	r1, #0
 8007864:	d044      	beq.n	80078f0 <_free_r+0x90>
 8007866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800786a:	9001      	str	r0, [sp, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	f1a1 0404 	sub.w	r4, r1, #4
 8007872:	bfb8      	it	lt
 8007874:	18e4      	addlt	r4, r4, r3
 8007876:	f000 f8df 	bl	8007a38 <__malloc_lock>
 800787a:	4a1e      	ldr	r2, [pc, #120]	; (80078f4 <_free_r+0x94>)
 800787c:	9801      	ldr	r0, [sp, #4]
 800787e:	6813      	ldr	r3, [r2, #0]
 8007880:	b933      	cbnz	r3, 8007890 <_free_r+0x30>
 8007882:	6063      	str	r3, [r4, #4]
 8007884:	6014      	str	r4, [r2, #0]
 8007886:	b003      	add	sp, #12
 8007888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800788c:	f000 b8da 	b.w	8007a44 <__malloc_unlock>
 8007890:	42a3      	cmp	r3, r4
 8007892:	d908      	bls.n	80078a6 <_free_r+0x46>
 8007894:	6825      	ldr	r5, [r4, #0]
 8007896:	1961      	adds	r1, r4, r5
 8007898:	428b      	cmp	r3, r1
 800789a:	bf01      	itttt	eq
 800789c:	6819      	ldreq	r1, [r3, #0]
 800789e:	685b      	ldreq	r3, [r3, #4]
 80078a0:	1949      	addeq	r1, r1, r5
 80078a2:	6021      	streq	r1, [r4, #0]
 80078a4:	e7ed      	b.n	8007882 <_free_r+0x22>
 80078a6:	461a      	mov	r2, r3
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	b10b      	cbz	r3, 80078b0 <_free_r+0x50>
 80078ac:	42a3      	cmp	r3, r4
 80078ae:	d9fa      	bls.n	80078a6 <_free_r+0x46>
 80078b0:	6811      	ldr	r1, [r2, #0]
 80078b2:	1855      	adds	r5, r2, r1
 80078b4:	42a5      	cmp	r5, r4
 80078b6:	d10b      	bne.n	80078d0 <_free_r+0x70>
 80078b8:	6824      	ldr	r4, [r4, #0]
 80078ba:	4421      	add	r1, r4
 80078bc:	1854      	adds	r4, r2, r1
 80078be:	42a3      	cmp	r3, r4
 80078c0:	6011      	str	r1, [r2, #0]
 80078c2:	d1e0      	bne.n	8007886 <_free_r+0x26>
 80078c4:	681c      	ldr	r4, [r3, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	6053      	str	r3, [r2, #4]
 80078ca:	440c      	add	r4, r1
 80078cc:	6014      	str	r4, [r2, #0]
 80078ce:	e7da      	b.n	8007886 <_free_r+0x26>
 80078d0:	d902      	bls.n	80078d8 <_free_r+0x78>
 80078d2:	230c      	movs	r3, #12
 80078d4:	6003      	str	r3, [r0, #0]
 80078d6:	e7d6      	b.n	8007886 <_free_r+0x26>
 80078d8:	6825      	ldr	r5, [r4, #0]
 80078da:	1961      	adds	r1, r4, r5
 80078dc:	428b      	cmp	r3, r1
 80078de:	bf04      	itt	eq
 80078e0:	6819      	ldreq	r1, [r3, #0]
 80078e2:	685b      	ldreq	r3, [r3, #4]
 80078e4:	6063      	str	r3, [r4, #4]
 80078e6:	bf04      	itt	eq
 80078e8:	1949      	addeq	r1, r1, r5
 80078ea:	6021      	streq	r1, [r4, #0]
 80078ec:	6054      	str	r4, [r2, #4]
 80078ee:	e7ca      	b.n	8007886 <_free_r+0x26>
 80078f0:	b003      	add	sp, #12
 80078f2:	bd30      	pop	{r4, r5, pc}
 80078f4:	20000c20 	.word	0x20000c20

080078f8 <sbrk_aligned>:
 80078f8:	b570      	push	{r4, r5, r6, lr}
 80078fa:	4e0e      	ldr	r6, [pc, #56]	; (8007934 <sbrk_aligned+0x3c>)
 80078fc:	460c      	mov	r4, r1
 80078fe:	6831      	ldr	r1, [r6, #0]
 8007900:	4605      	mov	r5, r0
 8007902:	b911      	cbnz	r1, 800790a <sbrk_aligned+0x12>
 8007904:	f000 fba6 	bl	8008054 <_sbrk_r>
 8007908:	6030      	str	r0, [r6, #0]
 800790a:	4621      	mov	r1, r4
 800790c:	4628      	mov	r0, r5
 800790e:	f000 fba1 	bl	8008054 <_sbrk_r>
 8007912:	1c43      	adds	r3, r0, #1
 8007914:	d00a      	beq.n	800792c <sbrk_aligned+0x34>
 8007916:	1cc4      	adds	r4, r0, #3
 8007918:	f024 0403 	bic.w	r4, r4, #3
 800791c:	42a0      	cmp	r0, r4
 800791e:	d007      	beq.n	8007930 <sbrk_aligned+0x38>
 8007920:	1a21      	subs	r1, r4, r0
 8007922:	4628      	mov	r0, r5
 8007924:	f000 fb96 	bl	8008054 <_sbrk_r>
 8007928:	3001      	adds	r0, #1
 800792a:	d101      	bne.n	8007930 <sbrk_aligned+0x38>
 800792c:	f04f 34ff 	mov.w	r4, #4294967295
 8007930:	4620      	mov	r0, r4
 8007932:	bd70      	pop	{r4, r5, r6, pc}
 8007934:	20000c24 	.word	0x20000c24

08007938 <_malloc_r>:
 8007938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800793c:	1ccd      	adds	r5, r1, #3
 800793e:	f025 0503 	bic.w	r5, r5, #3
 8007942:	3508      	adds	r5, #8
 8007944:	2d0c      	cmp	r5, #12
 8007946:	bf38      	it	cc
 8007948:	250c      	movcc	r5, #12
 800794a:	2d00      	cmp	r5, #0
 800794c:	4607      	mov	r7, r0
 800794e:	db01      	blt.n	8007954 <_malloc_r+0x1c>
 8007950:	42a9      	cmp	r1, r5
 8007952:	d905      	bls.n	8007960 <_malloc_r+0x28>
 8007954:	230c      	movs	r3, #12
 8007956:	603b      	str	r3, [r7, #0]
 8007958:	2600      	movs	r6, #0
 800795a:	4630      	mov	r0, r6
 800795c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007960:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007a34 <_malloc_r+0xfc>
 8007964:	f000 f868 	bl	8007a38 <__malloc_lock>
 8007968:	f8d8 3000 	ldr.w	r3, [r8]
 800796c:	461c      	mov	r4, r3
 800796e:	bb5c      	cbnz	r4, 80079c8 <_malloc_r+0x90>
 8007970:	4629      	mov	r1, r5
 8007972:	4638      	mov	r0, r7
 8007974:	f7ff ffc0 	bl	80078f8 <sbrk_aligned>
 8007978:	1c43      	adds	r3, r0, #1
 800797a:	4604      	mov	r4, r0
 800797c:	d155      	bne.n	8007a2a <_malloc_r+0xf2>
 800797e:	f8d8 4000 	ldr.w	r4, [r8]
 8007982:	4626      	mov	r6, r4
 8007984:	2e00      	cmp	r6, #0
 8007986:	d145      	bne.n	8007a14 <_malloc_r+0xdc>
 8007988:	2c00      	cmp	r4, #0
 800798a:	d048      	beq.n	8007a1e <_malloc_r+0xe6>
 800798c:	6823      	ldr	r3, [r4, #0]
 800798e:	4631      	mov	r1, r6
 8007990:	4638      	mov	r0, r7
 8007992:	eb04 0903 	add.w	r9, r4, r3
 8007996:	f000 fb5d 	bl	8008054 <_sbrk_r>
 800799a:	4581      	cmp	r9, r0
 800799c:	d13f      	bne.n	8007a1e <_malloc_r+0xe6>
 800799e:	6821      	ldr	r1, [r4, #0]
 80079a0:	1a6d      	subs	r5, r5, r1
 80079a2:	4629      	mov	r1, r5
 80079a4:	4638      	mov	r0, r7
 80079a6:	f7ff ffa7 	bl	80078f8 <sbrk_aligned>
 80079aa:	3001      	adds	r0, #1
 80079ac:	d037      	beq.n	8007a1e <_malloc_r+0xe6>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	442b      	add	r3, r5
 80079b2:	6023      	str	r3, [r4, #0]
 80079b4:	f8d8 3000 	ldr.w	r3, [r8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d038      	beq.n	8007a2e <_malloc_r+0xf6>
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	42a2      	cmp	r2, r4
 80079c0:	d12b      	bne.n	8007a1a <_malloc_r+0xe2>
 80079c2:	2200      	movs	r2, #0
 80079c4:	605a      	str	r2, [r3, #4]
 80079c6:	e00f      	b.n	80079e8 <_malloc_r+0xb0>
 80079c8:	6822      	ldr	r2, [r4, #0]
 80079ca:	1b52      	subs	r2, r2, r5
 80079cc:	d41f      	bmi.n	8007a0e <_malloc_r+0xd6>
 80079ce:	2a0b      	cmp	r2, #11
 80079d0:	d917      	bls.n	8007a02 <_malloc_r+0xca>
 80079d2:	1961      	adds	r1, r4, r5
 80079d4:	42a3      	cmp	r3, r4
 80079d6:	6025      	str	r5, [r4, #0]
 80079d8:	bf18      	it	ne
 80079da:	6059      	strne	r1, [r3, #4]
 80079dc:	6863      	ldr	r3, [r4, #4]
 80079de:	bf08      	it	eq
 80079e0:	f8c8 1000 	streq.w	r1, [r8]
 80079e4:	5162      	str	r2, [r4, r5]
 80079e6:	604b      	str	r3, [r1, #4]
 80079e8:	4638      	mov	r0, r7
 80079ea:	f104 060b 	add.w	r6, r4, #11
 80079ee:	f000 f829 	bl	8007a44 <__malloc_unlock>
 80079f2:	f026 0607 	bic.w	r6, r6, #7
 80079f6:	1d23      	adds	r3, r4, #4
 80079f8:	1af2      	subs	r2, r6, r3
 80079fa:	d0ae      	beq.n	800795a <_malloc_r+0x22>
 80079fc:	1b9b      	subs	r3, r3, r6
 80079fe:	50a3      	str	r3, [r4, r2]
 8007a00:	e7ab      	b.n	800795a <_malloc_r+0x22>
 8007a02:	42a3      	cmp	r3, r4
 8007a04:	6862      	ldr	r2, [r4, #4]
 8007a06:	d1dd      	bne.n	80079c4 <_malloc_r+0x8c>
 8007a08:	f8c8 2000 	str.w	r2, [r8]
 8007a0c:	e7ec      	b.n	80079e8 <_malloc_r+0xb0>
 8007a0e:	4623      	mov	r3, r4
 8007a10:	6864      	ldr	r4, [r4, #4]
 8007a12:	e7ac      	b.n	800796e <_malloc_r+0x36>
 8007a14:	4634      	mov	r4, r6
 8007a16:	6876      	ldr	r6, [r6, #4]
 8007a18:	e7b4      	b.n	8007984 <_malloc_r+0x4c>
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	e7cc      	b.n	80079b8 <_malloc_r+0x80>
 8007a1e:	230c      	movs	r3, #12
 8007a20:	603b      	str	r3, [r7, #0]
 8007a22:	4638      	mov	r0, r7
 8007a24:	f000 f80e 	bl	8007a44 <__malloc_unlock>
 8007a28:	e797      	b.n	800795a <_malloc_r+0x22>
 8007a2a:	6025      	str	r5, [r4, #0]
 8007a2c:	e7dc      	b.n	80079e8 <_malloc_r+0xb0>
 8007a2e:	605b      	str	r3, [r3, #4]
 8007a30:	deff      	udf	#255	; 0xff
 8007a32:	bf00      	nop
 8007a34:	20000c20 	.word	0x20000c20

08007a38 <__malloc_lock>:
 8007a38:	4801      	ldr	r0, [pc, #4]	; (8007a40 <__malloc_lock+0x8>)
 8007a3a:	f7ff bf0f 	b.w	800785c <__retarget_lock_acquire_recursive>
 8007a3e:	bf00      	nop
 8007a40:	20000c1c 	.word	0x20000c1c

08007a44 <__malloc_unlock>:
 8007a44:	4801      	ldr	r0, [pc, #4]	; (8007a4c <__malloc_unlock+0x8>)
 8007a46:	f7ff bf0a 	b.w	800785e <__retarget_lock_release_recursive>
 8007a4a:	bf00      	nop
 8007a4c:	20000c1c 	.word	0x20000c1c

08007a50 <__ssputs_r>:
 8007a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a54:	688e      	ldr	r6, [r1, #8]
 8007a56:	461f      	mov	r7, r3
 8007a58:	42be      	cmp	r6, r7
 8007a5a:	680b      	ldr	r3, [r1, #0]
 8007a5c:	4682      	mov	sl, r0
 8007a5e:	460c      	mov	r4, r1
 8007a60:	4690      	mov	r8, r2
 8007a62:	d82c      	bhi.n	8007abe <__ssputs_r+0x6e>
 8007a64:	898a      	ldrh	r2, [r1, #12]
 8007a66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a6a:	d026      	beq.n	8007aba <__ssputs_r+0x6a>
 8007a6c:	6965      	ldr	r5, [r4, #20]
 8007a6e:	6909      	ldr	r1, [r1, #16]
 8007a70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a74:	eba3 0901 	sub.w	r9, r3, r1
 8007a78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a7c:	1c7b      	adds	r3, r7, #1
 8007a7e:	444b      	add	r3, r9
 8007a80:	106d      	asrs	r5, r5, #1
 8007a82:	429d      	cmp	r5, r3
 8007a84:	bf38      	it	cc
 8007a86:	461d      	movcc	r5, r3
 8007a88:	0553      	lsls	r3, r2, #21
 8007a8a:	d527      	bpl.n	8007adc <__ssputs_r+0x8c>
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	f7ff ff53 	bl	8007938 <_malloc_r>
 8007a92:	4606      	mov	r6, r0
 8007a94:	b360      	cbz	r0, 8007af0 <__ssputs_r+0xa0>
 8007a96:	6921      	ldr	r1, [r4, #16]
 8007a98:	464a      	mov	r2, r9
 8007a9a:	f000 faeb 	bl	8008074 <memcpy>
 8007a9e:	89a3      	ldrh	r3, [r4, #12]
 8007aa0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa8:	81a3      	strh	r3, [r4, #12]
 8007aaa:	6126      	str	r6, [r4, #16]
 8007aac:	6165      	str	r5, [r4, #20]
 8007aae:	444e      	add	r6, r9
 8007ab0:	eba5 0509 	sub.w	r5, r5, r9
 8007ab4:	6026      	str	r6, [r4, #0]
 8007ab6:	60a5      	str	r5, [r4, #8]
 8007ab8:	463e      	mov	r6, r7
 8007aba:	42be      	cmp	r6, r7
 8007abc:	d900      	bls.n	8007ac0 <__ssputs_r+0x70>
 8007abe:	463e      	mov	r6, r7
 8007ac0:	6820      	ldr	r0, [r4, #0]
 8007ac2:	4632      	mov	r2, r6
 8007ac4:	4641      	mov	r1, r8
 8007ac6:	f000 faab 	bl	8008020 <memmove>
 8007aca:	68a3      	ldr	r3, [r4, #8]
 8007acc:	1b9b      	subs	r3, r3, r6
 8007ace:	60a3      	str	r3, [r4, #8]
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	4433      	add	r3, r6
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007adc:	462a      	mov	r2, r5
 8007ade:	f000 fad7 	bl	8008090 <_realloc_r>
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	d1e0      	bne.n	8007aaa <__ssputs_r+0x5a>
 8007ae8:	6921      	ldr	r1, [r4, #16]
 8007aea:	4650      	mov	r0, sl
 8007aec:	f7ff feb8 	bl	8007860 <_free_r>
 8007af0:	230c      	movs	r3, #12
 8007af2:	f8ca 3000 	str.w	r3, [sl]
 8007af6:	89a3      	ldrh	r3, [r4, #12]
 8007af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007afc:	81a3      	strh	r3, [r4, #12]
 8007afe:	f04f 30ff 	mov.w	r0, #4294967295
 8007b02:	e7e9      	b.n	8007ad8 <__ssputs_r+0x88>

08007b04 <_svfiprintf_r>:
 8007b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b08:	4698      	mov	r8, r3
 8007b0a:	898b      	ldrh	r3, [r1, #12]
 8007b0c:	061b      	lsls	r3, r3, #24
 8007b0e:	b09d      	sub	sp, #116	; 0x74
 8007b10:	4607      	mov	r7, r0
 8007b12:	460d      	mov	r5, r1
 8007b14:	4614      	mov	r4, r2
 8007b16:	d50e      	bpl.n	8007b36 <_svfiprintf_r+0x32>
 8007b18:	690b      	ldr	r3, [r1, #16]
 8007b1a:	b963      	cbnz	r3, 8007b36 <_svfiprintf_r+0x32>
 8007b1c:	2140      	movs	r1, #64	; 0x40
 8007b1e:	f7ff ff0b 	bl	8007938 <_malloc_r>
 8007b22:	6028      	str	r0, [r5, #0]
 8007b24:	6128      	str	r0, [r5, #16]
 8007b26:	b920      	cbnz	r0, 8007b32 <_svfiprintf_r+0x2e>
 8007b28:	230c      	movs	r3, #12
 8007b2a:	603b      	str	r3, [r7, #0]
 8007b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b30:	e0d0      	b.n	8007cd4 <_svfiprintf_r+0x1d0>
 8007b32:	2340      	movs	r3, #64	; 0x40
 8007b34:	616b      	str	r3, [r5, #20]
 8007b36:	2300      	movs	r3, #0
 8007b38:	9309      	str	r3, [sp, #36]	; 0x24
 8007b3a:	2320      	movs	r3, #32
 8007b3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b40:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b44:	2330      	movs	r3, #48	; 0x30
 8007b46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007cec <_svfiprintf_r+0x1e8>
 8007b4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b4e:	f04f 0901 	mov.w	r9, #1
 8007b52:	4623      	mov	r3, r4
 8007b54:	469a      	mov	sl, r3
 8007b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b5a:	b10a      	cbz	r2, 8007b60 <_svfiprintf_r+0x5c>
 8007b5c:	2a25      	cmp	r2, #37	; 0x25
 8007b5e:	d1f9      	bne.n	8007b54 <_svfiprintf_r+0x50>
 8007b60:	ebba 0b04 	subs.w	fp, sl, r4
 8007b64:	d00b      	beq.n	8007b7e <_svfiprintf_r+0x7a>
 8007b66:	465b      	mov	r3, fp
 8007b68:	4622      	mov	r2, r4
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	4638      	mov	r0, r7
 8007b6e:	f7ff ff6f 	bl	8007a50 <__ssputs_r>
 8007b72:	3001      	adds	r0, #1
 8007b74:	f000 80a9 	beq.w	8007cca <_svfiprintf_r+0x1c6>
 8007b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b7a:	445a      	add	r2, fp
 8007b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 80a1 	beq.w	8007cca <_svfiprintf_r+0x1c6>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b92:	f10a 0a01 	add.w	sl, sl, #1
 8007b96:	9304      	str	r3, [sp, #16]
 8007b98:	9307      	str	r3, [sp, #28]
 8007b9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b9e:	931a      	str	r3, [sp, #104]	; 0x68
 8007ba0:	4654      	mov	r4, sl
 8007ba2:	2205      	movs	r2, #5
 8007ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ba8:	4850      	ldr	r0, [pc, #320]	; (8007cec <_svfiprintf_r+0x1e8>)
 8007baa:	f7f8 fb11 	bl	80001d0 <memchr>
 8007bae:	9a04      	ldr	r2, [sp, #16]
 8007bb0:	b9d8      	cbnz	r0, 8007bea <_svfiprintf_r+0xe6>
 8007bb2:	06d0      	lsls	r0, r2, #27
 8007bb4:	bf44      	itt	mi
 8007bb6:	2320      	movmi	r3, #32
 8007bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bbc:	0711      	lsls	r1, r2, #28
 8007bbe:	bf44      	itt	mi
 8007bc0:	232b      	movmi	r3, #43	; 0x2b
 8007bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8007bca:	2b2a      	cmp	r3, #42	; 0x2a
 8007bcc:	d015      	beq.n	8007bfa <_svfiprintf_r+0xf6>
 8007bce:	9a07      	ldr	r2, [sp, #28]
 8007bd0:	4654      	mov	r4, sl
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	f04f 0c0a 	mov.w	ip, #10
 8007bd8:	4621      	mov	r1, r4
 8007bda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bde:	3b30      	subs	r3, #48	; 0x30
 8007be0:	2b09      	cmp	r3, #9
 8007be2:	d94d      	bls.n	8007c80 <_svfiprintf_r+0x17c>
 8007be4:	b1b0      	cbz	r0, 8007c14 <_svfiprintf_r+0x110>
 8007be6:	9207      	str	r2, [sp, #28]
 8007be8:	e014      	b.n	8007c14 <_svfiprintf_r+0x110>
 8007bea:	eba0 0308 	sub.w	r3, r0, r8
 8007bee:	fa09 f303 	lsl.w	r3, r9, r3
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	9304      	str	r3, [sp, #16]
 8007bf6:	46a2      	mov	sl, r4
 8007bf8:	e7d2      	b.n	8007ba0 <_svfiprintf_r+0x9c>
 8007bfa:	9b03      	ldr	r3, [sp, #12]
 8007bfc:	1d19      	adds	r1, r3, #4
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	9103      	str	r1, [sp, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	bfbb      	ittet	lt
 8007c06:	425b      	neglt	r3, r3
 8007c08:	f042 0202 	orrlt.w	r2, r2, #2
 8007c0c:	9307      	strge	r3, [sp, #28]
 8007c0e:	9307      	strlt	r3, [sp, #28]
 8007c10:	bfb8      	it	lt
 8007c12:	9204      	strlt	r2, [sp, #16]
 8007c14:	7823      	ldrb	r3, [r4, #0]
 8007c16:	2b2e      	cmp	r3, #46	; 0x2e
 8007c18:	d10c      	bne.n	8007c34 <_svfiprintf_r+0x130>
 8007c1a:	7863      	ldrb	r3, [r4, #1]
 8007c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c1e:	d134      	bne.n	8007c8a <_svfiprintf_r+0x186>
 8007c20:	9b03      	ldr	r3, [sp, #12]
 8007c22:	1d1a      	adds	r2, r3, #4
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	9203      	str	r2, [sp, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	bfb8      	it	lt
 8007c2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c30:	3402      	adds	r4, #2
 8007c32:	9305      	str	r3, [sp, #20]
 8007c34:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007cfc <_svfiprintf_r+0x1f8>
 8007c38:	7821      	ldrb	r1, [r4, #0]
 8007c3a:	2203      	movs	r2, #3
 8007c3c:	4650      	mov	r0, sl
 8007c3e:	f7f8 fac7 	bl	80001d0 <memchr>
 8007c42:	b138      	cbz	r0, 8007c54 <_svfiprintf_r+0x150>
 8007c44:	9b04      	ldr	r3, [sp, #16]
 8007c46:	eba0 000a 	sub.w	r0, r0, sl
 8007c4a:	2240      	movs	r2, #64	; 0x40
 8007c4c:	4082      	lsls	r2, r0
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	3401      	adds	r4, #1
 8007c52:	9304      	str	r3, [sp, #16]
 8007c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c58:	4825      	ldr	r0, [pc, #148]	; (8007cf0 <_svfiprintf_r+0x1ec>)
 8007c5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c5e:	2206      	movs	r2, #6
 8007c60:	f7f8 fab6 	bl	80001d0 <memchr>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d038      	beq.n	8007cda <_svfiprintf_r+0x1d6>
 8007c68:	4b22      	ldr	r3, [pc, #136]	; (8007cf4 <_svfiprintf_r+0x1f0>)
 8007c6a:	bb1b      	cbnz	r3, 8007cb4 <_svfiprintf_r+0x1b0>
 8007c6c:	9b03      	ldr	r3, [sp, #12]
 8007c6e:	3307      	adds	r3, #7
 8007c70:	f023 0307 	bic.w	r3, r3, #7
 8007c74:	3308      	adds	r3, #8
 8007c76:	9303      	str	r3, [sp, #12]
 8007c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c7a:	4433      	add	r3, r6
 8007c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c7e:	e768      	b.n	8007b52 <_svfiprintf_r+0x4e>
 8007c80:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c84:	460c      	mov	r4, r1
 8007c86:	2001      	movs	r0, #1
 8007c88:	e7a6      	b.n	8007bd8 <_svfiprintf_r+0xd4>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	3401      	adds	r4, #1
 8007c8e:	9305      	str	r3, [sp, #20]
 8007c90:	4619      	mov	r1, r3
 8007c92:	f04f 0c0a 	mov.w	ip, #10
 8007c96:	4620      	mov	r0, r4
 8007c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c9c:	3a30      	subs	r2, #48	; 0x30
 8007c9e:	2a09      	cmp	r2, #9
 8007ca0:	d903      	bls.n	8007caa <_svfiprintf_r+0x1a6>
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d0c6      	beq.n	8007c34 <_svfiprintf_r+0x130>
 8007ca6:	9105      	str	r1, [sp, #20]
 8007ca8:	e7c4      	b.n	8007c34 <_svfiprintf_r+0x130>
 8007caa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cae:	4604      	mov	r4, r0
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e7f0      	b.n	8007c96 <_svfiprintf_r+0x192>
 8007cb4:	ab03      	add	r3, sp, #12
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	462a      	mov	r2, r5
 8007cba:	4b0f      	ldr	r3, [pc, #60]	; (8007cf8 <_svfiprintf_r+0x1f4>)
 8007cbc:	a904      	add	r1, sp, #16
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	f3af 8000 	nop.w
 8007cc4:	1c42      	adds	r2, r0, #1
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	d1d6      	bne.n	8007c78 <_svfiprintf_r+0x174>
 8007cca:	89ab      	ldrh	r3, [r5, #12]
 8007ccc:	065b      	lsls	r3, r3, #25
 8007cce:	f53f af2d 	bmi.w	8007b2c <_svfiprintf_r+0x28>
 8007cd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cd4:	b01d      	add	sp, #116	; 0x74
 8007cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cda:	ab03      	add	r3, sp, #12
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	462a      	mov	r2, r5
 8007ce0:	4b05      	ldr	r3, [pc, #20]	; (8007cf8 <_svfiprintf_r+0x1f4>)
 8007ce2:	a904      	add	r1, sp, #16
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	f000 f879 	bl	8007ddc <_printf_i>
 8007cea:	e7eb      	b.n	8007cc4 <_svfiprintf_r+0x1c0>
 8007cec:	0800b170 	.word	0x0800b170
 8007cf0:	0800b17a 	.word	0x0800b17a
 8007cf4:	00000000 	.word	0x00000000
 8007cf8:	08007a51 	.word	0x08007a51
 8007cfc:	0800b176 	.word	0x0800b176

08007d00 <_printf_common>:
 8007d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d04:	4616      	mov	r6, r2
 8007d06:	4699      	mov	r9, r3
 8007d08:	688a      	ldr	r2, [r1, #8]
 8007d0a:	690b      	ldr	r3, [r1, #16]
 8007d0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d10:	4293      	cmp	r3, r2
 8007d12:	bfb8      	it	lt
 8007d14:	4613      	movlt	r3, r2
 8007d16:	6033      	str	r3, [r6, #0]
 8007d18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d1c:	4607      	mov	r7, r0
 8007d1e:	460c      	mov	r4, r1
 8007d20:	b10a      	cbz	r2, 8007d26 <_printf_common+0x26>
 8007d22:	3301      	adds	r3, #1
 8007d24:	6033      	str	r3, [r6, #0]
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	0699      	lsls	r1, r3, #26
 8007d2a:	bf42      	ittt	mi
 8007d2c:	6833      	ldrmi	r3, [r6, #0]
 8007d2e:	3302      	addmi	r3, #2
 8007d30:	6033      	strmi	r3, [r6, #0]
 8007d32:	6825      	ldr	r5, [r4, #0]
 8007d34:	f015 0506 	ands.w	r5, r5, #6
 8007d38:	d106      	bne.n	8007d48 <_printf_common+0x48>
 8007d3a:	f104 0a19 	add.w	sl, r4, #25
 8007d3e:	68e3      	ldr	r3, [r4, #12]
 8007d40:	6832      	ldr	r2, [r6, #0]
 8007d42:	1a9b      	subs	r3, r3, r2
 8007d44:	42ab      	cmp	r3, r5
 8007d46:	dc26      	bgt.n	8007d96 <_printf_common+0x96>
 8007d48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d4c:	1e13      	subs	r3, r2, #0
 8007d4e:	6822      	ldr	r2, [r4, #0]
 8007d50:	bf18      	it	ne
 8007d52:	2301      	movne	r3, #1
 8007d54:	0692      	lsls	r2, r2, #26
 8007d56:	d42b      	bmi.n	8007db0 <_printf_common+0xb0>
 8007d58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	4638      	mov	r0, r7
 8007d60:	47c0      	blx	r8
 8007d62:	3001      	adds	r0, #1
 8007d64:	d01e      	beq.n	8007da4 <_printf_common+0xa4>
 8007d66:	6823      	ldr	r3, [r4, #0]
 8007d68:	6922      	ldr	r2, [r4, #16]
 8007d6a:	f003 0306 	and.w	r3, r3, #6
 8007d6e:	2b04      	cmp	r3, #4
 8007d70:	bf02      	ittt	eq
 8007d72:	68e5      	ldreq	r5, [r4, #12]
 8007d74:	6833      	ldreq	r3, [r6, #0]
 8007d76:	1aed      	subeq	r5, r5, r3
 8007d78:	68a3      	ldr	r3, [r4, #8]
 8007d7a:	bf0c      	ite	eq
 8007d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d80:	2500      	movne	r5, #0
 8007d82:	4293      	cmp	r3, r2
 8007d84:	bfc4      	itt	gt
 8007d86:	1a9b      	subgt	r3, r3, r2
 8007d88:	18ed      	addgt	r5, r5, r3
 8007d8a:	2600      	movs	r6, #0
 8007d8c:	341a      	adds	r4, #26
 8007d8e:	42b5      	cmp	r5, r6
 8007d90:	d11a      	bne.n	8007dc8 <_printf_common+0xc8>
 8007d92:	2000      	movs	r0, #0
 8007d94:	e008      	b.n	8007da8 <_printf_common+0xa8>
 8007d96:	2301      	movs	r3, #1
 8007d98:	4652      	mov	r2, sl
 8007d9a:	4649      	mov	r1, r9
 8007d9c:	4638      	mov	r0, r7
 8007d9e:	47c0      	blx	r8
 8007da0:	3001      	adds	r0, #1
 8007da2:	d103      	bne.n	8007dac <_printf_common+0xac>
 8007da4:	f04f 30ff 	mov.w	r0, #4294967295
 8007da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dac:	3501      	adds	r5, #1
 8007dae:	e7c6      	b.n	8007d3e <_printf_common+0x3e>
 8007db0:	18e1      	adds	r1, r4, r3
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	2030      	movs	r0, #48	; 0x30
 8007db6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dba:	4422      	add	r2, r4
 8007dbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007dc4:	3302      	adds	r3, #2
 8007dc6:	e7c7      	b.n	8007d58 <_printf_common+0x58>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	4622      	mov	r2, r4
 8007dcc:	4649      	mov	r1, r9
 8007dce:	4638      	mov	r0, r7
 8007dd0:	47c0      	blx	r8
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	d0e6      	beq.n	8007da4 <_printf_common+0xa4>
 8007dd6:	3601      	adds	r6, #1
 8007dd8:	e7d9      	b.n	8007d8e <_printf_common+0x8e>
	...

08007ddc <_printf_i>:
 8007ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007de0:	7e0f      	ldrb	r7, [r1, #24]
 8007de2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007de4:	2f78      	cmp	r7, #120	; 0x78
 8007de6:	4691      	mov	r9, r2
 8007de8:	4680      	mov	r8, r0
 8007dea:	460c      	mov	r4, r1
 8007dec:	469a      	mov	sl, r3
 8007dee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007df2:	d807      	bhi.n	8007e04 <_printf_i+0x28>
 8007df4:	2f62      	cmp	r7, #98	; 0x62
 8007df6:	d80a      	bhi.n	8007e0e <_printf_i+0x32>
 8007df8:	2f00      	cmp	r7, #0
 8007dfa:	f000 80d4 	beq.w	8007fa6 <_printf_i+0x1ca>
 8007dfe:	2f58      	cmp	r7, #88	; 0x58
 8007e00:	f000 80c0 	beq.w	8007f84 <_printf_i+0x1a8>
 8007e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e0c:	e03a      	b.n	8007e84 <_printf_i+0xa8>
 8007e0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e12:	2b15      	cmp	r3, #21
 8007e14:	d8f6      	bhi.n	8007e04 <_printf_i+0x28>
 8007e16:	a101      	add	r1, pc, #4	; (adr r1, 8007e1c <_printf_i+0x40>)
 8007e18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e1c:	08007e75 	.word	0x08007e75
 8007e20:	08007e89 	.word	0x08007e89
 8007e24:	08007e05 	.word	0x08007e05
 8007e28:	08007e05 	.word	0x08007e05
 8007e2c:	08007e05 	.word	0x08007e05
 8007e30:	08007e05 	.word	0x08007e05
 8007e34:	08007e89 	.word	0x08007e89
 8007e38:	08007e05 	.word	0x08007e05
 8007e3c:	08007e05 	.word	0x08007e05
 8007e40:	08007e05 	.word	0x08007e05
 8007e44:	08007e05 	.word	0x08007e05
 8007e48:	08007f8d 	.word	0x08007f8d
 8007e4c:	08007eb5 	.word	0x08007eb5
 8007e50:	08007f47 	.word	0x08007f47
 8007e54:	08007e05 	.word	0x08007e05
 8007e58:	08007e05 	.word	0x08007e05
 8007e5c:	08007faf 	.word	0x08007faf
 8007e60:	08007e05 	.word	0x08007e05
 8007e64:	08007eb5 	.word	0x08007eb5
 8007e68:	08007e05 	.word	0x08007e05
 8007e6c:	08007e05 	.word	0x08007e05
 8007e70:	08007f4f 	.word	0x08007f4f
 8007e74:	682b      	ldr	r3, [r5, #0]
 8007e76:	1d1a      	adds	r2, r3, #4
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	602a      	str	r2, [r5, #0]
 8007e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e84:	2301      	movs	r3, #1
 8007e86:	e09f      	b.n	8007fc8 <_printf_i+0x1ec>
 8007e88:	6820      	ldr	r0, [r4, #0]
 8007e8a:	682b      	ldr	r3, [r5, #0]
 8007e8c:	0607      	lsls	r7, r0, #24
 8007e8e:	f103 0104 	add.w	r1, r3, #4
 8007e92:	6029      	str	r1, [r5, #0]
 8007e94:	d501      	bpl.n	8007e9a <_printf_i+0xbe>
 8007e96:	681e      	ldr	r6, [r3, #0]
 8007e98:	e003      	b.n	8007ea2 <_printf_i+0xc6>
 8007e9a:	0646      	lsls	r6, r0, #25
 8007e9c:	d5fb      	bpl.n	8007e96 <_printf_i+0xba>
 8007e9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007ea2:	2e00      	cmp	r6, #0
 8007ea4:	da03      	bge.n	8007eae <_printf_i+0xd2>
 8007ea6:	232d      	movs	r3, #45	; 0x2d
 8007ea8:	4276      	negs	r6, r6
 8007eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eae:	485a      	ldr	r0, [pc, #360]	; (8008018 <_printf_i+0x23c>)
 8007eb0:	230a      	movs	r3, #10
 8007eb2:	e012      	b.n	8007eda <_printf_i+0xfe>
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	6820      	ldr	r0, [r4, #0]
 8007eb8:	1d19      	adds	r1, r3, #4
 8007eba:	6029      	str	r1, [r5, #0]
 8007ebc:	0605      	lsls	r5, r0, #24
 8007ebe:	d501      	bpl.n	8007ec4 <_printf_i+0xe8>
 8007ec0:	681e      	ldr	r6, [r3, #0]
 8007ec2:	e002      	b.n	8007eca <_printf_i+0xee>
 8007ec4:	0641      	lsls	r1, r0, #25
 8007ec6:	d5fb      	bpl.n	8007ec0 <_printf_i+0xe4>
 8007ec8:	881e      	ldrh	r6, [r3, #0]
 8007eca:	4853      	ldr	r0, [pc, #332]	; (8008018 <_printf_i+0x23c>)
 8007ecc:	2f6f      	cmp	r7, #111	; 0x6f
 8007ece:	bf0c      	ite	eq
 8007ed0:	2308      	moveq	r3, #8
 8007ed2:	230a      	movne	r3, #10
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eda:	6865      	ldr	r5, [r4, #4]
 8007edc:	60a5      	str	r5, [r4, #8]
 8007ede:	2d00      	cmp	r5, #0
 8007ee0:	bfa2      	ittt	ge
 8007ee2:	6821      	ldrge	r1, [r4, #0]
 8007ee4:	f021 0104 	bicge.w	r1, r1, #4
 8007ee8:	6021      	strge	r1, [r4, #0]
 8007eea:	b90e      	cbnz	r6, 8007ef0 <_printf_i+0x114>
 8007eec:	2d00      	cmp	r5, #0
 8007eee:	d04b      	beq.n	8007f88 <_printf_i+0x1ac>
 8007ef0:	4615      	mov	r5, r2
 8007ef2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ef6:	fb03 6711 	mls	r7, r3, r1, r6
 8007efa:	5dc7      	ldrb	r7, [r0, r7]
 8007efc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f00:	4637      	mov	r7, r6
 8007f02:	42bb      	cmp	r3, r7
 8007f04:	460e      	mov	r6, r1
 8007f06:	d9f4      	bls.n	8007ef2 <_printf_i+0x116>
 8007f08:	2b08      	cmp	r3, #8
 8007f0a:	d10b      	bne.n	8007f24 <_printf_i+0x148>
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	07de      	lsls	r6, r3, #31
 8007f10:	d508      	bpl.n	8007f24 <_printf_i+0x148>
 8007f12:	6923      	ldr	r3, [r4, #16]
 8007f14:	6861      	ldr	r1, [r4, #4]
 8007f16:	4299      	cmp	r1, r3
 8007f18:	bfde      	ittt	le
 8007f1a:	2330      	movle	r3, #48	; 0x30
 8007f1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f24:	1b52      	subs	r2, r2, r5
 8007f26:	6122      	str	r2, [r4, #16]
 8007f28:	f8cd a000 	str.w	sl, [sp]
 8007f2c:	464b      	mov	r3, r9
 8007f2e:	aa03      	add	r2, sp, #12
 8007f30:	4621      	mov	r1, r4
 8007f32:	4640      	mov	r0, r8
 8007f34:	f7ff fee4 	bl	8007d00 <_printf_common>
 8007f38:	3001      	adds	r0, #1
 8007f3a:	d14a      	bne.n	8007fd2 <_printf_i+0x1f6>
 8007f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f40:	b004      	add	sp, #16
 8007f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f46:	6823      	ldr	r3, [r4, #0]
 8007f48:	f043 0320 	orr.w	r3, r3, #32
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	4833      	ldr	r0, [pc, #204]	; (800801c <_printf_i+0x240>)
 8007f50:	2778      	movs	r7, #120	; 0x78
 8007f52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	6829      	ldr	r1, [r5, #0]
 8007f5a:	061f      	lsls	r7, r3, #24
 8007f5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f60:	d402      	bmi.n	8007f68 <_printf_i+0x18c>
 8007f62:	065f      	lsls	r7, r3, #25
 8007f64:	bf48      	it	mi
 8007f66:	b2b6      	uxthmi	r6, r6
 8007f68:	07df      	lsls	r7, r3, #31
 8007f6a:	bf48      	it	mi
 8007f6c:	f043 0320 	orrmi.w	r3, r3, #32
 8007f70:	6029      	str	r1, [r5, #0]
 8007f72:	bf48      	it	mi
 8007f74:	6023      	strmi	r3, [r4, #0]
 8007f76:	b91e      	cbnz	r6, 8007f80 <_printf_i+0x1a4>
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	f023 0320 	bic.w	r3, r3, #32
 8007f7e:	6023      	str	r3, [r4, #0]
 8007f80:	2310      	movs	r3, #16
 8007f82:	e7a7      	b.n	8007ed4 <_printf_i+0xf8>
 8007f84:	4824      	ldr	r0, [pc, #144]	; (8008018 <_printf_i+0x23c>)
 8007f86:	e7e4      	b.n	8007f52 <_printf_i+0x176>
 8007f88:	4615      	mov	r5, r2
 8007f8a:	e7bd      	b.n	8007f08 <_printf_i+0x12c>
 8007f8c:	682b      	ldr	r3, [r5, #0]
 8007f8e:	6826      	ldr	r6, [r4, #0]
 8007f90:	6961      	ldr	r1, [r4, #20]
 8007f92:	1d18      	adds	r0, r3, #4
 8007f94:	6028      	str	r0, [r5, #0]
 8007f96:	0635      	lsls	r5, r6, #24
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	d501      	bpl.n	8007fa0 <_printf_i+0x1c4>
 8007f9c:	6019      	str	r1, [r3, #0]
 8007f9e:	e002      	b.n	8007fa6 <_printf_i+0x1ca>
 8007fa0:	0670      	lsls	r0, r6, #25
 8007fa2:	d5fb      	bpl.n	8007f9c <_printf_i+0x1c0>
 8007fa4:	8019      	strh	r1, [r3, #0]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	6123      	str	r3, [r4, #16]
 8007faa:	4615      	mov	r5, r2
 8007fac:	e7bc      	b.n	8007f28 <_printf_i+0x14c>
 8007fae:	682b      	ldr	r3, [r5, #0]
 8007fb0:	1d1a      	adds	r2, r3, #4
 8007fb2:	602a      	str	r2, [r5, #0]
 8007fb4:	681d      	ldr	r5, [r3, #0]
 8007fb6:	6862      	ldr	r2, [r4, #4]
 8007fb8:	2100      	movs	r1, #0
 8007fba:	4628      	mov	r0, r5
 8007fbc:	f7f8 f908 	bl	80001d0 <memchr>
 8007fc0:	b108      	cbz	r0, 8007fc6 <_printf_i+0x1ea>
 8007fc2:	1b40      	subs	r0, r0, r5
 8007fc4:	6060      	str	r0, [r4, #4]
 8007fc6:	6863      	ldr	r3, [r4, #4]
 8007fc8:	6123      	str	r3, [r4, #16]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fd0:	e7aa      	b.n	8007f28 <_printf_i+0x14c>
 8007fd2:	6923      	ldr	r3, [r4, #16]
 8007fd4:	462a      	mov	r2, r5
 8007fd6:	4649      	mov	r1, r9
 8007fd8:	4640      	mov	r0, r8
 8007fda:	47d0      	blx	sl
 8007fdc:	3001      	adds	r0, #1
 8007fde:	d0ad      	beq.n	8007f3c <_printf_i+0x160>
 8007fe0:	6823      	ldr	r3, [r4, #0]
 8007fe2:	079b      	lsls	r3, r3, #30
 8007fe4:	d413      	bmi.n	800800e <_printf_i+0x232>
 8007fe6:	68e0      	ldr	r0, [r4, #12]
 8007fe8:	9b03      	ldr	r3, [sp, #12]
 8007fea:	4298      	cmp	r0, r3
 8007fec:	bfb8      	it	lt
 8007fee:	4618      	movlt	r0, r3
 8007ff0:	e7a6      	b.n	8007f40 <_printf_i+0x164>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	4632      	mov	r2, r6
 8007ff6:	4649      	mov	r1, r9
 8007ff8:	4640      	mov	r0, r8
 8007ffa:	47d0      	blx	sl
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	d09d      	beq.n	8007f3c <_printf_i+0x160>
 8008000:	3501      	adds	r5, #1
 8008002:	68e3      	ldr	r3, [r4, #12]
 8008004:	9903      	ldr	r1, [sp, #12]
 8008006:	1a5b      	subs	r3, r3, r1
 8008008:	42ab      	cmp	r3, r5
 800800a:	dcf2      	bgt.n	8007ff2 <_printf_i+0x216>
 800800c:	e7eb      	b.n	8007fe6 <_printf_i+0x20a>
 800800e:	2500      	movs	r5, #0
 8008010:	f104 0619 	add.w	r6, r4, #25
 8008014:	e7f5      	b.n	8008002 <_printf_i+0x226>
 8008016:	bf00      	nop
 8008018:	0800b181 	.word	0x0800b181
 800801c:	0800b192 	.word	0x0800b192

08008020 <memmove>:
 8008020:	4288      	cmp	r0, r1
 8008022:	b510      	push	{r4, lr}
 8008024:	eb01 0402 	add.w	r4, r1, r2
 8008028:	d902      	bls.n	8008030 <memmove+0x10>
 800802a:	4284      	cmp	r4, r0
 800802c:	4623      	mov	r3, r4
 800802e:	d807      	bhi.n	8008040 <memmove+0x20>
 8008030:	1e43      	subs	r3, r0, #1
 8008032:	42a1      	cmp	r1, r4
 8008034:	d008      	beq.n	8008048 <memmove+0x28>
 8008036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800803a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800803e:	e7f8      	b.n	8008032 <memmove+0x12>
 8008040:	4402      	add	r2, r0
 8008042:	4601      	mov	r1, r0
 8008044:	428a      	cmp	r2, r1
 8008046:	d100      	bne.n	800804a <memmove+0x2a>
 8008048:	bd10      	pop	{r4, pc}
 800804a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800804e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008052:	e7f7      	b.n	8008044 <memmove+0x24>

08008054 <_sbrk_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	4d06      	ldr	r5, [pc, #24]	; (8008070 <_sbrk_r+0x1c>)
 8008058:	2300      	movs	r3, #0
 800805a:	4604      	mov	r4, r0
 800805c:	4608      	mov	r0, r1
 800805e:	602b      	str	r3, [r5, #0]
 8008060:	f7fa fee6 	bl	8002e30 <_sbrk>
 8008064:	1c43      	adds	r3, r0, #1
 8008066:	d102      	bne.n	800806e <_sbrk_r+0x1a>
 8008068:	682b      	ldr	r3, [r5, #0]
 800806a:	b103      	cbz	r3, 800806e <_sbrk_r+0x1a>
 800806c:	6023      	str	r3, [r4, #0]
 800806e:	bd38      	pop	{r3, r4, r5, pc}
 8008070:	20000c18 	.word	0x20000c18

08008074 <memcpy>:
 8008074:	440a      	add	r2, r1
 8008076:	4291      	cmp	r1, r2
 8008078:	f100 33ff 	add.w	r3, r0, #4294967295
 800807c:	d100      	bne.n	8008080 <memcpy+0xc>
 800807e:	4770      	bx	lr
 8008080:	b510      	push	{r4, lr}
 8008082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800808a:	4291      	cmp	r1, r2
 800808c:	d1f9      	bne.n	8008082 <memcpy+0xe>
 800808e:	bd10      	pop	{r4, pc}

08008090 <_realloc_r>:
 8008090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008094:	4680      	mov	r8, r0
 8008096:	4614      	mov	r4, r2
 8008098:	460e      	mov	r6, r1
 800809a:	b921      	cbnz	r1, 80080a6 <_realloc_r+0x16>
 800809c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080a0:	4611      	mov	r1, r2
 80080a2:	f7ff bc49 	b.w	8007938 <_malloc_r>
 80080a6:	b92a      	cbnz	r2, 80080b4 <_realloc_r+0x24>
 80080a8:	f7ff fbda 	bl	8007860 <_free_r>
 80080ac:	4625      	mov	r5, r4
 80080ae:	4628      	mov	r0, r5
 80080b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080b4:	f000 f81b 	bl	80080ee <_malloc_usable_size_r>
 80080b8:	4284      	cmp	r4, r0
 80080ba:	4607      	mov	r7, r0
 80080bc:	d802      	bhi.n	80080c4 <_realloc_r+0x34>
 80080be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080c2:	d812      	bhi.n	80080ea <_realloc_r+0x5a>
 80080c4:	4621      	mov	r1, r4
 80080c6:	4640      	mov	r0, r8
 80080c8:	f7ff fc36 	bl	8007938 <_malloc_r>
 80080cc:	4605      	mov	r5, r0
 80080ce:	2800      	cmp	r0, #0
 80080d0:	d0ed      	beq.n	80080ae <_realloc_r+0x1e>
 80080d2:	42bc      	cmp	r4, r7
 80080d4:	4622      	mov	r2, r4
 80080d6:	4631      	mov	r1, r6
 80080d8:	bf28      	it	cs
 80080da:	463a      	movcs	r2, r7
 80080dc:	f7ff ffca 	bl	8008074 <memcpy>
 80080e0:	4631      	mov	r1, r6
 80080e2:	4640      	mov	r0, r8
 80080e4:	f7ff fbbc 	bl	8007860 <_free_r>
 80080e8:	e7e1      	b.n	80080ae <_realloc_r+0x1e>
 80080ea:	4635      	mov	r5, r6
 80080ec:	e7df      	b.n	80080ae <_realloc_r+0x1e>

080080ee <_malloc_usable_size_r>:
 80080ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080f2:	1f18      	subs	r0, r3, #4
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	bfbc      	itt	lt
 80080f8:	580b      	ldrlt	r3, [r1, r0]
 80080fa:	18c0      	addlt	r0, r0, r3
 80080fc:	4770      	bx	lr
	...

08008100 <_init>:
 8008100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008102:	bf00      	nop
 8008104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008106:	bc08      	pop	{r3}
 8008108:	469e      	mov	lr, r3
 800810a:	4770      	bx	lr

0800810c <_fini>:
 800810c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810e:	bf00      	nop
 8008110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008112:	bc08      	pop	{r3}
 8008114:	469e      	mov	lr, r3
 8008116:	4770      	bx	lr
