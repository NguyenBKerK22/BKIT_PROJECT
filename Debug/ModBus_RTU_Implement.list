
ModBus_RTU_Implement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006938  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe8  08006ac0  08006ac0  00007ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aa8  08009aa8  0000b234  2**0
                  CONTENTS
  4 .ARM          00000008  08009aa8  08009aa8  0000aaa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ab0  08009ab0  0000b234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ab0  08009ab0  0000aab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ab4  08009ab4  0000aab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  08009ab8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b234  2**0
                  CONTENTS
 10 .bss          000006e8  20000234  20000234  0000b234  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000091c  2000091c  0000b234  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b234  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016ada  00000000  00000000  0000b264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dfd  00000000  00000000  00021d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  00025b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f3d  00000000  00000000  00026f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000255a9  00000000  00000000  00027e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b097  00000000  00000000  0004d3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd461  00000000  00000000  0006848d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001458ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005060  00000000  00000000  00145934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0014a994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000234 	.word	0x20000234
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006aa8 	.word	0x08006aa8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000238 	.word	0x20000238
 80001c4:	08006aa8 	.word	0x08006aa8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <parserFrame>:
		uint8_t *Address,
		uint8_t *Function,
		uint8_t *Data,
		uint8_t *Datasize,
		uint16_t *Crc)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b087      	sub	sp, #28
 80004bc:	af00      	add	r7, sp, #0
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	607a      	str	r2, [r7, #4]
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	460b      	mov	r3, r1
 80004c6:	72fb      	strb	r3, [r7, #11]
	int i;
	*Address = pFrame[0];
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	781a      	ldrb	r2, [r3, #0]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	701a      	strb	r2, [r3, #0]
	*Function = pFrame[1];
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	785a      	ldrb	r2, [r3, #1]
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	701a      	strb	r2, [r3, #0]
	*Datasize = FrameSize - 4;
 80004d8:	7afb      	ldrb	r3, [r7, #11]
 80004da:	3b04      	subs	r3, #4
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004e0:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < *Datasize; i++){
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]
 80004e6:	e00b      	b.n	8000500 <parserFrame+0x48>
		Data[i] = *(pFrame + 2 + i);
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	3302      	adds	r3, #2
 80004ec:	68fa      	ldr	r2, [r7, #12]
 80004ee:	441a      	add	r2, r3
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	6a39      	ldr	r1, [r7, #32]
 80004f4:	440b      	add	r3, r1
 80004f6:	7812      	ldrb	r2, [r2, #0]
 80004f8:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < *Datasize; i++){
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	3301      	adds	r3, #1
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	4293      	cmp	r3, r2
 800050a:	dbed      	blt.n	80004e8 <parserFrame+0x30>
	}
	*Crc = 0;
 800050c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800050e:	2200      	movs	r2, #0
 8000510:	801a      	strh	r2, [r3, #0]
	*Crc |= ((uint16_t)(pFrame[FrameSize - 1]) << 8) | ((uint16_t)(pFrame[FrameSize - 2]) & 0x00FF);
 8000512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	b21a      	sxth	r2, r3
 8000518:	7afb      	ldrb	r3, [r7, #11]
 800051a:	3b01      	subs	r3, #1
 800051c:	68f9      	ldr	r1, [r7, #12]
 800051e:	440b      	add	r3, r1
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	021b      	lsls	r3, r3, #8
 8000524:	b219      	sxth	r1, r3
 8000526:	7afb      	ldrb	r3, [r7, #11]
 8000528:	3b02      	subs	r3, #2
 800052a:	68f8      	ldr	r0, [r7, #12]
 800052c:	4403      	add	r3, r0
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	b21b      	sxth	r3, r3
 8000532:	430b      	orrs	r3, r1
 8000534:	b21b      	sxth	r3, r3
 8000536:	4313      	orrs	r3, r2
 8000538:	b21b      	sxth	r3, r3
 800053a:	b29a      	uxth	r2, r3
 800053c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800053e:	801a      	strh	r2, [r3, #0]
}
 8000540:	bf00      	nop
 8000542:	371c      	adds	r7, #28
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <User_interface>:
void User_interface(){
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af02      	add	r7, sp, #8
	switch(User_behavior){
 8000552:	4b45      	ldr	r3, [pc, #276]	@ (8000668 <User_interface+0x11c>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b05      	cmp	r3, #5
 8000558:	d067      	beq.n	800062a <User_interface+0xde>
 800055a:	2b05      	cmp	r3, #5
 800055c:	dc7f      	bgt.n	800065e <User_interface+0x112>
 800055e:	2b03      	cmp	r3, #3
 8000560:	d002      	beq.n	8000568 <User_interface+0x1c>
 8000562:	2b04      	cmp	r3, #4
 8000564:	d004      	beq.n	8000570 <User_interface+0x24>
//				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
//				Master_behavior = WAIT_FOR_REPLY;
			//}
			break;
		default:
			break;
 8000566:	e07a      	b.n	800065e <User_interface+0x112>
			User_behavior = SEND_MANUAL;
 8000568:	4b3f      	ldr	r3, [pc, #252]	@ (8000668 <User_interface+0x11c>)
 800056a:	2204      	movs	r2, #4
 800056c:	701a      	strb	r2, [r3, #0]
			break;
 800056e:	e077      	b.n	8000660 <User_interface+0x114>
			if(isPress(0)){
 8000570:	2000      	movs	r0, #0
 8000572:	f000 fb75 	bl	8000c60 <isPress>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d002      	beq.n	8000582 <User_interface+0x36>
				User_behavior = SEND_PERIOD;
 800057c:	4b3a      	ldr	r3, [pc, #232]	@ (8000668 <User_interface+0x11c>)
 800057e:	2205      	movs	r2, #5
 8000580:	701a      	strb	r2, [r3, #0]
			if(isPress(1)){ // READ TEMPERATURE
 8000582:	2001      	movs	r0, #1
 8000584:	f000 fb6c 	bl	8000c60 <isPress>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d013      	beq.n	80005b6 <User_interface+0x6a>
				uint8_t data[4] = {0x00,TEMPERATURE_REGISTER_ADDRESS,0x00,0x01};
 800058e:	f04f 2301 	mov.w	r3, #16777472	@ 0x1000100
 8000592:	60fb      	str	r3, [r7, #12]
				Modbus_PrepareData(&Master, SLAVE_ADDRESS, 0x03, data, 4);
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2204      	movs	r2, #4
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	2203      	movs	r2, #3
 800059e:	2101      	movs	r1, #1
 80005a0:	4832      	ldr	r0, [pc, #200]	@ (800066c <User_interface+0x120>)
 80005a2:	f001 fac1 	bl	8001b28 <Modbus_PrepareData>
				Modbus_Transmit(&Master, 5000);
 80005a6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80005aa:	4830      	ldr	r0, [pc, #192]	@ (800066c <User_interface+0x120>)
 80005ac:	f001 fb0c 	bl	8001bc8 <Modbus_Transmit>
				Master_behavior = PROCESSING_REPLY;
 80005b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000670 <User_interface+0x124>)
 80005b2:	2202      	movs	r2, #2
 80005b4:	701a      	strb	r2, [r3, #0]
			if(isPress(2)){ // READ HUMID
 80005b6:	2002      	movs	r0, #2
 80005b8:	f000 fb52 	bl	8000c60 <isPress>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d013      	beq.n	80005ea <User_interface+0x9e>
				uint8_t data[4] = {0x00,HUMIDLITY_REGISTER_ADDRESS,0x00,0x01};
 80005c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80005c6:	60bb      	str	r3, [r7, #8]
				Modbus_PrepareData(&Master, SLAVE_ADDRESS, 0x03, data, 4);
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	2204      	movs	r2, #4
 80005ce:	9200      	str	r2, [sp, #0]
 80005d0:	2203      	movs	r2, #3
 80005d2:	2101      	movs	r1, #1
 80005d4:	4825      	ldr	r0, [pc, #148]	@ (800066c <User_interface+0x120>)
 80005d6:	f001 faa7 	bl	8001b28 <Modbus_PrepareData>
				Modbus_Transmit(&Master, 5000);
 80005da:	f241 3188 	movw	r1, #5000	@ 0x1388
 80005de:	4823      	ldr	r0, [pc, #140]	@ (800066c <User_interface+0x120>)
 80005e0:	f001 faf2 	bl	8001bc8 <Modbus_Transmit>
				Master_behavior = PROCESSING_REPLY;
 80005e4:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <User_interface+0x124>)
 80005e6:	2202      	movs	r2, #2
 80005e8:	701a      	strb	r2, [r3, #0]
			if(isPress(3)){ // READ TEMPERATURE AND HUMID
 80005ea:	2003      	movs	r0, #3
 80005ec:	f000 fb38 	bl	8000c60 <isPress>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d012      	beq.n	800061c <User_interface+0xd0>
				uint8_t data[4] = {0x00,0x00,0x00,0x02};
 80005f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80005fa:	607b      	str	r3, [r7, #4]
				Modbus_PrepareData(&Master, SLAVE_ADDRESS, 0x03, data, 4);
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2204      	movs	r2, #4
 8000600:	9200      	str	r2, [sp, #0]
 8000602:	2203      	movs	r2, #3
 8000604:	2101      	movs	r1, #1
 8000606:	4819      	ldr	r0, [pc, #100]	@ (800066c <User_interface+0x120>)
 8000608:	f001 fa8e 	bl	8001b28 <Modbus_PrepareData>
				Modbus_Transmit(&Master, 5000);
 800060c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000610:	4816      	ldr	r0, [pc, #88]	@ (800066c <User_interface+0x120>)
 8000612:	f001 fad9 	bl	8001bc8 <Modbus_Transmit>
				Master_behavior = PROCESSING_REPLY;
 8000616:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <User_interface+0x124>)
 8000618:	2202      	movs	r2, #2
 800061a:	701a      	strb	r2, [r3, #0]
			if(isPress(4)){// WRITE SINGLE COIL
 800061c:	2004      	movs	r0, #4
 800061e:	f000 fb1f 	bl	8000c60 <isPress>
			if(isPress(5)){// WRITE SINGLE HOLDING REGISTER
 8000622:	2005      	movs	r0, #5
 8000624:	f000 fb1c 	bl	8000c60 <isPress>
			break;
 8000628:	e01a      	b.n	8000660 <User_interface+0x114>
			if(isPress(0)){
 800062a:	2000      	movs	r0, #0
 800062c:	f000 fb18 	bl	8000c60 <isPress>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <User_interface+0xf0>
				User_behavior = SEND_MANUAL;
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <User_interface+0x11c>)
 8000638:	2204      	movs	r2, #4
 800063a:	701a      	strb	r2, [r3, #0]
				Modbus_PrepareData(&Master, SLAVE_ADDRESS, 0x03, data_manual, 4);
 800063c:	2304      	movs	r3, #4
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <User_interface+0x128>)
 8000642:	2203      	movs	r2, #3
 8000644:	2101      	movs	r1, #1
 8000646:	4809      	ldr	r0, [pc, #36]	@ (800066c <User_interface+0x120>)
 8000648:	f001 fa6e 	bl	8001b28 <Modbus_PrepareData>
				Modbus_Transmit(&Master, 5000);
 800064c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000650:	4806      	ldr	r0, [pc, #24]	@ (800066c <User_interface+0x120>)
 8000652:	f001 fab9 	bl	8001bc8 <Modbus_Transmit>
				Master_behavior = PROCESSING_REPLY;
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <User_interface+0x124>)
 8000658:	2202      	movs	r2, #2
 800065a:	701a      	strb	r2, [r3, #0]
			break;
 800065c:	e000      	b.n	8000660 <User_interface+0x114>
			break;
 800065e:	bf00      	nop
	}
}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000004 	.word	0x20000004
 800066c:	20000530 	.word	0x20000530
 8000670:	20000358 	.word	0x20000358
 8000674:	20000000 	.word	0x20000000

08000678 <Master_Run>:
void Master_Run(Modbus_HandleTypeDef* hModbus){
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	6078      	str	r0, [r7, #4]
	switch(Master_behavior){
 8000680:	4b3f      	ldr	r3, [pc, #252]	@ (8000780 <Master_Run+0x108>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b03      	cmp	r3, #3
 8000686:	d06b      	beq.n	8000760 <Master_Run+0xe8>
 8000688:	2b03      	cmp	r3, #3
 800068a:	dc72      	bgt.n	8000772 <Master_Run+0xfa>
 800068c:	2b00      	cmp	r3, #0
 800068e:	d072      	beq.n	8000776 <Master_Run+0xfe>
 8000690:	2b02      	cmp	r3, #2
 8000692:	d000      	beq.n	8000696 <Master_Run+0x1e>
//				Master_behavior = WAIT_FOR_REPLY;
				Modbus_Transmit(&Master, 5000);
				Master_behavior = PROCESSING_REPLY;
			break;
		default:
			break;
 8000694:	e06d      	b.n	8000772 <Master_Run+0xfa>
				if(hModbus->Rx_size < 4){
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800069c:	2b03      	cmp	r3, #3
 800069e:	d803      	bhi.n	80006a8 <Master_Run+0x30>
					Master_behavior = PROCESSING_ERROR;
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <Master_Run+0x108>)
 80006a2:	2203      	movs	r2, #3
 80006a4:	701a      	strb	r2, [r3, #0]
					break;
 80006a6:	e067      	b.n	8000778 <Master_Run+0x100>
				parserFrame(hModbus->Rx_buf,hModbus->Rx_size ,&address, &function, data, &size, &crc_receive);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f503 7084 	add.w	r0, r3, #264	@ 0x108
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80006b4:	b2d9      	uxtb	r1, r3
 80006b6:	4b33      	ldr	r3, [pc, #204]	@ (8000784 <Master_Run+0x10c>)
 80006b8:	9302      	str	r3, [sp, #8]
 80006ba:	4b33      	ldr	r3, [pc, #204]	@ (8000788 <Master_Run+0x110>)
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	4b33      	ldr	r3, [pc, #204]	@ (800078c <Master_Run+0x114>)
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	4b33      	ldr	r3, [pc, #204]	@ (8000790 <Master_Run+0x118>)
 80006c4:	4a33      	ldr	r2, [pc, #204]	@ (8000794 <Master_Run+0x11c>)
 80006c6:	f7ff fef7 	bl	80004b8 <parserFrame>
				if(crc_receive == crc16(hModbus->Rx_buf, size + 2)){
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80006d0:	4a2d      	ldr	r2, [pc, #180]	@ (8000788 <Master_Run+0x110>)
 80006d2:	7812      	ldrb	r2, [r2, #0]
 80006d4:	3202      	adds	r2, #2
 80006d6:	b292      	uxth	r2, r2
 80006d8:	4611      	mov	r1, r2
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fae0 	bl	8000ca0 <crc16>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b27      	ldr	r3, [pc, #156]	@ (8000784 <Master_Run+0x10c>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d135      	bne.n	8000758 <Master_Run+0xe0>
					switch(function){
 80006ec:	4b28      	ldr	r3, [pc, #160]	@ (8000790 <Master_Run+0x118>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b10      	cmp	r3, #16
 80006f2:	d02a      	beq.n	800074a <Master_Run+0xd2>
 80006f4:	2b10      	cmp	r3, #16
 80006f6:	dc2a      	bgt.n	800074e <Master_Run+0xd6>
 80006f8:	2b03      	cmp	r3, #3
 80006fa:	d001      	beq.n	8000700 <Master_Run+0x88>
 80006fc:	2b05      	cmp	r3, #5
							break;
 80006fe:	e027      	b.n	8000750 <Master_Run+0xd8>
							uint8_t num_bytes = hModbus->Rx_buf[2];
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8000706:	72fb      	strb	r3, [r7, #11]
							uint16_t address = (((uint16_t)hModbus->Tx_buf[2]<<8)|(hModbus->Tx_buf[3]));
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	79db      	ldrb	r3, [r3, #7]
 800070c:	021b      	lsls	r3, r3, #8
 800070e:	b21a      	sxth	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	7a1b      	ldrb	r3, [r3, #8]
 8000714:	b21b      	sxth	r3, r3
 8000716:	4313      	orrs	r3, r2
 8000718:	b21b      	sxth	r3, r3
 800071a:	813b      	strh	r3, [r7, #8]
							for(int i=0;i<num_bytes;i++){
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	e00e      	b.n	8000740 <Master_Run+0xc8>
								Holding_Register[i + address * SizeOfReg]  = hModbus->Rx_buf[i+3];
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	1cda      	adds	r2, r3, #3
 8000726:	893b      	ldrh	r3, [r7, #8]
 8000728:	0059      	lsls	r1, r3, #1
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	440b      	add	r3, r1
 800072e:	6879      	ldr	r1, [r7, #4]
 8000730:	440a      	add	r2, r1
 8000732:	f892 1108 	ldrb.w	r1, [r2, #264]	@ 0x108
 8000736:	4a18      	ldr	r2, [pc, #96]	@ (8000798 <Master_Run+0x120>)
 8000738:	54d1      	strb	r1, [r2, r3]
							for(int i=0;i<num_bytes;i++){
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	3301      	adds	r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	7afb      	ldrb	r3, [r7, #11]
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	429a      	cmp	r2, r3
 8000746:	dbec      	blt.n	8000722 <Master_Run+0xaa>
							break;
 8000748:	e002      	b.n	8000750 <Master_Run+0xd8>
							break;
 800074a:	bf00      	nop
 800074c:	e000      	b.n	8000750 <Master_Run+0xd8>
							break;
 800074e:	bf00      	nop
					Master_behavior = IDLE;
 8000750:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <Master_Run+0x108>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
			break;
 8000756:	e00f      	b.n	8000778 <Master_Run+0x100>
					Master_behavior = PROCESSING_ERROR;
 8000758:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <Master_Run+0x108>)
 800075a:	2203      	movs	r2, #3
 800075c:	701a      	strb	r2, [r3, #0]
			break;
 800075e:	e00b      	b.n	8000778 <Master_Run+0x100>
				Modbus_Transmit(&Master, 5000);
 8000760:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000764:	480d      	ldr	r0, [pc, #52]	@ (800079c <Master_Run+0x124>)
 8000766:	f001 fa2f 	bl	8001bc8 <Modbus_Transmit>
				Master_behavior = PROCESSING_REPLY;
 800076a:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <Master_Run+0x108>)
 800076c:	2202      	movs	r2, #2
 800076e:	701a      	strb	r2, [r3, #0]
			break;
 8000770:	e002      	b.n	8000778 <Master_Run+0x100>
			break;
 8000772:	bf00      	nop
 8000774:	e000      	b.n	8000778 <Master_Run+0x100>
			break;
 8000776:	bf00      	nop
	}
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000358 	.word	0x20000358
 8000784:	20000356 	.word	0x20000356
 8000788:	20000354 	.word	0x20000354
 800078c:	20000254 	.word	0x20000254
 8000790:	20000251 	.word	0x20000251
 8000794:	20000250 	.word	0x20000250
 8000798:	2000035c 	.word	0x2000035c
 800079c:	20000530 	.word	0x20000530

080007a0 <Master_get_temperature>:
float Master_get_temperature(){
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
	uint16_t res = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < SizeOfReg; i++){
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	e00d      	b.n	80007cc <Master_get_temperature+0x2c>
		res = (res<<8)|(Holding_Register[TEMPERATURE_REGISTER_ADDRESS*SizeOfReg + i]);
 80007b0:	88fb      	ldrh	r3, [r7, #6]
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	3302      	adds	r3, #2
 80007ba:	490f      	ldr	r1, [pc, #60]	@ (80007f8 <Master_get_temperature+0x58>)
 80007bc:	5ccb      	ldrb	r3, [r1, r3]
 80007be:	b21b      	sxth	r3, r3
 80007c0:	4313      	orrs	r3, r2
 80007c2:	b21b      	sxth	r3, r3
 80007c4:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < SizeOfReg; i++){
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	ddee      	ble.n	80007b0 <Master_get_temperature+0x10>
	}
	return (float)res/10;
 80007d2:	88fb      	ldrh	r3, [r7, #6]
 80007d4:	ee07 3a90 	vmov	s15, r3
 80007d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007dc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80007e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80007e4:	eef0 7a66 	vmov.f32	s15, s13
}
 80007e8:	eeb0 0a67 	vmov.f32	s0, s15
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	2000035c 	.word	0x2000035c

080007fc <Master_get_humid>:
float Master_get_humid(){
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
	uint16_t res = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < SizeOfReg; i++){
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	e00d      	b.n	8000828 <Master_get_humid+0x2c>
		res = (res<<8)|(Holding_Register[HUMIDLITY_REGISTER_ADDRESS*SizeOfReg + i]);
 800080c:	88fb      	ldrh	r3, [r7, #6]
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	b21a      	sxth	r2, r3
 8000812:	4910      	ldr	r1, [pc, #64]	@ (8000854 <Master_get_humid+0x58>)
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	440b      	add	r3, r1
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b21b      	sxth	r3, r3
 800081c:	4313      	orrs	r3, r2
 800081e:	b21b      	sxth	r3, r3
 8000820:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < SizeOfReg; i++){
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	3301      	adds	r3, #1
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	ddee      	ble.n	800080c <Master_get_humid+0x10>
	}
	return (float)res/10;
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	ee07 3a90 	vmov	s15, r3
 8000834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000838:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800083c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000840:	eef0 7a66 	vmov.f32	s15, s13
}
 8000844:	eeb0 0a67 	vmov.f32	s0, s15
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	2000035c 	.word	0x2000035c

08000858 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085e:	463b      	mov	r3, r7
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800086a:	4b39      	ldr	r3, [pc, #228]	@ (8000950 <MX_ADC1_Init+0xf8>)
 800086c:	4a39      	ldr	r2, [pc, #228]	@ (8000954 <MX_ADC1_Init+0xfc>)
 800086e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000870:	4b37      	ldr	r3, [pc, #220]	@ (8000950 <MX_ADC1_Init+0xf8>)
 8000872:	2200      	movs	r2, #0
 8000874:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000876:	4b36      	ldr	r3, [pc, #216]	@ (8000950 <MX_ADC1_Init+0xf8>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800087c:	4b34      	ldr	r3, [pc, #208]	@ (8000950 <MX_ADC1_Init+0xf8>)
 800087e:	2201      	movs	r2, #1
 8000880:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000882:	4b33      	ldr	r3, [pc, #204]	@ (8000950 <MX_ADC1_Init+0xf8>)
 8000884:	2200      	movs	r2, #0
 8000886:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000888:	4b31      	ldr	r3, [pc, #196]	@ (8000950 <MX_ADC1_Init+0xf8>)
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000890:	4b2f      	ldr	r3, [pc, #188]	@ (8000950 <MX_ADC1_Init+0xf8>)
 8000892:	2200      	movs	r2, #0
 8000894:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000896:	4b2e      	ldr	r3, [pc, #184]	@ (8000950 <MX_ADC1_Init+0xf8>)
 8000898:	4a2f      	ldr	r2, [pc, #188]	@ (8000958 <MX_ADC1_Init+0x100>)
 800089a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089c:	4b2c      	ldr	r3, [pc, #176]	@ (8000950 <MX_ADC1_Init+0xf8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80008a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000950 <MX_ADC1_Init+0xf8>)
 80008a4:	2205      	movs	r2, #5
 80008a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008a8:	4b29      	ldr	r3, [pc, #164]	@ (8000950 <MX_ADC1_Init+0xf8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b0:	4b27      	ldr	r3, [pc, #156]	@ (8000950 <MX_ADC1_Init+0xf8>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b6:	4826      	ldr	r0, [pc, #152]	@ (8000950 <MX_ADC1_Init+0xf8>)
 80008b8:	f001 fecc 	bl	8002654 <HAL_ADC_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008c2:	f001 f909 	bl	8001ad8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008c6:	2308      	movs	r3, #8
 80008c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80008ce:	2301      	movs	r3, #1
 80008d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	4619      	mov	r1, r3
 80008d6:	481e      	ldr	r0, [pc, #120]	@ (8000950 <MX_ADC1_Init+0xf8>)
 80008d8:	f002 f82e 	bl	8002938 <HAL_ADC_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80008e2:	f001 f8f9 	bl	8001ad8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ea:	463b      	mov	r3, r7
 80008ec:	4619      	mov	r1, r3
 80008ee:	4818      	ldr	r0, [pc, #96]	@ (8000950 <MX_ADC1_Init+0xf8>)
 80008f0:	f002 f822 	bl	8002938 <HAL_ADC_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80008fa:	f001 f8ed 	bl	8001ad8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 80008fe:	2303      	movs	r3, #3
 8000900:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	4619      	mov	r1, r3
 8000906:	4812      	ldr	r0, [pc, #72]	@ (8000950 <MX_ADC1_Init+0xf8>)
 8000908:	f002 f816 	bl	8002938 <HAL_ADC_ConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8000912:	f001 f8e1 	bl	8001ad8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8000916:	2304      	movs	r3, #4
 8000918:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091a:	463b      	mov	r3, r7
 800091c:	4619      	mov	r1, r3
 800091e:	480c      	ldr	r0, [pc, #48]	@ (8000950 <MX_ADC1_Init+0xf8>)
 8000920:	f002 f80a 	bl	8002938 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800092a:	f001 f8d5 	bl	8001ad8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 800092e:	2305      	movs	r3, #5
 8000930:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	4619      	mov	r1, r3
 8000936:	4806      	ldr	r0, [pc, #24]	@ (8000950 <MX_ADC1_Init+0xf8>)
 8000938:	f001 fffe 	bl	8002938 <HAL_ADC_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000942:	f001 f8c9 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000368 	.word	0x20000368
 8000954:	40012000 	.word	0x40012000
 8000958:	0f000001 	.word	0x0f000001

0800095c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	@ 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a3c      	ldr	r2, [pc, #240]	@ (8000a6c <HAL_ADC_MspInit+0x110>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d171      	bne.n	8000a62 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	4b3b      	ldr	r3, [pc, #236]	@ (8000a70 <HAL_ADC_MspInit+0x114>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000986:	4a3a      	ldr	r2, [pc, #232]	@ (8000a70 <HAL_ADC_MspInit+0x114>)
 8000988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800098c:	6453      	str	r3, [r2, #68]	@ 0x44
 800098e:	4b38      	ldr	r3, [pc, #224]	@ (8000a70 <HAL_ADC_MspInit+0x114>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b34      	ldr	r3, [pc, #208]	@ (8000a70 <HAL_ADC_MspInit+0x114>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a33      	ldr	r2, [pc, #204]	@ (8000a70 <HAL_ADC_MspInit+0x114>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b31      	ldr	r3, [pc, #196]	@ (8000a70 <HAL_ADC_MspInit+0x114>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000a70 <HAL_ADC_MspInit+0x114>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a2c      	ldr	r2, [pc, #176]	@ (8000a70 <HAL_ADC_MspInit+0x114>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a70 <HAL_ADC_MspInit+0x114>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80009d2:	2307      	movs	r3, #7
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d6:	2303      	movs	r3, #3
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	4823      	ldr	r0, [pc, #140]	@ (8000a74 <HAL_ADC_MspInit+0x118>)
 80009e6:	f002 ff5b 	bl	80038a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009ea:	2303      	movs	r3, #3
 80009ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ee:	2303      	movs	r3, #3
 80009f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	481e      	ldr	r0, [pc, #120]	@ (8000a78 <HAL_ADC_MspInit+0x11c>)
 80009fe:	f002 ff4f 	bl	80038a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a02:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <HAL_ADC_MspInit+0x120>)
 8000a04:	4a1e      	ldr	r2, [pc, #120]	@ (8000a80 <HAL_ADC_MspInit+0x124>)
 8000a06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000a08:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <HAL_ADC_MspInit+0x120>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <HAL_ADC_MspInit+0x120>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a14:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <HAL_ADC_MspInit+0x120>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a1a:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <HAL_ADC_MspInit+0x120>)
 8000a1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a20:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a22:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <HAL_ADC_MspInit+0x120>)
 8000a24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <HAL_ADC_MspInit+0x120>)
 8000a2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a30:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a32:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <HAL_ADC_MspInit+0x120>)
 8000a34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a38:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a3a:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <HAL_ADC_MspInit+0x120>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a40:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <HAL_ADC_MspInit+0x120>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a46:	480d      	ldr	r0, [pc, #52]	@ (8000a7c <HAL_ADC_MspInit+0x120>)
 8000a48:	f002 fb28 	bl	800309c <HAL_DMA_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000a52:	f001 f841 	bl	8001ad8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a08      	ldr	r2, [pc, #32]	@ (8000a7c <HAL_ADC_MspInit+0x120>)
 8000a5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a5c:	4a07      	ldr	r2, [pc, #28]	@ (8000a7c <HAL_ADC_MspInit+0x120>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	@ 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40012000 	.word	0x40012000
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020800 	.word	0x40020800
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	200003b0 	.word	0x200003b0
 8000a80:	40026410 	.word	0x40026410

08000a84 <button_scan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void button_scan() {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
	// Shift button input
	for (int i = 0; i < 16; i++)
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	e012      	b.n	8000ab6 <button_scan+0x32>
	{
		button_count2[i] = button_count1[i];
 8000a90:	4a69      	ldr	r2, [pc, #420]	@ (8000c38 <button_scan+0x1b4>)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a98:	4a68      	ldr	r2, [pc, #416]	@ (8000c3c <button_scan+0x1b8>)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		button_count1[i] = button_count[i];
 8000aa0:	4a67      	ldr	r2, [pc, #412]	@ (8000c40 <button_scan+0x1bc>)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000aa8:	4a63      	ldr	r2, [pc, #396]	@ (8000c38 <button_scan+0x1b4>)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 16; i++)
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	dde9      	ble.n	8000a90 <button_scan+0xc>
	}

	// Get new key input to button_count
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2108      	movs	r1, #8
 8000ac0:	4860      	ldr	r0, [pc, #384]	@ (8000c44 <button_scan+0x1c0>)
 8000ac2:	f003 f889 	bl	8003bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2108      	movs	r1, #8
 8000aca:	485e      	ldr	r0, [pc, #376]	@ (8000c44 <button_scan+0x1c0>)
 8000acc:	f003 f884 	bl	8003bd8 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 8000ad0:	230a      	movs	r3, #10
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	495c      	ldr	r1, [pc, #368]	@ (8000c48 <button_scan+0x1c4>)
 8000ad6:	485d      	ldr	r0, [pc, #372]	@ (8000c4c <button_scan+0x1c8>)
 8000ad8:	f003 fd93 	bl	8004602 <HAL_SPI_Receive>

	int button_index = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
	uint16_t mask = 0x8000;
 8000ae0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ae4:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++) {
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	e03a      	b.n	8000b62 <button_scan+0xde>
		if (i >= 0 && i <= 3) {
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db06      	blt.n	8000b00 <button_scan+0x7c>
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	dc03      	bgt.n	8000b00 <button_scan+0x7c>
			button_index = i + 4;
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	3304      	adds	r3, #4
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	e018      	b.n	8000b32 <button_scan+0xae>
		} else if (i >= 4 && i <= 7) {
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	dd07      	ble.n	8000b16 <button_scan+0x92>
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	2b07      	cmp	r3, #7
 8000b0a:	dc04      	bgt.n	8000b16 <button_scan+0x92>
			button_index = 7 - i;
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	f1c3 0307 	rsb	r3, r3, #7
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	e00d      	b.n	8000b32 <button_scan+0xae>
		} else if (i >= 8 && i <= 11) {
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	2b07      	cmp	r3, #7
 8000b1a:	dd06      	ble.n	8000b2a <button_scan+0xa6>
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	2b0b      	cmp	r3, #11
 8000b20:	dc03      	bgt.n	8000b2a <button_scan+0xa6>
			button_index = i + 4;
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	3304      	adds	r3, #4
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	e003      	b.n	8000b32 <button_scan+0xae>
		} else {
			button_index = 23 - i;
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	f1c3 0317 	rsb	r3, r3, #23
 8000b30:	613b      	str	r3, [r7, #16]
		}
		if (button_spi_buffer & mask)
 8000b32:	4b45      	ldr	r3, [pc, #276]	@ (8000c48 <button_scan+0x1c4>)
 8000b34:	881a      	ldrh	r2, [r3, #0]
 8000b36:	89fb      	ldrh	r3, [r7, #14]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d005      	beq.n	8000b4c <button_scan+0xc8>
			button_count[button_index] = 0;
 8000b40:	4a3f      	ldr	r2, [pc, #252]	@ (8000c40 <button_scan+0x1bc>)
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	2100      	movs	r1, #0
 8000b46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000b4a:	e004      	b.n	8000b56 <button_scan+0xd2>
		else
			button_count[button_index] = 1;
 8000b4c:	4a3c      	ldr	r2, [pc, #240]	@ (8000c40 <button_scan+0x1bc>)
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	2101      	movs	r1, #1
 8000b52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 8000b56:	89fb      	ldrh	r3, [r7, #14]
 8000b58:	085b      	lsrs	r3, r3, #1
 8000b5a:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++) {
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	ddc1      	ble.n	8000aec <button_scan+0x68>
	}

	for (int i = 0; i < 16; i++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	e05b      	b.n	8000c26 <button_scan+0x1a2>
	{
		if ((button_count[i] == button_count1[i]) && (button_count1[i] == button_count2[i]))
 8000b6e:	4a34      	ldr	r2, [pc, #208]	@ (8000c40 <button_scan+0x1bc>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b76:	4930      	ldr	r1, [pc, #192]	@ (8000c38 <button_scan+0x1b4>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d14e      	bne.n	8000c20 <button_scan+0x19c>
 8000b82:	4a2d      	ldr	r2, [pc, #180]	@ (8000c38 <button_scan+0x1b4>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b8a:	492c      	ldr	r1, [pc, #176]	@ (8000c3c <button_scan+0x1b8>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d144      	bne.n	8000c20 <button_scan+0x19c>
		{
			if (button_count2[i] != button_count3[i])
 8000b96:	4a29      	ldr	r2, [pc, #164]	@ (8000c3c <button_scan+0x1b8>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b9e:	492c      	ldr	r1, [pc, #176]	@ (8000c50 <button_scan+0x1cc>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d019      	beq.n	8000bde <button_scan+0x15a>
			{
				button_count3[i] = button_count2[i];
 8000baa:	4a24      	ldr	r2, [pc, #144]	@ (8000c3c <button_scan+0x1b8>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000bb2:	4a27      	ldr	r2, [pc, #156]	@ (8000c50 <button_scan+0x1cc>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				if (button_count3[i] == 1) // PRESSED
 8000bba:	4a25      	ldr	r2, [pc, #148]	@ (8000c50 <button_scan+0x1cc>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d12c      	bne.n	8000c20 <button_scan+0x19c>
				{
					timeOutForPress[i] = TIME_OUT_FOR_LONG_PRESS ;
 8000bc6:	4a23      	ldr	r2, [pc, #140]	@ (8000c54 <button_scan+0x1d0>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000bce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					isPressed[i] = 1;
 8000bd2:	4a21      	ldr	r2, [pc, #132]	@ (8000c58 <button_scan+0x1d4>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000bdc:	e020      	b.n	8000c20 <button_scan+0x19c>
				}
			}
			else
			{
				timeOutForPress[i]--;
 8000bde:	4a1d      	ldr	r2, [pc, #116]	@ (8000c54 <button_scan+0x1d0>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	b299      	uxth	r1, r3
 8000bea:	4a1a      	ldr	r2, [pc, #104]	@ (8000c54 <button_scan+0x1d0>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if (timeOutForPress[i] <= 0)
 8000bf2:	4a18      	ldr	r2, [pc, #96]	@ (8000c54 <button_scan+0x1d0>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d110      	bne.n	8000c20 <button_scan+0x19c>
				{
					timeOutForPress[i] = TIME_OUT_FOR_LONG_PRESS;
 8000bfe:	4a15      	ldr	r2, [pc, #84]	@ (8000c54 <button_scan+0x1d0>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000c06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (button_count3[i] == 1) // PRESSED
 8000c0a:	4a11      	ldr	r2, [pc, #68]	@ (8000c50 <button_scan+0x1cc>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d104      	bne.n	8000c20 <button_scan+0x19c>
					{
						isLongPressed[i] = 1;
 8000c16:	4a11      	ldr	r2, [pc, #68]	@ (8000c5c <button_scan+0x1d8>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 16; i++)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3301      	adds	r3, #1
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	dda0      	ble.n	8000b6e <button_scan+0xea>
					}
				}
			}
		}
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000490 	.word	0x20000490
 8000c3c:	20000470 	.word	0x20000470
 8000c40:	200004b0 	.word	0x200004b0
 8000c44:	40020c00 	.word	0x40020c00
 8000c48:	200004d0 	.word	0x200004d0
 8000c4c:	20000758 	.word	0x20000758
 8000c50:	20000450 	.word	0x20000450
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000410 	.word	0x20000410
 8000c5c:	20000430 	.word	0x20000430

08000c60 <isPress>:

uint8_t isPress(uint8_t index)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index > 15) return 0;
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d901      	bls.n	8000c74 <isPress+0x14>
 8000c70:	2300      	movs	r3, #0
 8000c72:	e00d      	b.n	8000c90 <isPress+0x30>
	if (isPressed[index] == 1)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	4a09      	ldr	r2, [pc, #36]	@ (8000c9c <isPress+0x3c>)
 8000c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d106      	bne.n	8000c8e <isPress+0x2e>
	{
		isPressed[index] = 0;
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	4a06      	ldr	r2, [pc, #24]	@ (8000c9c <isPress+0x3c>)
 8000c84:	2100      	movs	r1, #0
 8000c86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		return 1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <isPress+0x30>
	}
	return 0;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	20000410 	.word	0x20000410

08000ca0 <crc16>:
    0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641,
    0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040
};

uint16_t crc16(const uint8_t *data, uint16_t num_bytes)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8000cac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cb0:	82fb      	strh	r3, [r7, #22]
    const uint8_t *ptr = data;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	613b      	str	r3, [r7, #16]

    if (ptr != NULL)
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d018      	beq.n	8000cee <crc16+0x4e>
    {
        for (uint16_t i = 0; i < num_bytes; i++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	81fb      	strh	r3, [r7, #14]
 8000cc0:	e011      	b.n	8000ce6 <crc16+0x46>
        {
            crc = (crc >> 8) ^ crc16_lookup_table[(crc ^ (uint16_t)*ptr++) & 0x00FF];
 8000cc2:	8afb      	ldrh	r3, [r7, #22]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	8af9      	ldrh	r1, [r7, #22]
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	1c58      	adds	r0, r3, #1
 8000cce:	6138      	str	r0, [r7, #16]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	404b      	eors	r3, r1
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4909      	ldr	r1, [pc, #36]	@ (8000cfc <crc16+0x5c>)
 8000cd8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000cdc:	4053      	eors	r3, r2
 8000cde:	82fb      	strh	r3, [r7, #22]
        for (uint16_t i = 0; i < num_bytes; i++)
 8000ce0:	89fb      	ldrh	r3, [r7, #14]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	81fb      	strh	r3, [r7, #14]
 8000ce6:	89fa      	ldrh	r2, [r7, #14]
 8000ce8:	887b      	ldrh	r3, [r7, #2]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d3e9      	bcc.n	8000cc2 <crc16+0x22>
        }
    }

    return crc;
 8000cee:	8afb      	ldrh	r3, [r7, #22]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	371c      	adds	r7, #28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	20000028 	.word	0x20000028

08000d00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <MX_DMA_Init+0x3c>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d3c <MX_DMA_Init+0x3c>)
 8000d10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_DMA_Init+0x3c>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	2038      	movs	r0, #56	@ 0x38
 8000d28:	f002 f981 	bl	800302e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d2c:	2038      	movs	r0, #56	@ 0x38
 8000d2e:	f002 f99a 	bl	8003066 <HAL_NVIC_EnableIRQ>

}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800

08000d40 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08e      	sub	sp, #56	@ 0x38
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]
 8000d56:	615a      	str	r2, [r3, #20]
 8000d58:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]
 8000d6a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e2c <MX_FSMC_Init+0xec>)
 8000d6e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000d72:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000d74:	4b2d      	ldr	r3, [pc, #180]	@ (8000e2c <MX_FSMC_Init+0xec>)
 8000d76:	4a2e      	ldr	r2, [pc, #184]	@ (8000e30 <MX_FSMC_Init+0xf0>)
 8000d78:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e2c <MX_FSMC_Init+0xec>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000d80:	4b2a      	ldr	r3, [pc, #168]	@ (8000e2c <MX_FSMC_Init+0xec>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000d86:	4b29      	ldr	r3, [pc, #164]	@ (8000e2c <MX_FSMC_Init+0xec>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000d8c:	4b27      	ldr	r3, [pc, #156]	@ (8000e2c <MX_FSMC_Init+0xec>)
 8000d8e:	2210      	movs	r2, #16
 8000d90:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000d92:	4b26      	ldr	r3, [pc, #152]	@ (8000e2c <MX_FSMC_Init+0xec>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d98:	4b24      	ldr	r3, [pc, #144]	@ (8000e2c <MX_FSMC_Init+0xec>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000d9e:	4b23      	ldr	r3, [pc, #140]	@ (8000e2c <MX_FSMC_Init+0xec>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000da4:	4b21      	ldr	r3, [pc, #132]	@ (8000e2c <MX_FSMC_Init+0xec>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000daa:	4b20      	ldr	r3, [pc, #128]	@ (8000e2c <MX_FSMC_Init+0xec>)
 8000dac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000db0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000db2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e2c <MX_FSMC_Init+0xec>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000db8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e2c <MX_FSMC_Init+0xec>)
 8000dba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <MX_FSMC_Init+0xec>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <MX_FSMC_Init+0xec>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <MX_FSMC_Init+0xec>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000dd6:	230f      	movs	r3, #15
 8000dd8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000dda:	233c      	movs	r3, #60	@ 0x3c
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000de2:	2310      	movs	r3, #16
 8000de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000de6:	2311      	movs	r3, #17
 8000de8:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000dea:	2300      	movs	r3, #0
 8000dec:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000dee:	2308      	movs	r3, #8
 8000df0:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000df2:	230f      	movs	r3, #15
 8000df4:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000df6:	2309      	movs	r3, #9
 8000df8:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000dfe:	2310      	movs	r3, #16
 8000e00:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000e02:	2311      	movs	r3, #17
 8000e04:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000e0a:	463a      	mov	r2, r7
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4619      	mov	r1, r3
 8000e12:	4806      	ldr	r0, [pc, #24]	@ (8000e2c <MX_FSMC_Init+0xec>)
 8000e14:	f003 fffa 	bl	8004e0c <HAL_SRAM_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000e1e:	f000 fe5b 	bl	8001ad8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000e22:	bf00      	nop
 8000e24:	3738      	adds	r7, #56	@ 0x38
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200004d4 	.word	0x200004d4
 8000e30:	a0000104 	.word	0xa0000104

08000e34 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000e48:	4b1c      	ldr	r3, [pc, #112]	@ (8000ebc <HAL_FSMC_MspInit+0x88>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d131      	bne.n	8000eb4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000e50:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <HAL_FSMC_MspInit+0x88>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <HAL_FSMC_MspInit+0x8c>)
 8000e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e5e:	4a18      	ldr	r2, [pc, #96]	@ (8000ec0 <HAL_FSMC_MspInit+0x8c>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6393      	str	r3, [r2, #56]	@ 0x38
 8000e66:	4b16      	ldr	r3, [pc, #88]	@ (8000ec0 <HAL_FSMC_MspInit+0x8c>)
 8000e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000e72:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000e76:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000e84:	230c      	movs	r3, #12
 8000e86:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480d      	ldr	r0, [pc, #52]	@ (8000ec4 <HAL_FSMC_MspInit+0x90>)
 8000e8e:	f002 fd07 	bl	80038a0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000e92:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000e96:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000ea4:	230c      	movs	r3, #12
 8000ea6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4806      	ldr	r0, [pc, #24]	@ (8000ec8 <HAL_FSMC_MspInit+0x94>)
 8000eae:	f002 fcf7 	bl	80038a0 <HAL_GPIO_Init>
 8000eb2:	e000      	b.n	8000eb6 <HAL_FSMC_MspInit+0x82>
    return;
 8000eb4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000524 	.word	0x20000524
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40020c00 	.word	0x40020c00

08000ecc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000ed4:	f7ff ffae 	bl	8000e34 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08c      	sub	sp, #48	@ 0x30
 8000ee4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	4b63      	ldr	r3, [pc, #396]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a62      	ldr	r2, [pc, #392]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b60      	ldr	r3, [pc, #384]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	4b5c      	ldr	r3, [pc, #368]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a5b      	ldr	r2, [pc, #364]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b59      	ldr	r3, [pc, #356]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b55      	ldr	r3, [pc, #340]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a54      	ldr	r2, [pc, #336]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b52      	ldr	r3, [pc, #328]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b4e      	ldr	r3, [pc, #312]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a4d      	ldr	r2, [pc, #308]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	4b47      	ldr	r3, [pc, #284]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a46      	ldr	r2, [pc, #280]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b44      	ldr	r3, [pc, #272]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	4b40      	ldr	r3, [pc, #256]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a3f      	ldr	r2, [pc, #252]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b3d      	ldr	r3, [pc, #244]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	4b39      	ldr	r3, [pc, #228]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	4a38      	ldr	r2, [pc, #224]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fae:	4b36      	ldr	r3, [pc, #216]	@ (8001088 <MX_GPIO_Init+0x1a8>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2110      	movs	r1, #16
 8000fbe:	4833      	ldr	r0, [pc, #204]	@ (800108c <MX_GPIO_Init+0x1ac>)
 8000fc0:	f002 fe0a 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fca:	4831      	ldr	r0, [pc, #196]	@ (8001090 <MX_GPIO_Init+0x1b0>)
 8000fcc:	f002 fe04 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2140      	movs	r1, #64	@ 0x40
 8000fd4:	482f      	ldr	r0, [pc, #188]	@ (8001094 <MX_GPIO_Init+0x1b4>)
 8000fd6:	f002 fdff 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FSMC_BLK_Pin|EN_RS485_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8000fe0:	482d      	ldr	r0, [pc, #180]	@ (8001098 <MX_GPIO_Init+0x1b8>)
 8000fe2:	f002 fdf9 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2108      	movs	r1, #8
 8000fea:	482c      	ldr	r0, [pc, #176]	@ (800109c <MX_GPIO_Init+0x1bc>)
 8000fec:	f002 fdf4 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ff0:	2310      	movs	r3, #16
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	4821      	ldr	r0, [pc, #132]	@ (800108c <MX_GPIO_Init+0x1ac>)
 8001008:	f002 fc4a 	bl	80038a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800100c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4619      	mov	r1, r3
 8001024:	481a      	ldr	r0, [pc, #104]	@ (8001090 <MX_GPIO_Init+0x1b0>)
 8001026:	f002 fc3b 	bl	80038a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800102a:	2340      	movs	r3, #64	@ 0x40
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	4814      	ldr	r0, [pc, #80]	@ (8001094 <MX_GPIO_Init+0x1b4>)
 8001042:	f002 fc2d 	bl	80038a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin|EN_RS485_Pin;
 8001046:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 800104a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	480e      	ldr	r0, [pc, #56]	@ (8001098 <MX_GPIO_Init+0x1b8>)
 8001060:	f002 fc1e 	bl	80038a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001064:	2308      	movs	r3, #8
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	4808      	ldr	r0, [pc, #32]	@ (800109c <MX_GPIO_Init+0x1bc>)
 800107c:	f002 fc10 	bl	80038a0 <HAL_GPIO_Init>

}
 8001080:	bf00      	nop
 8001082:	3730      	adds	r7, #48	@ 0x30
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40023800 	.word	0x40023800
 800108c:	40021000 	.word	0x40021000
 8001090:	40020800 	.word	0x40020800
 8001094:	40021800 	.word	0x40021800
 8001098:	40020000 	.word	0x40020000
 800109c:	40020c00 	.word	0x40020c00

080010a0 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 80010aa:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <LCD_WR_REG+0x1c>)
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	8013      	strh	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	600ffffe 	.word	0x600ffffe

080010c0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 80010ca:	4a04      	ldr	r2, [pc, #16]	@ (80010dc <LCD_WR_DATA+0x1c>)
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	8053      	strh	r3, [r2, #2]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	600ffffe 	.word	0x600ffffe

080010e0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <LCD_RD_DATA+0x20>)
 80010e8:	885b      	ldrh	r3, [r3, #2]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	80fb      	strh	r3, [r7, #6]
	return ram;
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	b29b      	uxth	r3, r3
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	600ffffe 	.word	0x600ffffe

08001104 <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4604      	mov	r4, r0
 800110c:	4608      	mov	r0, r1
 800110e:	4611      	mov	r1, r2
 8001110:	461a      	mov	r2, r3
 8001112:	4623      	mov	r3, r4
 8001114:	80fb      	strh	r3, [r7, #6]
 8001116:	4603      	mov	r3, r0
 8001118:	80bb      	strh	r3, [r7, #4]
 800111a:	460b      	mov	r3, r1
 800111c:	807b      	strh	r3, [r7, #2]
 800111e:	4613      	mov	r3, r2
 8001120:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 8001122:	202a      	movs	r0, #42	@ 0x2a
 8001124:	f7ff ffbc 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	0a1b      	lsrs	r3, r3, #8
 800112c:	b29b      	uxth	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ffc6 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	b29b      	uxth	r3, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ffc0 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	0a1b      	lsrs	r3, r3, #8
 8001144:	b29b      	uxth	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ffba 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	b29b      	uxth	r3, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ffb4 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 8001158:	202b      	movs	r0, #43	@ 0x2b
 800115a:	f7ff ffa1 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 800115e:	88bb      	ldrh	r3, [r7, #4]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	b29b      	uxth	r3, r3
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ffab 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 800116a:	88bb      	ldrh	r3, [r7, #4]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	b29b      	uxth	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ffa5 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 8001176:	883b      	ldrh	r3, [r7, #0]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	b29b      	uxth	r3, r3
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff9f 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 8001182:	883b      	ldrh	r3, [r7, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	b29b      	uxth	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff99 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 800118e:	202c      	movs	r0, #44	@ 0x2c
 8001190:	f7ff ff86 	bl	80010a0 <LCD_WR_REG>
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}

0800119c <lcd_clear>:
/**
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <lcd_clear+0x60>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <lcd_clear+0x60>)
 80011b0:	885b      	ldrh	r3, [r3, #2]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	2100      	movs	r1, #0
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff ffa3 	bl	8001104 <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 80011be:	2300      	movs	r3, #0
 80011c0:	81fb      	strh	r3, [r7, #14]
 80011c2:	e011      	b.n	80011e8 <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 80011c4:	2300      	movs	r3, #0
 80011c6:	81bb      	strh	r3, [r7, #12]
 80011c8:	e006      	b.n	80011d8 <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff77 	bl	80010c0 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 80011d2:	89bb      	ldrh	r3, [r7, #12]
 80011d4:	3301      	adds	r3, #1
 80011d6:	81bb      	strh	r3, [r7, #12]
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <lcd_clear+0x60>)
 80011da:	885b      	ldrh	r3, [r3, #2]
 80011dc:	89ba      	ldrh	r2, [r7, #12]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d3f3      	bcc.n	80011ca <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 80011e2:	89fb      	ldrh	r3, [r7, #14]
 80011e4:	3301      	adds	r3, #1
 80011e6:	81fb      	strh	r3, [r7, #14]
 80011e8:	4b04      	ldr	r3, [pc, #16]	@ (80011fc <lcd_clear+0x60>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	89fa      	ldrh	r2, [r7, #14]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d3e8      	bcc.n	80011c4 <lcd_clear+0x28>
		}
	}
}
 80011f2:	bf00      	nop
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000528 	.word	0x20000528

08001200 <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]
 800120a:	460b      	mov	r3, r1
 800120c:	80bb      	strh	r3, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 8001212:	88bb      	ldrh	r3, [r7, #4]
 8001214:	88fa      	ldrh	r2, [r7, #6]
 8001216:	88b9      	ldrh	r1, [r7, #4]
 8001218:	88f8      	ldrh	r0, [r7, #6]
 800121a:	f7ff ff73 	bl	8001104 <lcd_set_address>
	LCD_WR_DATA(color);
 800121e:	887b      	ldrh	r3, [r7, #2]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff4d 	bl	80010c0 <LCD_WR_DATA>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <lcd_show_char>:
	lcd_draw_line(x1, y2, x2, y2, color);
	lcd_draw_line(x2, y1, x2, y2, color);
}

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	4604      	mov	r4, r0
 8001238:	4608      	mov	r0, r1
 800123a:	4611      	mov	r1, r2
 800123c:	461a      	mov	r2, r3
 800123e:	4623      	mov	r3, r4
 8001240:	80fb      	strh	r3, [r7, #6]
 8001242:	4603      	mov	r3, r0
 8001244:	80bb      	strh	r3, [r7, #4]
 8001246:	460b      	mov	r3, r1
 8001248:	70fb      	strb	r3, [r7, #3]
 800124a:	4613      	mov	r3, r2
 800124c:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 8001256:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800125a:	085b      	lsrs	r3, r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	08db      	lsrs	r3, r3, #3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	bf14      	ite	ne
 8001272:	2301      	movne	r3, #1
 8001274:	2300      	moveq	r3, #0
 8001276:	b2db      	uxtb	r3, r3
 8001278:	4413      	add	r3, r2
 800127a:	b29a      	uxth	r2, r3
 800127c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001280:	b29b      	uxth	r3, r3
 8001282:	fb12 f303 	smulbb	r3, r2, r3
 8001286:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	3b20      	subs	r3, #32
 800128c:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	b29a      	uxth	r2, r3
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	4413      	add	r3, r2
 8001296:	b29b      	uxth	r3, r3
 8001298:	3b01      	subs	r3, #1
 800129a:	b29c      	uxth	r4, r3
 800129c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	88bb      	ldrh	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	3b01      	subs	r3, #1
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	88b9      	ldrh	r1, [r7, #4]
 80012ae:	88f8      	ldrh	r0, [r7, #6]
 80012b0:	4622      	mov	r2, r4
 80012b2:	f7ff ff27 	bl	8001104 <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 80012b6:	2300      	movs	r3, #0
 80012b8:	827b      	strh	r3, [r7, #18]
 80012ba:	e07a      	b.n	80013b2 <lcd_show_char+0x182>
		if (sizey == 12)
 80012bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012c0:	2b0c      	cmp	r3, #12
 80012c2:	d028      	beq.n	8001316 <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 80012c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012c8:	2b10      	cmp	r3, #16
 80012ca:	d108      	bne.n	80012de <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 80012cc:	78fa      	ldrb	r2, [r7, #3]
 80012ce:	8a7b      	ldrh	r3, [r7, #18]
 80012d0:	493c      	ldr	r1, [pc, #240]	@ (80013c4 <lcd_show_char+0x194>)
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	440a      	add	r2, r1
 80012d6:	4413      	add	r3, r2
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	75fb      	strb	r3, [r7, #23]
 80012dc:	e01b      	b.n	8001316 <lcd_show_char+0xe6>
		else if (sizey == 24)
 80012de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012e2:	2b18      	cmp	r3, #24
 80012e4:	d10b      	bne.n	80012fe <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 80012e6:	78fa      	ldrb	r2, [r7, #3]
 80012e8:	8a79      	ldrh	r1, [r7, #18]
 80012ea:	4837      	ldr	r0, [pc, #220]	@ (80013c8 <lcd_show_char+0x198>)
 80012ec:	4613      	mov	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	011b      	lsls	r3, r3, #4
 80012f4:	4403      	add	r3, r0
 80012f6:	440b      	add	r3, r1
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	75fb      	strb	r3, [r7, #23]
 80012fc:	e00b      	b.n	8001316 <lcd_show_char+0xe6>
		else if (sizey == 32)
 80012fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001302:	2b20      	cmp	r3, #32
 8001304:	d15a      	bne.n	80013bc <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 8001306:	78fa      	ldrb	r2, [r7, #3]
 8001308:	8a7b      	ldrh	r3, [r7, #18]
 800130a:	4930      	ldr	r1, [pc, #192]	@ (80013cc <lcd_show_char+0x19c>)
 800130c:	0192      	lsls	r2, r2, #6
 800130e:	440a      	add	r2, r1
 8001310:	4413      	add	r3, r2
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 8001316:	2300      	movs	r3, #0
 8001318:	75bb      	strb	r3, [r7, #22]
 800131a:	e044      	b.n	80013a6 <lcd_show_char+0x176>
			if (!mode) {
 800131c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001320:	2b00      	cmp	r3, #0
 8001322:	d120      	bne.n	8001366 <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 8001324:	7dfa      	ldrb	r2, [r7, #23]
 8001326:	7dbb      	ldrb	r3, [r7, #22]
 8001328:	fa42 f303 	asr.w	r3, r2, r3
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 8001334:	883b      	ldrh	r3, [r7, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fec2 	bl	80010c0 <LCD_WR_DATA>
 800133c:	e003      	b.n	8001346 <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 800133e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff febd 	bl	80010c0 <LCD_WR_DATA>
				m++;
 8001346:	7d7b      	ldrb	r3, [r7, #21]
 8001348:	3301      	adds	r3, #1
 800134a:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 800134c:	7d7b      	ldrb	r3, [r7, #21]
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	fbb3 f1f2 	udiv	r1, r3, r2
 8001354:	fb01 f202 	mul.w	r2, r1, r2
 8001358:	1a9b      	subs	r3, r3, r2
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d11f      	bne.n	80013a0 <lcd_show_char+0x170>
					m = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	757b      	strb	r3, [r7, #21]
					break;
 8001364:	e022      	b.n	80013ac <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 8001366:	7dfa      	ldrb	r2, [r7, #23]
 8001368:	7dbb      	ldrb	r3, [r7, #22]
 800136a:	fa42 f303 	asr.w	r3, r2, r3
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 8001376:	883a      	ldrh	r2, [r7, #0]
 8001378:	88b9      	ldrh	r1, [r7, #4]
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff3f 	bl	8001200 <lcd_draw_point>
				x++;
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	3301      	adds	r3, #1
 8001386:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 8001388:	88fa      	ldrh	r2, [r7, #6]
 800138a:	8a3b      	ldrh	r3, [r7, #16]
 800138c:	1ad2      	subs	r2, r2, r3
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	429a      	cmp	r2, r3
 8001392:	d105      	bne.n	80013a0 <lcd_show_char+0x170>
					x = x0;
 8001394:	8a3b      	ldrh	r3, [r7, #16]
 8001396:	80fb      	strh	r3, [r7, #6]
					y++;
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	3301      	adds	r3, #1
 800139c:	80bb      	strh	r3, [r7, #4]
					break;
 800139e:	e005      	b.n	80013ac <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 80013a0:	7dbb      	ldrb	r3, [r7, #22]
 80013a2:	3301      	adds	r3, #1
 80013a4:	75bb      	strb	r3, [r7, #22]
 80013a6:	7dbb      	ldrb	r3, [r7, #22]
 80013a8:	2b07      	cmp	r3, #7
 80013aa:	d9b7      	bls.n	800131c <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 80013ac:	8a7b      	ldrh	r3, [r7, #18]
 80013ae:	3301      	adds	r3, #1
 80013b0:	827b      	strh	r3, [r7, #18]
 80013b2:	8a7a      	ldrh	r2, [r7, #18]
 80013b4:	89bb      	ldrh	r3, [r7, #12]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d380      	bcc.n	80012bc <lcd_show_char+0x8c>
 80013ba:	e000      	b.n	80013be <lcd_show_char+0x18e>
			return;
 80013bc:	bf00      	nop
				}
			}
		}
	}
}
 80013be:	371c      	adds	r7, #28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd90      	pop	{r4, r7, pc}
 80013c4:	08006b08 	.word	0x08006b08
 80013c8:	080070f8 	.word	0x080070f8
 80013cc:	080082c8 	.word	0x080082c8

080013d0 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n) {
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	460a      	mov	r2, r1
 80013da:	71fb      	strb	r3, [r7, #7]
 80013dc:	4613      	mov	r3, r2
 80013de:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
	while (n--)
 80013e4:	e004      	b.n	80013f0 <mypow+0x20>
		result *= m;
 80013e6:	79fa      	ldrb	r2, [r7, #7]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	fb02 f303 	mul.w	r3, r2, r3
 80013ee:	60fb      	str	r3, [r7, #12]
	while (n--)
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	1e5a      	subs	r2, r3, #1
 80013f4:	71ba      	strb	r2, [r7, #6]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f5      	bne.n	80013e6 <mypow+0x16>
	return result;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <lcd_show_float_num>:
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
	}
}

void lcd_show_float_num(uint16_t x, uint16_t y, float num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b08b      	sub	sp, #44	@ 0x2c
 800140c:	af04      	add	r7, sp, #16
 800140e:	4604      	mov	r4, r0
 8001410:	4608      	mov	r0, r1
 8001412:	ed87 0a02 	vstr	s0, [r7, #8]
 8001416:	4611      	mov	r1, r2
 8001418:	461a      	mov	r2, r3
 800141a:	4623      	mov	r3, r4
 800141c:	81fb      	strh	r3, [r7, #14]
 800141e:	4603      	mov	r3, r0
 8001420:	81bb      	strh	r3, [r7, #12]
 8001422:	460b      	mov	r3, r1
 8001424:	71fb      	strb	r3, [r7, #7]
 8001426:	4613      	mov	r3, r2
 8001428:	80bb      	strh	r3, [r7, #4]
	uint8_t t, temp, sizex;
	uint16_t num1;
	sizex = sizey / 2;
 800142a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	75bb      	strb	r3, [r7, #22]
	num1 = num * 100;
 8001432:	edd7 7a02 	vldr	s15, [r7, #8]
 8001436:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001510 <lcd_show_float_num+0x108>
 800143a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001442:	ee17 3a90 	vmov	r3, s15
 8001446:	82bb      	strh	r3, [r7, #20]
	for (t = 0; t < len; t++) {
 8001448:	2300      	movs	r3, #0
 800144a:	75fb      	strb	r3, [r7, #23]
 800144c:	e057      	b.n	80014fe <lcd_show_float_num+0xf6>
		temp = (num1 / mypow(10, len - t - 1)) % 10;
 800144e:	8abc      	ldrh	r4, [r7, #20]
 8001450:	79fa      	ldrb	r2, [r7, #7]
 8001452:	7dfb      	ldrb	r3, [r7, #23]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	3b01      	subs	r3, #1
 800145a:	b2db      	uxtb	r3, r3
 800145c:	4619      	mov	r1, r3
 800145e:	200a      	movs	r0, #10
 8001460:	f7ff ffb6 	bl	80013d0 <mypow>
 8001464:	4603      	mov	r3, r0
 8001466:	fbb4 f1f3 	udiv	r1, r4, r3
 800146a:	4b2a      	ldr	r3, [pc, #168]	@ (8001514 <lcd_show_float_num+0x10c>)
 800146c:	fba3 2301 	umull	r2, r3, r3, r1
 8001470:	08da      	lsrs	r2, r3, #3
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	1aca      	subs	r2, r1, r3
 800147c:	4613      	mov	r3, r2
 800147e:	74fb      	strb	r3, [r7, #19]
		if (t == (len - 2)) {
 8001480:	7dfa      	ldrb	r2, [r7, #23]
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	3b02      	subs	r3, #2
 8001486:	429a      	cmp	r2, r3
 8001488:	d11d      	bne.n	80014c6 <lcd_show_float_num+0xbe>
			lcd_show_char(x + (len - 2) * sizex, y, '.', fc, bc, sizey, 0);
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	3b02      	subs	r3, #2
 800148e:	b29a      	uxth	r2, r3
 8001490:	7dbb      	ldrb	r3, [r7, #22]
 8001492:	b29b      	uxth	r3, r3
 8001494:	fb12 f303 	smulbb	r3, r2, r3
 8001498:	b29a      	uxth	r2, r3
 800149a:	89fb      	ldrh	r3, [r7, #14]
 800149c:	4413      	add	r3, r2
 800149e:	b298      	uxth	r0, r3
 80014a0:	88ba      	ldrh	r2, [r7, #4]
 80014a2:	89b9      	ldrh	r1, [r7, #12]
 80014a4:	2300      	movs	r3, #0
 80014a6:	9302      	str	r3, [sp, #8]
 80014a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	4613      	mov	r3, r2
 80014b4:	222e      	movs	r2, #46	@ 0x2e
 80014b6:	f7ff febb 	bl	8001230 <lcd_show_char>
			t++;
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
 80014bc:	3301      	adds	r3, #1
 80014be:	75fb      	strb	r3, [r7, #23]
			len += 1;
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	3301      	adds	r3, #1
 80014c4:	71fb      	strb	r3, [r7, #7]
		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	7dbb      	ldrb	r3, [r7, #22]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	fb12 f303 	smulbb	r3, r2, r3
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	89fb      	ldrh	r3, [r7, #14]
 80014d6:	4413      	add	r3, r2
 80014d8:	b298      	uxth	r0, r3
 80014da:	7cfb      	ldrb	r3, [r7, #19]
 80014dc:	3330      	adds	r3, #48	@ 0x30
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	88bc      	ldrh	r4, [r7, #4]
 80014e2:	89b9      	ldrh	r1, [r7, #12]
 80014e4:	2300      	movs	r3, #0
 80014e6:	9302      	str	r3, [sp, #8]
 80014e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	4623      	mov	r3, r4
 80014f4:	f7ff fe9c 	bl	8001230 <lcd_show_char>
	for (t = 0; t < len; t++) {
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	3301      	adds	r3, #1
 80014fc:	75fb      	strb	r3, [r7, #23]
 80014fe:	7dfa      	ldrb	r2, [r7, #23]
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	429a      	cmp	r2, r3
 8001504:	d3a3      	bcc.n	800144e <lcd_show_float_num+0x46>
	}
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd90      	pop	{r4, r7, pc}
 8001510:	42c80000 	.word	0x42c80000
 8001514:	cccccccd 	.word	0xcccccccd

08001518 <lcd_set_direction>:
			k++;
		}
	}
}

void lcd_set_direction(uint8_t dir) {
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	b2db      	uxtb	r3, r3
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d007      	beq.n	8001542 <lcd_set_direction+0x2a>
		lcddev.width = 320;
 8001532:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <lcd_set_direction+0x44>)
 8001534:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001538:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 800153a:	4b08      	ldr	r3, [pc, #32]	@ (800155c <lcd_set_direction+0x44>)
 800153c:	22f0      	movs	r2, #240	@ 0xf0
 800153e:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8001540:	e006      	b.n	8001550 <lcd_set_direction+0x38>
		lcddev.width = 240;
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <lcd_set_direction+0x44>)
 8001544:	22f0      	movs	r2, #240	@ 0xf0
 8001546:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001548:	4b04      	ldr	r3, [pc, #16]	@ (800155c <lcd_set_direction+0x44>)
 800154a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800154e:	805a      	strh	r2, [r3, #2]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	20000528 	.word	0x20000528

08001560 <lcd_init>:

void lcd_init(void) {
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800156a:	48aa      	ldr	r0, [pc, #680]	@ (8001814 <lcd_init+0x2b4>)
 800156c:	f002 fb34 	bl	8003bd8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001570:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001574:	f001 f84a 	bl	800260c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800157e:	48a5      	ldr	r0, [pc, #660]	@ (8001814 <lcd_init+0x2b4>)
 8001580:	f002 fb2a 	bl	8003bd8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001584:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001588:	f001 f840 	bl	800260c <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff ffc3 	bl	8001518 <lcd_set_direction>
	LCD_WR_REG(0XD3);
 8001592:	20d3      	movs	r0, #211	@ 0xd3
 8001594:	f7ff fd84 	bl	80010a0 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8001598:	f7ff fda2 	bl	80010e0 <LCD_RD_DATA>
 800159c:	4603      	mov	r3, r0
 800159e:	461a      	mov	r2, r3
 80015a0:	4b9d      	ldr	r3, [pc, #628]	@ (8001818 <lcd_init+0x2b8>)
 80015a2:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 80015a4:	f7ff fd9c 	bl	80010e0 <LCD_RD_DATA>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001818 <lcd_init+0x2b8>)
 80015ae:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 80015b0:	f7ff fd96 	bl	80010e0 <LCD_RD_DATA>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b97      	ldr	r3, [pc, #604]	@ (8001818 <lcd_init+0x2b8>)
 80015ba:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 80015bc:	4b96      	ldr	r3, [pc, #600]	@ (8001818 <lcd_init+0x2b8>)
 80015be:	889b      	ldrh	r3, [r3, #4]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	4b94      	ldr	r3, [pc, #592]	@ (8001818 <lcd_init+0x2b8>)
 80015c6:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 80015c8:	f7ff fd8a 	bl	80010e0 <LCD_RD_DATA>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b91      	ldr	r3, [pc, #580]	@ (8001818 <lcd_init+0x2b8>)
 80015d2:	889b      	ldrh	r3, [r3, #4]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4b8f      	ldr	r3, [pc, #572]	@ (8001818 <lcd_init+0x2b8>)
 80015da:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80015dc:	20cf      	movs	r0, #207	@ 0xcf
 80015de:	f7ff fd5f 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f7ff fd6c 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80015e8:	20c1      	movs	r0, #193	@ 0xc1
 80015ea:	f7ff fd69 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80015ee:	2030      	movs	r0, #48	@ 0x30
 80015f0:	f7ff fd66 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80015f4:	20ed      	movs	r0, #237	@ 0xed
 80015f6:	f7ff fd53 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80015fa:	2064      	movs	r0, #100	@ 0x64
 80015fc:	f7ff fd60 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001600:	2003      	movs	r0, #3
 8001602:	f7ff fd5d 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001606:	2012      	movs	r0, #18
 8001608:	f7ff fd5a 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 800160c:	2081      	movs	r0, #129	@ 0x81
 800160e:	f7ff fd57 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001612:	20e8      	movs	r0, #232	@ 0xe8
 8001614:	f7ff fd44 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001618:	2085      	movs	r0, #133	@ 0x85
 800161a:	f7ff fd51 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800161e:	2010      	movs	r0, #16
 8001620:	f7ff fd4e 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001624:	207a      	movs	r0, #122	@ 0x7a
 8001626:	f7ff fd4b 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800162a:	20cb      	movs	r0, #203	@ 0xcb
 800162c:	f7ff fd38 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001630:	2039      	movs	r0, #57	@ 0x39
 8001632:	f7ff fd45 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001636:	202c      	movs	r0, #44	@ 0x2c
 8001638:	f7ff fd42 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800163c:	2000      	movs	r0, #0
 800163e:	f7ff fd3f 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001642:	2034      	movs	r0, #52	@ 0x34
 8001644:	f7ff fd3c 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001648:	2002      	movs	r0, #2
 800164a:	f7ff fd39 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800164e:	20f7      	movs	r0, #247	@ 0xf7
 8001650:	f7ff fd26 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001654:	2020      	movs	r0, #32
 8001656:	f7ff fd33 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800165a:	20ea      	movs	r0, #234	@ 0xea
 800165c:	f7ff fd20 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001660:	2000      	movs	r0, #0
 8001662:	f7ff fd2d 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001666:	2000      	movs	r0, #0
 8001668:	f7ff fd2a 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800166c:	20c0      	movs	r0, #192	@ 0xc0
 800166e:	f7ff fd17 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001672:	201b      	movs	r0, #27
 8001674:	f7ff fd24 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001678:	20c1      	movs	r0, #193	@ 0xc1
 800167a:	f7ff fd11 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800167e:	2001      	movs	r0, #1
 8001680:	f7ff fd1e 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001684:	20c5      	movs	r0, #197	@ 0xc5
 8001686:	f7ff fd0b 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800168a:	2030      	movs	r0, #48	@ 0x30
 800168c:	f7ff fd18 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001690:	2030      	movs	r0, #48	@ 0x30
 8001692:	f7ff fd15 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001696:	20c7      	movs	r0, #199	@ 0xc7
 8001698:	f7ff fd02 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800169c:	20b7      	movs	r0, #183	@ 0xb7
 800169e:	f7ff fd0f 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80016a2:	2036      	movs	r0, #54	@ 0x36
 80016a4:	f7ff fcfc 	bl	80010a0 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 80016a8:	2008      	movs	r0, #8
 80016aa:	f7ff fd09 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80016ae:	203a      	movs	r0, #58	@ 0x3a
 80016b0:	f7ff fcf6 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80016b4:	2055      	movs	r0, #85	@ 0x55
 80016b6:	f7ff fd03 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80016ba:	20b1      	movs	r0, #177	@ 0xb1
 80016bc:	f7ff fcf0 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80016c0:	2000      	movs	r0, #0
 80016c2:	f7ff fcfd 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80016c6:	201a      	movs	r0, #26
 80016c8:	f7ff fcfa 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80016cc:	20b6      	movs	r0, #182	@ 0xb6
 80016ce:	f7ff fce7 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80016d2:	200a      	movs	r0, #10
 80016d4:	f7ff fcf4 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80016d8:	20a2      	movs	r0, #162	@ 0xa2
 80016da:	f7ff fcf1 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80016de:	20f2      	movs	r0, #242	@ 0xf2
 80016e0:	f7ff fcde 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80016e4:	2000      	movs	r0, #0
 80016e6:	f7ff fceb 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80016ea:	2026      	movs	r0, #38	@ 0x26
 80016ec:	f7ff fcd8 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80016f0:	2001      	movs	r0, #1
 80016f2:	f7ff fce5 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80016f6:	20e0      	movs	r0, #224	@ 0xe0
 80016f8:	f7ff fcd2 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80016fc:	200f      	movs	r0, #15
 80016fe:	f7ff fcdf 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001702:	202a      	movs	r0, #42	@ 0x2a
 8001704:	f7ff fcdc 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001708:	2028      	movs	r0, #40	@ 0x28
 800170a:	f7ff fcd9 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800170e:	2008      	movs	r0, #8
 8001710:	f7ff fcd6 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001714:	200e      	movs	r0, #14
 8001716:	f7ff fcd3 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800171a:	2008      	movs	r0, #8
 800171c:	f7ff fcd0 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001720:	2054      	movs	r0, #84	@ 0x54
 8001722:	f7ff fccd 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001726:	20a9      	movs	r0, #169	@ 0xa9
 8001728:	f7ff fcca 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 800172c:	2043      	movs	r0, #67	@ 0x43
 800172e:	f7ff fcc7 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001732:	200a      	movs	r0, #10
 8001734:	f7ff fcc4 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001738:	200f      	movs	r0, #15
 800173a:	f7ff fcc1 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800173e:	2000      	movs	r0, #0
 8001740:	f7ff fcbe 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff fcbb 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800174a:	2000      	movs	r0, #0
 800174c:	f7ff fcb8 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff fcb5 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001756:	20e1      	movs	r0, #225	@ 0xe1
 8001758:	f7ff fca2 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff fcaf 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001762:	2015      	movs	r0, #21
 8001764:	f7ff fcac 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001768:	2017      	movs	r0, #23
 800176a:	f7ff fca9 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800176e:	2007      	movs	r0, #7
 8001770:	f7ff fca6 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001774:	2011      	movs	r0, #17
 8001776:	f7ff fca3 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800177a:	2006      	movs	r0, #6
 800177c:	f7ff fca0 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001780:	202b      	movs	r0, #43	@ 0x2b
 8001782:	f7ff fc9d 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001786:	2056      	movs	r0, #86	@ 0x56
 8001788:	f7ff fc9a 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800178c:	203c      	movs	r0, #60	@ 0x3c
 800178e:	f7ff fc97 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001792:	2005      	movs	r0, #5
 8001794:	f7ff fc94 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001798:	2010      	movs	r0, #16
 800179a:	f7ff fc91 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800179e:	200f      	movs	r0, #15
 80017a0:	f7ff fc8e 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80017a4:	203f      	movs	r0, #63	@ 0x3f
 80017a6:	f7ff fc8b 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80017aa:	203f      	movs	r0, #63	@ 0x3f
 80017ac:	f7ff fc88 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80017b0:	200f      	movs	r0, #15
 80017b2:	f7ff fc85 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80017b6:	202b      	movs	r0, #43	@ 0x2b
 80017b8:	f7ff fc72 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff fc7f 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80017c2:	2000      	movs	r0, #0
 80017c4:	f7ff fc7c 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80017c8:	2001      	movs	r0, #1
 80017ca:	f7ff fc79 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80017ce:	203f      	movs	r0, #63	@ 0x3f
 80017d0:	f7ff fc76 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80017d4:	202a      	movs	r0, #42	@ 0x2a
 80017d6:	f7ff fc63 	bl	80010a0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80017da:	2000      	movs	r0, #0
 80017dc:	f7ff fc70 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80017e0:	2000      	movs	r0, #0
 80017e2:	f7ff fc6d 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f7ff fc6a 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80017ec:	20ef      	movs	r0, #239	@ 0xef
 80017ee:	f7ff fc67 	bl	80010c0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 80017f2:	2011      	movs	r0, #17
 80017f4:	f7ff fc54 	bl	80010a0 <LCD_WR_REG>
	HAL_Delay(120);
 80017f8:	2078      	movs	r0, #120	@ 0x78
 80017fa:	f000 ff07 	bl	800260c <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 80017fe:	2029      	movs	r0, #41	@ 0x29
 8001800:	f7ff fc4e 	bl	80010a0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001804:	2201      	movs	r2, #1
 8001806:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800180a:	4804      	ldr	r0, [pc, #16]	@ (800181c <lcd_init+0x2bc>)
 800180c:	f002 f9e4 	bl	8003bd8 <HAL_GPIO_WritePin>
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40020800 	.word	0x40020800
 8001818:	20000528 	.word	0x20000528
 800181c:	40020000 	.word	0x40020000

08001820 <lcd_show_string>:
		}
	}
}

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b08b      	sub	sp, #44	@ 0x2c
 8001824:	af04      	add	r7, sp, #16
 8001826:	60ba      	str	r2, [r7, #8]
 8001828:	461a      	mov	r2, r3
 800182a:	4603      	mov	r3, r0
 800182c:	81fb      	strh	r3, [r7, #14]
 800182e:	460b      	mov	r3, r1
 8001830:	81bb      	strh	r3, [r7, #12]
 8001832:	4613      	mov	r3, r2
 8001834:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 8001836:	89fb      	ldrh	r3, [r7, #14]
 8001838:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 800183e:	e048      	b.n	80018d2 <lcd_show_string+0xb2>
		if (!bHz) {
 8001840:	7dfb      	ldrb	r3, [r7, #23]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d145      	bne.n	80018d2 <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 8001846:	89fa      	ldrh	r2, [r7, #14]
 8001848:	4b26      	ldr	r3, [pc, #152]	@ (80018e4 <lcd_show_string+0xc4>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001852:	085b      	lsrs	r3, r3, #1
 8001854:	b2db      	uxtb	r3, r3
 8001856:	1acb      	subs	r3, r1, r3
 8001858:	429a      	cmp	r2, r3
 800185a:	dc3f      	bgt.n	80018dc <lcd_show_string+0xbc>
 800185c:	89ba      	ldrh	r2, [r7, #12]
 800185e:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <lcd_show_string+0xc4>)
 8001860:	885b      	ldrh	r3, [r3, #2]
 8001862:	4619      	mov	r1, r3
 8001864:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001868:	1acb      	subs	r3, r1, r3
 800186a:	429a      	cmp	r2, r3
 800186c:	dc36      	bgt.n	80018dc <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b80      	cmp	r3, #128	@ 0x80
 8001874:	d902      	bls.n	800187c <lcd_show_string+0x5c>
				bHz = 1;
 8001876:	2301      	movs	r3, #1
 8001878:	75fb      	strb	r3, [r7, #23]
 800187a:	e02a      	b.n	80018d2 <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b0d      	cmp	r3, #13
 8001882:	d10b      	bne.n	800189c <lcd_show_string+0x7c>
					y += sizey;
 8001884:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001888:	b29a      	uxth	r2, r3
 800188a:	89bb      	ldrh	r3, [r7, #12]
 800188c:	4413      	add	r3, r2
 800188e:	81bb      	strh	r3, [r7, #12]
					x = x0;
 8001890:	8abb      	ldrh	r3, [r7, #20]
 8001892:	81fb      	strh	r3, [r7, #14]
					str++;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	3301      	adds	r3, #1
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	e017      	b.n	80018cc <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	88fc      	ldrh	r4, [r7, #6]
 80018a2:	89b9      	ldrh	r1, [r7, #12]
 80018a4:	89f8      	ldrh	r0, [r7, #14]
 80018a6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80018aa:	9302      	str	r3, [sp, #8]
 80018ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	4623      	mov	r3, r4
 80018b8:	f7ff fcba 	bl	8001230 <lcd_show_char>
					x += sizey / 2;
 80018bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	89fb      	ldrh	r3, [r7, #14]
 80018c8:	4413      	add	r3, r2
 80018ca:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	3301      	adds	r3, #1
 80018d0:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1b2      	bne.n	8001840 <lcd_show_string+0x20>
 80018da:	e000      	b.n	80018de <lcd_show_string+0xbe>
				return;
 80018dc:	bf00      	nop
			}
		}
	}
}
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd90      	pop	{r4, r7, pc}
 80018e4:	20000528 	.word	0x20000528

080018e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ec:	f000 fe1c 	bl	8002528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f0:	f000 f842 	bl	8001978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f4:	f7ff faf4 	bl	8000ee0 <MX_GPIO_Init>
  MX_DMA_Init();
 80018f8:	f7ff fa02 	bl	8000d00 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80018fc:	f000 fd04 	bl	8002308 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001900:	f000 fcd8 	bl	80022b4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001904:	f000 fcac 	bl	8002260 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001908:	f7fe ffa6 	bl	8000858 <MX_ADC1_Init>
  MX_FSMC_Init();
 800190c:	f7ff fa18 	bl	8000d40 <MX_FSMC_Init>
  MX_TIM2_Init();
 8001910:	f000 fbc8 	bl	80020a4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001914:	f000 fab6 	bl	8001e84 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001918:	f000 fc10 	bl	800213c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800191c:	f7ff fe20 	bl	8001560 <lcd_init>
  sensor_init();
 8001920:	f000 fa0a 	bl	8001d38 <sensor_init>
  Modbus_Init(&Master,&huart3);
 8001924:	4911      	ldr	r1, [pc, #68]	@ (800196c <main+0x84>)
 8001926:	4812      	ldr	r0, [pc, #72]	@ (8001970 <main+0x88>)
 8001928:	f000 f9b8 	bl	8001c9c <Modbus_Init>
  lcd_clear(BLACK);
 800192c:	2000      	movs	r0, #0
 800192e:	f7ff fc35 	bl	800119c <lcd_clear>
  timer2_init();
 8001932:	f000 fa0f 	bl	8001d54 <timer2_init>
  timer2_set(50);
 8001936:	2032      	movs	r0, #50	@ 0x32
 8001938:	f000 fa20 	bl	8001d7c <timer2_set>
  timer4_init();
 800193c:	f000 fa14 	bl	8001d68 <timer4_init>
  timer4_set(2000);
 8001940:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001944:	f000 fa36 	bl	8001db4 <timer4_set>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(timer2_flag){
 8001948:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <main+0x8c>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d004      	beq.n	800195a <main+0x72>
		  button_scan();
 8001950:	f7ff f898 	bl	8000a84 <button_scan>
		  timer2_flag = 0;
 8001954:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <main+0x8c>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
	  }
	  lcd_run();
 800195a:	f000 f877 	bl	8001a4c <lcd_run>
	  User_interface();
 800195e:	f7fe fdf5 	bl	800054c <User_interface>
	  Master_Run(&Master);
 8001962:	4803      	ldr	r0, [pc, #12]	@ (8001970 <main+0x88>)
 8001964:	f7fe fe88 	bl	8000678 <Master_Run>
	  if(timer2_flag){
 8001968:	e7ee      	b.n	8001948 <main+0x60>
 800196a:	bf00      	nop
 800196c:	200008d0 	.word	0x200008d0
 8001970:	20000530 	.word	0x20000530
 8001974:	2000074a 	.word	0x2000074a

08001978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b094      	sub	sp, #80	@ 0x50
 800197c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197e:	f107 0320 	add.w	r3, r7, #32
 8001982:	2230      	movs	r2, #48	@ 0x30
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f005 f862 	bl	8006a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	4b28      	ldr	r3, [pc, #160]	@ (8001a44 <SystemClock_Config+0xcc>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a4:	4a27      	ldr	r2, [pc, #156]	@ (8001a44 <SystemClock_Config+0xcc>)
 80019a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ac:	4b25      	ldr	r3, [pc, #148]	@ (8001a44 <SystemClock_Config+0xcc>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b8:	2300      	movs	r3, #0
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	4b22      	ldr	r3, [pc, #136]	@ (8001a48 <SystemClock_Config+0xd0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a21      	ldr	r2, [pc, #132]	@ (8001a48 <SystemClock_Config+0xd0>)
 80019c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a48 <SystemClock_Config+0xd0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019d4:	2302      	movs	r3, #2
 80019d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d8:	2301      	movs	r3, #1
 80019da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019dc:	2310      	movs	r3, #16
 80019de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e0:	2302      	movs	r3, #2
 80019e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019e4:	2300      	movs	r3, #0
 80019e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019e8:	2308      	movs	r3, #8
 80019ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019ec:	23a8      	movs	r3, #168	@ 0xa8
 80019ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019f0:	2302      	movs	r3, #2
 80019f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019f4:	2304      	movs	r3, #4
 80019f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f8:	f107 0320 	add.w	r3, r7, #32
 80019fc:	4618      	mov	r0, r3
 80019fe:	f002 f91f 	bl	8003c40 <HAL_RCC_OscConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a08:	f000 f866 	bl	8001ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a10:	2302      	movs	r3, #2
 8001a12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a18:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001a1e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	2105      	movs	r1, #5
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f002 fb80 	bl	8004130 <HAL_RCC_ClockConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a36:	f000 f84f 	bl	8001ad8 <Error_Handler>
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	3750      	adds	r7, #80	@ 0x50
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40007000 	.word	0x40007000

08001a4c <lcd_run>:
		lcd_show_string(10, 180, "Temperature:", RED, BLACK, 16, 0);
		lcd_show_float_num(130, 180, sensor_get_temperature(), 4, RED, BLACK,
				16);
	}
}
void lcd_run(){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af04      	add	r7, sp, #16
	lcd_show_string(10, 140, "Temperature:", RED, BLACK, 16, 0);
 8001a52:	2300      	movs	r3, #0
 8001a54:	9302      	str	r3, [sp, #8]
 8001a56:	2310      	movs	r3, #16
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001a62:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad0 <lcd_run+0x84>)
 8001a64:	218c      	movs	r1, #140	@ 0x8c
 8001a66:	200a      	movs	r0, #10
 8001a68:	f7ff feda 	bl	8001820 <lcd_show_string>
	lcd_show_float_num(130, 140, Master_get_temperature(), 4, RED, BLACK, 16);
 8001a6c:	f7fe fe98 	bl	80007a0 <Master_get_temperature>
 8001a70:	eef0 7a40 	vmov.f32	s15, s0
 8001a74:	2310      	movs	r3, #16
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001a80:	2204      	movs	r2, #4
 8001a82:	eeb0 0a67 	vmov.f32	s0, s15
 8001a86:	218c      	movs	r1, #140	@ 0x8c
 8001a88:	2082      	movs	r0, #130	@ 0x82
 8001a8a:	f7ff fcbd 	bl	8001408 <lcd_show_float_num>
	lcd_show_string(10, 160, "Humid:", RED, BLACK, 16, 0);
 8001a8e:	2300      	movs	r3, #0
 8001a90:	9302      	str	r3, [sp, #8]
 8001a92:	2310      	movs	r3, #16
 8001a94:	9301      	str	r3, [sp, #4]
 8001a96:	2300      	movs	r3, #0
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad4 <lcd_run+0x88>)
 8001aa0:	21a0      	movs	r1, #160	@ 0xa0
 8001aa2:	200a      	movs	r0, #10
 8001aa4:	f7ff febc 	bl	8001820 <lcd_show_string>
	lcd_show_float_num(130, 160, Master_get_humid(), 4, RED, BLACK, 16);
 8001aa8:	f7fe fea8 	bl	80007fc <Master_get_humid>
 8001aac:	eef0 7a40 	vmov.f32	s15, s0
 8001ab0:	2310      	movs	r3, #16
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001abc:	2204      	movs	r2, #4
 8001abe:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac2:	21a0      	movs	r1, #160	@ 0xa0
 8001ac4:	2082      	movs	r0, #130	@ 0x82
 8001ac6:	f7ff fc9f 	bl	8001408 <lcd_show_float_num>
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	08006af0 	.word	0x08006af0
 8001ad4:	08006b00 	.word	0x08006b00

08001ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001adc:	b672      	cpsid	i
}
 8001ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <Error_Handler+0x8>

08001ae4 <Modbus_Send>:
#include "rs485.h"
unsigned char Receive_Flag = 0;
unsigned char Status_Modbus = 0;
User_Mode USER = INIT;
Modbus_Mode MODBUS = IDLE;
Modbus_Status Modbus_Send(Modbus_HandleTypeDef* hModbus){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,SET);
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001af2:	480c      	ldr	r0, [pc, #48]	@ (8001b24 <Modbus_Send+0x40>)
 8001af4:	f002 f870 	bl	8003bd8 <HAL_GPIO_WritePin>
	if(HAL_UART_Transmit(hModbus->huart,hModbus->Tx_buf,hModbus->Tx_size,HAL_MAX_DELAY) == HAL_OK){
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	1d59      	adds	r1, r3, #5
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	f003 fe8d 	bl	8005828 <HAL_UART_Transmit>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <Modbus_Send+0x34>
			return MODBUS_OKE;
 8001b14:	2302      	movs	r3, #2
 8001b16:	e000      	b.n	8001b1a <Modbus_Send+0x36>
	}
	return MODBUS_ERROR;
 8001b18:	2301      	movs	r3, #1
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40020000 	.word	0x40020000

08001b28 <Modbus_PrepareData>:
	uint16_t high_crc = hModbus->Rx_buf[hModbus->Rx_size - 1];
	uint16_t low_crc =  hModbus->Rx_buf[hModbus->Rx_size - 2];
	uint16_t receive_crc = (high_crc<<8)|(low_crc);
	return (receive_crc == rx_crc);
}
void Modbus_PrepareData(Modbus_HandleTypeDef* hModbus, uint8_t Address, uint8_t Function, uint8_t* Data, uint8_t Size){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	72fb      	strb	r3, [r7, #11]
 8001b36:	4613      	mov	r3, r2
 8001b38:	72bb      	strb	r3, [r7, #10]
	hModbus->Tx_buf[0] = Address;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	7afa      	ldrb	r2, [r7, #11]
 8001b3e:	715a      	strb	r2, [r3, #5]
	hModbus->Tx_buf[1] = Function;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	7aba      	ldrb	r2, [r7, #10]
 8001b44:	719a      	strb	r2, [r3, #6]
	int i;
	uint16_t crc = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	827b      	strh	r3, [r7, #18]
	for(i=0; i<Size; i++){
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	e00c      	b.n	8001b6a <Modbus_PrepareData+0x42>
		hModbus->Tx_buf[i+2] = *(Data + i);
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	441a      	add	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	3302      	adds	r3, #2
 8001b5a:	7811      	ldrb	r1, [r2, #0]
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	460a      	mov	r2, r1
 8001b62:	715a      	strb	r2, [r3, #5]
	for(i=0; i<Size; i++){
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3301      	adds	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dbed      	blt.n	8001b50 <Modbus_PrepareData+0x28>
	}
	crc = crc16(hModbus->Tx_buf, i+2);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1d5a      	adds	r2, r3, #5
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	4619      	mov	r1, r3
 8001b82:	4610      	mov	r0, r2
 8001b84:	f7ff f88c 	bl	8000ca0 <crc16>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	827b      	strh	r3, [r7, #18]
	hModbus->Tx_buf[i+2] = crc & 0x00FF; // LOW
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	3302      	adds	r3, #2
 8001b90:	8a7a      	ldrh	r2, [r7, #18]
 8001b92:	b2d1      	uxtb	r1, r2
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	460a      	mov	r2, r1
 8001b9a:	715a      	strb	r2, [r3, #5]
	hModbus->Tx_buf[i+3] = crc >> 8; //HIGH
 8001b9c:	8a7b      	ldrh	r3, [r7, #18]
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3303      	adds	r3, #3
 8001ba6:	b2d1      	uxtb	r1, r2
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	460a      	mov	r2, r1
 8001bae:	715a      	strb	r2, [r3, #5]
	hModbus->Tx_size = Size + 4;
 8001bb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
}
 8001bc0:	bf00      	nop
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <Modbus_Transmit>:
Modbus_Status Modbus_Transmit(Modbus_HandleTypeDef* hModbus, uint32_t Timeout){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
	Modbus_Send(hModbus);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ff86 	bl	8001ae4 <Modbus_Send>
	HAL_Delay(5);
 8001bd8:	2005      	movs	r0, #5
 8001bda:	f000 fd17 	bl	800260c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001be4:	480f      	ldr	r0, [pc, #60]	@ (8001c24 <Modbus_Transmit+0x5c>)
 8001be6:	f001 fff7 	bl	8003bd8 <HAL_GPIO_WritePin>

	uint32_t tickStart = HAL_GetTick();
 8001bea:	f000 fd03 	bl	80025f4 <HAL_GetTick>
 8001bee:	60f8      	str	r0, [r7, #12]
	while(!Receive_Flag){
 8001bf0:	e009      	b.n	8001c06 <Modbus_Transmit+0x3e>
		if(HAL_GetTick()- tickStart >= Timeout){
 8001bf2:	f000 fcff 	bl	80025f4 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d801      	bhi.n	8001c06 <Modbus_Transmit+0x3e>
				return MODBUS_TIMEOUT;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e00a      	b.n	8001c1c <Modbus_Transmit+0x54>
	while(!Receive_Flag){
 8001c06:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <Modbus_Transmit+0x60>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f1      	beq.n	8001bf2 <Modbus_Transmit+0x2a>
		}
	}
	Receive_Flag = 0;
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <Modbus_Transmit+0x60>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8001c14:	2005      	movs	r0, #5
 8001c16:	f000 fcf9 	bl	800260c <HAL_Delay>
	return MODBUS_OKE;
 8001c1a:	2302      	movs	r3, #2
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40020000 	.word	0x40020000
 8001c28:	2000073c 	.word	0x2000073c

08001c2c <Modbus_CallBack>:
Modbus_Status Modbus_Receive(Modbus_HandleTypeDef* hModbus){ //Thieu timeout
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
	HAL_UARTEx_ReceiveToIdle_IT(hModbus->huart, hModbus->Rx_buf, MAX_SIZE);
	return MODBUS_OKE;
}
void Modbus_CallBack(Modbus_HandleTypeDef* hModbus, UART_HandleTypeDef* huart, uint16_t Size){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	4613      	mov	r3, r2
 8001c38:	80fb      	strh	r3, [r7, #6]
	if(huart->Instance == hModbus->huart->Instance){
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d11f      	bne.n	8001c88 <Modbus_CallBack+0x5c>
		Receive_Flag = 1;
 8001c48:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <Modbus_CallBack+0x64>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]
		hModbus->Rx_size = Size;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	88fa      	ldrh	r2, [r7, #6]
 8001c52:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8001c56:	2110      	movs	r1, #16
 8001c58:	480e      	ldr	r0, [pc, #56]	@ (8001c94 <Modbus_CallBack+0x68>)
 8001c5a:	f001 ffd6 	bl	8003c0a <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart1, hModbus->Rx_buf, hModbus->Rx_size, HAL_MAX_DELAY);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f503 7184 	add.w	r1, r3, #264	@ 0x108
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f8b3 2208 	ldrh.w	r2, [r3, #520]	@ 0x208
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	480a      	ldr	r0, [pc, #40]	@ (8001c98 <Modbus_CallBack+0x6c>)
 8001c70:	f003 fdda 	bl	8005828 <HAL_UART_Transmit>
		HAL_UARTEx_ReceiveToIdle_IT(hModbus->huart, hModbus->Rx_buf, MAX_SIZE);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8001c7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c82:	4619      	mov	r1, r3
 8001c84:	f003 fe5b 	bl	800593e <HAL_UARTEx_ReceiveToIdle_IT>
	}

}
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	2000073c 	.word	0x2000073c
 8001c94:	40021000 	.word	0x40021000
 8001c98:	20000840 	.word	0x20000840

08001c9c <Modbus_Init>:
void Modbus_Init(Modbus_HandleTypeDef* hModbus, UART_HandleTypeDef* huart){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
	hModbus->huart = huart;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	601a      	str	r2, [r3, #0]
	hModbus->Address = 0;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	711a      	strb	r2, [r3, #4]
	memset(hModbus->Rx_buf,0,sizeof(hModbus->Rx_buf));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8001cb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f004 fec6 	bl	8006a50 <memset>
	hModbus->Rx_size = 256;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cca:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	memset(hModbus->Tx_buf,0,sizeof(hModbus->Tx_buf));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3305      	adds	r3, #5
 8001cd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f004 feb9 	bl	8006a50 <memset>
	hModbus->Tx_size = 0;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cec:	4808      	ldr	r0, [pc, #32]	@ (8001d10 <Modbus_Init+0x74>)
 8001cee:	f001 ff73 	bl	8003bd8 <HAL_GPIO_WritePin>
	HAL_UARTEx_ReceiveToIdle_IT(hModbus->huart, hModbus->Rx_buf, MAX_SIZE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8001cfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d00:	4619      	mov	r1, r3
 8001d02:	f003 fe1c 	bl	800593e <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40020000 	.word	0x40020000

08001d14 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]
	Modbus_CallBack(&Master, huart, Size);
 8001d20:	887b      	ldrh	r3, [r7, #2]
 8001d22:	461a      	mov	r2, r3
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4803      	ldr	r0, [pc, #12]	@ (8001d34 <HAL_UARTEx_RxEventCallback+0x20>)
 8001d28:	f7ff ff80 	bl	8001c2c <Modbus_CallBack>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000530 	.word	0x20000530

08001d38 <sensor_init>:

/* Variables */
uint16_t adc_receive[5];

/* Functions */
void sensor_init() {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (void*) adc_receive, 5);
 8001d3c:	2205      	movs	r2, #5
 8001d3e:	4903      	ldr	r1, [pc, #12]	@ (8001d4c <sensor_init+0x14>)
 8001d40:	4803      	ldr	r0, [pc, #12]	@ (8001d50 <sensor_init+0x18>)
 8001d42:	f000 fccb 	bl	80026dc <HAL_ADC_Start_DMA>
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000740 	.word	0x20000740
 8001d50:	20000368 	.word	0x20000368

08001d54 <timer2_init>:
/**
 * @brief  	Init timer interrupt
 * @param  	None
 * @retval 	None
 */
void timer2_init(void) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001d58:	4802      	ldr	r0, [pc, #8]	@ (8001d64 <timer2_init+0x10>)
 8001d5a:	f003 f8ef 	bl	8004f3c <HAL_TIM_Base_Start_IT>
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200007b0 	.word	0x200007b0

08001d68 <timer4_init>:
void timer4_init(void) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 8001d6c:	4802      	ldr	r0, [pc, #8]	@ (8001d78 <timer4_init+0x10>)
 8001d6e:	f003 f8e5 	bl	8004f3c <HAL_TIM_Base_Start_IT>
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200007f8 	.word	0x200007f8

08001d7c <timer2_set>:
/**
 * @brief	Set duration of software timer interrupt
 * @param	duration Duration of software timer interrupt
 * @retval 	None
 */
void timer2_set(int ms) {
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	timer2_mul = ms / TIMER_CYCLE_2;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	4b07      	ldr	r3, [pc, #28]	@ (8001da8 <timer2_set+0x2c>)
 8001d8a:	801a      	strh	r2, [r3, #0]
	timer2_counter = timer2_mul;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <timer2_set+0x2c>)
 8001d8e:	881a      	ldrh	r2, [r3, #0]
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <timer2_set+0x30>)
 8001d92:	801a      	strh	r2, [r3, #0]
	timer2_flag = 0;
 8001d94:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <timer2_set+0x34>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	2000074e 	.word	0x2000074e
 8001dac:	2000074c 	.word	0x2000074c
 8001db0:	2000074a 	.word	0x2000074a

08001db4 <timer4_set>:

void timer4_set(int ms) {
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	timer4_mul = ms / TIMER_CYCLE_4;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	4b07      	ldr	r3, [pc, #28]	@ (8001de0 <timer4_set+0x2c>)
 8001dc2:	801a      	strh	r2, [r3, #0]
	timer4_counter = timer4_mul;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <timer4_set+0x2c>)
 8001dc6:	881a      	ldrh	r2, [r3, #0]
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <timer4_set+0x30>)
 8001dca:	801a      	strh	r2, [r3, #0]
	timer4_flag = 0;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <timer4_set+0x34>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000754 	.word	0x20000754
 8001de4:	20000752 	.word	0x20000752
 8001de8:	20000750 	.word	0x20000750

08001dec <HAL_TIM_PeriodElapsedCallback>:
 * @brief  	Timer interrupt routine
 * @param  	htim TIM Base handle
 * @note	This callback function is called by system
 * @retval 	None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dfc:	d114      	bne.n	8001e28 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (timer2_counter > 0) {
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d010      	beq.n	8001e28 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001e06:	4b18      	ldr	r3, [pc, #96]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	4b16      	ldr	r3, [pc, #88]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001e10:	801a      	strh	r2, [r3, #0]
			if (timer2_counter == 0) {
 8001e12:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d106      	bne.n	8001e28 <HAL_TIM_PeriodElapsedCallback+0x3c>
				timer2_flag = 1;
 8001e1a:	4b14      	ldr	r3, [pc, #80]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	701a      	strb	r2, [r3, #0]
				timer2_counter = timer2_mul;
 8001e20:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e22:	881a      	ldrh	r2, [r3, #0]
 8001e24:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001e26:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	if(htim->Instance == TIM4){
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a11      	ldr	r2, [pc, #68]	@ (8001e74 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d114      	bne.n	8001e5c <HAL_TIM_PeriodElapsedCallback+0x70>
		if (timer4_counter > 0) {
 8001e32:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d010      	beq.n	8001e5c <HAL_TIM_PeriodElapsedCallback+0x70>
			timer4_counter--;
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	4b0d      	ldr	r3, [pc, #52]	@ (8001e78 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001e44:	801a      	strh	r2, [r3, #0]
			if (timer4_counter == 0) {
 8001e46:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_TIM_PeriodElapsedCallback+0x70>
				timer4_flag = 1;
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
				timer4_counter = timer4_mul;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001e56:	881a      	ldrh	r2, [r3, #0]
 8001e58:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001e5a:	801a      	strh	r2, [r3, #0]
			}
		}
	}
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	2000074c 	.word	0x2000074c
 8001e6c:	2000074a 	.word	0x2000074a
 8001e70:	2000074e 	.word	0x2000074e
 8001e74:	40000800 	.word	0x40000800
 8001e78:	20000752 	.word	0x20000752
 8001e7c:	20000750 	.word	0x20000750
 8001e80:	20000754 	.word	0x20000754

08001e84 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e88:	4b17      	ldr	r3, [pc, #92]	@ (8001ee8 <MX_SPI1_Init+0x64>)
 8001e8a:	4a18      	ldr	r2, [pc, #96]	@ (8001eec <MX_SPI1_Init+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ee8 <MX_SPI1_Init+0x64>)
 8001e90:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e96:	4b14      	ldr	r3, [pc, #80]	@ (8001ee8 <MX_SPI1_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <MX_SPI1_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <MX_SPI1_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee8 <MX_SPI1_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee8 <MX_SPI1_Init+0x64>)
 8001eb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee8 <MX_SPI1_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <MX_SPI1_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec2:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <MX_SPI1_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec8:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <MX_SPI1_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ece:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <MX_SPI1_Init+0x64>)
 8001ed0:	220a      	movs	r2, #10
 8001ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ed4:	4804      	ldr	r0, [pc, #16]	@ (8001ee8 <MX_SPI1_Init+0x64>)
 8001ed6:	f002 fb0b 	bl	80044f0 <HAL_SPI_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ee0:	f7ff fdfa 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000758 	.word	0x20000758
 8001eec:	40013000 	.word	0x40013000

08001ef0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	@ 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a19      	ldr	r2, [pc, #100]	@ (8001f74 <HAL_SPI_MspInit+0x84>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d12b      	bne.n	8001f6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	4b18      	ldr	r3, [pc, #96]	@ (8001f78 <HAL_SPI_MspInit+0x88>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1a:	4a17      	ldr	r2, [pc, #92]	@ (8001f78 <HAL_SPI_MspInit+0x88>)
 8001f1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f22:	4b15      	ldr	r3, [pc, #84]	@ (8001f78 <HAL_SPI_MspInit+0x88>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <HAL_SPI_MspInit+0x88>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	4a10      	ldr	r2, [pc, #64]	@ (8001f78 <HAL_SPI_MspInit+0x88>)
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <HAL_SPI_MspInit+0x88>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001f4a:	2338      	movs	r3, #56	@ 0x38
 8001f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f56:	2303      	movs	r3, #3
 8001f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f5a:	2305      	movs	r3, #5
 8001f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	4805      	ldr	r0, [pc, #20]	@ (8001f7c <HAL_SPI_MspInit+0x8c>)
 8001f66:	f001 fc9b 	bl	80038a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	3728      	adds	r7, #40	@ 0x28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40013000 	.word	0x40013000
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020400 	.word	0x40020400

08001f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <HAL_MspInit+0x4c>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fcc <HAL_MspInit+0x4c>)
 8001f90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f96:	4b0d      	ldr	r3, [pc, #52]	@ (8001fcc <HAL_MspInit+0x4c>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <HAL_MspInit+0x4c>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	4a08      	ldr	r2, [pc, #32]	@ (8001fcc <HAL_MspInit+0x4c>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb2:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <HAL_MspInit+0x4c>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800

08001fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <NMI_Handler+0x4>

08001fd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <HardFault_Handler+0x4>

08001fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <MemManage_Handler+0x4>

08001fe8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <BusFault_Handler+0x4>

08001ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <UsageFault_Handler+0x4>

08001ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002026:	f000 fad1 	bl	80025cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002034:	4802      	ldr	r0, [pc, #8]	@ (8002040 <TIM2_IRQHandler+0x10>)
 8002036:	f002 fff1 	bl	800501c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200007b0 	.word	0x200007b0

08002044 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002048:	4802      	ldr	r0, [pc, #8]	@ (8002054 <TIM4_IRQHandler+0x10>)
 800204a:	f002 ffe7 	bl	800501c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200007f8 	.word	0x200007f8

08002058 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800205c:	4802      	ldr	r0, [pc, #8]	@ (8002068 <USART3_IRQHandler+0x10>)
 800205e:	f003 fccb 	bl	80059f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200008d0 	.word	0x200008d0

0800206c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002070:	4802      	ldr	r0, [pc, #8]	@ (800207c <DMA2_Stream0_IRQHandler+0x10>)
 8002072:	f001 f9ab 	bl	80033cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200003b0 	.word	0x200003b0

08002080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002084:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <SystemInit+0x20>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208a:	4a05      	ldr	r2, [pc, #20]	@ (80020a0 <SystemInit+0x20>)
 800208c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002090:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020aa:	f107 0308 	add.w	r3, r7, #8
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b8:	463b      	mov	r3, r7
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002138 <MX_TIM2_Init+0x94>)
 80020c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 80020c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002138 <MX_TIM2_Init+0x94>)
 80020ca:	f240 3247 	movw	r2, #839	@ 0x347
 80020ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d0:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <MX_TIM2_Init+0x94>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80020d6:	4b18      	ldr	r3, [pc, #96]	@ (8002138 <MX_TIM2_Init+0x94>)
 80020d8:	2263      	movs	r2, #99	@ 0x63
 80020da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020dc:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <MX_TIM2_Init+0x94>)
 80020de:	2200      	movs	r2, #0
 80020e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e2:	4b15      	ldr	r3, [pc, #84]	@ (8002138 <MX_TIM2_Init+0x94>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020e8:	4813      	ldr	r0, [pc, #76]	@ (8002138 <MX_TIM2_Init+0x94>)
 80020ea:	f002 fed7 	bl	8004e9c <HAL_TIM_Base_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80020f4:	f7ff fcf0 	bl	8001ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020fe:	f107 0308 	add.w	r3, r7, #8
 8002102:	4619      	mov	r1, r3
 8002104:	480c      	ldr	r0, [pc, #48]	@ (8002138 <MX_TIM2_Init+0x94>)
 8002106:	f003 f879 	bl	80051fc <HAL_TIM_ConfigClockSource>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002110:	f7ff fce2 	bl	8001ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002114:	2300      	movs	r3, #0
 8002116:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800211c:	463b      	mov	r3, r7
 800211e:	4619      	mov	r1, r3
 8002120:	4805      	ldr	r0, [pc, #20]	@ (8002138 <MX_TIM2_Init+0x94>)
 8002122:	f003 faa1 	bl	8005668 <HAL_TIMEx_MasterConfigSynchronization>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800212c:	f7ff fcd4 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002130:	bf00      	nop
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	200007b0 	.word	0x200007b0

0800213c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002142:	f107 0308 	add.w	r3, r7, #8
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002150:	463b      	mov	r3, r7
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002158:	4b1d      	ldr	r3, [pc, #116]	@ (80021d0 <MX_TIM4_Init+0x94>)
 800215a:	4a1e      	ldr	r2, [pc, #120]	@ (80021d4 <MX_TIM4_Init+0x98>)
 800215c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 839;
 800215e:	4b1c      	ldr	r3, [pc, #112]	@ (80021d0 <MX_TIM4_Init+0x94>)
 8002160:	f240 3247 	movw	r2, #839	@ 0x347
 8002164:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002166:	4b1a      	ldr	r3, [pc, #104]	@ (80021d0 <MX_TIM4_Init+0x94>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800216c:	4b18      	ldr	r3, [pc, #96]	@ (80021d0 <MX_TIM4_Init+0x94>)
 800216e:	2263      	movs	r2, #99	@ 0x63
 8002170:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002172:	4b17      	ldr	r3, [pc, #92]	@ (80021d0 <MX_TIM4_Init+0x94>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002178:	4b15      	ldr	r3, [pc, #84]	@ (80021d0 <MX_TIM4_Init+0x94>)
 800217a:	2200      	movs	r2, #0
 800217c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800217e:	4814      	ldr	r0, [pc, #80]	@ (80021d0 <MX_TIM4_Init+0x94>)
 8002180:	f002 fe8c 	bl	8004e9c <HAL_TIM_Base_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800218a:	f7ff fca5 	bl	8001ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800218e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002192:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002194:	f107 0308 	add.w	r3, r7, #8
 8002198:	4619      	mov	r1, r3
 800219a:	480d      	ldr	r0, [pc, #52]	@ (80021d0 <MX_TIM4_Init+0x94>)
 800219c:	f003 f82e 	bl	80051fc <HAL_TIM_ConfigClockSource>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80021a6:	f7ff fc97 	bl	8001ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021b2:	463b      	mov	r3, r7
 80021b4:	4619      	mov	r1, r3
 80021b6:	4806      	ldr	r0, [pc, #24]	@ (80021d0 <MX_TIM4_Init+0x94>)
 80021b8:	f003 fa56 	bl	8005668 <HAL_TIMEx_MasterConfigSynchronization>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80021c2:	f7ff fc89 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200007f8 	.word	0x200007f8
 80021d4:	40000800 	.word	0x40000800

080021d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021e8:	d116      	bne.n	8002218 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <HAL_TIM_Base_MspInit+0x80>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	4a19      	ldr	r2, [pc, #100]	@ (8002258 <HAL_TIM_Base_MspInit+0x80>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021fa:	4b17      	ldr	r3, [pc, #92]	@ (8002258 <HAL_TIM_Base_MspInit+0x80>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	2100      	movs	r1, #0
 800220a:	201c      	movs	r0, #28
 800220c:	f000 ff0f 	bl	800302e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002210:	201c      	movs	r0, #28
 8002212:	f000 ff28 	bl	8003066 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002216:	e01a      	b.n	800224e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0f      	ldr	r2, [pc, #60]	@ (800225c <HAL_TIM_Base_MspInit+0x84>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d115      	bne.n	800224e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <HAL_TIM_Base_MspInit+0x80>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	4a0b      	ldr	r2, [pc, #44]	@ (8002258 <HAL_TIM_Base_MspInit+0x80>)
 800222c:	f043 0304 	orr.w	r3, r3, #4
 8002230:	6413      	str	r3, [r2, #64]	@ 0x40
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <HAL_TIM_Base_MspInit+0x80>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	201e      	movs	r0, #30
 8002244:	f000 fef3 	bl	800302e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002248:	201e      	movs	r0, #30
 800224a:	f000 ff0c 	bl	8003066 <HAL_NVIC_EnableIRQ>
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800
 800225c:	40000800 	.word	0x40000800

08002260 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002264:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <MX_USART1_UART_Init+0x4c>)
 8002266:	4a12      	ldr	r2, [pc, #72]	@ (80022b0 <MX_USART1_UART_Init+0x50>)
 8002268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800226a:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <MX_USART1_UART_Init+0x4c>)
 800226c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002272:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <MX_USART1_UART_Init+0x4c>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002278:	4b0c      	ldr	r3, [pc, #48]	@ (80022ac <MX_USART1_UART_Init+0x4c>)
 800227a:	2200      	movs	r2, #0
 800227c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800227e:	4b0b      	ldr	r3, [pc, #44]	@ (80022ac <MX_USART1_UART_Init+0x4c>)
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002284:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <MX_USART1_UART_Init+0x4c>)
 8002286:	220c      	movs	r2, #12
 8002288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228a:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <MX_USART1_UART_Init+0x4c>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002290:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <MX_USART1_UART_Init+0x4c>)
 8002292:	2200      	movs	r2, #0
 8002294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002296:	4805      	ldr	r0, [pc, #20]	@ (80022ac <MX_USART1_UART_Init+0x4c>)
 8002298:	f003 fa76 	bl	8005788 <HAL_UART_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022a2:	f7ff fc19 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000840 	.word	0x20000840
 80022b0:	40011000 	.word	0x40011000

080022b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022b8:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <MX_USART2_UART_Init+0x4c>)
 80022ba:	4a12      	ldr	r2, [pc, #72]	@ (8002304 <MX_USART2_UART_Init+0x50>)
 80022bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022be:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <MX_USART2_UART_Init+0x4c>)
 80022c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002300 <MX_USART2_UART_Init+0x4c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002300 <MX_USART2_UART_Init+0x4c>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <MX_USART2_UART_Init+0x4c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022d8:	4b09      	ldr	r3, [pc, #36]	@ (8002300 <MX_USART2_UART_Init+0x4c>)
 80022da:	220c      	movs	r2, #12
 80022dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022de:	4b08      	ldr	r3, [pc, #32]	@ (8002300 <MX_USART2_UART_Init+0x4c>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e4:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <MX_USART2_UART_Init+0x4c>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022ea:	4805      	ldr	r0, [pc, #20]	@ (8002300 <MX_USART2_UART_Init+0x4c>)
 80022ec:	f003 fa4c 	bl	8005788 <HAL_UART_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022f6:	f7ff fbef 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000888 	.word	0x20000888
 8002304:	40004400 	.word	0x40004400

08002308 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800230c:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <MX_USART3_UART_Init+0x4c>)
 800230e:	4a12      	ldr	r2, [pc, #72]	@ (8002358 <MX_USART3_UART_Init+0x50>)
 8002310:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 4800;
 8002312:	4b10      	ldr	r3, [pc, #64]	@ (8002354 <MX_USART3_UART_Init+0x4c>)
 8002314:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8002318:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800231a:	4b0e      	ldr	r3, [pc, #56]	@ (8002354 <MX_USART3_UART_Init+0x4c>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002320:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <MX_USART3_UART_Init+0x4c>)
 8002322:	2200      	movs	r2, #0
 8002324:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002326:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <MX_USART3_UART_Init+0x4c>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800232c:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <MX_USART3_UART_Init+0x4c>)
 800232e:	220c      	movs	r2, #12
 8002330:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002332:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <MX_USART3_UART_Init+0x4c>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002338:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <MX_USART3_UART_Init+0x4c>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800233e:	4805      	ldr	r0, [pc, #20]	@ (8002354 <MX_USART3_UART_Init+0x4c>)
 8002340:	f003 fa22 	bl	8005788 <HAL_UART_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800234a:	f7ff fbc5 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	200008d0 	.word	0x200008d0
 8002358:	40004800 	.word	0x40004800

0800235c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08e      	sub	sp, #56	@ 0x38
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a50      	ldr	r2, [pc, #320]	@ (80024bc <HAL_UART_MspInit+0x160>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d12d      	bne.n	80023da <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	623b      	str	r3, [r7, #32]
 8002382:	4b4f      	ldr	r3, [pc, #316]	@ (80024c0 <HAL_UART_MspInit+0x164>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	4a4e      	ldr	r2, [pc, #312]	@ (80024c0 <HAL_UART_MspInit+0x164>)
 8002388:	f043 0310 	orr.w	r3, r3, #16
 800238c:	6453      	str	r3, [r2, #68]	@ 0x44
 800238e:	4b4c      	ldr	r3, [pc, #304]	@ (80024c0 <HAL_UART_MspInit+0x164>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	623b      	str	r3, [r7, #32]
 8002398:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	4b48      	ldr	r3, [pc, #288]	@ (80024c0 <HAL_UART_MspInit+0x164>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	4a47      	ldr	r2, [pc, #284]	@ (80024c0 <HAL_UART_MspInit+0x164>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023aa:	4b45      	ldr	r3, [pc, #276]	@ (80024c0 <HAL_UART_MspInit+0x164>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	61fb      	str	r3, [r7, #28]
 80023b4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023b6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023c8:	2307      	movs	r3, #7
 80023ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023d0:	4619      	mov	r1, r3
 80023d2:	483c      	ldr	r0, [pc, #240]	@ (80024c4 <HAL_UART_MspInit+0x168>)
 80023d4:	f001 fa64 	bl	80038a0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80023d8:	e06b      	b.n	80024b2 <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a3a      	ldr	r2, [pc, #232]	@ (80024c8 <HAL_UART_MspInit+0x16c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d12c      	bne.n	800243e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023e4:	2300      	movs	r3, #0
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	4b35      	ldr	r3, [pc, #212]	@ (80024c0 <HAL_UART_MspInit+0x164>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	4a34      	ldr	r2, [pc, #208]	@ (80024c0 <HAL_UART_MspInit+0x164>)
 80023ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80023f4:	4b32      	ldr	r3, [pc, #200]	@ (80024c0 <HAL_UART_MspInit+0x164>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	4b2e      	ldr	r3, [pc, #184]	@ (80024c0 <HAL_UART_MspInit+0x164>)
 8002406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002408:	4a2d      	ldr	r2, [pc, #180]	@ (80024c0 <HAL_UART_MspInit+0x164>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002410:	4b2b      	ldr	r3, [pc, #172]	@ (80024c0 <HAL_UART_MspInit+0x164>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800241c:	230c      	movs	r3, #12
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002420:	2302      	movs	r3, #2
 8002422:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002428:	2303      	movs	r3, #3
 800242a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800242c:	2307      	movs	r3, #7
 800242e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002430:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002434:	4619      	mov	r1, r3
 8002436:	4823      	ldr	r0, [pc, #140]	@ (80024c4 <HAL_UART_MspInit+0x168>)
 8002438:	f001 fa32 	bl	80038a0 <HAL_GPIO_Init>
}
 800243c:	e039      	b.n	80024b2 <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART3)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a22      	ldr	r2, [pc, #136]	@ (80024cc <HAL_UART_MspInit+0x170>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d134      	bne.n	80024b2 <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	4b1c      	ldr	r3, [pc, #112]	@ (80024c0 <HAL_UART_MspInit+0x164>)
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	4a1b      	ldr	r2, [pc, #108]	@ (80024c0 <HAL_UART_MspInit+0x164>)
 8002452:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002456:	6413      	str	r3, [r2, #64]	@ 0x40
 8002458:	4b19      	ldr	r3, [pc, #100]	@ (80024c0 <HAL_UART_MspInit+0x164>)
 800245a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	4b15      	ldr	r3, [pc, #84]	@ (80024c0 <HAL_UART_MspInit+0x164>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246c:	4a14      	ldr	r2, [pc, #80]	@ (80024c0 <HAL_UART_MspInit+0x164>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	6313      	str	r3, [r2, #48]	@ 0x30
 8002474:	4b12      	ldr	r3, [pc, #72]	@ (80024c0 <HAL_UART_MspInit+0x164>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002480:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002484:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248e:	2303      	movs	r3, #3
 8002490:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002492:	2307      	movs	r3, #7
 8002494:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800249a:	4619      	mov	r1, r3
 800249c:	480c      	ldr	r0, [pc, #48]	@ (80024d0 <HAL_UART_MspInit+0x174>)
 800249e:	f001 f9ff 	bl	80038a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2100      	movs	r1, #0
 80024a6:	2027      	movs	r0, #39	@ 0x27
 80024a8:	f000 fdc1 	bl	800302e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024ac:	2027      	movs	r0, #39	@ 0x27
 80024ae:	f000 fdda 	bl	8003066 <HAL_NVIC_EnableIRQ>
}
 80024b2:	bf00      	nop
 80024b4:	3738      	adds	r7, #56	@ 0x38
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40011000 	.word	0x40011000
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40020000 	.word	0x40020000
 80024c8:	40004400 	.word	0x40004400
 80024cc:	40004800 	.word	0x40004800
 80024d0:	40020800 	.word	0x40020800

080024d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800250c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024d8:	f7ff fdd2 	bl	8002080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024dc:	480c      	ldr	r0, [pc, #48]	@ (8002510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024de:	490d      	ldr	r1, [pc, #52]	@ (8002514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024e4:	e002      	b.n	80024ec <LoopCopyDataInit>

080024e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ea:	3304      	adds	r3, #4

080024ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f0:	d3f9      	bcc.n	80024e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024f2:	4a0a      	ldr	r2, [pc, #40]	@ (800251c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f8:	e001      	b.n	80024fe <LoopFillZerobss>

080024fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024fc:	3204      	adds	r2, #4

080024fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002500:	d3fb      	bcc.n	80024fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002502:	f004 faad 	bl	8006a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002506:	f7ff f9ef 	bl	80018e8 <main>
  bx  lr    
 800250a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800250c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002514:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8002518:	08009ab8 	.word	0x08009ab8
  ldr r2, =_sbss
 800251c:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8002520:	2000091c 	.word	0x2000091c

08002524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002524:	e7fe      	b.n	8002524 <ADC_IRQHandler>
	...

08002528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800252c:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <HAL_Init+0x40>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0d      	ldr	r2, [pc, #52]	@ (8002568 <HAL_Init+0x40>)
 8002532:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002538:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <HAL_Init+0x40>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0a      	ldr	r2, [pc, #40]	@ (8002568 <HAL_Init+0x40>)
 800253e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002544:	4b08      	ldr	r3, [pc, #32]	@ (8002568 <HAL_Init+0x40>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a07      	ldr	r2, [pc, #28]	@ (8002568 <HAL_Init+0x40>)
 800254a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800254e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002550:	2003      	movs	r0, #3
 8002552:	f000 fd61 	bl	8003018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002556:	200f      	movs	r0, #15
 8002558:	f000 f808 	bl	800256c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800255c:	f7ff fd10 	bl	8001f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023c00 	.word	0x40023c00

0800256c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002574:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <HAL_InitTick+0x54>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b12      	ldr	r3, [pc, #72]	@ (80025c4 <HAL_InitTick+0x58>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002582:	fbb3 f3f1 	udiv	r3, r3, r1
 8002586:	fbb2 f3f3 	udiv	r3, r2, r3
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fd79 	bl	8003082 <HAL_SYSTICK_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e00e      	b.n	80025b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b0f      	cmp	r3, #15
 800259e:	d80a      	bhi.n	80025b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a0:	2200      	movs	r2, #0
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	f000 fd41 	bl	800302e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025ac:	4a06      	ldr	r2, [pc, #24]	@ (80025c8 <HAL_InitTick+0x5c>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e000      	b.n	80025b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000228 	.word	0x20000228
 80025c4:	20000230 	.word	0x20000230
 80025c8:	2000022c 	.word	0x2000022c

080025cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d0:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <HAL_IncTick+0x20>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_IncTick+0x24>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	4a04      	ldr	r2, [pc, #16]	@ (80025f0 <HAL_IncTick+0x24>)
 80025de:	6013      	str	r3, [r2, #0]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000230 	.word	0x20000230
 80025f0:	20000918 	.word	0x20000918

080025f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return uwTick;
 80025f8:	4b03      	ldr	r3, [pc, #12]	@ (8002608 <HAL_GetTick+0x14>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000918 	.word	0x20000918

0800260c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff ffee 	bl	80025f4 <HAL_GetTick>
 8002618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002624:	d005      	beq.n	8002632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002626:	4b0a      	ldr	r3, [pc, #40]	@ (8002650 <HAL_Delay+0x44>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4413      	add	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002632:	bf00      	nop
 8002634:	f7ff ffde 	bl	80025f4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	429a      	cmp	r2, r3
 8002642:	d8f7      	bhi.n	8002634 <HAL_Delay+0x28>
  {
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000230 	.word	0x20000230

08002654 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e033      	b.n	80026d2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fe f972 	bl	800095c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800269a:	f023 0302 	bic.w	r3, r3, #2
 800269e:	f043 0202 	orr.w	r2, r3, #2
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fa68 	bl	8002b7c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	f023 0303 	bic.w	r3, r3, #3
 80026ba:	f043 0201 	orr.w	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80026c2:	e001      	b.n	80026c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_Start_DMA+0x1e>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e0e9      	b.n	80028ce <HAL_ADC_Start_DMA+0x1f2>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b01      	cmp	r3, #1
 800270e:	d018      	beq.n	8002742 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002720:	4b6d      	ldr	r3, [pc, #436]	@ (80028d8 <HAL_ADC_Start_DMA+0x1fc>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a6d      	ldr	r2, [pc, #436]	@ (80028dc <HAL_ADC_Start_DMA+0x200>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	0c9a      	lsrs	r2, r3, #18
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002734:	e002      	b.n	800273c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	3b01      	subs	r3, #1
 800273a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f9      	bne.n	8002736 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002750:	d107      	bne.n	8002762 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002760:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	f040 80a1 	bne.w	80028b4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002790:	2b00      	cmp	r3, #0
 8002792:	d007      	beq.n	80027a4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800279c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027b0:	d106      	bne.n	80027c0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b6:	f023 0206 	bic.w	r2, r3, #6
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80027be:	e002      	b.n	80027c6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ce:	4b44      	ldr	r3, [pc, #272]	@ (80028e0 <HAL_ADC_Start_DMA+0x204>)
 80027d0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d6:	4a43      	ldr	r2, [pc, #268]	@ (80028e4 <HAL_ADC_Start_DMA+0x208>)
 80027d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027de:	4a42      	ldr	r2, [pc, #264]	@ (80028e8 <HAL_ADC_Start_DMA+0x20c>)
 80027e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e6:	4a41      	ldr	r2, [pc, #260]	@ (80028ec <HAL_ADC_Start_DMA+0x210>)
 80027e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80027f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002802:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002812:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	334c      	adds	r3, #76	@ 0x4c
 800281e:	4619      	mov	r1, r3
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f000 fce8 	bl	80031f8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	2b00      	cmp	r3, #0
 8002832:	d12a      	bne.n	800288a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a2d      	ldr	r2, [pc, #180]	@ (80028f0 <HAL_ADC_Start_DMA+0x214>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d015      	beq.n	800286a <HAL_ADC_Start_DMA+0x18e>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a2c      	ldr	r2, [pc, #176]	@ (80028f4 <HAL_ADC_Start_DMA+0x218>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d105      	bne.n	8002854 <HAL_ADC_Start_DMA+0x178>
 8002848:	4b25      	ldr	r3, [pc, #148]	@ (80028e0 <HAL_ADC_Start_DMA+0x204>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a27      	ldr	r2, [pc, #156]	@ (80028f8 <HAL_ADC_Start_DMA+0x21c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d136      	bne.n	80028cc <HAL_ADC_Start_DMA+0x1f0>
 800285e:	4b20      	ldr	r3, [pc, #128]	@ (80028e0 <HAL_ADC_Start_DMA+0x204>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	d130      	bne.n	80028cc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d129      	bne.n	80028cc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	e020      	b.n	80028cc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a18      	ldr	r2, [pc, #96]	@ (80028f0 <HAL_ADC_Start_DMA+0x214>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d11b      	bne.n	80028cc <HAL_ADC_Start_DMA+0x1f0>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d114      	bne.n	80028cc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	e00b      	b.n	80028cc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b8:	f043 0210 	orr.w	r2, r3, #16
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000228 	.word	0x20000228
 80028dc:	431bde83 	.word	0x431bde83
 80028e0:	40012300 	.word	0x40012300
 80028e4:	08002d75 	.word	0x08002d75
 80028e8:	08002e2f 	.word	0x08002e2f
 80028ec:	08002e4b 	.word	0x08002e4b
 80028f0:	40012000 	.word	0x40012000
 80028f4:	40012100 	.word	0x40012100
 80028f8:	40012200 	.word	0x40012200

080028fc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x1c>
 8002950:	2302      	movs	r3, #2
 8002952:	e105      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x228>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b09      	cmp	r3, #9
 8002962:	d925      	bls.n	80029b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68d9      	ldr	r1, [r3, #12]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	3b1e      	subs	r3, #30
 800297a:	2207      	movs	r2, #7
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43da      	mvns	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	400a      	ands	r2, r1
 8002988:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68d9      	ldr	r1, [r3, #12]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	4618      	mov	r0, r3
 800299c:	4603      	mov	r3, r0
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4403      	add	r3, r0
 80029a2:	3b1e      	subs	r3, #30
 80029a4:	409a      	lsls	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	e022      	b.n	80029f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6919      	ldr	r1, [r3, #16]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	2207      	movs	r2, #7
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	400a      	ands	r2, r1
 80029d2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6919      	ldr	r1, [r3, #16]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	4618      	mov	r0, r3
 80029e6:	4603      	mov	r3, r0
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4403      	add	r3, r0
 80029ec:	409a      	lsls	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d824      	bhi.n	8002a48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3b05      	subs	r3, #5
 8002a10:	221f      	movs	r2, #31
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	400a      	ands	r2, r1
 8002a1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	3b05      	subs	r3, #5
 8002a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a46:	e04c      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b0c      	cmp	r3, #12
 8002a4e:	d824      	bhi.n	8002a9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	3b23      	subs	r3, #35	@ 0x23
 8002a62:	221f      	movs	r2, #31
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43da      	mvns	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	400a      	ands	r2, r1
 8002a70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	4618      	mov	r0, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	3b23      	subs	r3, #35	@ 0x23
 8002a8c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a98:	e023      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3b41      	subs	r3, #65	@ 0x41
 8002aac:	221f      	movs	r2, #31
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	400a      	ands	r2, r1
 8002aba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	4618      	mov	r0, r3
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3b41      	subs	r3, #65	@ 0x41
 8002ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ae2:	4b22      	ldr	r3, [pc, #136]	@ (8002b6c <HAL_ADC_ConfigChannel+0x234>)
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a21      	ldr	r2, [pc, #132]	@ (8002b70 <HAL_ADC_ConfigChannel+0x238>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d109      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x1cc>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b12      	cmp	r3, #18
 8002af6:	d105      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a19      	ldr	r2, [pc, #100]	@ (8002b70 <HAL_ADC_ConfigChannel+0x238>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d123      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x21e>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d003      	beq.n	8002b1e <HAL_ADC_ConfigChannel+0x1e6>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b11      	cmp	r3, #17
 8002b1c:	d11b      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d111      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b32:	4b10      	ldr	r3, [pc, #64]	@ (8002b74 <HAL_ADC_ConfigChannel+0x23c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a10      	ldr	r2, [pc, #64]	@ (8002b78 <HAL_ADC_ConfigChannel+0x240>)
 8002b38:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3c:	0c9a      	lsrs	r2, r3, #18
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002b48:	e002      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f9      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	40012300 	.word	0x40012300
 8002b70:	40012000 	.word	0x40012000
 8002b74:	20000228 	.word	0x20000228
 8002b78:	431bde83 	.word	0x431bde83

08002b7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b84:	4b79      	ldr	r3, [pc, #484]	@ (8002d6c <ADC_Init+0x1f0>)
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6859      	ldr	r1, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	021a      	lsls	r2, r3, #8
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002bd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6899      	ldr	r1, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0e:	4a58      	ldr	r2, [pc, #352]	@ (8002d70 <ADC_Init+0x1f4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d022      	beq.n	8002c5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6899      	ldr	r1, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6899      	ldr	r1, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	e00f      	b.n	8002c7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c78:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0202 	bic.w	r2, r2, #2
 8002c88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6899      	ldr	r1, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7e1b      	ldrb	r3, [r3, #24]
 8002c94:	005a      	lsls	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01b      	beq.n	8002ce0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cb6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002cc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6859      	ldr	r1, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	035a      	lsls	r2, r3, #13
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	e007      	b.n	8002cf0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	051a      	lsls	r2, r3, #20
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6899      	ldr	r1, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d32:	025a      	lsls	r2, r3, #9
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6899      	ldr	r1, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	029a      	lsls	r2, r3, #10
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	609a      	str	r2, [r3, #8]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	40012300 	.word	0x40012300
 8002d70:	0f000001 	.word	0x0f000001

08002d74 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d13c      	bne.n	8002e08 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d12b      	bne.n	8002e00 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d127      	bne.n	8002e00 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d006      	beq.n	8002dcc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d119      	bne.n	8002e00 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0220 	bic.w	r2, r2, #32
 8002dda:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d105      	bne.n	8002e00 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7ff fd7b 	bl	80028fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e06:	e00e      	b.n	8002e26 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f7ff fd85 	bl	8002924 <HAL_ADC_ErrorCallback>
}
 8002e1a:	e004      	b.n	8002e26 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	4798      	blx	r3
}
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f7ff fd67 	bl	8002910 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e56:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2240      	movs	r2, #64	@ 0x40
 8002e5c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e62:	f043 0204 	orr.w	r2, r3, #4
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f7ff fd5a 	bl	8002924 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e70:	bf00      	nop
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e88:	4b0c      	ldr	r3, [pc, #48]	@ (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e94:	4013      	ands	r3, r2
 8002e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eaa:	4a04      	ldr	r2, [pc, #16]	@ (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	60d3      	str	r3, [r2, #12]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec4:	4b04      	ldr	r3, [pc, #16]	@ (8002ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	f003 0307 	and.w	r3, r3, #7
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	db0b      	blt.n	8002f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	f003 021f 	and.w	r2, r3, #31
 8002ef4:	4907      	ldr	r1, [pc, #28]	@ (8002f14 <__NVIC_EnableIRQ+0x38>)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	2001      	movs	r0, #1
 8002efe:	fa00 f202 	lsl.w	r2, r0, r2
 8002f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000e100 	.word	0xe000e100

08002f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	6039      	str	r1, [r7, #0]
 8002f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	db0a      	blt.n	8002f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	490c      	ldr	r1, [pc, #48]	@ (8002f64 <__NVIC_SetPriority+0x4c>)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	0112      	lsls	r2, r2, #4
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f40:	e00a      	b.n	8002f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	4908      	ldr	r1, [pc, #32]	@ (8002f68 <__NVIC_SetPriority+0x50>)
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	3b04      	subs	r3, #4
 8002f50:	0112      	lsls	r2, r2, #4
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	440b      	add	r3, r1
 8002f56:	761a      	strb	r2, [r3, #24]
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000e100 	.word	0xe000e100
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	@ 0x24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f1c3 0307 	rsb	r3, r3, #7
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	bf28      	it	cs
 8002f8a:	2304      	movcs	r3, #4
 8002f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3304      	adds	r3, #4
 8002f92:	2b06      	cmp	r3, #6
 8002f94:	d902      	bls.n	8002f9c <NVIC_EncodePriority+0x30>
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3b03      	subs	r3, #3
 8002f9a:	e000      	b.n	8002f9e <NVIC_EncodePriority+0x32>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43da      	mvns	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	401a      	ands	r2, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbe:	43d9      	mvns	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc4:	4313      	orrs	r3, r2
         );
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3724      	adds	r7, #36	@ 0x24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fe4:	d301      	bcc.n	8002fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e00f      	b.n	800300a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fea:	4a0a      	ldr	r2, [pc, #40]	@ (8003014 <SysTick_Config+0x40>)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ff2:	210f      	movs	r1, #15
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff8:	f7ff ff8e 	bl	8002f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ffc:	4b05      	ldr	r3, [pc, #20]	@ (8003014 <SysTick_Config+0x40>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003002:	4b04      	ldr	r3, [pc, #16]	@ (8003014 <SysTick_Config+0x40>)
 8003004:	2207      	movs	r2, #7
 8003006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	e000e010 	.word	0xe000e010

08003018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ff29 	bl	8002e78 <__NVIC_SetPriorityGrouping>
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800302e:	b580      	push	{r7, lr}
 8003030:	b086      	sub	sp, #24
 8003032:	af00      	add	r7, sp, #0
 8003034:	4603      	mov	r3, r0
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003040:	f7ff ff3e 	bl	8002ec0 <__NVIC_GetPriorityGrouping>
 8003044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	6978      	ldr	r0, [r7, #20]
 800304c:	f7ff ff8e 	bl	8002f6c <NVIC_EncodePriority>
 8003050:	4602      	mov	r2, r0
 8003052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ff5d 	bl	8002f18 <__NVIC_SetPriority>
}
 800305e:	bf00      	nop
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	4603      	mov	r3, r0
 800306e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ff31 	bl	8002edc <__NVIC_EnableIRQ>
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff ffa2 	bl	8002fd4 <SysTick_Config>
 8003090:	4603      	mov	r3, r0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030a8:	f7ff faa4 	bl	80025f4 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e099      	b.n	80031ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0201 	bic.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030d8:	e00f      	b.n	80030fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030da:	f7ff fa8b 	bl	80025f4 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b05      	cmp	r3, #5
 80030e6:	d908      	bls.n	80030fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2203      	movs	r2, #3
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e078      	b.n	80031ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1e8      	bne.n	80030da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4b38      	ldr	r3, [pc, #224]	@ (80031f4 <HAL_DMA_Init+0x158>)
 8003114:	4013      	ands	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003126:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003132:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800313e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003150:	2b04      	cmp	r3, #4
 8003152:	d107      	bne.n	8003164 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315c:	4313      	orrs	r3, r2
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f023 0307 	bic.w	r3, r3, #7
 800317a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	4313      	orrs	r3, r2
 8003184:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318a:	2b04      	cmp	r3, #4
 800318c:	d117      	bne.n	80031be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4313      	orrs	r3, r2
 8003196:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00e      	beq.n	80031be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fb01 	bl	80037a8 <DMA_CheckFifoParam>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2240      	movs	r2, #64	@ 0x40
 80031b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80031ba:	2301      	movs	r3, #1
 80031bc:	e016      	b.n	80031ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fab8 	bl	800373c <DMA_CalcBaseAndBitshift>
 80031cc:	4603      	mov	r3, r0
 80031ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d4:	223f      	movs	r2, #63	@ 0x3f
 80031d6:	409a      	lsls	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	f010803f 	.word	0xf010803f

080031f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_DMA_Start_IT+0x26>
 800321a:	2302      	movs	r3, #2
 800321c:	e040      	b.n	80032a0 <HAL_DMA_Start_IT+0xa8>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	d12f      	bne.n	8003292 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2202      	movs	r2, #2
 8003236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 fa4a 	bl	80036e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003250:	223f      	movs	r2, #63	@ 0x3f
 8003252:	409a      	lsls	r2, r3
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0216 	orr.w	r2, r2, #22
 8003266:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326c:	2b00      	cmp	r3, #0
 800326e:	d007      	beq.n	8003280 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0208 	orr.w	r2, r2, #8
 800327e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	e005      	b.n	800329e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800329a:	2302      	movs	r3, #2
 800329c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800329e:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032b6:	f7ff f99d 	bl	80025f4 <HAL_GetTick>
 80032ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d008      	beq.n	80032da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2280      	movs	r2, #128	@ 0x80
 80032cc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e052      	b.n	8003380 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0216 	bic.w	r2, r2, #22
 80032e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d103      	bne.n	800330a <HAL_DMA_Abort+0x62>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0208 	bic.w	r2, r2, #8
 8003318:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0201 	bic.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800332a:	e013      	b.n	8003354 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800332c:	f7ff f962 	bl	80025f4 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b05      	cmp	r3, #5
 8003338:	d90c      	bls.n	8003354 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2203      	movs	r2, #3
 8003344:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e015      	b.n	8003380 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1e4      	bne.n	800332c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003366:	223f      	movs	r2, #63	@ 0x3f
 8003368:	409a      	lsls	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d004      	beq.n	80033a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2280      	movs	r2, #128	@ 0x80
 80033a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e00c      	b.n	80033c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2205      	movs	r2, #5
 80033aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003614 <HAL_DMA_IRQHandler+0x248>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a8e      	ldr	r2, [pc, #568]	@ (8003618 <HAL_DMA_IRQHandler+0x24c>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	0a9b      	lsrs	r3, r3, #10
 80033e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f6:	2208      	movs	r2, #8
 80033f8:	409a      	lsls	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d01a      	beq.n	8003438 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d013      	beq.n	8003438 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0204 	bic.w	r2, r2, #4
 800341e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003424:	2208      	movs	r2, #8
 8003426:	409a      	lsls	r2, r3
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003430:	f043 0201 	orr.w	r2, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343c:	2201      	movs	r2, #1
 800343e:	409a      	lsls	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d012      	beq.n	800346e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345a:	2201      	movs	r2, #1
 800345c:	409a      	lsls	r2, r3
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003466:	f043 0202 	orr.w	r2, r3, #2
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003472:	2204      	movs	r2, #4
 8003474:	409a      	lsls	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4013      	ands	r3, r2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d012      	beq.n	80034a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00b      	beq.n	80034a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003490:	2204      	movs	r2, #4
 8003492:	409a      	lsls	r2, r3
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349c:	f043 0204 	orr.w	r2, r3, #4
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a8:	2210      	movs	r2, #16
 80034aa:	409a      	lsls	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d043      	beq.n	800353c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d03c      	beq.n	800353c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c6:	2210      	movs	r2, #16
 80034c8:	409a      	lsls	r2, r3
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d018      	beq.n	800350e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d108      	bne.n	80034fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d024      	beq.n	800353c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4798      	blx	r3
 80034fa:	e01f      	b.n	800353c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01b      	beq.n	800353c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	4798      	blx	r3
 800350c:	e016      	b.n	800353c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d107      	bne.n	800352c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0208 	bic.w	r2, r2, #8
 800352a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003540:	2220      	movs	r2, #32
 8003542:	409a      	lsls	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 808f 	beq.w	800366c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8087 	beq.w	800366c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003562:	2220      	movs	r2, #32
 8003564:	409a      	lsls	r2, r3
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b05      	cmp	r3, #5
 8003574:	d136      	bne.n	80035e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0216 	bic.w	r2, r2, #22
 8003584:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003594:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d103      	bne.n	80035a6 <HAL_DMA_IRQHandler+0x1da>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0208 	bic.w	r2, r2, #8
 80035b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ba:	223f      	movs	r2, #63	@ 0x3f
 80035bc:	409a      	lsls	r2, r3
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d07e      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
        }
        return;
 80035e2:	e079      	b.n	80036d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d01d      	beq.n	800362e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10d      	bne.n	800361c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003604:	2b00      	cmp	r3, #0
 8003606:	d031      	beq.n	800366c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
 8003610:	e02c      	b.n	800366c <HAL_DMA_IRQHandler+0x2a0>
 8003612:	bf00      	nop
 8003614:	20000228 	.word	0x20000228
 8003618:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d023      	beq.n	800366c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	4798      	blx	r3
 800362c:	e01e      	b.n	800366c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10f      	bne.n	800365c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0210 	bic.w	r2, r2, #16
 800364a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003670:	2b00      	cmp	r3, #0
 8003672:	d032      	beq.n	80036da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d022      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2205      	movs	r2, #5
 8003684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0201 	bic.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	3301      	adds	r3, #1
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d307      	bcc.n	80036b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f2      	bne.n	8003698 <HAL_DMA_IRQHandler+0x2cc>
 80036b2:	e000      	b.n	80036b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	4798      	blx	r3
 80036d6:	e000      	b.n	80036da <HAL_DMA_IRQHandler+0x30e>
        return;
 80036d8:	bf00      	nop
    }
  }
}
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80036fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b40      	cmp	r3, #64	@ 0x40
 800370c:	d108      	bne.n	8003720 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800371e:	e007      	b.n	8003730 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	60da      	str	r2, [r3, #12]
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	3b10      	subs	r3, #16
 800374c:	4a14      	ldr	r2, [pc, #80]	@ (80037a0 <DMA_CalcBaseAndBitshift+0x64>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	091b      	lsrs	r3, r3, #4
 8003754:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003756:	4a13      	ldr	r2, [pc, #76]	@ (80037a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4413      	add	r3, r2
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b03      	cmp	r3, #3
 8003768:	d909      	bls.n	800377e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003772:	f023 0303 	bic.w	r3, r3, #3
 8003776:	1d1a      	adds	r2, r3, #4
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	659a      	str	r2, [r3, #88]	@ 0x58
 800377c:	e007      	b.n	800378e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003786:	f023 0303 	bic.w	r3, r3, #3
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	aaaaaaab 	.word	0xaaaaaaab
 80037a4:	08009aa0 	.word	0x08009aa0

080037a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d11f      	bne.n	8003802 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d856      	bhi.n	8003876 <DMA_CheckFifoParam+0xce>
 80037c8:	a201      	add	r2, pc, #4	@ (adr r2, 80037d0 <DMA_CheckFifoParam+0x28>)
 80037ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ce:	bf00      	nop
 80037d0:	080037e1 	.word	0x080037e1
 80037d4:	080037f3 	.word	0x080037f3
 80037d8:	080037e1 	.word	0x080037e1
 80037dc:	08003877 	.word	0x08003877
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d046      	beq.n	800387a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f0:	e043      	b.n	800387a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037fa:	d140      	bne.n	800387e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003800:	e03d      	b.n	800387e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800380a:	d121      	bne.n	8003850 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b03      	cmp	r3, #3
 8003810:	d837      	bhi.n	8003882 <DMA_CheckFifoParam+0xda>
 8003812:	a201      	add	r2, pc, #4	@ (adr r2, 8003818 <DMA_CheckFifoParam+0x70>)
 8003814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003818:	08003829 	.word	0x08003829
 800381c:	0800382f 	.word	0x0800382f
 8003820:	08003829 	.word	0x08003829
 8003824:	08003841 	.word	0x08003841
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
      break;
 800382c:	e030      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003832:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d025      	beq.n	8003886 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800383e:	e022      	b.n	8003886 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003844:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003848:	d11f      	bne.n	800388a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800384e:	e01c      	b.n	800388a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d903      	bls.n	800385e <DMA_CheckFifoParam+0xb6>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b03      	cmp	r3, #3
 800385a:	d003      	beq.n	8003864 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800385c:	e018      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	73fb      	strb	r3, [r7, #15]
      break;
 8003862:	e015      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003868:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00e      	beq.n	800388e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
      break;
 8003874:	e00b      	b.n	800388e <DMA_CheckFifoParam+0xe6>
      break;
 8003876:	bf00      	nop
 8003878:	e00a      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
      break;
 800387a:	bf00      	nop
 800387c:	e008      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
      break;
 800387e:	bf00      	nop
 8003880:	e006      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
      break;
 8003882:	bf00      	nop
 8003884:	e004      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
      break;
 8003886:	bf00      	nop
 8003888:	e002      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
      break;   
 800388a:	bf00      	nop
 800388c:	e000      	b.n	8003890 <DMA_CheckFifoParam+0xe8>
      break;
 800388e:	bf00      	nop
    }
  } 
  
  return status; 
 8003890:	7bfb      	ldrb	r3, [r7, #15]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop

080038a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	@ 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	e16b      	b.n	8003b94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038bc:	2201      	movs	r2, #1
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	f040 815a 	bne.w	8003b8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d005      	beq.n	80038f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d130      	bne.n	8003954 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	2203      	movs	r2, #3
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003928:	2201      	movs	r2, #1
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 0201 	and.w	r2, r3, #1
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	2b03      	cmp	r3, #3
 800395e:	d017      	beq.n	8003990 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	2203      	movs	r2, #3
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4313      	orrs	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d123      	bne.n	80039e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	08da      	lsrs	r2, r3, #3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3208      	adds	r2, #8
 80039a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	220f      	movs	r2, #15
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	08da      	lsrs	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3208      	adds	r2, #8
 80039de:	69b9      	ldr	r1, [r7, #24]
 80039e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	2203      	movs	r2, #3
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0203 	and.w	r2, r3, #3
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80b4 	beq.w	8003b8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	4b60      	ldr	r3, [pc, #384]	@ (8003bac <HAL_GPIO_Init+0x30c>)
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2e:	4a5f      	ldr	r2, [pc, #380]	@ (8003bac <HAL_GPIO_Init+0x30c>)
 8003a30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a34:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a36:	4b5d      	ldr	r3, [pc, #372]	@ (8003bac <HAL_GPIO_Init+0x30c>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a42:	4a5b      	ldr	r2, [pc, #364]	@ (8003bb0 <HAL_GPIO_Init+0x310>)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	089b      	lsrs	r3, r3, #2
 8003a48:	3302      	adds	r3, #2
 8003a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	220f      	movs	r2, #15
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4013      	ands	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a52      	ldr	r2, [pc, #328]	@ (8003bb4 <HAL_GPIO_Init+0x314>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d02b      	beq.n	8003ac6 <HAL_GPIO_Init+0x226>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a51      	ldr	r2, [pc, #324]	@ (8003bb8 <HAL_GPIO_Init+0x318>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d025      	beq.n	8003ac2 <HAL_GPIO_Init+0x222>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a50      	ldr	r2, [pc, #320]	@ (8003bbc <HAL_GPIO_Init+0x31c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d01f      	beq.n	8003abe <HAL_GPIO_Init+0x21e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a4f      	ldr	r2, [pc, #316]	@ (8003bc0 <HAL_GPIO_Init+0x320>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d019      	beq.n	8003aba <HAL_GPIO_Init+0x21a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a4e      	ldr	r2, [pc, #312]	@ (8003bc4 <HAL_GPIO_Init+0x324>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_GPIO_Init+0x216>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a4d      	ldr	r2, [pc, #308]	@ (8003bc8 <HAL_GPIO_Init+0x328>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00d      	beq.n	8003ab2 <HAL_GPIO_Init+0x212>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a4c      	ldr	r2, [pc, #304]	@ (8003bcc <HAL_GPIO_Init+0x32c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d007      	beq.n	8003aae <HAL_GPIO_Init+0x20e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a4b      	ldr	r2, [pc, #300]	@ (8003bd0 <HAL_GPIO_Init+0x330>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d101      	bne.n	8003aaa <HAL_GPIO_Init+0x20a>
 8003aa6:	2307      	movs	r3, #7
 8003aa8:	e00e      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003aaa:	2308      	movs	r3, #8
 8003aac:	e00c      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003aae:	2306      	movs	r3, #6
 8003ab0:	e00a      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003ab2:	2305      	movs	r3, #5
 8003ab4:	e008      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	e006      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003aba:	2303      	movs	r3, #3
 8003abc:	e004      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e002      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	f002 0203 	and.w	r2, r2, #3
 8003ace:	0092      	lsls	r2, r2, #2
 8003ad0:	4093      	lsls	r3, r2
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ad8:	4935      	ldr	r1, [pc, #212]	@ (8003bb0 <HAL_GPIO_Init+0x310>)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	089b      	lsrs	r3, r3, #2
 8003ade:	3302      	adds	r3, #2
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b0a:	4a32      	ldr	r2, [pc, #200]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b10:	4b30      	ldr	r3, [pc, #192]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b34:	4a27      	ldr	r2, [pc, #156]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b3a:	4b26      	ldr	r3, [pc, #152]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b64:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b88:	4a12      	ldr	r2, [pc, #72]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	3301      	adds	r3, #1
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	2b0f      	cmp	r3, #15
 8003b98:	f67f ae90 	bls.w	80038bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	3724      	adds	r7, #36	@ 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40013800 	.word	0x40013800
 8003bb4:	40020000 	.word	0x40020000
 8003bb8:	40020400 	.word	0x40020400
 8003bbc:	40020800 	.word	0x40020800
 8003bc0:	40020c00 	.word	0x40020c00
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40021400 	.word	0x40021400
 8003bcc:	40021800 	.word	0x40021800
 8003bd0:	40021c00 	.word	0x40021c00
 8003bd4:	40013c00 	.word	0x40013c00

08003bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	807b      	strh	r3, [r7, #2]
 8003be4:	4613      	mov	r3, r2
 8003be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003be8:	787b      	ldrb	r3, [r7, #1]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bee:	887a      	ldrh	r2, [r7, #2]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bf4:	e003      	b.n	8003bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bf6:	887b      	ldrh	r3, [r7, #2]
 8003bf8:	041a      	lsls	r2, r3, #16
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	619a      	str	r2, [r3, #24]
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b085      	sub	sp, #20
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	460b      	mov	r3, r1
 8003c14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c1c:	887a      	ldrh	r2, [r7, #2]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4013      	ands	r3, r2
 8003c22:	041a      	lsls	r2, r3, #16
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	43d9      	mvns	r1, r3
 8003c28:	887b      	ldrh	r3, [r7, #2]
 8003c2a:	400b      	ands	r3, r1
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	619a      	str	r2, [r3, #24]
}
 8003c32:	bf00      	nop
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
	...

08003c40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e267      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d075      	beq.n	8003d4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c5e:	4b88      	ldr	r3, [pc, #544]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d00c      	beq.n	8003c84 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c6a:	4b85      	ldr	r3, [pc, #532]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d112      	bne.n	8003c9c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c76:	4b82      	ldr	r3, [pc, #520]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c82:	d10b      	bne.n	8003c9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	4b7e      	ldr	r3, [pc, #504]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d05b      	beq.n	8003d48 <HAL_RCC_OscConfig+0x108>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d157      	bne.n	8003d48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e242      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ca4:	d106      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x74>
 8003ca6:	4b76      	ldr	r3, [pc, #472]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a75      	ldr	r2, [pc, #468]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	e01d      	b.n	8003cf0 <HAL_RCC_OscConfig+0xb0>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x98>
 8003cbe:	4b70      	ldr	r3, [pc, #448]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6f      	ldr	r2, [pc, #444]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	4b6d      	ldr	r3, [pc, #436]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a6c      	ldr	r2, [pc, #432]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCC_OscConfig+0xb0>
 8003cd8:	4b69      	ldr	r3, [pc, #420]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a68      	ldr	r2, [pc, #416]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	4b66      	ldr	r3, [pc, #408]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a65      	ldr	r2, [pc, #404]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d013      	beq.n	8003d20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fe fc7c 	bl	80025f4 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d00:	f7fe fc78 	bl	80025f4 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	@ 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e207      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	4b5b      	ldr	r3, [pc, #364]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0xc0>
 8003d1e:	e014      	b.n	8003d4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d20:	f7fe fc68 	bl	80025f4 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d28:	f7fe fc64 	bl	80025f4 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	@ 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e1f3      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	4b51      	ldr	r3, [pc, #324]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0xe8>
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d063      	beq.n	8003e1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d56:	4b4a      	ldr	r3, [pc, #296]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d62:	4b47      	ldr	r3, [pc, #284]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d11c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d6e:	4b44      	ldr	r3, [pc, #272]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d116      	bne.n	8003da8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7a:	4b41      	ldr	r3, [pc, #260]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d005      	beq.n	8003d92 <HAL_RCC_OscConfig+0x152>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e1c7      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d92:	4b3b      	ldr	r3, [pc, #236]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4937      	ldr	r1, [pc, #220]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da6:	e03a      	b.n	8003e1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d020      	beq.n	8003df2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db0:	4b34      	ldr	r3, [pc, #208]	@ (8003e84 <HAL_RCC_OscConfig+0x244>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db6:	f7fe fc1d 	bl	80025f4 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dbe:	f7fe fc19 	bl	80025f4 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e1a8      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ddc:	4b28      	ldr	r3, [pc, #160]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4925      	ldr	r1, [pc, #148]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	600b      	str	r3, [r1, #0]
 8003df0:	e015      	b.n	8003e1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df2:	4b24      	ldr	r3, [pc, #144]	@ (8003e84 <HAL_RCC_OscConfig+0x244>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fe fbfc 	bl	80025f4 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e00:	f7fe fbf8 	bl	80025f4 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e187      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e12:	4b1b      	ldr	r3, [pc, #108]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d036      	beq.n	8003e98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d016      	beq.n	8003e60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e32:	4b15      	ldr	r3, [pc, #84]	@ (8003e88 <HAL_RCC_OscConfig+0x248>)
 8003e34:	2201      	movs	r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e38:	f7fe fbdc 	bl	80025f4 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e40:	f7fe fbd8 	bl	80025f4 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e167      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e52:	4b0b      	ldr	r3, [pc, #44]	@ (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x200>
 8003e5e:	e01b      	b.n	8003e98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e60:	4b09      	ldr	r3, [pc, #36]	@ (8003e88 <HAL_RCC_OscConfig+0x248>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e66:	f7fe fbc5 	bl	80025f4 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e6c:	e00e      	b.n	8003e8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e6e:	f7fe fbc1 	bl	80025f4 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d907      	bls.n	8003e8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e150      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
 8003e80:	40023800 	.word	0x40023800
 8003e84:	42470000 	.word	0x42470000
 8003e88:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e8c:	4b88      	ldr	r3, [pc, #544]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1ea      	bne.n	8003e6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8097 	beq.w	8003fd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eaa:	4b81      	ldr	r3, [pc, #516]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10f      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	4b7d      	ldr	r3, [pc, #500]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebe:	4a7c      	ldr	r2, [pc, #496]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ec6:	4b7a      	ldr	r3, [pc, #488]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed6:	4b77      	ldr	r3, [pc, #476]	@ (80040b4 <HAL_RCC_OscConfig+0x474>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d118      	bne.n	8003f14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ee2:	4b74      	ldr	r3, [pc, #464]	@ (80040b4 <HAL_RCC_OscConfig+0x474>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a73      	ldr	r2, [pc, #460]	@ (80040b4 <HAL_RCC_OscConfig+0x474>)
 8003ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eee:	f7fe fb81 	bl	80025f4 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef6:	f7fe fb7d 	bl	80025f4 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e10c      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f08:	4b6a      	ldr	r3, [pc, #424]	@ (80040b4 <HAL_RCC_OscConfig+0x474>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d106      	bne.n	8003f2a <HAL_RCC_OscConfig+0x2ea>
 8003f1c:	4b64      	ldr	r3, [pc, #400]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f20:	4a63      	ldr	r2, [pc, #396]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f28:	e01c      	b.n	8003f64 <HAL_RCC_OscConfig+0x324>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b05      	cmp	r3, #5
 8003f30:	d10c      	bne.n	8003f4c <HAL_RCC_OscConfig+0x30c>
 8003f32:	4b5f      	ldr	r3, [pc, #380]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f36:	4a5e      	ldr	r2, [pc, #376]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f38:	f043 0304 	orr.w	r3, r3, #4
 8003f3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f3e:	4b5c      	ldr	r3, [pc, #368]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f42:	4a5b      	ldr	r2, [pc, #364]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f4a:	e00b      	b.n	8003f64 <HAL_RCC_OscConfig+0x324>
 8003f4c:	4b58      	ldr	r3, [pc, #352]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f50:	4a57      	ldr	r2, [pc, #348]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f52:	f023 0301 	bic.w	r3, r3, #1
 8003f56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f58:	4b55      	ldr	r3, [pc, #340]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5c:	4a54      	ldr	r2, [pc, #336]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f5e:	f023 0304 	bic.w	r3, r3, #4
 8003f62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d015      	beq.n	8003f98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6c:	f7fe fb42 	bl	80025f4 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f72:	e00a      	b.n	8003f8a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f74:	f7fe fb3e 	bl	80025f4 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e0cb      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8a:	4b49      	ldr	r3, [pc, #292]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0ee      	beq.n	8003f74 <HAL_RCC_OscConfig+0x334>
 8003f96:	e014      	b.n	8003fc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f98:	f7fe fb2c 	bl	80025f4 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa0:	f7fe fb28 	bl	80025f4 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e0b5      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb6:	4b3e      	ldr	r3, [pc, #248]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1ee      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fc2:	7dfb      	ldrb	r3, [r7, #23]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d105      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc8:	4b39      	ldr	r3, [pc, #228]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fcc:	4a38      	ldr	r2, [pc, #224]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003fce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 80a1 	beq.w	8004120 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fde:	4b34      	ldr	r3, [pc, #208]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d05c      	beq.n	80040a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d141      	bne.n	8004076 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff2:	4b31      	ldr	r3, [pc, #196]	@ (80040b8 <HAL_RCC_OscConfig+0x478>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff8:	f7fe fafc 	bl	80025f4 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004000:	f7fe faf8 	bl	80025f4 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e087      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004012:	4b27      	ldr	r3, [pc, #156]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69da      	ldr	r2, [r3, #28]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	019b      	lsls	r3, r3, #6
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004034:	085b      	lsrs	r3, r3, #1
 8004036:	3b01      	subs	r3, #1
 8004038:	041b      	lsls	r3, r3, #16
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004040:	061b      	lsls	r3, r3, #24
 8004042:	491b      	ldr	r1, [pc, #108]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8004044:	4313      	orrs	r3, r2
 8004046:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004048:	4b1b      	ldr	r3, [pc, #108]	@ (80040b8 <HAL_RCC_OscConfig+0x478>)
 800404a:	2201      	movs	r2, #1
 800404c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404e:	f7fe fad1 	bl	80025f4 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004056:	f7fe facd 	bl	80025f4 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e05c      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004068:	4b11      	ldr	r3, [pc, #68]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_OscConfig+0x416>
 8004074:	e054      	b.n	8004120 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004076:	4b10      	ldr	r3, [pc, #64]	@ (80040b8 <HAL_RCC_OscConfig+0x478>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fe faba 	bl	80025f4 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004084:	f7fe fab6 	bl	80025f4 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e045      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004096:	4b06      	ldr	r3, [pc, #24]	@ (80040b0 <HAL_RCC_OscConfig+0x470>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x444>
 80040a2:	e03d      	b.n	8004120 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d107      	bne.n	80040bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e038      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
 80040b0:	40023800 	.word	0x40023800
 80040b4:	40007000 	.word	0x40007000
 80040b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040bc:	4b1b      	ldr	r3, [pc, #108]	@ (800412c <HAL_RCC_OscConfig+0x4ec>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d028      	beq.n	800411c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d121      	bne.n	800411c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d11a      	bne.n	800411c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040ec:	4013      	ands	r3, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d111      	bne.n	800411c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004102:	085b      	lsrs	r3, r3, #1
 8004104:	3b01      	subs	r3, #1
 8004106:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d107      	bne.n	800411c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004116:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800

08004130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0cc      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004144:	4b68      	ldr	r3, [pc, #416]	@ (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d90c      	bls.n	800416c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004152:	4b65      	ldr	r3, [pc, #404]	@ (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800415a:	4b63      	ldr	r3, [pc, #396]	@ (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d001      	beq.n	800416c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0b8      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d020      	beq.n	80041ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004184:	4b59      	ldr	r3, [pc, #356]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4a58      	ldr	r2, [pc, #352]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800418e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800419c:	4b53      	ldr	r3, [pc, #332]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	4a52      	ldr	r2, [pc, #328]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a8:	4b50      	ldr	r3, [pc, #320]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	494d      	ldr	r1, [pc, #308]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d044      	beq.n	8004250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d107      	bne.n	80041de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ce:	4b47      	ldr	r3, [pc, #284]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d119      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e07f      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d003      	beq.n	80041ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d107      	bne.n	80041fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ee:	4b3f      	ldr	r3, [pc, #252]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e06f      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fe:	4b3b      	ldr	r3, [pc, #236]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e067      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800420e:	4b37      	ldr	r3, [pc, #220]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f023 0203 	bic.w	r2, r3, #3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4934      	ldr	r1, [pc, #208]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 800421c:	4313      	orrs	r3, r2
 800421e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004220:	f7fe f9e8 	bl	80025f4 <HAL_GetTick>
 8004224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	e00a      	b.n	800423e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004228:	f7fe f9e4 	bl	80025f4 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e04f      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423e:	4b2b      	ldr	r3, [pc, #172]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 020c 	and.w	r2, r3, #12
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	429a      	cmp	r2, r3
 800424e:	d1eb      	bne.n	8004228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004250:	4b25      	ldr	r3, [pc, #148]	@ (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d20c      	bcs.n	8004278 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425e:	4b22      	ldr	r3, [pc, #136]	@ (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004266:	4b20      	ldr	r3, [pc, #128]	@ (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e032      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004284:	4b19      	ldr	r3, [pc, #100]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4916      	ldr	r1, [pc, #88]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042a2:	4b12      	ldr	r3, [pc, #72]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	490e      	ldr	r1, [pc, #56]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042b6:	f000 f821 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 80042ba:	4602      	mov	r2, r0
 80042bc:	4b0b      	ldr	r3, [pc, #44]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	490a      	ldr	r1, [pc, #40]	@ (80042f0 <HAL_RCC_ClockConfig+0x1c0>)
 80042c8:	5ccb      	ldrb	r3, [r1, r3]
 80042ca:	fa22 f303 	lsr.w	r3, r2, r3
 80042ce:	4a09      	ldr	r2, [pc, #36]	@ (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80042d2:	4b09      	ldr	r3, [pc, #36]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe f948 	bl	800256c <HAL_InitTick>

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40023c00 	.word	0x40023c00
 80042ec:	40023800 	.word	0x40023800
 80042f0:	08009a88 	.word	0x08009a88
 80042f4:	20000228 	.word	0x20000228
 80042f8:	2000022c 	.word	0x2000022c

080042fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004300:	b090      	sub	sp, #64	@ 0x40
 8004302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004314:	4b59      	ldr	r3, [pc, #356]	@ (800447c <HAL_RCC_GetSysClockFreq+0x180>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 030c 	and.w	r3, r3, #12
 800431c:	2b08      	cmp	r3, #8
 800431e:	d00d      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x40>
 8004320:	2b08      	cmp	r3, #8
 8004322:	f200 80a1 	bhi.w	8004468 <HAL_RCC_GetSysClockFreq+0x16c>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0x34>
 800432a:	2b04      	cmp	r3, #4
 800432c:	d003      	beq.n	8004336 <HAL_RCC_GetSysClockFreq+0x3a>
 800432e:	e09b      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004330:	4b53      	ldr	r3, [pc, #332]	@ (8004480 <HAL_RCC_GetSysClockFreq+0x184>)
 8004332:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004334:	e09b      	b.n	800446e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004336:	4b53      	ldr	r3, [pc, #332]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x188>)
 8004338:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800433a:	e098      	b.n	800446e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800433c:	4b4f      	ldr	r3, [pc, #316]	@ (800447c <HAL_RCC_GetSysClockFreq+0x180>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004344:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004346:	4b4d      	ldr	r3, [pc, #308]	@ (800447c <HAL_RCC_GetSysClockFreq+0x180>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d028      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004352:	4b4a      	ldr	r3, [pc, #296]	@ (800447c <HAL_RCC_GetSysClockFreq+0x180>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	099b      	lsrs	r3, r3, #6
 8004358:	2200      	movs	r2, #0
 800435a:	623b      	str	r3, [r7, #32]
 800435c:	627a      	str	r2, [r7, #36]	@ 0x24
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004364:	2100      	movs	r1, #0
 8004366:	4b47      	ldr	r3, [pc, #284]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x188>)
 8004368:	fb03 f201 	mul.w	r2, r3, r1
 800436c:	2300      	movs	r3, #0
 800436e:	fb00 f303 	mul.w	r3, r0, r3
 8004372:	4413      	add	r3, r2
 8004374:	4a43      	ldr	r2, [pc, #268]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x188>)
 8004376:	fba0 1202 	umull	r1, r2, r0, r2
 800437a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800437c:	460a      	mov	r2, r1
 800437e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004380:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004382:	4413      	add	r3, r2
 8004384:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004388:	2200      	movs	r2, #0
 800438a:	61bb      	str	r3, [r7, #24]
 800438c:	61fa      	str	r2, [r7, #28]
 800438e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004392:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004396:	f7fb ff17 	bl	80001c8 <__aeabi_uldivmod>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4613      	mov	r3, r2
 80043a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043a2:	e053      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a4:	4b35      	ldr	r3, [pc, #212]	@ (800447c <HAL_RCC_GetSysClockFreq+0x180>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	099b      	lsrs	r3, r3, #6
 80043aa:	2200      	movs	r2, #0
 80043ac:	613b      	str	r3, [r7, #16]
 80043ae:	617a      	str	r2, [r7, #20]
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80043b6:	f04f 0b00 	mov.w	fp, #0
 80043ba:	4652      	mov	r2, sl
 80043bc:	465b      	mov	r3, fp
 80043be:	f04f 0000 	mov.w	r0, #0
 80043c2:	f04f 0100 	mov.w	r1, #0
 80043c6:	0159      	lsls	r1, r3, #5
 80043c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043cc:	0150      	lsls	r0, r2, #5
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	ebb2 080a 	subs.w	r8, r2, sl
 80043d6:	eb63 090b 	sbc.w	r9, r3, fp
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043ee:	ebb2 0408 	subs.w	r4, r2, r8
 80043f2:	eb63 0509 	sbc.w	r5, r3, r9
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	00eb      	lsls	r3, r5, #3
 8004400:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004404:	00e2      	lsls	r2, r4, #3
 8004406:	4614      	mov	r4, r2
 8004408:	461d      	mov	r5, r3
 800440a:	eb14 030a 	adds.w	r3, r4, sl
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	eb45 030b 	adc.w	r3, r5, fp
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004422:	4629      	mov	r1, r5
 8004424:	028b      	lsls	r3, r1, #10
 8004426:	4621      	mov	r1, r4
 8004428:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800442c:	4621      	mov	r1, r4
 800442e:	028a      	lsls	r2, r1, #10
 8004430:	4610      	mov	r0, r2
 8004432:	4619      	mov	r1, r3
 8004434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004436:	2200      	movs	r2, #0
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	60fa      	str	r2, [r7, #12]
 800443c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004440:	f7fb fec2 	bl	80001c8 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4613      	mov	r3, r2
 800444a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800444c:	4b0b      	ldr	r3, [pc, #44]	@ (800447c <HAL_RCC_GetSysClockFreq+0x180>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	0c1b      	lsrs	r3, r3, #16
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	3301      	adds	r3, #1
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800445c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800445e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004460:	fbb2 f3f3 	udiv	r3, r2, r3
 8004464:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004466:	e002      	b.n	800446e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004468:	4b05      	ldr	r3, [pc, #20]	@ (8004480 <HAL_RCC_GetSysClockFreq+0x184>)
 800446a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800446c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800446e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004470:	4618      	mov	r0, r3
 8004472:	3740      	adds	r7, #64	@ 0x40
 8004474:	46bd      	mov	sp, r7
 8004476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800447a:	bf00      	nop
 800447c:	40023800 	.word	0x40023800
 8004480:	00f42400 	.word	0x00f42400
 8004484:	017d7840 	.word	0x017d7840

08004488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800448c:	4b03      	ldr	r3, [pc, #12]	@ (800449c <HAL_RCC_GetHCLKFreq+0x14>)
 800448e:	681b      	ldr	r3, [r3, #0]
}
 8004490:	4618      	mov	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000228 	.word	0x20000228

080044a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044a4:	f7ff fff0 	bl	8004488 <HAL_RCC_GetHCLKFreq>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b05      	ldr	r3, [pc, #20]	@ (80044c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	0a9b      	lsrs	r3, r3, #10
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	4903      	ldr	r1, [pc, #12]	@ (80044c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044b6:	5ccb      	ldrb	r3, [r1, r3]
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40023800 	.word	0x40023800
 80044c4:	08009a98 	.word	0x08009a98

080044c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044cc:	f7ff ffdc 	bl	8004488 <HAL_RCC_GetHCLKFreq>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b05      	ldr	r3, [pc, #20]	@ (80044e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	0b5b      	lsrs	r3, r3, #13
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	4903      	ldr	r1, [pc, #12]	@ (80044ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80044de:	5ccb      	ldrb	r3, [r1, r3]
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40023800 	.word	0x40023800
 80044ec:	08009a98 	.word	0x08009a98

080044f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e07b      	b.n	80045fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004506:	2b00      	cmp	r3, #0
 8004508:	d108      	bne.n	800451c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004512:	d009      	beq.n	8004528 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	61da      	str	r2, [r3, #28]
 800451a:	e005      	b.n	8004528 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fd fcd4 	bl	8001ef0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800455e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ac:	ea42 0103 	orr.w	r1, r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	0c1b      	lsrs	r3, r3, #16
 80045c6:	f003 0104 	and.w	r1, r3, #4
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ce:	f003 0210 	and.w	r2, r3, #16
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69da      	ldr	r2, [r3, #28]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b088      	sub	sp, #32
 8004606:	af02      	add	r7, sp, #8
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	4613      	mov	r3, r2
 8004610:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b01      	cmp	r3, #1
 800461c:	d001      	beq.n	8004622 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800461e:	2302      	movs	r3, #2
 8004620:	e104      	b.n	800482c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800462a:	d112      	bne.n	8004652 <HAL_SPI_Receive+0x50>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10e      	bne.n	8004652 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2204      	movs	r2, #4
 8004638:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800463c:	88fa      	ldrh	r2, [r7, #6]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	4613      	mov	r3, r2
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f8f3 	bl	8004834 <HAL_SPI_TransmitReceive>
 800464e:	4603      	mov	r3, r0
 8004650:	e0ec      	b.n	800482c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004652:	f7fd ffcf 	bl	80025f4 <HAL_GetTick>
 8004656:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <HAL_SPI_Receive+0x62>
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0e1      	b.n	800482c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_SPI_Receive+0x74>
 8004672:	2302      	movs	r3, #2
 8004674:	e0da      	b.n	800482c <HAL_SPI_Receive+0x22a>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2204      	movs	r2, #4
 8004682:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	88fa      	ldrh	r2, [r7, #6]
 8004696:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	88fa      	ldrh	r2, [r7, #6]
 800469c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046c4:	d10f      	bne.n	80046e6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80046e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f0:	2b40      	cmp	r3, #64	@ 0x40
 80046f2:	d007      	beq.n	8004704 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004702:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d170      	bne.n	80047ee <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800470c:	e035      	b.n	800477a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b01      	cmp	r3, #1
 800471a:	d115      	bne.n	8004748 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f103 020c 	add.w	r2, r3, #12
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004728:	7812      	ldrb	r2, [r2, #0]
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004746:	e018      	b.n	800477a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004748:	f7fd ff54 	bl	80025f4 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d803      	bhi.n	8004760 <HAL_SPI_Receive+0x15e>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475e:	d102      	bne.n	8004766 <HAL_SPI_Receive+0x164>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e058      	b.n	800482c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1c4      	bne.n	800470e <HAL_SPI_Receive+0x10c>
 8004784:	e038      	b.n	80047f8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b01      	cmp	r3, #1
 8004792:	d113      	bne.n	80047bc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479e:	b292      	uxth	r2, r2
 80047a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a6:	1c9a      	adds	r2, r3, #2
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047ba:	e018      	b.n	80047ee <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047bc:	f7fd ff1a 	bl	80025f4 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d803      	bhi.n	80047d4 <HAL_SPI_Receive+0x1d2>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d2:	d102      	bne.n	80047da <HAL_SPI_Receive+0x1d8>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e01e      	b.n	800482c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1c6      	bne.n	8004786 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	6839      	ldr	r1, [r7, #0]
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 fa4b 	bl	8004c98 <SPI_EndRxTransaction>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800482a:	2300      	movs	r3, #0
  }
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08a      	sub	sp, #40	@ 0x28
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004842:	2301      	movs	r3, #1
 8004844:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004846:	f7fd fed5 	bl	80025f4 <HAL_GetTick>
 800484a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004852:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800485a:	887b      	ldrh	r3, [r7, #2]
 800485c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800485e:	7ffb      	ldrb	r3, [r7, #31]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d00c      	beq.n	800487e <HAL_SPI_TransmitReceive+0x4a>
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800486a:	d106      	bne.n	800487a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d102      	bne.n	800487a <HAL_SPI_TransmitReceive+0x46>
 8004874:	7ffb      	ldrb	r3, [r7, #31]
 8004876:	2b04      	cmp	r3, #4
 8004878:	d001      	beq.n	800487e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800487a:	2302      	movs	r3, #2
 800487c:	e17f      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_SPI_TransmitReceive+0x5c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_SPI_TransmitReceive+0x5c>
 800488a:	887b      	ldrh	r3, [r7, #2]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e174      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_SPI_TransmitReceive+0x6e>
 800489e:	2302      	movs	r3, #2
 80048a0:	e16d      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x34a>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d003      	beq.n	80048be <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2205      	movs	r2, #5
 80048ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	887a      	ldrh	r2, [r7, #2]
 80048ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	887a      	ldrh	r2, [r7, #2]
 80048d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	887a      	ldrh	r2, [r7, #2]
 80048e0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	887a      	ldrh	r2, [r7, #2]
 80048e6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048fe:	2b40      	cmp	r3, #64	@ 0x40
 8004900:	d007      	beq.n	8004912 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004910:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800491a:	d17e      	bne.n	8004a1a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <HAL_SPI_TransmitReceive+0xf6>
 8004924:	8afb      	ldrh	r3, [r7, #22]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d16c      	bne.n	8004a04 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492e:	881a      	ldrh	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493a:	1c9a      	adds	r2, r3, #2
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800494e:	e059      	b.n	8004a04 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b02      	cmp	r3, #2
 800495c:	d11b      	bne.n	8004996 <HAL_SPI_TransmitReceive+0x162>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d016      	beq.n	8004996 <HAL_SPI_TransmitReceive+0x162>
 8004968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496a:	2b01      	cmp	r3, #1
 800496c:	d113      	bne.n	8004996 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004972:	881a      	ldrh	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497e:	1c9a      	adds	r2, r3, #2
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004988:	b29b      	uxth	r3, r3
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d119      	bne.n	80049d8 <HAL_SPI_TransmitReceive+0x1a4>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d014      	beq.n	80049d8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b8:	b292      	uxth	r2, r2
 80049ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c0:	1c9a      	adds	r2, r3, #2
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049d4:	2301      	movs	r3, #1
 80049d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049d8:	f7fd fe0c 	bl	80025f4 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d80d      	bhi.n	8004a04 <HAL_SPI_TransmitReceive+0x1d0>
 80049e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ee:	d009      	beq.n	8004a04 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e0bc      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1a0      	bne.n	8004950 <HAL_SPI_TransmitReceive+0x11c>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d19b      	bne.n	8004950 <HAL_SPI_TransmitReceive+0x11c>
 8004a18:	e082      	b.n	8004b20 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <HAL_SPI_TransmitReceive+0x1f4>
 8004a22:	8afb      	ldrh	r3, [r7, #22]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d171      	bne.n	8004b0c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	7812      	ldrb	r2, [r2, #0]
 8004a34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a4e:	e05d      	b.n	8004b0c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d11c      	bne.n	8004a98 <HAL_SPI_TransmitReceive+0x264>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d017      	beq.n	8004a98 <HAL_SPI_TransmitReceive+0x264>
 8004a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d114      	bne.n	8004a98 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	330c      	adds	r3, #12
 8004a78:	7812      	ldrb	r2, [r2, #0]
 8004a7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d119      	bne.n	8004ada <HAL_SPI_TransmitReceive+0x2a6>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d014      	beq.n	8004ada <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ada:	f7fd fd8b 	bl	80025f4 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d803      	bhi.n	8004af2 <HAL_SPI_TransmitReceive+0x2be>
 8004aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d102      	bne.n	8004af8 <HAL_SPI_TransmitReceive+0x2c4>
 8004af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d109      	bne.n	8004b0c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e038      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d19c      	bne.n	8004a50 <HAL_SPI_TransmitReceive+0x21c>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d197      	bne.n	8004a50 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b20:	6a3a      	ldr	r2, [r7, #32]
 8004b22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f91d 	bl	8004d64 <SPI_EndRxTxTransaction>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d008      	beq.n	8004b42 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e01d      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e000      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
  }
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3728      	adds	r7, #40	@ 0x28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b98:	f7fd fd2c 	bl	80025f4 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ba8:	f7fd fd24 	bl	80025f4 <HAL_GetTick>
 8004bac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bae:	4b39      	ldr	r3, [pc, #228]	@ (8004c94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	015b      	lsls	r3, r3, #5
 8004bb4:	0d1b      	lsrs	r3, r3, #20
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	fb02 f303 	mul.w	r3, r2, r3
 8004bbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bbe:	e054      	b.n	8004c6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc6:	d050      	beq.n	8004c6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bc8:	f7fd fd14 	bl	80025f4 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	69fa      	ldr	r2, [r7, #28]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d902      	bls.n	8004bde <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d13d      	bne.n	8004c5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004bec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bf6:	d111      	bne.n	8004c1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c00:	d004      	beq.n	8004c0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c0a:	d107      	bne.n	8004c1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c24:	d10f      	bne.n	8004c46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e017      	b.n	8004c8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4013      	ands	r3, r2
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	bf0c      	ite	eq
 8004c7a:	2301      	moveq	r3, #1
 8004c7c:	2300      	movne	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	461a      	mov	r2, r3
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d19b      	bne.n	8004bc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3720      	adds	r7, #32
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000228 	.word	0x20000228

08004c98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cac:	d111      	bne.n	8004cd2 <SPI_EndRxTransaction+0x3a>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cb6:	d004      	beq.n	8004cc2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc0:	d107      	bne.n	8004cd2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cd0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cda:	d12a      	bne.n	8004d32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ce4:	d012      	beq.n	8004d0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2200      	movs	r2, #0
 8004cee:	2180      	movs	r1, #128	@ 0x80
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f7ff ff49 	bl	8004b88 <SPI_WaitFlagStateUntilTimeout>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d02d      	beq.n	8004d58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d00:	f043 0220 	orr.w	r2, r3, #32
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e026      	b.n	8004d5a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2200      	movs	r2, #0
 8004d14:	2101      	movs	r1, #1
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f7ff ff36 	bl	8004b88 <SPI_WaitFlagStateUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d01a      	beq.n	8004d58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d26:	f043 0220 	orr.w	r2, r3, #32
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e013      	b.n	8004d5a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f7ff ff23 	bl	8004b88 <SPI_WaitFlagStateUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d4c:	f043 0220 	orr.w	r2, r3, #32
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e000      	b.n	8004d5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2201      	movs	r2, #1
 8004d78:	2102      	movs	r1, #2
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f7ff ff04 	bl	8004b88 <SPI_WaitFlagStateUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d007      	beq.n	8004d96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d8a:	f043 0220 	orr.w	r2, r3, #32
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e032      	b.n	8004dfc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d96:	4b1b      	ldr	r3, [pc, #108]	@ (8004e04 <SPI_EndRxTxTransaction+0xa0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a1b      	ldr	r2, [pc, #108]	@ (8004e08 <SPI_EndRxTxTransaction+0xa4>)
 8004d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004da0:	0d5b      	lsrs	r3, r3, #21
 8004da2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004da6:	fb02 f303 	mul.w	r3, r2, r3
 8004daa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004db4:	d112      	bne.n	8004ddc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2180      	movs	r1, #128	@ 0x80
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f7ff fee1 	bl	8004b88 <SPI_WaitFlagStateUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d016      	beq.n	8004dfa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd0:	f043 0220 	orr.w	r2, r3, #32
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e00f      	b.n	8004dfc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004df2:	2b80      	cmp	r3, #128	@ 0x80
 8004df4:	d0f2      	beq.n	8004ddc <SPI_EndRxTxTransaction+0x78>
 8004df6:	e000      	b.n	8004dfa <SPI_EndRxTxTransaction+0x96>
        break;
 8004df8:	bf00      	nop
  }

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20000228 	.word	0x20000228
 8004e08:	165e9f81 	.word	0x165e9f81

08004e0c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e038      	b.n	8004e94 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f7fc f848 	bl	8000ecc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	3308      	adds	r3, #8
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f001 fd2a 	bl	80068a0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	461a      	mov	r2, r3
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	f001 fd8c 	bl	8006974 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6858      	ldr	r0, [r3, #4]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	f001 fdb9 	bl	80069e0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	6892      	ldr	r2, [r2, #8]
 8004e76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	6892      	ldr	r2, [r2, #8]
 8004e82:	f041 0101 	orr.w	r1, r1, #1
 8004e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e041      	b.n	8004f32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fd f988 	bl	80021d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4610      	mov	r0, r2
 8004edc:	f000 fa7e 	bl	80053dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d001      	beq.n	8004f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e04e      	b.n	8004ff2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a23      	ldr	r2, [pc, #140]	@ (8005000 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d022      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f7e:	d01d      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a1f      	ldr	r2, [pc, #124]	@ (8005004 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d018      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8005008 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d013      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a1c      	ldr	r2, [pc, #112]	@ (800500c <HAL_TIM_Base_Start_IT+0xd0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00e      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8005010 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d009      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a19      	ldr	r2, [pc, #100]	@ (8005014 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a18      	ldr	r2, [pc, #96]	@ (8005018 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d111      	bne.n	8004fe0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b06      	cmp	r3, #6
 8004fcc:	d010      	beq.n	8004ff0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0201 	orr.w	r2, r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fde:	e007      	b.n	8004ff0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40010000 	.word	0x40010000
 8005004:	40000400 	.word	0x40000400
 8005008:	40000800 	.word	0x40000800
 800500c:	40000c00 	.word	0x40000c00
 8005010:	40010400 	.word	0x40010400
 8005014:	40014000 	.word	0x40014000
 8005018:	40001800 	.word	0x40001800

0800501c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d020      	beq.n	8005080 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01b      	beq.n	8005080 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0202 	mvn.w	r2, #2
 8005050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f999 	bl	800539e <HAL_TIM_IC_CaptureCallback>
 800506c:	e005      	b.n	800507a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f98b 	bl	800538a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f99c 	bl	80053b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d020      	beq.n	80050cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01b      	beq.n	80050cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0204 	mvn.w	r2, #4
 800509c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2202      	movs	r2, #2
 80050a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f973 	bl	800539e <HAL_TIM_IC_CaptureCallback>
 80050b8:	e005      	b.n	80050c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f965 	bl	800538a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f976 	bl	80053b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d020      	beq.n	8005118 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01b      	beq.n	8005118 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0208 	mvn.w	r2, #8
 80050e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2204      	movs	r2, #4
 80050ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f94d 	bl	800539e <HAL_TIM_IC_CaptureCallback>
 8005104:	e005      	b.n	8005112 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f93f 	bl	800538a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f950 	bl	80053b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 0310 	and.w	r3, r3, #16
 800511e:	2b00      	cmp	r3, #0
 8005120:	d020      	beq.n	8005164 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01b      	beq.n	8005164 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0210 	mvn.w	r2, #16
 8005134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2208      	movs	r2, #8
 800513a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f927 	bl	800539e <HAL_TIM_IC_CaptureCallback>
 8005150:	e005      	b.n	800515e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f919 	bl	800538a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f92a 	bl	80053b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00c      	beq.n	8005188 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0201 	mvn.w	r2, #1
 8005180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fc fe32 	bl	8001dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00c      	beq.n	80051ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80051a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fae4 	bl	8005774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00c      	beq.n	80051d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d007      	beq.n	80051d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f8fb 	bl	80053c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00c      	beq.n	80051f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d007      	beq.n	80051f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0220 	mvn.w	r2, #32
 80051ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fab6 	bl	8005760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_TIM_ConfigClockSource+0x1c>
 8005214:	2302      	movs	r3, #2
 8005216:	e0b4      	b.n	8005382 <HAL_TIM_ConfigClockSource+0x186>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800523e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005250:	d03e      	beq.n	80052d0 <HAL_TIM_ConfigClockSource+0xd4>
 8005252:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005256:	f200 8087 	bhi.w	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 800525a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800525e:	f000 8086 	beq.w	800536e <HAL_TIM_ConfigClockSource+0x172>
 8005262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005266:	d87f      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005268:	2b70      	cmp	r3, #112	@ 0x70
 800526a:	d01a      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0xa6>
 800526c:	2b70      	cmp	r3, #112	@ 0x70
 800526e:	d87b      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005270:	2b60      	cmp	r3, #96	@ 0x60
 8005272:	d050      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0x11a>
 8005274:	2b60      	cmp	r3, #96	@ 0x60
 8005276:	d877      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005278:	2b50      	cmp	r3, #80	@ 0x50
 800527a:	d03c      	beq.n	80052f6 <HAL_TIM_ConfigClockSource+0xfa>
 800527c:	2b50      	cmp	r3, #80	@ 0x50
 800527e:	d873      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005280:	2b40      	cmp	r3, #64	@ 0x40
 8005282:	d058      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x13a>
 8005284:	2b40      	cmp	r3, #64	@ 0x40
 8005286:	d86f      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005288:	2b30      	cmp	r3, #48	@ 0x30
 800528a:	d064      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x15a>
 800528c:	2b30      	cmp	r3, #48	@ 0x30
 800528e:	d86b      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005290:	2b20      	cmp	r3, #32
 8005292:	d060      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x15a>
 8005294:	2b20      	cmp	r3, #32
 8005296:	d867      	bhi.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
 8005298:	2b00      	cmp	r3, #0
 800529a:	d05c      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x15a>
 800529c:	2b10      	cmp	r3, #16
 800529e:	d05a      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x15a>
 80052a0:	e062      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052b2:	f000 f9b9 	bl	8005628 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80052c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	609a      	str	r2, [r3, #8]
      break;
 80052ce:	e04f      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052e0:	f000 f9a2 	bl	8005628 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052f2:	609a      	str	r2, [r3, #8]
      break;
 80052f4:	e03c      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005302:	461a      	mov	r2, r3
 8005304:	f000 f916 	bl	8005534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2150      	movs	r1, #80	@ 0x50
 800530e:	4618      	mov	r0, r3
 8005310:	f000 f96f 	bl	80055f2 <TIM_ITRx_SetConfig>
      break;
 8005314:	e02c      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005322:	461a      	mov	r2, r3
 8005324:	f000 f935 	bl	8005592 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2160      	movs	r1, #96	@ 0x60
 800532e:	4618      	mov	r0, r3
 8005330:	f000 f95f 	bl	80055f2 <TIM_ITRx_SetConfig>
      break;
 8005334:	e01c      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005342:	461a      	mov	r2, r3
 8005344:	f000 f8f6 	bl	8005534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2140      	movs	r1, #64	@ 0x40
 800534e:	4618      	mov	r0, r3
 8005350:	f000 f94f 	bl	80055f2 <TIM_ITRx_SetConfig>
      break;
 8005354:	e00c      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4619      	mov	r1, r3
 8005360:	4610      	mov	r0, r2
 8005362:	f000 f946 	bl	80055f2 <TIM_ITRx_SetConfig>
      break;
 8005366:	e003      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	73fb      	strb	r3, [r7, #15]
      break;
 800536c:	e000      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800536e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
	...

080053dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a46      	ldr	r2, [pc, #280]	@ (8005508 <TIM_Base_SetConfig+0x12c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d013      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fa:	d00f      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a43      	ldr	r2, [pc, #268]	@ (800550c <TIM_Base_SetConfig+0x130>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00b      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a42      	ldr	r2, [pc, #264]	@ (8005510 <TIM_Base_SetConfig+0x134>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d007      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a41      	ldr	r2, [pc, #260]	@ (8005514 <TIM_Base_SetConfig+0x138>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d003      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a40      	ldr	r2, [pc, #256]	@ (8005518 <TIM_Base_SetConfig+0x13c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d108      	bne.n	800542e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a35      	ldr	r2, [pc, #212]	@ (8005508 <TIM_Base_SetConfig+0x12c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d02b      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800543c:	d027      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a32      	ldr	r2, [pc, #200]	@ (800550c <TIM_Base_SetConfig+0x130>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d023      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a31      	ldr	r2, [pc, #196]	@ (8005510 <TIM_Base_SetConfig+0x134>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d01f      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a30      	ldr	r2, [pc, #192]	@ (8005514 <TIM_Base_SetConfig+0x138>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d01b      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a2f      	ldr	r2, [pc, #188]	@ (8005518 <TIM_Base_SetConfig+0x13c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d017      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a2e      	ldr	r2, [pc, #184]	@ (800551c <TIM_Base_SetConfig+0x140>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d013      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a2d      	ldr	r2, [pc, #180]	@ (8005520 <TIM_Base_SetConfig+0x144>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00f      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a2c      	ldr	r2, [pc, #176]	@ (8005524 <TIM_Base_SetConfig+0x148>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00b      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a2b      	ldr	r2, [pc, #172]	@ (8005528 <TIM_Base_SetConfig+0x14c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d007      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a2a      	ldr	r2, [pc, #168]	@ (800552c <TIM_Base_SetConfig+0x150>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d003      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a29      	ldr	r2, [pc, #164]	@ (8005530 <TIM_Base_SetConfig+0x154>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d108      	bne.n	80054a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a10      	ldr	r2, [pc, #64]	@ (8005508 <TIM_Base_SetConfig+0x12c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d003      	beq.n	80054d4 <TIM_Base_SetConfig+0xf8>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a12      	ldr	r2, [pc, #72]	@ (8005518 <TIM_Base_SetConfig+0x13c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d103      	bne.n	80054dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d105      	bne.n	80054fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f023 0201 	bic.w	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	611a      	str	r2, [r3, #16]
  }
}
 80054fa:	bf00      	nop
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40010000 	.word	0x40010000
 800550c:	40000400 	.word	0x40000400
 8005510:	40000800 	.word	0x40000800
 8005514:	40000c00 	.word	0x40000c00
 8005518:	40010400 	.word	0x40010400
 800551c:	40014000 	.word	0x40014000
 8005520:	40014400 	.word	0x40014400
 8005524:	40014800 	.word	0x40014800
 8005528:	40001800 	.word	0x40001800
 800552c:	40001c00 	.word	0x40001c00
 8005530:	40002000 	.word	0x40002000

08005534 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	f023 0201 	bic.w	r2, r3, #1
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800555e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f023 030a 	bic.w	r3, r3, #10
 8005570:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4313      	orrs	r3, r2
 8005578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	621a      	str	r2, [r3, #32]
}
 8005586:	bf00      	nop
 8005588:	371c      	adds	r7, #28
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005592:	b480      	push	{r7}
 8005594:	b087      	sub	sp, #28
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	f023 0210 	bic.w	r2, r3, #16
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	031b      	lsls	r3, r3, #12
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	011b      	lsls	r3, r3, #4
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	621a      	str	r2, [r3, #32]
}
 80055e6:	bf00      	nop
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b085      	sub	sp, #20
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005608:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	f043 0307 	orr.w	r3, r3, #7
 8005614:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	609a      	str	r2, [r3, #8]
}
 800561c:	bf00      	nop
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	021a      	lsls	r2, r3, #8
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	431a      	orrs	r2, r3
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4313      	orrs	r3, r2
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	609a      	str	r2, [r3, #8]
}
 800565c:	bf00      	nop
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800567c:	2302      	movs	r3, #2
 800567e:	e05a      	b.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a21      	ldr	r2, [pc, #132]	@ (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d022      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056cc:	d01d      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1d      	ldr	r2, [pc, #116]	@ (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d018      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a1b      	ldr	r2, [pc, #108]	@ (800574c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d013      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a1a      	ldr	r2, [pc, #104]	@ (8005750 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00e      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a18      	ldr	r2, [pc, #96]	@ (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d009      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a17      	ldr	r2, [pc, #92]	@ (8005758 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d004      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a15      	ldr	r2, [pc, #84]	@ (800575c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d10c      	bne.n	8005724 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005710:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	4313      	orrs	r3, r2
 800571a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40010000 	.word	0x40010000
 8005748:	40000400 	.word	0x40000400
 800574c:	40000800 	.word	0x40000800
 8005750:	40000c00 	.word	0x40000c00
 8005754:	40010400 	.word	0x40010400
 8005758:	40014000 	.word	0x40014000
 800575c:	40001800 	.word	0x40001800

08005760 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e042      	b.n	8005820 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d106      	bne.n	80057b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fc fdd4 	bl	800235c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2224      	movs	r2, #36	@ 0x24
 80057b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fdf3 	bl	80063b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695a      	ldr	r2, [r3, #20]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b08a      	sub	sp, #40	@ 0x28
 800582c:	af02      	add	r7, sp, #8
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	603b      	str	r3, [r7, #0]
 8005834:	4613      	mov	r3, r2
 8005836:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b20      	cmp	r3, #32
 8005846:	d175      	bne.n	8005934 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <HAL_UART_Transmit+0x2c>
 800584e:	88fb      	ldrh	r3, [r7, #6]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e06e      	b.n	8005936 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2221      	movs	r2, #33	@ 0x21
 8005862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005866:	f7fc fec5 	bl	80025f4 <HAL_GetTick>
 800586a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	88fa      	ldrh	r2, [r7, #6]
 8005870:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	88fa      	ldrh	r2, [r7, #6]
 8005876:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005880:	d108      	bne.n	8005894 <HAL_UART_Transmit+0x6c>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d104      	bne.n	8005894 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800588a:	2300      	movs	r3, #0
 800588c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	e003      	b.n	800589c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005898:	2300      	movs	r3, #0
 800589a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800589c:	e02e      	b.n	80058fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2200      	movs	r2, #0
 80058a6:	2180      	movs	r1, #128	@ 0x80
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 fb55 	bl	8005f58 <UART_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e03a      	b.n	8005936 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10b      	bne.n	80058de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	3302      	adds	r3, #2
 80058da:	61bb      	str	r3, [r7, #24]
 80058dc:	e007      	b.n	80058ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	781a      	ldrb	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	3301      	adds	r3, #1
 80058ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1cb      	bne.n	800589e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2200      	movs	r2, #0
 800590e:	2140      	movs	r1, #64	@ 0x40
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 fb21 	bl	8005f58 <UART_WaitOnFlagUntilTimeout>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e006      	b.n	8005936 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	e000      	b.n	8005936 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005934:	2302      	movs	r3, #2
  }
}
 8005936:	4618      	mov	r0, r3
 8005938:	3720      	adds	r7, #32
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b08c      	sub	sp, #48	@ 0x30
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	4613      	mov	r3, r2
 800594a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b20      	cmp	r3, #32
 8005956:	d14a      	bne.n	80059ee <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800595e:	88fb      	ldrh	r3, [r7, #6]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e043      	b.n	80059f0 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005974:	88fb      	ldrh	r3, [r7, #6]
 8005976:	461a      	mov	r2, r3
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 fb45 	bl	800600a <UART_Start_Receive_IT>
 8005980:	4603      	mov	r3, r0
 8005982:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005986:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800598a:	2b00      	cmp	r3, #0
 800598c:	d12c      	bne.n	80059e8 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005992:	2b01      	cmp	r3, #1
 8005994:	d125      	bne.n	80059e2 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005996:	2300      	movs	r3, #0
 8005998:	613b      	str	r3, [r7, #16]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	613b      	str	r3, [r7, #16]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	613b      	str	r3, [r7, #16]
 80059aa:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	330c      	adds	r3, #12
 80059b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	e853 3f00 	ldrex	r3, [r3]
 80059ba:	617b      	str	r3, [r7, #20]
   return(result);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f043 0310 	orr.w	r3, r3, #16
 80059c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	330c      	adds	r3, #12
 80059ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80059ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d0:	6a39      	ldr	r1, [r7, #32]
 80059d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059d4:	e841 2300 	strex	r3, r2, [r1]
 80059d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e5      	bne.n	80059ac <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80059e0:	e002      	b.n	80059e8 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80059e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80059ec:	e000      	b.n	80059f0 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80059ee:	2302      	movs	r3, #2
  }
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3730      	adds	r7, #48	@ 0x30
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b0ba      	sub	sp, #232	@ 0xe8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10f      	bne.n	8005a5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <HAL_UART_IRQHandler+0x66>
 8005a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fbf0 	bl	800623c <UART_Receive_IT>
      return;
 8005a5c:	e25b      	b.n	8005f16 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 80de 	beq.w	8005c24 <HAL_UART_IRQHandler+0x22c>
 8005a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d106      	bne.n	8005a82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 80d1 	beq.w	8005c24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00b      	beq.n	8005aa6 <HAL_UART_IRQHandler+0xae>
 8005a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d005      	beq.n	8005aa6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a9e:	f043 0201 	orr.w	r2, r3, #1
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aaa:	f003 0304 	and.w	r3, r3, #4
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00b      	beq.n	8005aca <HAL_UART_IRQHandler+0xd2>
 8005ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac2:	f043 0202 	orr.w	r2, r3, #2
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00b      	beq.n	8005aee <HAL_UART_IRQHandler+0xf6>
 8005ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d005      	beq.n	8005aee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae6:	f043 0204 	orr.w	r2, r3, #4
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d011      	beq.n	8005b1e <HAL_UART_IRQHandler+0x126>
 8005afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005afe:	f003 0320 	and.w	r3, r3, #32
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d105      	bne.n	8005b12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d005      	beq.n	8005b1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b16:	f043 0208 	orr.w	r2, r3, #8
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 81f2 	beq.w	8005f0c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b2c:	f003 0320 	and.w	r3, r3, #32
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d008      	beq.n	8005b46 <HAL_UART_IRQHandler+0x14e>
 8005b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b38:	f003 0320 	and.w	r3, r3, #32
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fb7b 	bl	800623c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b50:	2b40      	cmp	r3, #64	@ 0x40
 8005b52:	bf0c      	ite	eq
 8005b54:	2301      	moveq	r3, #1
 8005b56:	2300      	movne	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b62:	f003 0308 	and.w	r3, r3, #8
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d103      	bne.n	8005b72 <HAL_UART_IRQHandler+0x17a>
 8005b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d04f      	beq.n	8005c12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fa83 	bl	800607e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b82:	2b40      	cmp	r3, #64	@ 0x40
 8005b84:	d141      	bne.n	8005c0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3314      	adds	r3, #20
 8005b8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3314      	adds	r3, #20
 8005bae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005bb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005bbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1d9      	bne.n	8005b86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d013      	beq.n	8005c02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bde:	4a7e      	ldr	r2, [pc, #504]	@ (8005dd8 <HAL_UART_IRQHandler+0x3e0>)
 8005be0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fd fbce 	bl	8003388 <HAL_DMA_Abort_IT>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d016      	beq.n	8005c20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c00:	e00e      	b.n	8005c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f99e 	bl	8005f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c08:	e00a      	b.n	8005c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f99a 	bl	8005f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c10:	e006      	b.n	8005c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f996 	bl	8005f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005c1e:	e175      	b.n	8005f0c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c20:	bf00      	nop
    return;
 8005c22:	e173      	b.n	8005f0c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	f040 814f 	bne.w	8005ecc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c32:	f003 0310 	and.w	r3, r3, #16
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 8148 	beq.w	8005ecc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c40:	f003 0310 	and.w	r3, r3, #16
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 8141 	beq.w	8005ecc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60bb      	str	r3, [r7, #8]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	60bb      	str	r3, [r7, #8]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	60bb      	str	r3, [r7, #8]
 8005c5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6a:	2b40      	cmp	r3, #64	@ 0x40
 8005c6c:	f040 80b6 	bne.w	8005ddc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 8145 	beq.w	8005f10 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	f080 813e 	bcs.w	8005f10 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ca6:	f000 8088 	beq.w	8005dba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	330c      	adds	r3, #12
 8005cb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005cc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	330c      	adds	r3, #12
 8005cd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005cd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ce2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ce6:	e841 2300 	strex	r3, r2, [r1]
 8005cea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1d9      	bne.n	8005caa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3314      	adds	r3, #20
 8005cfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3314      	adds	r3, #20
 8005d16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d26:	e841 2300 	strex	r3, r2, [r1]
 8005d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1e1      	bne.n	8005cf6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3314      	adds	r3, #20
 8005d38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d3c:	e853 3f00 	ldrex	r3, [r3]
 8005d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3314      	adds	r3, #20
 8005d52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005d64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1e3      	bne.n	8005d32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	330c      	adds	r3, #12
 8005d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d82:	e853 3f00 	ldrex	r3, [r3]
 8005d86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d8a:	f023 0310 	bic.w	r3, r3, #16
 8005d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	330c      	adds	r3, #12
 8005d98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005d9c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005d9e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005da2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005da4:	e841 2300 	strex	r3, r2, [r1]
 8005da8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1e3      	bne.n	8005d78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fd fa77 	bl	80032a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	4619      	mov	r1, r3
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7fb ff9f 	bl	8001d14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005dd6:	e09b      	b.n	8005f10 <HAL_UART_IRQHandler+0x518>
 8005dd8:	08006145 	.word	0x08006145
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 808e 	beq.w	8005f14 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005df8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 8089 	beq.w	8005f14 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	330c      	adds	r3, #12
 8005e08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e0c:	e853 3f00 	ldrex	r3, [r3]
 8005e10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	330c      	adds	r3, #12
 8005e22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005e26:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1e3      	bne.n	8005e02 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3314      	adds	r3, #20
 8005e40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e44:	e853 3f00 	ldrex	r3, [r3]
 8005e48:	623b      	str	r3, [r7, #32]
   return(result);
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	f023 0301 	bic.w	r3, r3, #1
 8005e50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3314      	adds	r3, #20
 8005e5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e66:	e841 2300 	strex	r3, r2, [r1]
 8005e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1e3      	bne.n	8005e3a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	330c      	adds	r3, #12
 8005e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	e853 3f00 	ldrex	r3, [r3]
 8005e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0310 	bic.w	r3, r3, #16
 8005e96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	330c      	adds	r3, #12
 8005ea0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005ea4:	61fa      	str	r2, [r7, #28]
 8005ea6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea8:	69b9      	ldr	r1, [r7, #24]
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	e841 2300 	strex	r3, r2, [r1]
 8005eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1e3      	bne.n	8005e80 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ebe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7fb ff25 	bl	8001d14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005eca:	e023      	b.n	8005f14 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d009      	beq.n	8005eec <HAL_UART_IRQHandler+0x4f4>
 8005ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f941 	bl	800616c <UART_Transmit_IT>
    return;
 8005eea:	e014      	b.n	8005f16 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00e      	beq.n	8005f16 <HAL_UART_IRQHandler+0x51e>
 8005ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d008      	beq.n	8005f16 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f981 	bl	800620c <UART_EndTransmit_IT>
    return;
 8005f0a:	e004      	b.n	8005f16 <HAL_UART_IRQHandler+0x51e>
    return;
 8005f0c:	bf00      	nop
 8005f0e:	e002      	b.n	8005f16 <HAL_UART_IRQHandler+0x51e>
      return;
 8005f10:	bf00      	nop
 8005f12:	e000      	b.n	8005f16 <HAL_UART_IRQHandler+0x51e>
      return;
 8005f14:	bf00      	nop
  }
}
 8005f16:	37e8      	adds	r7, #232	@ 0xe8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	4613      	mov	r3, r2
 8005f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f68:	e03b      	b.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d037      	beq.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f72:	f7fc fb3f 	bl	80025f4 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	6a3a      	ldr	r2, [r7, #32]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d302      	bcc.n	8005f88 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e03a      	b.n	8006002 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d023      	beq.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b80      	cmp	r3, #128	@ 0x80
 8005f9e:	d020      	beq.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b40      	cmp	r3, #64	@ 0x40
 8005fa4:	d01d      	beq.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d116      	bne.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 f857 	bl	800607e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2208      	movs	r2, #8
 8005fd4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e00f      	b.n	8006002 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4013      	ands	r3, r2
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	bf0c      	ite	eq
 8005ff2:	2301      	moveq	r3, #1
 8005ff4:	2300      	movne	r3, #0
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	79fb      	ldrb	r3, [r7, #7]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d0b4      	beq.n	8005f6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800600a:	b480      	push	{r7}
 800600c:	b085      	sub	sp, #20
 800600e:	af00      	add	r7, sp, #0
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	4613      	mov	r3, r2
 8006016:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	88fa      	ldrh	r2, [r7, #6]
 8006022:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	88fa      	ldrh	r2, [r7, #6]
 8006028:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2222      	movs	r2, #34	@ 0x22
 8006034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d007      	beq.n	8006050 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800604e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695a      	ldr	r2, [r3, #20]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0201 	orr.w	r2, r2, #1
 800605e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0220 	orr.w	r2, r2, #32
 800606e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800607e:	b480      	push	{r7}
 8006080:	b095      	sub	sp, #84	@ 0x54
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	330c      	adds	r3, #12
 800608c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006090:	e853 3f00 	ldrex	r3, [r3]
 8006094:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006098:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800609c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	330c      	adds	r3, #12
 80060a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80060a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e5      	bne.n	8006086 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3314      	adds	r3, #20
 80060c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	e853 3f00 	ldrex	r3, [r3]
 80060c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	f023 0301 	bic.w	r3, r3, #1
 80060d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3314      	adds	r3, #20
 80060d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e5      	bne.n	80060ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d119      	bne.n	800612a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	330c      	adds	r3, #12
 80060fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	60bb      	str	r3, [r7, #8]
   return(result);
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f023 0310 	bic.w	r3, r3, #16
 800610c:	647b      	str	r3, [r7, #68]	@ 0x44
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	330c      	adds	r3, #12
 8006114:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006116:	61ba      	str	r2, [r7, #24]
 8006118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611a:	6979      	ldr	r1, [r7, #20]
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	613b      	str	r3, [r7, #16]
   return(result);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1e5      	bne.n	80060f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006138:	bf00      	nop
 800613a:	3754      	adds	r7, #84	@ 0x54
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006150:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f7ff fef0 	bl	8005f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006164:	bf00      	nop
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b21      	cmp	r3, #33	@ 0x21
 800617e:	d13e      	bne.n	80061fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006188:	d114      	bne.n	80061b4 <UART_Transmit_IT+0x48>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d110      	bne.n	80061b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	461a      	mov	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	1c9a      	adds	r2, r3, #2
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	621a      	str	r2, [r3, #32]
 80061b2:	e008      	b.n	80061c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	1c59      	adds	r1, r3, #1
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6211      	str	r1, [r2, #32]
 80061be:	781a      	ldrb	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	4619      	mov	r1, r3
 80061d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10f      	bne.n	80061fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68da      	ldr	r2, [r3, #12]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	e000      	b.n	8006200 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061fe:	2302      	movs	r3, #2
  }
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006222:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2220      	movs	r2, #32
 8006228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff fe75 	bl	8005f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b08c      	sub	sp, #48	@ 0x30
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b22      	cmp	r3, #34	@ 0x22
 800624e:	f040 80ae 	bne.w	80063ae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800625a:	d117      	bne.n	800628c <UART_Receive_IT+0x50>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d113      	bne.n	800628c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006264:	2300      	movs	r3, #0
 8006266:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	b29b      	uxth	r3, r3
 8006276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627a:	b29a      	uxth	r2, r3
 800627c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006284:	1c9a      	adds	r2, r3, #2
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	629a      	str	r2, [r3, #40]	@ 0x28
 800628a:	e026      	b.n	80062da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006290:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006292:	2300      	movs	r3, #0
 8006294:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800629e:	d007      	beq.n	80062b0 <UART_Receive_IT+0x74>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <UART_Receive_IT+0x82>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d106      	bne.n	80062be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ba:	701a      	strb	r2, [r3, #0]
 80062bc:	e008      	b.n	80062d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062de:	b29b      	uxth	r3, r3
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	4619      	mov	r1, r3
 80062e8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d15d      	bne.n	80063aa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0220 	bic.w	r2, r2, #32
 80062fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68da      	ldr	r2, [r3, #12]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800630c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695a      	ldr	r2, [r3, #20]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0201 	bic.w	r2, r2, #1
 800631c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006330:	2b01      	cmp	r3, #1
 8006332:	d135      	bne.n	80063a0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	330c      	adds	r3, #12
 8006340:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	e853 3f00 	ldrex	r3, [r3]
 8006348:	613b      	str	r3, [r7, #16]
   return(result);
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f023 0310 	bic.w	r3, r3, #16
 8006350:	627b      	str	r3, [r7, #36]	@ 0x24
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	330c      	adds	r3, #12
 8006358:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800635a:	623a      	str	r2, [r7, #32]
 800635c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635e:	69f9      	ldr	r1, [r7, #28]
 8006360:	6a3a      	ldr	r2, [r7, #32]
 8006362:	e841 2300 	strex	r3, r2, [r1]
 8006366:	61bb      	str	r3, [r7, #24]
   return(result);
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e5      	bne.n	800633a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	2b10      	cmp	r3, #16
 800637a:	d10a      	bne.n	8006392 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800637c:	2300      	movs	r3, #0
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006396:	4619      	mov	r1, r3
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7fb fcbb 	bl	8001d14 <HAL_UARTEx_RxEventCallback>
 800639e:	e002      	b.n	80063a6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff fdc5 	bl	8005f30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	e002      	b.n	80063b0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e000      	b.n	80063b0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80063ae:	2302      	movs	r3, #2
  }
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3730      	adds	r7, #48	@ 0x30
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063bc:	b0c0      	sub	sp, #256	@ 0x100
 80063be:	af00      	add	r7, sp, #0
 80063c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80063d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d4:	68d9      	ldr	r1, [r3, #12]
 80063d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	ea40 0301 	orr.w	r3, r0, r1
 80063e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	431a      	orrs	r2, r3
 80063f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	431a      	orrs	r2, r3
 80063f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	4313      	orrs	r3, r2
 8006400:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006410:	f021 010c 	bic.w	r1, r1, #12
 8006414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800641e:	430b      	orrs	r3, r1
 8006420:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800642e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006432:	6999      	ldr	r1, [r3, #24]
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	ea40 0301 	orr.w	r3, r0, r1
 800643e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	4b8f      	ldr	r3, [pc, #572]	@ (8006684 <UART_SetConfig+0x2cc>)
 8006448:	429a      	cmp	r2, r3
 800644a:	d005      	beq.n	8006458 <UART_SetConfig+0xa0>
 800644c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	4b8d      	ldr	r3, [pc, #564]	@ (8006688 <UART_SetConfig+0x2d0>)
 8006454:	429a      	cmp	r2, r3
 8006456:	d104      	bne.n	8006462 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006458:	f7fe f836 	bl	80044c8 <HAL_RCC_GetPCLK2Freq>
 800645c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006460:	e003      	b.n	800646a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006462:	f7fe f81d 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 8006466:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800646a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800646e:	69db      	ldr	r3, [r3, #28]
 8006470:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006474:	f040 810c 	bne.w	8006690 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800647c:	2200      	movs	r2, #0
 800647e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006482:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006486:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800648a:	4622      	mov	r2, r4
 800648c:	462b      	mov	r3, r5
 800648e:	1891      	adds	r1, r2, r2
 8006490:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006492:	415b      	adcs	r3, r3
 8006494:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006496:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800649a:	4621      	mov	r1, r4
 800649c:	eb12 0801 	adds.w	r8, r2, r1
 80064a0:	4629      	mov	r1, r5
 80064a2:	eb43 0901 	adc.w	r9, r3, r1
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	f04f 0300 	mov.w	r3, #0
 80064ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064ba:	4690      	mov	r8, r2
 80064bc:	4699      	mov	r9, r3
 80064be:	4623      	mov	r3, r4
 80064c0:	eb18 0303 	adds.w	r3, r8, r3
 80064c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064c8:	462b      	mov	r3, r5
 80064ca:	eb49 0303 	adc.w	r3, r9, r3
 80064ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80064d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80064e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80064e6:	460b      	mov	r3, r1
 80064e8:	18db      	adds	r3, r3, r3
 80064ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80064ec:	4613      	mov	r3, r2
 80064ee:	eb42 0303 	adc.w	r3, r2, r3
 80064f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80064f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80064f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80064fc:	f7f9 fe64 	bl	80001c8 <__aeabi_uldivmod>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	4b61      	ldr	r3, [pc, #388]	@ (800668c <UART_SetConfig+0x2d4>)
 8006506:	fba3 2302 	umull	r2, r3, r3, r2
 800650a:	095b      	lsrs	r3, r3, #5
 800650c:	011c      	lsls	r4, r3, #4
 800650e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006512:	2200      	movs	r2, #0
 8006514:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006518:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800651c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006520:	4642      	mov	r2, r8
 8006522:	464b      	mov	r3, r9
 8006524:	1891      	adds	r1, r2, r2
 8006526:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006528:	415b      	adcs	r3, r3
 800652a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800652c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006530:	4641      	mov	r1, r8
 8006532:	eb12 0a01 	adds.w	sl, r2, r1
 8006536:	4649      	mov	r1, r9
 8006538:	eb43 0b01 	adc.w	fp, r3, r1
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006548:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800654c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006550:	4692      	mov	sl, r2
 8006552:	469b      	mov	fp, r3
 8006554:	4643      	mov	r3, r8
 8006556:	eb1a 0303 	adds.w	r3, sl, r3
 800655a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800655e:	464b      	mov	r3, r9
 8006560:	eb4b 0303 	adc.w	r3, fp, r3
 8006564:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006574:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006578:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800657c:	460b      	mov	r3, r1
 800657e:	18db      	adds	r3, r3, r3
 8006580:	643b      	str	r3, [r7, #64]	@ 0x40
 8006582:	4613      	mov	r3, r2
 8006584:	eb42 0303 	adc.w	r3, r2, r3
 8006588:	647b      	str	r3, [r7, #68]	@ 0x44
 800658a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800658e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006592:	f7f9 fe19 	bl	80001c8 <__aeabi_uldivmod>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	4611      	mov	r1, r2
 800659c:	4b3b      	ldr	r3, [pc, #236]	@ (800668c <UART_SetConfig+0x2d4>)
 800659e:	fba3 2301 	umull	r2, r3, r3, r1
 80065a2:	095b      	lsrs	r3, r3, #5
 80065a4:	2264      	movs	r2, #100	@ 0x64
 80065a6:	fb02 f303 	mul.w	r3, r2, r3
 80065aa:	1acb      	subs	r3, r1, r3
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80065b2:	4b36      	ldr	r3, [pc, #216]	@ (800668c <UART_SetConfig+0x2d4>)
 80065b4:	fba3 2302 	umull	r2, r3, r3, r2
 80065b8:	095b      	lsrs	r3, r3, #5
 80065ba:	005b      	lsls	r3, r3, #1
 80065bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80065c0:	441c      	add	r4, r3
 80065c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80065d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80065d4:	4642      	mov	r2, r8
 80065d6:	464b      	mov	r3, r9
 80065d8:	1891      	adds	r1, r2, r2
 80065da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80065dc:	415b      	adcs	r3, r3
 80065de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80065e4:	4641      	mov	r1, r8
 80065e6:	1851      	adds	r1, r2, r1
 80065e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80065ea:	4649      	mov	r1, r9
 80065ec:	414b      	adcs	r3, r1
 80065ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80065f0:	f04f 0200 	mov.w	r2, #0
 80065f4:	f04f 0300 	mov.w	r3, #0
 80065f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80065fc:	4659      	mov	r1, fp
 80065fe:	00cb      	lsls	r3, r1, #3
 8006600:	4651      	mov	r1, sl
 8006602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006606:	4651      	mov	r1, sl
 8006608:	00ca      	lsls	r2, r1, #3
 800660a:	4610      	mov	r0, r2
 800660c:	4619      	mov	r1, r3
 800660e:	4603      	mov	r3, r0
 8006610:	4642      	mov	r2, r8
 8006612:	189b      	adds	r3, r3, r2
 8006614:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006618:	464b      	mov	r3, r9
 800661a:	460a      	mov	r2, r1
 800661c:	eb42 0303 	adc.w	r3, r2, r3
 8006620:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006630:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006634:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006638:	460b      	mov	r3, r1
 800663a:	18db      	adds	r3, r3, r3
 800663c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800663e:	4613      	mov	r3, r2
 8006640:	eb42 0303 	adc.w	r3, r2, r3
 8006644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006646:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800664a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800664e:	f7f9 fdbb 	bl	80001c8 <__aeabi_uldivmod>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4b0d      	ldr	r3, [pc, #52]	@ (800668c <UART_SetConfig+0x2d4>)
 8006658:	fba3 1302 	umull	r1, r3, r3, r2
 800665c:	095b      	lsrs	r3, r3, #5
 800665e:	2164      	movs	r1, #100	@ 0x64
 8006660:	fb01 f303 	mul.w	r3, r1, r3
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	3332      	adds	r3, #50	@ 0x32
 800666a:	4a08      	ldr	r2, [pc, #32]	@ (800668c <UART_SetConfig+0x2d4>)
 800666c:	fba2 2303 	umull	r2, r3, r2, r3
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	f003 0207 	and.w	r2, r3, #7
 8006676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4422      	add	r2, r4
 800667e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006680:	e106      	b.n	8006890 <UART_SetConfig+0x4d8>
 8006682:	bf00      	nop
 8006684:	40011000 	.word	0x40011000
 8006688:	40011400 	.word	0x40011400
 800668c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006694:	2200      	movs	r2, #0
 8006696:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800669a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800669e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80066a2:	4642      	mov	r2, r8
 80066a4:	464b      	mov	r3, r9
 80066a6:	1891      	adds	r1, r2, r2
 80066a8:	6239      	str	r1, [r7, #32]
 80066aa:	415b      	adcs	r3, r3
 80066ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80066ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066b2:	4641      	mov	r1, r8
 80066b4:	1854      	adds	r4, r2, r1
 80066b6:	4649      	mov	r1, r9
 80066b8:	eb43 0501 	adc.w	r5, r3, r1
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	00eb      	lsls	r3, r5, #3
 80066c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066ca:	00e2      	lsls	r2, r4, #3
 80066cc:	4614      	mov	r4, r2
 80066ce:	461d      	mov	r5, r3
 80066d0:	4643      	mov	r3, r8
 80066d2:	18e3      	adds	r3, r4, r3
 80066d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066d8:	464b      	mov	r3, r9
 80066da:	eb45 0303 	adc.w	r3, r5, r3
 80066de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	f04f 0300 	mov.w	r3, #0
 80066fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80066fe:	4629      	mov	r1, r5
 8006700:	008b      	lsls	r3, r1, #2
 8006702:	4621      	mov	r1, r4
 8006704:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006708:	4621      	mov	r1, r4
 800670a:	008a      	lsls	r2, r1, #2
 800670c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006710:	f7f9 fd5a 	bl	80001c8 <__aeabi_uldivmod>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4b60      	ldr	r3, [pc, #384]	@ (800689c <UART_SetConfig+0x4e4>)
 800671a:	fba3 2302 	umull	r2, r3, r3, r2
 800671e:	095b      	lsrs	r3, r3, #5
 8006720:	011c      	lsls	r4, r3, #4
 8006722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006726:	2200      	movs	r2, #0
 8006728:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800672c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006730:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006734:	4642      	mov	r2, r8
 8006736:	464b      	mov	r3, r9
 8006738:	1891      	adds	r1, r2, r2
 800673a:	61b9      	str	r1, [r7, #24]
 800673c:	415b      	adcs	r3, r3
 800673e:	61fb      	str	r3, [r7, #28]
 8006740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006744:	4641      	mov	r1, r8
 8006746:	1851      	adds	r1, r2, r1
 8006748:	6139      	str	r1, [r7, #16]
 800674a:	4649      	mov	r1, r9
 800674c:	414b      	adcs	r3, r1
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	f04f 0200 	mov.w	r2, #0
 8006754:	f04f 0300 	mov.w	r3, #0
 8006758:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800675c:	4659      	mov	r1, fp
 800675e:	00cb      	lsls	r3, r1, #3
 8006760:	4651      	mov	r1, sl
 8006762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006766:	4651      	mov	r1, sl
 8006768:	00ca      	lsls	r2, r1, #3
 800676a:	4610      	mov	r0, r2
 800676c:	4619      	mov	r1, r3
 800676e:	4603      	mov	r3, r0
 8006770:	4642      	mov	r2, r8
 8006772:	189b      	adds	r3, r3, r2
 8006774:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006778:	464b      	mov	r3, r9
 800677a:	460a      	mov	r2, r1
 800677c:	eb42 0303 	adc.w	r3, r2, r3
 8006780:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800678e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	f04f 0300 	mov.w	r3, #0
 8006798:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800679c:	4649      	mov	r1, r9
 800679e:	008b      	lsls	r3, r1, #2
 80067a0:	4641      	mov	r1, r8
 80067a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067a6:	4641      	mov	r1, r8
 80067a8:	008a      	lsls	r2, r1, #2
 80067aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80067ae:	f7f9 fd0b 	bl	80001c8 <__aeabi_uldivmod>
 80067b2:	4602      	mov	r2, r0
 80067b4:	460b      	mov	r3, r1
 80067b6:	4611      	mov	r1, r2
 80067b8:	4b38      	ldr	r3, [pc, #224]	@ (800689c <UART_SetConfig+0x4e4>)
 80067ba:	fba3 2301 	umull	r2, r3, r3, r1
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	2264      	movs	r2, #100	@ 0x64
 80067c2:	fb02 f303 	mul.w	r3, r2, r3
 80067c6:	1acb      	subs	r3, r1, r3
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	3332      	adds	r3, #50	@ 0x32
 80067cc:	4a33      	ldr	r2, [pc, #204]	@ (800689c <UART_SetConfig+0x4e4>)
 80067ce:	fba2 2303 	umull	r2, r3, r2, r3
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067d8:	441c      	add	r4, r3
 80067da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067de:	2200      	movs	r2, #0
 80067e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80067e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80067e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80067e8:	4642      	mov	r2, r8
 80067ea:	464b      	mov	r3, r9
 80067ec:	1891      	adds	r1, r2, r2
 80067ee:	60b9      	str	r1, [r7, #8]
 80067f0:	415b      	adcs	r3, r3
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067f8:	4641      	mov	r1, r8
 80067fa:	1851      	adds	r1, r2, r1
 80067fc:	6039      	str	r1, [r7, #0]
 80067fe:	4649      	mov	r1, r9
 8006800:	414b      	adcs	r3, r1
 8006802:	607b      	str	r3, [r7, #4]
 8006804:	f04f 0200 	mov.w	r2, #0
 8006808:	f04f 0300 	mov.w	r3, #0
 800680c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006810:	4659      	mov	r1, fp
 8006812:	00cb      	lsls	r3, r1, #3
 8006814:	4651      	mov	r1, sl
 8006816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800681a:	4651      	mov	r1, sl
 800681c:	00ca      	lsls	r2, r1, #3
 800681e:	4610      	mov	r0, r2
 8006820:	4619      	mov	r1, r3
 8006822:	4603      	mov	r3, r0
 8006824:	4642      	mov	r2, r8
 8006826:	189b      	adds	r3, r3, r2
 8006828:	66bb      	str	r3, [r7, #104]	@ 0x68
 800682a:	464b      	mov	r3, r9
 800682c:	460a      	mov	r2, r1
 800682e:	eb42 0303 	adc.w	r3, r2, r3
 8006832:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	663b      	str	r3, [r7, #96]	@ 0x60
 800683e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006840:	f04f 0200 	mov.w	r2, #0
 8006844:	f04f 0300 	mov.w	r3, #0
 8006848:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800684c:	4649      	mov	r1, r9
 800684e:	008b      	lsls	r3, r1, #2
 8006850:	4641      	mov	r1, r8
 8006852:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006856:	4641      	mov	r1, r8
 8006858:	008a      	lsls	r2, r1, #2
 800685a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800685e:	f7f9 fcb3 	bl	80001c8 <__aeabi_uldivmod>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	4b0d      	ldr	r3, [pc, #52]	@ (800689c <UART_SetConfig+0x4e4>)
 8006868:	fba3 1302 	umull	r1, r3, r3, r2
 800686c:	095b      	lsrs	r3, r3, #5
 800686e:	2164      	movs	r1, #100	@ 0x64
 8006870:	fb01 f303 	mul.w	r3, r1, r3
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	011b      	lsls	r3, r3, #4
 8006878:	3332      	adds	r3, #50	@ 0x32
 800687a:	4a08      	ldr	r2, [pc, #32]	@ (800689c <UART_SetConfig+0x4e4>)
 800687c:	fba2 2303 	umull	r2, r3, r2, r3
 8006880:	095b      	lsrs	r3, r3, #5
 8006882:	f003 020f 	and.w	r2, r3, #15
 8006886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4422      	add	r2, r4
 800688e:	609a      	str	r2, [r3, #8]
}
 8006890:	bf00      	nop
 8006892:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006896:	46bd      	mov	sp, r7
 8006898:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800689c:	51eb851f 	.word	0x51eb851f

080068a0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	6812      	ldr	r2, [r2, #0]
 80068b8:	f023 0101 	bic.w	r1, r3, #1
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b08      	cmp	r3, #8
 80068c8:	d102      	bne.n	80068d0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80068ca:	2340      	movs	r3, #64	@ 0x40
 80068cc:	617b      	str	r3, [r7, #20]
 80068ce:	e001      	b.n	80068d4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80068d0:	2300      	movs	r3, #0
 80068d2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80068e0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80068e6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80068ec:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80068f2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80068f8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80068fe:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8006904:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800690a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8006910:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8006916:	4313      	orrs	r3, r2
 8006918:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	4313      	orrs	r3, r2
 8006922:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	4313      	orrs	r3, r2
 800692c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800692e:	4b10      	ldr	r3, [pc, #64]	@ (8006970 <FSMC_NORSRAM_Init+0xd0>)
 8006930:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006938:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006940:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	43db      	mvns	r3, r3
 8006950:	ea02 0103 	and.w	r1, r2, r3
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	4319      	orrs	r1, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	371c      	adds	r7, #28
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	0008fb7f 	.word	0x0008fb7f

08006974 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698a:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	431a      	orrs	r2, r3
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	021b      	lsls	r3, r3, #8
 80069a0:	431a      	orrs	r2, r3
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	041b      	lsls	r3, r3, #16
 80069a8:	431a      	orrs	r2, r3
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	051b      	lsls	r3, r3, #20
 80069b2:	431a      	orrs	r2, r3
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	3b02      	subs	r3, #2
 80069ba:	061b      	lsls	r3, r3, #24
 80069bc:	431a      	orrs	r2, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	3201      	adds	r2, #1
 80069c8:	4319      	orrs	r1, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
	...

080069e0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069f4:	d11d      	bne.n	8006a32 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069fe:	4b13      	ldr	r3, [pc, #76]	@ (8006a4c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006a00:	4013      	ands	r3, r2
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	6811      	ldr	r1, [r2, #0]
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	6852      	ldr	r2, [r2, #4]
 8006a0a:	0112      	lsls	r2, r2, #4
 8006a0c:	4311      	orrs	r1, r2
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	6892      	ldr	r2, [r2, #8]
 8006a12:	0212      	lsls	r2, r2, #8
 8006a14:	4311      	orrs	r1, r2
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	6992      	ldr	r2, [r2, #24]
 8006a1a:	4311      	orrs	r1, r2
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	68d2      	ldr	r2, [r2, #12]
 8006a20:	0412      	lsls	r2, r2, #16
 8006a22:	430a      	orrs	r2, r1
 8006a24:	ea43 0102 	orr.w	r1, r3, r2
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006a30:	e005      	b.n	8006a3e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8006a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	cff00000 	.word	0xcff00000

08006a50 <memset>:
 8006a50:	4402      	add	r2, r0
 8006a52:	4603      	mov	r3, r0
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d100      	bne.n	8006a5a <memset+0xa>
 8006a58:	4770      	bx	lr
 8006a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a5e:	e7f9      	b.n	8006a54 <memset+0x4>

08006a60 <__libc_init_array>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	4d0d      	ldr	r5, [pc, #52]	@ (8006a98 <__libc_init_array+0x38>)
 8006a64:	4c0d      	ldr	r4, [pc, #52]	@ (8006a9c <__libc_init_array+0x3c>)
 8006a66:	1b64      	subs	r4, r4, r5
 8006a68:	10a4      	asrs	r4, r4, #2
 8006a6a:	2600      	movs	r6, #0
 8006a6c:	42a6      	cmp	r6, r4
 8006a6e:	d109      	bne.n	8006a84 <__libc_init_array+0x24>
 8006a70:	4d0b      	ldr	r5, [pc, #44]	@ (8006aa0 <__libc_init_array+0x40>)
 8006a72:	4c0c      	ldr	r4, [pc, #48]	@ (8006aa4 <__libc_init_array+0x44>)
 8006a74:	f000 f818 	bl	8006aa8 <_init>
 8006a78:	1b64      	subs	r4, r4, r5
 8006a7a:	10a4      	asrs	r4, r4, #2
 8006a7c:	2600      	movs	r6, #0
 8006a7e:	42a6      	cmp	r6, r4
 8006a80:	d105      	bne.n	8006a8e <__libc_init_array+0x2e>
 8006a82:	bd70      	pop	{r4, r5, r6, pc}
 8006a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a88:	4798      	blx	r3
 8006a8a:	3601      	adds	r6, #1
 8006a8c:	e7ee      	b.n	8006a6c <__libc_init_array+0xc>
 8006a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a92:	4798      	blx	r3
 8006a94:	3601      	adds	r6, #1
 8006a96:	e7f2      	b.n	8006a7e <__libc_init_array+0x1e>
 8006a98:	08009ab0 	.word	0x08009ab0
 8006a9c:	08009ab0 	.word	0x08009ab0
 8006aa0:	08009ab0 	.word	0x08009ab0
 8006aa4:	08009ab4 	.word	0x08009ab4

08006aa8 <_init>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	bf00      	nop
 8006aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aae:	bc08      	pop	{r3}
 8006ab0:	469e      	mov	lr, r3
 8006ab2:	4770      	bx	lr

08006ab4 <_fini>:
 8006ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab6:	bf00      	nop
 8006ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aba:	bc08      	pop	{r3}
 8006abc:	469e      	mov	lr, r3
 8006abe:	4770      	bx	lr
