
ModBus_RTU_Implement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ccc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe0  08006e54  08006e54  00007e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e34  08009e34  0000b248  2**0
                  CONTENTS
  4 .ARM          00000008  08009e34  08009e34  0000ae34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e3c  08009e3c  0000b248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e3c  08009e3c  0000ae3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e40  08009e40  0000ae40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000248  20000000  08009e44  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b248  2**0
                  CONTENTS
 10 .bss          000005e4  20000248  20000248  0000b248  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000082c  2000082c  0000b248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b248  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d9b  00000000  00000000  0000b278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f9b  00000000  00000000  00022013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  00025fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f89  00000000  00000000  00027410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000258b1  00000000  00000000  00028399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bcdf  00000000  00000000  0004dc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd774  00000000  00000000  00069929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014709d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051b8  00000000  00000000  001470e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0014c298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000248 	.word	0x20000248
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006e3c 	.word	0x08006e3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000024c 	.word	0x2000024c
 80001c4:	08006e3c 	.word	0x08006e3c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <_f_master_send_cmd_temperature>:
 *  Created on: Dec 7, 2024
 *      Author: ADMIN
 */
#include "master.h"
enum master_state_t master_behavior = IDLE;
void _f_master_send_cmd_temperature(){
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
	master.tx_buf[0] = slave_address;
 80004bc:	4b0d      	ldr	r3, [pc, #52]	@ (80004f4 <_f_master_send_cmd_temperature+0x3c>)
 80004be:	781a      	ldrb	r2, [r3, #0]
 80004c0:	4b0d      	ldr	r3, [pc, #52]	@ (80004f8 <_f_master_send_cmd_temperature+0x40>)
 80004c2:	715a      	strb	r2, [r3, #5]
	master.tx_buf[1] = READ_HOLDING_REGISTER;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <_f_master_send_cmd_temperature+0x40>)
 80004c6:	2203      	movs	r2, #3
 80004c8:	719a      	strb	r2, [r3, #6]
	master.tx_buf[2] = 0x00;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <_f_master_send_cmd_temperature+0x40>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	71da      	strb	r2, [r3, #7]
	master.tx_buf[3] = TEMPERATURE_REGISTER_ADDRESS;
 80004d0:	4b09      	ldr	r3, [pc, #36]	@ (80004f8 <_f_master_send_cmd_temperature+0x40>)
 80004d2:	2206      	movs	r2, #6
 80004d4:	721a      	strb	r2, [r3, #8]
	master.tx_buf[4] = 0x00;
 80004d6:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <_f_master_send_cmd_temperature+0x40>)
 80004d8:	2200      	movs	r2, #0
 80004da:	725a      	strb	r2, [r3, #9]
	master.tx_buf[5] = 0x01;
 80004dc:	4b06      	ldr	r3, [pc, #24]	@ (80004f8 <_f_master_send_cmd_temperature+0x40>)
 80004de:	2201      	movs	r2, #1
 80004e0:	729a      	strb	r2, [r3, #10]
	master.tx_size = 6;
 80004e2:	4b05      	ldr	r3, [pc, #20]	@ (80004f8 <_f_master_send_cmd_temperature+0x40>)
 80004e4:	2206      	movs	r2, #6
 80004e6:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	20000220 	.word	0x20000220
 80004f8:	20000434 	.word	0x20000434

080004fc <_f_master_send_cmd_current>:

void _f_master_send_cmd_current(){
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	master.tx_buf[0] = slave_address;
 8000500:	4b0d      	ldr	r3, [pc, #52]	@ (8000538 <_f_master_send_cmd_current+0x3c>)
 8000502:	781a      	ldrb	r2, [r3, #0]
 8000504:	4b0d      	ldr	r3, [pc, #52]	@ (800053c <_f_master_send_cmd_current+0x40>)
 8000506:	715a      	strb	r2, [r3, #5]
	master.tx_buf[1] = READ_HOLDING_REGISTER;
 8000508:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <_f_master_send_cmd_current+0x40>)
 800050a:	2203      	movs	r2, #3
 800050c:	719a      	strb	r2, [r3, #6]
	master.tx_buf[2] = 0x00;
 800050e:	4b0b      	ldr	r3, [pc, #44]	@ (800053c <_f_master_send_cmd_current+0x40>)
 8000510:	2200      	movs	r2, #0
 8000512:	71da      	strb	r2, [r3, #7]
	master.tx_buf[3] = CURRENT_REGISTER_ADDRESS;
 8000514:	4b09      	ldr	r3, [pc, #36]	@ (800053c <_f_master_send_cmd_current+0x40>)
 8000516:	220a      	movs	r2, #10
 8000518:	721a      	strb	r2, [r3, #8]
	master.tx_buf[4] = 0x00;
 800051a:	4b08      	ldr	r3, [pc, #32]	@ (800053c <_f_master_send_cmd_current+0x40>)
 800051c:	2200      	movs	r2, #0
 800051e:	725a      	strb	r2, [r3, #9]
	master.tx_buf[5] = 0x01;
 8000520:	4b06      	ldr	r3, [pc, #24]	@ (800053c <_f_master_send_cmd_current+0x40>)
 8000522:	2201      	movs	r2, #1
 8000524:	729a      	strb	r2, [r3, #10]
	master.tx_size = 6;
 8000526:	4b05      	ldr	r3, [pc, #20]	@ (800053c <_f_master_send_cmd_current+0x40>)
 8000528:	2206      	movs	r2, #6
 800052a:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	20000220 	.word	0x20000220
 800053c:	20000434 	.word	0x20000434

08000540 <_f_master_send_cmd_voltage>:
void _f_master_send_cmd_voltage(){
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
	master.tx_buf[0] = slave_address;
 8000544:	4b0d      	ldr	r3, [pc, #52]	@ (800057c <_f_master_send_cmd_voltage+0x3c>)
 8000546:	781a      	ldrb	r2, [r3, #0]
 8000548:	4b0d      	ldr	r3, [pc, #52]	@ (8000580 <_f_master_send_cmd_voltage+0x40>)
 800054a:	715a      	strb	r2, [r3, #5]
	master.tx_buf[1] = READ_HOLDING_REGISTER;
 800054c:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <_f_master_send_cmd_voltage+0x40>)
 800054e:	2203      	movs	r2, #3
 8000550:	719a      	strb	r2, [r3, #6]
	master.tx_buf[2] = 0x00;
 8000552:	4b0b      	ldr	r3, [pc, #44]	@ (8000580 <_f_master_send_cmd_voltage+0x40>)
 8000554:	2200      	movs	r2, #0
 8000556:	71da      	strb	r2, [r3, #7]
	master.tx_buf[3] = VOLTAGE_REGISTER_ADDRESS;
 8000558:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <_f_master_send_cmd_voltage+0x40>)
 800055a:	220e      	movs	r2, #14
 800055c:	721a      	strb	r2, [r3, #8]
	master.tx_buf[4] = 0x00;
 800055e:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <_f_master_send_cmd_voltage+0x40>)
 8000560:	2200      	movs	r2, #0
 8000562:	725a      	strb	r2, [r3, #9]
	master.tx_buf[5] = 0x01;
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <_f_master_send_cmd_voltage+0x40>)
 8000566:	2201      	movs	r2, #1
 8000568:	729a      	strb	r2, [r3, #10]
	master.tx_size = 6;
 800056a:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <_f_master_send_cmd_voltage+0x40>)
 800056c:	2206      	movs	r2, #6
 800056e:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	20000220 	.word	0x20000220
 8000580:	20000434 	.word	0x20000434

08000584 <_f_master_send_cmd_light>:
void _f_master_send_cmd_light(){
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	master.tx_buf[0] = slave_address;
 8000588:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <_f_master_send_cmd_light+0x3c>)
 800058a:	781a      	ldrb	r2, [r3, #0]
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <_f_master_send_cmd_light+0x40>)
 800058e:	715a      	strb	r2, [r3, #5]
	master.tx_buf[1] = READ_HOLDING_REGISTER;
 8000590:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <_f_master_send_cmd_light+0x40>)
 8000592:	2203      	movs	r2, #3
 8000594:	719a      	strb	r2, [r3, #6]
	master.tx_buf[2] = 0x00;
 8000596:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <_f_master_send_cmd_light+0x40>)
 8000598:	2200      	movs	r2, #0
 800059a:	71da      	strb	r2, [r3, #7]
	master.tx_buf[3] = LIGHT_REGISTER_ADDRESS;
 800059c:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <_f_master_send_cmd_light+0x40>)
 800059e:	2204      	movs	r2, #4
 80005a0:	721a      	strb	r2, [r3, #8]
	master.tx_buf[4] = 0x00;
 80005a2:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <_f_master_send_cmd_light+0x40>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	725a      	strb	r2, [r3, #9]
	master.tx_buf[5] = 0x01;
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <_f_master_send_cmd_light+0x40>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	729a      	strb	r2, [r3, #10]
	master.tx_size = 6;
 80005ae:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <_f_master_send_cmd_light+0x40>)
 80005b0:	2206      	movs	r2, #6
 80005b2:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	20000220 	.word	0x20000220
 80005c4:	20000434 	.word	0x20000434

080005c8 <_f_master_send_cmd_potentiometer>:
void _f_master_send_cmd_potentiometer(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	master.tx_buf[0] = slave_address;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <_f_master_send_cmd_potentiometer+0x3c>)
 80005ce:	781a      	ldrb	r2, [r3, #0]
 80005d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000608 <_f_master_send_cmd_potentiometer+0x40>)
 80005d2:	715a      	strb	r2, [r3, #5]
	master.tx_buf[1] = READ_HOLDING_REGISTER;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <_f_master_send_cmd_potentiometer+0x40>)
 80005d6:	2203      	movs	r2, #3
 80005d8:	719a      	strb	r2, [r3, #6]
	master.tx_buf[2] = 0x00;
 80005da:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <_f_master_send_cmd_potentiometer+0x40>)
 80005dc:	2200      	movs	r2, #0
 80005de:	71da      	strb	r2, [r3, #7]
	master.tx_buf[3] = POTENTIOMETER_REGISTER_ADDRESS;
 80005e0:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <_f_master_send_cmd_potentiometer+0x40>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	721a      	strb	r2, [r3, #8]
	master.tx_buf[4] = 0x00;
 80005e6:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <_f_master_send_cmd_potentiometer+0x40>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	725a      	strb	r2, [r3, #9]
	master.tx_buf[5] = 0x01;
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <_f_master_send_cmd_potentiometer+0x40>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	729a      	strb	r2, [r3, #10]
	master.tx_size = 6;
 80005f2:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <_f_master_send_cmd_potentiometer+0x40>)
 80005f4:	2206      	movs	r2, #6
 80005f6:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	20000220 	.word	0x20000220
 8000608:	20000434 	.word	0x20000434

0800060c <f_master_fsm>:
void f_master_fsm(){
 800060c:	b580      	push	{r7, lr}
 800060e:	b0c8      	sub	sp, #288	@ 0x120
 8000610:	af04      	add	r7, sp, #16
	switch(master_behavior){
 8000612:	4b84      	ldr	r3, [pc, #528]	@ (8000824 <f_master_fsm+0x218>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b04      	cmp	r3, #4
 8000618:	f200 80f8 	bhi.w	800080c <f_master_fsm+0x200>
 800061c:	a201      	add	r2, pc, #4	@ (adr r2, 8000624 <f_master_fsm+0x18>)
 800061e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000622:	bf00      	nop
 8000624:	08000639 	.word	0x08000639
 8000628:	080006c5 	.word	0x080006c5
 800062c:	080006db 	.word	0x080006db
 8000630:	08000703 	.word	0x08000703
 8000634:	080007d5 	.word	0x080007d5
		case IDLE:
			if(flag_send_cmd){
 8000638:	4b7b      	ldr	r3, [pc, #492]	@ (8000828 <f_master_fsm+0x21c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	f000 80e7 	beq.w	8000810 <f_master_fsm+0x204>
				switch(cmd_send){
 8000642:	4b7a      	ldr	r3, [pc, #488]	@ (800082c <f_master_fsm+0x220>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	3b01      	subs	r3, #1
 8000648:	2b05      	cmp	r3, #5
 800064a:	d81e      	bhi.n	800068a <f_master_fsm+0x7e>
 800064c:	a201      	add	r2, pc, #4	@ (adr r2, 8000654 <f_master_fsm+0x48>)
 800064e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000652:	bf00      	nop
 8000654:	0800066d 	.word	0x0800066d
 8000658:	08000673 	.word	0x08000673
 800065c:	08000679 	.word	0x08000679
 8000660:	0800067f 	.word	0x0800067f
 8000664:	0800068b 	.word	0x0800068b
 8000668:	08000685 	.word	0x08000685
					case READ_TEMPERATURE:
						_f_master_send_cmd_temperature();
 800066c:	f7ff ff24 	bl	80004b8 <_f_master_send_cmd_temperature>
						break;
 8000670:	e00c      	b.n	800068c <f_master_fsm+0x80>
					case READ_CURRENT:
						_f_master_send_cmd_current();
 8000672:	f7ff ff43 	bl	80004fc <_f_master_send_cmd_current>
						break;
 8000676:	e009      	b.n	800068c <f_master_fsm+0x80>
					case READ_VOLTAGE:
						_f_master_send_cmd_voltage();
 8000678:	f7ff ff62 	bl	8000540 <_f_master_send_cmd_voltage>
						break;
 800067c:	e006      	b.n	800068c <f_master_fsm+0x80>
					case READ_LIGHT:
						_f_master_send_cmd_light();
 800067e:	f7ff ff81 	bl	8000584 <_f_master_send_cmd_light>
						break;
 8000682:	e003      	b.n	800068c <f_master_fsm+0x80>
					case READ_POTENTION:
						_f_master_send_cmd_potentiometer();
 8000684:	f7ff ffa0 	bl	80005c8 <_f_master_send_cmd_potentiometer>
						break;
 8000688:	e000      	b.n	800068c <f_master_fsm+0x80>
					default:
						break;
 800068a:	bf00      	nop
				}
				f_rs485_send_cmd(master.tx_buf, master.tx_size);
 800068c:	4b68      	ldr	r3, [pc, #416]	@ (8000830 <f_master_fsm+0x224>)
 800068e:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4619      	mov	r1, r3
 8000696:	4867      	ldr	r0, [pc, #412]	@ (8000834 <f_master_fsm+0x228>)
 8000698:	f001 fcc4 	bl	8002024 <f_rs485_send_cmd>
				if(cmd_send == BROAD_CAST){
 800069c:	4b63      	ldr	r3, [pc, #396]	@ (800082c <f_master_fsm+0x220>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2bff      	cmp	r3, #255	@ 0xff
 80006a2:	d107      	bne.n	80006b4 <f_master_fsm+0xa8>
					setTimer(TI_MASTER_TURN_ARROUND_TIMER, TI_MASTER_TURN_ARROUND_TIME);
 80006a4:	2132      	movs	r1, #50	@ 0x32
 80006a6:	2005      	movs	r0, #5
 80006a8:	f001 fe7c 	bl	80023a4 <setTimer>
					master_behavior = WAITING_TURN_ARROUND_DELAY;
 80006ac:	4b5d      	ldr	r3, [pc, #372]	@ (8000824 <f_master_fsm+0x218>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
					break;
 80006b2:	e0b2      	b.n	800081a <f_master_fsm+0x20e>
				}
				setTimer(TI_MASTER_WAITING_TIMER, TI_MASTER_TURN_ARROUND_TIME);
 80006b4:	2132      	movs	r1, #50	@ 0x32
 80006b6:	2006      	movs	r0, #6
 80006b8:	f001 fe74 	bl	80023a4 <setTimer>
				master_behavior = WAITING_FOR_REPLY;
 80006bc:	4b59      	ldr	r3, [pc, #356]	@ (8000824 <f_master_fsm+0x218>)
 80006be:	2202      	movs	r2, #2
 80006c0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80006c2:	e0a5      	b.n	8000810 <f_master_fsm+0x204>
		case WAITING_TURN_ARROUND_DELAY:
			if(isFlag(TI_MASTER_TURN_ARROUND_TIMER)) master_behavior = IDLE;
 80006c4:	2005      	movs	r0, #5
 80006c6:	f001 feb5 	bl	8002434 <isFlag>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	f000 80a1 	beq.w	8000814 <f_master_fsm+0x208>
 80006d2:	4b54      	ldr	r3, [pc, #336]	@ (8000824 <f_master_fsm+0x218>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
			break;
 80006d8:	e09c      	b.n	8000814 <f_master_fsm+0x208>
		case WAITING_FOR_REPLY:
			if(isFlag(TI_MASTER_TURN_ARROUND_TIME)) master_behavior = PROCESSING_ERROR;
 80006da:	2032      	movs	r0, #50	@ 0x32
 80006dc:	f001 feaa 	bl	8002434 <isFlag>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d003      	beq.n	80006ee <f_master_fsm+0xe2>
 80006e6:	4b4f      	ldr	r3, [pc, #316]	@ (8000824 <f_master_fsm+0x218>)
 80006e8:	2204      	movs	r2, #4
 80006ea:	701a      	strb	r2, [r3, #0]
			else if(f_rs485_received()){
				master_behavior = PROCESSING_REPLY;
			}
			break;
 80006ec:	e094      	b.n	8000818 <f_master_fsm+0x20c>
			else if(f_rs485_received()){
 80006ee:	f001 fcba 	bl	8002066 <f_rs485_received>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	f000 808f 	beq.w	8000818 <f_master_fsm+0x20c>
				master_behavior = PROCESSING_REPLY;
 80006fa:	4b4a      	ldr	r3, [pc, #296]	@ (8000824 <f_master_fsm+0x218>)
 80006fc:	2203      	movs	r2, #3
 80006fe:	701a      	strb	r2, [r3, #0]
			break;
 8000700:	e08a      	b.n	8000818 <f_master_fsm+0x20c>
			uint8_t _address;
			uint8_t _function;
			uint8_t _data[256];
			uint8_t _data_size;
			uint16_t _crc_receive;
			f_rs485_parserFrame(master.rx_buf, master.rx_size, &_address, &_function, _data,&_data_size, &_crc_receive);
 8000702:	4b4b      	ldr	r3, [pc, #300]	@ (8000830 <f_master_fsm+0x224>)
 8000704:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8000708:	b2d9      	uxtb	r1, r3
 800070a:	f507 7083 	add.w	r0, r7, #262	@ 0x106
 800070e:	f207 1207 	addw	r2, r7, #263	@ 0x107
 8000712:	f507 7381 	add.w	r3, r7, #258	@ 0x102
 8000716:	9302      	str	r3, [sp, #8]
 8000718:	f207 1305 	addw	r3, r7, #261	@ 0x105
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	463b      	mov	r3, r7
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	4603      	mov	r3, r0
 8000724:	4844      	ldr	r0, [pc, #272]	@ (8000838 <f_master_fsm+0x22c>)
 8000726:	f001 fc90 	bl	800204a <f_rs485_parserFrame>
			if(_crc_receive == crc16(master.rx_buf, master.rx_size - 2)){
 800072a:	4b41      	ldr	r3, [pc, #260]	@ (8000830 <f_master_fsm+0x224>)
 800072c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8000730:	3b02      	subs	r3, #2
 8000732:	b29b      	uxth	r3, r3
 8000734:	4619      	mov	r1, r3
 8000736:	4840      	ldr	r0, [pc, #256]	@ (8000838 <f_master_fsm+0x22c>)
 8000738:	f000 fb3c 	bl	8000db4 <crc16>
 800073c:	4603      	mov	r3, r0
 800073e:	461a      	mov	r2, r3
 8000740:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8000744:	429a      	cmp	r2, r3
 8000746:	d141      	bne.n	80007cc <f_master_fsm+0x1c0>
					switch(_function){
 8000748:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800074c:	2b10      	cmp	r3, #16
 800074e:	d036      	beq.n	80007be <f_master_fsm+0x1b2>
 8000750:	2b10      	cmp	r3, #16
 8000752:	dc36      	bgt.n	80007c2 <f_master_fsm+0x1b6>
 8000754:	2b03      	cmp	r3, #3
 8000756:	d001      	beq.n	800075c <f_master_fsm+0x150>
 8000758:	2b05      	cmp	r3, #5
						}
						break;
					case WRITE_MULTIPLE_HOLDING_REGISTER:
						break;
					case WRITE_SINGLE_COIL:
						break;
 800075a:	e033      	b.n	80007c4 <f_master_fsm+0x1b8>
						uint8_t _num_bytes = master.rx_buf[2];
 800075c:	4b34      	ldr	r3, [pc, #208]	@ (8000830 <f_master_fsm+0x224>)
 800075e:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8000762:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
						uint16_t _address = (((uint16_t)master.tx_buf[2]<<8)|(master.tx_buf[3]));
 8000766:	4b32      	ldr	r3, [pc, #200]	@ (8000830 <f_master_fsm+0x224>)
 8000768:	79db      	ldrb	r3, [r3, #7]
 800076a:	021b      	lsls	r3, r3, #8
 800076c:	b21a      	sxth	r2, r3
 800076e:	4b30      	ldr	r3, [pc, #192]	@ (8000830 <f_master_fsm+0x224>)
 8000770:	7a1b      	ldrb	r3, [r3, #8]
 8000772:	b21b      	sxth	r3, r3
 8000774:	4313      	orrs	r3, r2
 8000776:	b21b      	sxth	r3, r3
 8000778:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
						for(int i=0;i<_num_bytes;i++){
 800077c:	2300      	movs	r3, #0
 800077e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000782:	e015      	b.n	80007b0 <f_master_fsm+0x1a4>
							master.holding_register[i + _address]  = master.rx_buf[i+3];
 8000784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000788:	1cda      	adds	r2, r3, #3
 800078a:	f8b7 1108 	ldrh.w	r1, [r7, #264]	@ 0x108
 800078e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000792:	440b      	add	r3, r1
 8000794:	4926      	ldr	r1, [pc, #152]	@ (8000830 <f_master_fsm+0x224>)
 8000796:	440a      	add	r2, r1
 8000798:	f892 1108 	ldrb.w	r1, [r2, #264]	@ 0x108
 800079c:	4a24      	ldr	r2, [pc, #144]	@ (8000830 <f_master_fsm+0x224>)
 800079e:	4413      	add	r3, r2
 80007a0:	460a      	mov	r2, r1
 80007a2:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
						for(int i=0;i<_num_bytes;i++){
 80007a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80007aa:	3301      	adds	r3, #1
 80007ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80007b0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80007b4:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80007b8:	429a      	cmp	r2, r3
 80007ba:	dbe3      	blt.n	8000784 <f_master_fsm+0x178>
						break;
 80007bc:	e002      	b.n	80007c4 <f_master_fsm+0x1b8>
						break;
 80007be:	bf00      	nop
 80007c0:	e000      	b.n	80007c4 <f_master_fsm+0x1b8>
					default:
						break;
 80007c2:	bf00      	nop
					}
				master_behavior = PROCESSING_ERROR;
 80007c4:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <f_master_fsm+0x218>)
 80007c6:	2204      	movs	r2, #4
 80007c8:	701a      	strb	r2, [r3, #0]
			}
			else{
				master_behavior = PROCESSING_ERROR;
			}
			break;
 80007ca:	e026      	b.n	800081a <f_master_fsm+0x20e>
				master_behavior = PROCESSING_ERROR;
 80007cc:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <f_master_fsm+0x218>)
 80007ce:	2204      	movs	r2, #4
 80007d0:	701a      	strb	r2, [r3, #0]
			break;
 80007d2:	e022      	b.n	800081a <f_master_fsm+0x20e>
		case PROCESSING_ERROR:
			f_rs485_send_cmd(master.tx_buf, master.tx_size);
 80007d4:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <f_master_fsm+0x224>)
 80007d6:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4619      	mov	r1, r3
 80007de:	4815      	ldr	r0, [pc, #84]	@ (8000834 <f_master_fsm+0x228>)
 80007e0:	f001 fc20 	bl	8002024 <f_rs485_send_cmd>
			if(cmd_send == BROAD_CAST){
 80007e4:	4b11      	ldr	r3, [pc, #68]	@ (800082c <f_master_fsm+0x220>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2bff      	cmp	r3, #255	@ 0xff
 80007ea:	d107      	bne.n	80007fc <f_master_fsm+0x1f0>
				setTimer(TI_MASTER_TURN_ARROUND_TIMER, TI_MASTER_TURN_ARROUND_TIME);
 80007ec:	2132      	movs	r1, #50	@ 0x32
 80007ee:	2005      	movs	r0, #5
 80007f0:	f001 fdd8 	bl	80023a4 <setTimer>
				master_behavior = WAITING_TURN_ARROUND_DELAY;
 80007f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <f_master_fsm+0x218>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
				break;
 80007fa:	e00e      	b.n	800081a <f_master_fsm+0x20e>
			}
			setTimer(TI_MASTER_WAITING_TIMER, TI_MASTER_TURN_ARROUND_TIME);
 80007fc:	2132      	movs	r1, #50	@ 0x32
 80007fe:	2006      	movs	r0, #6
 8000800:	f001 fdd0 	bl	80023a4 <setTimer>
			master_behavior = WAITING_FOR_REPLY;
 8000804:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <f_master_fsm+0x218>)
 8000806:	2202      	movs	r2, #2
 8000808:	701a      	strb	r2, [r3, #0]
			break;
 800080a:	e006      	b.n	800081a <f_master_fsm+0x20e>
		default:
			break;
 800080c:	bf00      	nop
 800080e:	e004      	b.n	800081a <f_master_fsm+0x20e>
			break;
 8000810:	bf00      	nop
 8000812:	e002      	b.n	800081a <f_master_fsm+0x20e>
			break;
 8000814:	bf00      	nop
 8000816:	e000      	b.n	800081a <f_master_fsm+0x20e>
			break;
 8000818:	bf00      	nop
	}
}
 800081a:	bf00      	nop
 800081c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000264 	.word	0x20000264
 8000828:	20000429 	.word	0x20000429
 800082c:	20000428 	.word	0x20000428
 8000830:	20000434 	.word	0x20000434
 8000834:	20000439 	.word	0x20000439
 8000838:	2000053c 	.word	0x2000053c

0800083c <f_master_get_temperature>:

float f_master_get_temperature(){
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
	return *((float*)((master.holding_register + TEMPERATURE_REGISTER_ADDRESS)));
 8000840:	4b04      	ldr	r3, [pc, #16]	@ (8000854 <f_master_get_temperature+0x18>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	ee07 3a90 	vmov	s15, r3
}
 8000848:	eeb0 0a67 	vmov.f32	s0, s15
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	20000644 	.word	0x20000644

08000858 <f_master_get_current>:

float f_master_get_current(){
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
	return *((float*)((master.holding_register + CURRENT_REGISTER_ADDRESS)));;
 800085c:	4b04      	ldr	r3, [pc, #16]	@ (8000870 <f_master_get_current+0x18>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	ee07 3a90 	vmov	s15, r3
}
 8000864:	eeb0 0a67 	vmov.f32	s0, s15
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	20000648 	.word	0x20000648

08000874 <f_master_get_voltage>:

float f_master_get_voltage(){
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
	return *((float*)((master.holding_register + VOLTAGE_REGISTER_ADDRESS)));
 8000878:	4b04      	ldr	r3, [pc, #16]	@ (800088c <f_master_get_voltage+0x18>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	ee07 3a90 	vmov	s15, r3
}
 8000880:	eeb0 0a67 	vmov.f32	s0, s15
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	2000064c 	.word	0x2000064c

08000890 <f_master_get_light>:

uint16_t f_master_get_light(){
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
	uint16_t _return_val = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	81fb      	strh	r3, [r7, #14]
	uint8_t _size_of_reg = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < _size_of_reg; i++){
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	e00f      	b.n	80008c4 <f_master_get_light+0x34>
		_return_val = (_return_val<<8)|(master.holding_register[LIGHT_REGISTER_ADDRESS + i]);
 80008a4:	89fb      	ldrh	r3, [r7, #14]
 80008a6:	021b      	lsls	r3, r3, #8
 80008a8:	b21a      	sxth	r2, r3
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	3304      	adds	r3, #4
 80008ae:	490b      	ldr	r1, [pc, #44]	@ (80008dc <f_master_get_light+0x4c>)
 80008b0:	440b      	add	r3, r1
 80008b2:	f893 320a 	ldrb.w	r3, [r3, #522]	@ 0x20a
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < _size_of_reg; i++){
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	3301      	adds	r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dbeb      	blt.n	80008a4 <f_master_get_light+0x14>
	}
	return _return_val;
 80008cc:	89fb      	ldrh	r3, [r7, #14]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	20000434 	.word	0x20000434

080008e0 <f_master_get_potention>:

uint16_t f_master_get_potention(){
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
	uint16_t _return_val = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	81fb      	strh	r3, [r7, #14]
	uint8_t _size_of_reg = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < _size_of_reg; i++){
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	e00f      	b.n	8000914 <f_master_get_potention+0x34>
		_return_val = (_return_val<<8)|(master.holding_register[POTENTIOMETER_REGISTER_ADDRESS + i]);
 80008f4:	89fb      	ldrh	r3, [r7, #14]
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	b21a      	sxth	r2, r3
 80008fa:	490c      	ldr	r1, [pc, #48]	@ (800092c <f_master_get_potention+0x4c>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	440b      	add	r3, r1
 8000900:	f203 230a 	addw	r3, r3, #522	@ 0x20a
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b21b      	sxth	r3, r3
 8000908:	4313      	orrs	r3, r2
 800090a:	b21b      	sxth	r3, r3
 800090c:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < _size_of_reg; i++){
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	3301      	adds	r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	429a      	cmp	r2, r3
 800091a:	dbeb      	blt.n	80008f4 <f_master_get_potention+0x14>
	}
	return _return_val;
 800091c:	89fb      	ldrh	r3, [r7, #14]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20000434 	.word	0x20000434

08000930 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000936:	463b      	mov	r3, r7
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000942:	4b39      	ldr	r3, [pc, #228]	@ (8000a28 <MX_ADC1_Init+0xf8>)
 8000944:	4a39      	ldr	r2, [pc, #228]	@ (8000a2c <MX_ADC1_Init+0xfc>)
 8000946:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000948:	4b37      	ldr	r3, [pc, #220]	@ (8000a28 <MX_ADC1_Init+0xf8>)
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800094e:	4b36      	ldr	r3, [pc, #216]	@ (8000a28 <MX_ADC1_Init+0xf8>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000954:	4b34      	ldr	r3, [pc, #208]	@ (8000a28 <MX_ADC1_Init+0xf8>)
 8000956:	2201      	movs	r2, #1
 8000958:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800095a:	4b33      	ldr	r3, [pc, #204]	@ (8000a28 <MX_ADC1_Init+0xf8>)
 800095c:	2200      	movs	r2, #0
 800095e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000960:	4b31      	ldr	r3, [pc, #196]	@ (8000a28 <MX_ADC1_Init+0xf8>)
 8000962:	2200      	movs	r2, #0
 8000964:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000968:	4b2f      	ldr	r3, [pc, #188]	@ (8000a28 <MX_ADC1_Init+0xf8>)
 800096a:	2200      	movs	r2, #0
 800096c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800096e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a28 <MX_ADC1_Init+0xf8>)
 8000970:	4a2f      	ldr	r2, [pc, #188]	@ (8000a30 <MX_ADC1_Init+0x100>)
 8000972:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000974:	4b2c      	ldr	r3, [pc, #176]	@ (8000a28 <MX_ADC1_Init+0xf8>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800097a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a28 <MX_ADC1_Init+0xf8>)
 800097c:	2205      	movs	r2, #5
 800097e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000980:	4b29      	ldr	r3, [pc, #164]	@ (8000a28 <MX_ADC1_Init+0xf8>)
 8000982:	2200      	movs	r2, #0
 8000984:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000988:	4b27      	ldr	r3, [pc, #156]	@ (8000a28 <MX_ADC1_Init+0xf8>)
 800098a:	2201      	movs	r2, #1
 800098c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098e:	4826      	ldr	r0, [pc, #152]	@ (8000a28 <MX_ADC1_Init+0xf8>)
 8000990:	f002 f87a 	bl	8002a88 <HAL_ADC_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800099a:	f001 fb3d 	bl	8002018 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800099e:	2308      	movs	r3, #8
 80009a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80009a6:	2301      	movs	r3, #1
 80009a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009aa:	463b      	mov	r3, r7
 80009ac:	4619      	mov	r1, r3
 80009ae:	481e      	ldr	r0, [pc, #120]	@ (8000a28 <MX_ADC1_Init+0xf8>)
 80009b0:	f002 f9dc 	bl	8002d6c <HAL_ADC_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80009ba:	f001 fb2d 	bl	8002018 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80009be:	2302      	movs	r3, #2
 80009c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	4818      	ldr	r0, [pc, #96]	@ (8000a28 <MX_ADC1_Init+0xf8>)
 80009c8:	f002 f9d0 	bl	8002d6c <HAL_ADC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80009d2:	f001 fb21 	bl	8002018 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 80009d6:	2303      	movs	r3, #3
 80009d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	4619      	mov	r1, r3
 80009de:	4812      	ldr	r0, [pc, #72]	@ (8000a28 <MX_ADC1_Init+0xf8>)
 80009e0:	f002 f9c4 	bl	8002d6c <HAL_ADC_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80009ea:	f001 fb15 	bl	8002018 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 80009ee:	2304      	movs	r3, #4
 80009f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f2:	463b      	mov	r3, r7
 80009f4:	4619      	mov	r1, r3
 80009f6:	480c      	ldr	r0, [pc, #48]	@ (8000a28 <MX_ADC1_Init+0xf8>)
 80009f8:	f002 f9b8 	bl	8002d6c <HAL_ADC_ConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000a02:	f001 fb09 	bl	8002018 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 8000a06:	2305      	movs	r3, #5
 8000a08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	@ (8000a28 <MX_ADC1_Init+0xf8>)
 8000a10:	f002 f9ac 	bl	8002d6c <HAL_ADC_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000a1a:	f001 fafd 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000268 	.word	0x20000268
 8000a2c:	40012000 	.word	0x40012000
 8000a30:	0f000001 	.word	0x0f000001

08000a34 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	@ 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a3c      	ldr	r2, [pc, #240]	@ (8000b44 <HAL_ADC_MspInit+0x110>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d171      	bne.n	8000b3a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b48 <HAL_ADC_MspInit+0x114>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5e:	4a3a      	ldr	r2, [pc, #232]	@ (8000b48 <HAL_ADC_MspInit+0x114>)
 8000a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a66:	4b38      	ldr	r3, [pc, #224]	@ (8000b48 <HAL_ADC_MspInit+0x114>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b34      	ldr	r3, [pc, #208]	@ (8000b48 <HAL_ADC_MspInit+0x114>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a33      	ldr	r2, [pc, #204]	@ (8000b48 <HAL_ADC_MspInit+0x114>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b31      	ldr	r3, [pc, #196]	@ (8000b48 <HAL_ADC_MspInit+0x114>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	4b2d      	ldr	r3, [pc, #180]	@ (8000b48 <HAL_ADC_MspInit+0x114>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	4a2c      	ldr	r2, [pc, #176]	@ (8000b48 <HAL_ADC_MspInit+0x114>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b48 <HAL_ADC_MspInit+0x114>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000aaa:	2307      	movs	r3, #7
 8000aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4823      	ldr	r0, [pc, #140]	@ (8000b4c <HAL_ADC_MspInit+0x118>)
 8000abe:	f003 f909 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	481e      	ldr	r0, [pc, #120]	@ (8000b50 <HAL_ADC_MspInit+0x11c>)
 8000ad6:	f003 f8fd 	bl	8003cd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ada:	4b1e      	ldr	r3, [pc, #120]	@ (8000b54 <HAL_ADC_MspInit+0x120>)
 8000adc:	4a1e      	ldr	r2, [pc, #120]	@ (8000b58 <HAL_ADC_MspInit+0x124>)
 8000ade:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <HAL_ADC_MspInit+0x120>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <HAL_ADC_MspInit+0x120>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aec:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <HAL_ADC_MspInit+0x120>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000af2:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <HAL_ADC_MspInit+0x120>)
 8000af4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000af8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000afa:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <HAL_ADC_MspInit+0x120>)
 8000afc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b02:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <HAL_ADC_MspInit+0x120>)
 8000b04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b0a:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <HAL_ADC_MspInit+0x120>)
 8000b0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b10:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <HAL_ADC_MspInit+0x120>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b18:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <HAL_ADC_MspInit+0x120>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b1e:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <HAL_ADC_MspInit+0x120>)
 8000b20:	f002 fcd6 	bl	80034d0 <HAL_DMA_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000b2a:	f001 fa75 	bl	8002018 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a08      	ldr	r2, [pc, #32]	@ (8000b54 <HAL_ADC_MspInit+0x120>)
 8000b32:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b34:	4a07      	ldr	r2, [pc, #28]	@ (8000b54 <HAL_ADC_MspInit+0x120>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	@ 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40012000 	.word	0x40012000
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020800 	.word	0x40020800
 8000b50:	40020400 	.word	0x40020400
 8000b54:	200002b0 	.word	0x200002b0
 8000b58:	40026410 	.word	0x40026410

08000b5c <button_scan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void button_scan() {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
	// Shift button input
	for (int i = 0; i < 16; i++)
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	e012      	b.n	8000b8e <button_scan+0x32>
	{
		button_count2[i] = button_count1[i];
 8000b68:	4a68      	ldr	r2, [pc, #416]	@ (8000d0c <button_scan+0x1b0>)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000b70:	4a67      	ldr	r2, [pc, #412]	@ (8000d10 <button_scan+0x1b4>)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		button_count1[i] = button_count[i];
 8000b78:	4a66      	ldr	r2, [pc, #408]	@ (8000d14 <button_scan+0x1b8>)
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000b80:	4a62      	ldr	r2, [pc, #392]	@ (8000d0c <button_scan+0x1b0>)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 16; i++)
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	2b0f      	cmp	r3, #15
 8000b92:	dde9      	ble.n	8000b68 <button_scan+0xc>
	}

	// Get new key input to button_count
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2108      	movs	r1, #8
 8000b98:	485f      	ldr	r0, [pc, #380]	@ (8000d18 <button_scan+0x1bc>)
 8000b9a:	f003 fa37 	bl	800400c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	485d      	ldr	r0, [pc, #372]	@ (8000d18 <button_scan+0x1bc>)
 8000ba4:	f003 fa32 	bl	800400c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 8000ba8:	230a      	movs	r3, #10
 8000baa:	2202      	movs	r2, #2
 8000bac:	495b      	ldr	r1, [pc, #364]	@ (8000d1c <button_scan+0x1c0>)
 8000bae:	485c      	ldr	r0, [pc, #368]	@ (8000d20 <button_scan+0x1c4>)
 8000bb0:	f004 f86b 	bl	8004c8a <HAL_SPI_Receive>

	int button_index = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
	uint16_t mask = 0x8000;
 8000bb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bbc:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	e03a      	b.n	8000c3a <button_scan+0xde>
		if (i >= 0 && i <= 3) {
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db06      	blt.n	8000bd8 <button_scan+0x7c>
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	2b03      	cmp	r3, #3
 8000bce:	dc03      	bgt.n	8000bd8 <button_scan+0x7c>
			button_index = i + 4;
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	3304      	adds	r3, #4
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	e018      	b.n	8000c0a <button_scan+0xae>
		} else if (i >= 4 && i <= 7) {
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	dd07      	ble.n	8000bee <button_scan+0x92>
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	2b07      	cmp	r3, #7
 8000be2:	dc04      	bgt.n	8000bee <button_scan+0x92>
			button_index = 7 - i;
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	f1c3 0307 	rsb	r3, r3, #7
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	e00d      	b.n	8000c0a <button_scan+0xae>
		} else if (i >= 8 && i <= 11) {
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	2b07      	cmp	r3, #7
 8000bf2:	dd06      	ble.n	8000c02 <button_scan+0xa6>
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	2b0b      	cmp	r3, #11
 8000bf8:	dc03      	bgt.n	8000c02 <button_scan+0xa6>
			button_index = i + 4;
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	e003      	b.n	8000c0a <button_scan+0xae>
		} else {
			button_index = 23 - i;
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	f1c3 0317 	rsb	r3, r3, #23
 8000c08:	613b      	str	r3, [r7, #16]
		}
		if (button_spi_buffer & mask)
 8000c0a:	4b44      	ldr	r3, [pc, #272]	@ (8000d1c <button_scan+0x1c0>)
 8000c0c:	881a      	ldrh	r2, [r3, #0]
 8000c0e:	89fb      	ldrh	r3, [r7, #14]
 8000c10:	4013      	ands	r3, r2
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d005      	beq.n	8000c24 <button_scan+0xc8>
			button_count[button_index] = 0;
 8000c18:	4a3e      	ldr	r2, [pc, #248]	@ (8000d14 <button_scan+0x1b8>)
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c22:	e004      	b.n	8000c2e <button_scan+0xd2>
		else
			button_count[button_index] = 1;
 8000c24:	4a3b      	ldr	r2, [pc, #236]	@ (8000d14 <button_scan+0x1b8>)
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	2101      	movs	r1, #1
 8000c2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 8000c2e:	89fb      	ldrh	r3, [r7, #14]
 8000c30:	085b      	lsrs	r3, r3, #1
 8000c32:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++) {
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	3301      	adds	r3, #1
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	ddc1      	ble.n	8000bc4 <button_scan+0x68>
	}

	for (int i = 0; i < 16; i++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	e059      	b.n	8000cfa <button_scan+0x19e>
	{
		if ((button_count[i] == button_count1[i]) && (button_count1[i] == button_count2[i]))
 8000c46:	4a33      	ldr	r2, [pc, #204]	@ (8000d14 <button_scan+0x1b8>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c4e:	492f      	ldr	r1, [pc, #188]	@ (8000d0c <button_scan+0x1b0>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d14c      	bne.n	8000cf4 <button_scan+0x198>
 8000c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8000d0c <button_scan+0x1b0>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c62:	492b      	ldr	r1, [pc, #172]	@ (8000d10 <button_scan+0x1b4>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d142      	bne.n	8000cf4 <button_scan+0x198>
		{
			if (button_count2[i] != button_count3[i])
 8000c6e:	4a28      	ldr	r2, [pc, #160]	@ (8000d10 <button_scan+0x1b4>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c76:	492b      	ldr	r1, [pc, #172]	@ (8000d24 <button_scan+0x1c8>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d018      	beq.n	8000cb4 <button_scan+0x158>
			{
				button_count3[i] = button_count2[i];
 8000c82:	4a23      	ldr	r2, [pc, #140]	@ (8000d10 <button_scan+0x1b4>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000c8a:	4a26      	ldr	r2, [pc, #152]	@ (8000d24 <button_scan+0x1c8>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				if (button_count3[i] == 1) // PRESSED
 8000c92:	4a24      	ldr	r2, [pc, #144]	@ (8000d24 <button_scan+0x1c8>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d12a      	bne.n	8000cf4 <button_scan+0x198>
				{
					timeOutForPress[i] = TIME_OUT_FOR_LONG_PRESS / TI_BUTTON_SCAN_TIME;
 8000c9e:	4a22      	ldr	r2, [pc, #136]	@ (8000d28 <button_scan+0x1cc>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2119      	movs	r1, #25
 8000ca4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					isPressed[i] = 1;
 8000ca8:	4a20      	ldr	r2, [pc, #128]	@ (8000d2c <button_scan+0x1d0>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2101      	movs	r1, #1
 8000cae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000cb2:	e01f      	b.n	8000cf4 <button_scan+0x198>
				}
			}
			else
			{
				timeOutForPress[i]--;
 8000cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d28 <button_scan+0x1cc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	b299      	uxth	r1, r3
 8000cc0:	4a19      	ldr	r2, [pc, #100]	@ (8000d28 <button_scan+0x1cc>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if (timeOutForPress[i] <= 0)
 8000cc8:	4a17      	ldr	r2, [pc, #92]	@ (8000d28 <button_scan+0x1cc>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d10f      	bne.n	8000cf4 <button_scan+0x198>
				{
					timeOutForPress[i] = TIME_OUT_FOR_LONG_PRESS / TI_BUTTON_SCAN_TIME;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	@ (8000d28 <button_scan+0x1cc>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2119      	movs	r1, #25
 8000cda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (button_count3[i] == 1) // PRESSED
 8000cde:	4a11      	ldr	r2, [pc, #68]	@ (8000d24 <button_scan+0x1c8>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d104      	bne.n	8000cf4 <button_scan+0x198>
					{
						isLongPressed[i] = 1;
 8000cea:	4a11      	ldr	r2, [pc, #68]	@ (8000d30 <button_scan+0x1d4>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2101      	movs	r1, #1
 8000cf0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 16; i++)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	dda2      	ble.n	8000c46 <button_scan+0xea>
					}
				}
			}
		}
	}
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000390 	.word	0x20000390
 8000d10:	20000370 	.word	0x20000370
 8000d14:	200003b0 	.word	0x200003b0
 8000d18:	40020c00 	.word	0x40020c00
 8000d1c:	200003d0 	.word	0x200003d0
 8000d20:	2000065c 	.word	0x2000065c
 8000d24:	20000350 	.word	0x20000350
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	20000310 	.word	0x20000310
 8000d30:	20000330 	.word	0x20000330

08000d34 <isPress>:

uint8_t isPress(uint8_t index)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index > 15) return 0;
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d901      	bls.n	8000d48 <isPress+0x14>
 8000d44:	2300      	movs	r3, #0
 8000d46:	e00d      	b.n	8000d64 <isPress+0x30>
	if (isPressed[index] == 1)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	4a09      	ldr	r2, [pc, #36]	@ (8000d70 <isPress+0x3c>)
 8000d4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d106      	bne.n	8000d62 <isPress+0x2e>
	{
		isPressed[index] = 0;
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	4a06      	ldr	r2, [pc, #24]	@ (8000d70 <isPress+0x3c>)
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		return 1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e000      	b.n	8000d64 <isPress+0x30>
	}
	return 0;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	20000310 	.word	0x20000310

08000d74 <isLongPress>:

uint8_t isLongPress(uint8_t index)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index > 15) return 0;
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d901      	bls.n	8000d88 <isLongPress+0x14>
 8000d84:	2300      	movs	r3, #0
 8000d86:	e00d      	b.n	8000da4 <isLongPress+0x30>
	if (isLongPressed[index] == 1)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	4a09      	ldr	r2, [pc, #36]	@ (8000db0 <isLongPress+0x3c>)
 8000d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d106      	bne.n	8000da2 <isLongPress+0x2e>
	{
		isLongPressed[index] = 0;
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	4a06      	ldr	r2, [pc, #24]	@ (8000db0 <isLongPress+0x3c>)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		return 1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <isLongPress+0x30>
	}
	return 0;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	20000330 	.word	0x20000330

08000db4 <crc16>:
    0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641,
    0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040
};

uint16_t crc16(const uint8_t *data, uint16_t num_bytes)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	807b      	strh	r3, [r7, #2]

    uint16_t crc = 0xFFFF;
 8000dc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dc4:	82fb      	strh	r3, [r7, #22]
    const uint8_t *ptr = data;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	613b      	str	r3, [r7, #16]

    if (ptr != NULL)
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d018      	beq.n	8000e02 <crc16+0x4e>
    {
        for (uint16_t i = 0; i < num_bytes; i++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	81fb      	strh	r3, [r7, #14]
 8000dd4:	e011      	b.n	8000dfa <crc16+0x46>
        {
            crc = (crc >> 8) ^ crc16_lookup_table[(crc ^ (uint16_t)*ptr++) & 0x00FF];
 8000dd6:	8afb      	ldrh	r3, [r7, #22]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	8af9      	ldrh	r1, [r7, #22]
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	1c58      	adds	r0, r3, #1
 8000de2:	6138      	str	r0, [r7, #16]
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	404b      	eors	r3, r1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4909      	ldr	r1, [pc, #36]	@ (8000e10 <crc16+0x5c>)
 8000dec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000df0:	4053      	eors	r3, r2
 8000df2:	82fb      	strh	r3, [r7, #22]
        for (uint16_t i = 0; i < num_bytes; i++)
 8000df4:	89fb      	ldrh	r3, [r7, #14]
 8000df6:	3301      	adds	r3, #1
 8000df8:	81fb      	strh	r3, [r7, #14]
 8000dfa:	89fa      	ldrh	r2, [r7, #14]
 8000dfc:	887b      	ldrh	r3, [r7, #2]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d3e9      	bcc.n	8000dd6 <crc16+0x22>
        }
    }

    return crc;
 8000e02:	8afb      	ldrh	r3, [r7, #22]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	371c      	adds	r7, #28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	20000020 	.word	0x20000020

08000e14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <MX_DMA_Init+0x3c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a0b      	ldr	r2, [pc, #44]	@ (8000e50 <MX_DMA_Init+0x3c>)
 8000e24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <MX_DMA_Init+0x3c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2038      	movs	r0, #56	@ 0x38
 8000e3c:	f002 fb11 	bl	8003462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e40:	2038      	movs	r0, #56	@ 0x38
 8000e42:	f002 fb2a 	bl	800349a <HAL_NVIC_EnableIRQ>

}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800

08000e54 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08e      	sub	sp, #56	@ 0x38
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]
 8000e6a:	615a      	str	r2, [r3, #20]
 8000e6c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000e6e:	463b      	mov	r3, r7
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	615a      	str	r2, [r3, #20]
 8000e7e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000e80:	4b2f      	ldr	r3, [pc, #188]	@ (8000f40 <MX_FSMC_Init+0xec>)
 8000e82:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000e86:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000e88:	4b2d      	ldr	r3, [pc, #180]	@ (8000f40 <MX_FSMC_Init+0xec>)
 8000e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8000f44 <MX_FSMC_Init+0xf0>)
 8000e8c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f40 <MX_FSMC_Init+0xec>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000e94:	4b2a      	ldr	r3, [pc, #168]	@ (8000f40 <MX_FSMC_Init+0xec>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000e9a:	4b29      	ldr	r3, [pc, #164]	@ (8000f40 <MX_FSMC_Init+0xec>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ea0:	4b27      	ldr	r3, [pc, #156]	@ (8000f40 <MX_FSMC_Init+0xec>)
 8000ea2:	2210      	movs	r2, #16
 8000ea4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000ea6:	4b26      	ldr	r3, [pc, #152]	@ (8000f40 <MX_FSMC_Init+0xec>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000eac:	4b24      	ldr	r3, [pc, #144]	@ (8000f40 <MX_FSMC_Init+0xec>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000eb2:	4b23      	ldr	r3, [pc, #140]	@ (8000f40 <MX_FSMC_Init+0xec>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000eb8:	4b21      	ldr	r3, [pc, #132]	@ (8000f40 <MX_FSMC_Init+0xec>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000ebe:	4b20      	ldr	r3, [pc, #128]	@ (8000f40 <MX_FSMC_Init+0xec>)
 8000ec0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ec4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <MX_FSMC_Init+0xec>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <MX_FSMC_Init+0xec>)
 8000ece:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ed2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <MX_FSMC_Init+0xec>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000eda:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <MX_FSMC_Init+0xec>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000ee0:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <MX_FSMC_Init+0xec>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000eea:	230f      	movs	r3, #15
 8000eec:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000eee:	233c      	movs	r3, #60	@ 0x3c
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000ef6:	2310      	movs	r3, #16
 8000ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000efa:	2311      	movs	r3, #17
 8000efc:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000efe:	2300      	movs	r3, #0
 8000f00:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000f02:	2308      	movs	r3, #8
 8000f04:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000f06:	230f      	movs	r3, #15
 8000f08:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000f0a:	2309      	movs	r3, #9
 8000f0c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000f12:	2310      	movs	r3, #16
 8000f14:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000f16:	2311      	movs	r3, #17
 8000f18:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000f1e:	463a      	mov	r2, r7
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	4619      	mov	r1, r3
 8000f26:	4806      	ldr	r0, [pc, #24]	@ (8000f40 <MX_FSMC_Init+0xec>)
 8000f28:	f004 fab4 	bl	8005494 <HAL_SRAM_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000f32:	f001 f871 	bl	8002018 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000f36:	bf00      	nop
 8000f38:	3738      	adds	r7, #56	@ 0x38
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200003d4 	.word	0x200003d4
 8000f44:	a0000104 	.word	0xa0000104

08000f48 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <HAL_FSMC_MspInit+0x88>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d131      	bne.n	8000fc8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <HAL_FSMC_MspInit+0x88>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <HAL_FSMC_MspInit+0x8c>)
 8000f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f72:	4a18      	ldr	r2, [pc, #96]	@ (8000fd4 <HAL_FSMC_MspInit+0x8c>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6393      	str	r3, [r2, #56]	@ 0x38
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <HAL_FSMC_MspInit+0x8c>)
 8000f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000f86:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000f8a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000f98:	230c      	movs	r3, #12
 8000f9a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480d      	ldr	r0, [pc, #52]	@ (8000fd8 <HAL_FSMC_MspInit+0x90>)
 8000fa2:	f002 fe97 	bl	8003cd4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000fa6:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000faa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000fb8:	230c      	movs	r3, #12
 8000fba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4806      	ldr	r0, [pc, #24]	@ (8000fdc <HAL_FSMC_MspInit+0x94>)
 8000fc2:	f002 fe87 	bl	8003cd4 <HAL_GPIO_Init>
 8000fc6:	e000      	b.n	8000fca <HAL_FSMC_MspInit+0x82>
    return;
 8000fc8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000424 	.word	0x20000424
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40020c00 	.word	0x40020c00

08000fe0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000fe8:	f7ff ffae 	bl	8000f48 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	@ 0x30
 8000ff8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	4b63      	ldr	r3, [pc, #396]	@ (800119c <MX_GPIO_Init+0x1a8>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a62      	ldr	r2, [pc, #392]	@ (800119c <MX_GPIO_Init+0x1a8>)
 8001014:	f043 0310 	orr.w	r3, r3, #16
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b60      	ldr	r3, [pc, #384]	@ (800119c <MX_GPIO_Init+0x1a8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	61bb      	str	r3, [r7, #24]
 8001024:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	4b5c      	ldr	r3, [pc, #368]	@ (800119c <MX_GPIO_Init+0x1a8>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a5b      	ldr	r2, [pc, #364]	@ (800119c <MX_GPIO_Init+0x1a8>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b59      	ldr	r3, [pc, #356]	@ (800119c <MX_GPIO_Init+0x1a8>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b55      	ldr	r3, [pc, #340]	@ (800119c <MX_GPIO_Init+0x1a8>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a54      	ldr	r2, [pc, #336]	@ (800119c <MX_GPIO_Init+0x1a8>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b52      	ldr	r3, [pc, #328]	@ (800119c <MX_GPIO_Init+0x1a8>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b4e      	ldr	r3, [pc, #312]	@ (800119c <MX_GPIO_Init+0x1a8>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a4d      	ldr	r2, [pc, #308]	@ (800119c <MX_GPIO_Init+0x1a8>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b4b      	ldr	r3, [pc, #300]	@ (800119c <MX_GPIO_Init+0x1a8>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	4b47      	ldr	r3, [pc, #284]	@ (800119c <MX_GPIO_Init+0x1a8>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a46      	ldr	r2, [pc, #280]	@ (800119c <MX_GPIO_Init+0x1a8>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b44      	ldr	r3, [pc, #272]	@ (800119c <MX_GPIO_Init+0x1a8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	4b40      	ldr	r3, [pc, #256]	@ (800119c <MX_GPIO_Init+0x1a8>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a3f      	ldr	r2, [pc, #252]	@ (800119c <MX_GPIO_Init+0x1a8>)
 80010a0:	f043 0308 	orr.w	r3, r3, #8
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b3d      	ldr	r3, [pc, #244]	@ (800119c <MX_GPIO_Init+0x1a8>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	4b39      	ldr	r3, [pc, #228]	@ (800119c <MX_GPIO_Init+0x1a8>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a38      	ldr	r2, [pc, #224]	@ (800119c <MX_GPIO_Init+0x1a8>)
 80010bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b36      	ldr	r3, [pc, #216]	@ (800119c <MX_GPIO_Init+0x1a8>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2110      	movs	r1, #16
 80010d2:	4833      	ldr	r0, [pc, #204]	@ (80011a0 <MX_GPIO_Init+0x1ac>)
 80010d4:	f002 ff9a 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010de:	4831      	ldr	r0, [pc, #196]	@ (80011a4 <MX_GPIO_Init+0x1b0>)
 80010e0:	f002 ff94 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2140      	movs	r1, #64	@ 0x40
 80010e8:	482f      	ldr	r0, [pc, #188]	@ (80011a8 <MX_GPIO_Init+0x1b4>)
 80010ea:	f002 ff8f 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FSMC_BLK_Pin|EN_RS485_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 80010f4:	482d      	ldr	r0, [pc, #180]	@ (80011ac <MX_GPIO_Init+0x1b8>)
 80010f6:	f002 ff89 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2108      	movs	r1, #8
 80010fe:	482c      	ldr	r0, [pc, #176]	@ (80011b0 <MX_GPIO_Init+0x1bc>)
 8001100:	f002 ff84 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001104:	2310      	movs	r3, #16
 8001106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4821      	ldr	r0, [pc, #132]	@ (80011a0 <MX_GPIO_Init+0x1ac>)
 800111c:	f002 fdda 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001120:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001126:	2301      	movs	r3, #1
 8001128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4619      	mov	r1, r3
 8001138:	481a      	ldr	r0, [pc, #104]	@ (80011a4 <MX_GPIO_Init+0x1b0>)
 800113a:	f002 fdcb 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800113e:	2340      	movs	r3, #64	@ 0x40
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	4814      	ldr	r0, [pc, #80]	@ (80011a8 <MX_GPIO_Init+0x1b4>)
 8001156:	f002 fdbd 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin|EN_RS485_Pin;
 800115a:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	480e      	ldr	r0, [pc, #56]	@ (80011ac <MX_GPIO_Init+0x1b8>)
 8001174:	f002 fdae 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001178:	2308      	movs	r3, #8
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	4808      	ldr	r0, [pc, #32]	@ (80011b0 <MX_GPIO_Init+0x1bc>)
 8001190:	f002 fda0 	bl	8003cd4 <HAL_GPIO_Init>

}
 8001194:	bf00      	nop
 8001196:	3730      	adds	r7, #48	@ 0x30
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40023800 	.word	0x40023800
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40021800 	.word	0x40021800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020c00 	.word	0x40020c00

080011b4 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 80011be:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <LCD_WR_REG+0x1c>)
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	8013      	strh	r3, [r2, #0]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	600ffffe 	.word	0x600ffffe

080011d4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 80011de:	4a04      	ldr	r2, [pc, #16]	@ (80011f0 <LCD_WR_DATA+0x1c>)
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	8053      	strh	r3, [r2, #2]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	600ffffe 	.word	0x600ffffe

080011f4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <LCD_RD_DATA+0x20>)
 80011fc:	885b      	ldrh	r3, [r3, #2]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	b29b      	uxth	r3, r3
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	600ffffe 	.word	0x600ffffe

08001218 <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4604      	mov	r4, r0
 8001220:	4608      	mov	r0, r1
 8001222:	4611      	mov	r1, r2
 8001224:	461a      	mov	r2, r3
 8001226:	4623      	mov	r3, r4
 8001228:	80fb      	strh	r3, [r7, #6]
 800122a:	4603      	mov	r3, r0
 800122c:	80bb      	strh	r3, [r7, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	807b      	strh	r3, [r7, #2]
 8001232:	4613      	mov	r3, r2
 8001234:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 8001236:	202a      	movs	r0, #42	@ 0x2a
 8001238:	f7ff ffbc 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	b29b      	uxth	r3, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ffc6 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	b29b      	uxth	r3, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ffc0 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 8001254:	887b      	ldrh	r3, [r7, #2]
 8001256:	0a1b      	lsrs	r3, r3, #8
 8001258:	b29b      	uxth	r3, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ffba 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 8001260:	887b      	ldrh	r3, [r7, #2]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	b29b      	uxth	r3, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ffb4 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 800126c:	202b      	movs	r0, #43	@ 0x2b
 800126e:	f7ff ffa1 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 8001272:	88bb      	ldrh	r3, [r7, #4]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	b29b      	uxth	r3, r3
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ffab 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 800127e:	88bb      	ldrh	r3, [r7, #4]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	b29b      	uxth	r3, r3
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ffa5 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 800128a:	883b      	ldrh	r3, [r7, #0]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	b29b      	uxth	r3, r3
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff9f 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 8001296:	883b      	ldrh	r3, [r7, #0]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	b29b      	uxth	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff99 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 80012a2:	202c      	movs	r0, #44	@ 0x2c
 80012a4:	f7ff ff86 	bl	80011b4 <LCD_WR_REG>
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd90      	pop	{r4, r7, pc}

080012b0 <lcd_clear>:
/**
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <lcd_clear+0x60>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	3b01      	subs	r3, #1
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <lcd_clear+0x60>)
 80012c4:	885b      	ldrh	r3, [r3, #2]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	2100      	movs	r1, #0
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff ffa3 	bl	8001218 <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	81fb      	strh	r3, [r7, #14]
 80012d6:	e011      	b.n	80012fc <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 80012d8:	2300      	movs	r3, #0
 80012da:	81bb      	strh	r3, [r7, #12]
 80012dc:	e006      	b.n	80012ec <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff77 	bl	80011d4 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 80012e6:	89bb      	ldrh	r3, [r7, #12]
 80012e8:	3301      	adds	r3, #1
 80012ea:	81bb      	strh	r3, [r7, #12]
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <lcd_clear+0x60>)
 80012ee:	885b      	ldrh	r3, [r3, #2]
 80012f0:	89ba      	ldrh	r2, [r7, #12]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d3f3      	bcc.n	80012de <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 80012f6:	89fb      	ldrh	r3, [r7, #14]
 80012f8:	3301      	adds	r3, #1
 80012fa:	81fb      	strh	r3, [r7, #14]
 80012fc:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <lcd_clear+0x60>)
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	89fa      	ldrh	r2, [r7, #14]
 8001302:	429a      	cmp	r2, r3
 8001304:	d3e8      	bcc.n	80012d8 <lcd_clear+0x28>
		}
	}
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	2000042c 	.word	0x2000042c

08001314 <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
 800131e:	460b      	mov	r3, r1
 8001320:	80bb      	strh	r3, [r7, #4]
 8001322:	4613      	mov	r3, r2
 8001324:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 8001326:	88bb      	ldrh	r3, [r7, #4]
 8001328:	88fa      	ldrh	r2, [r7, #6]
 800132a:	88b9      	ldrh	r1, [r7, #4]
 800132c:	88f8      	ldrh	r0, [r7, #6]
 800132e:	f7ff ff73 	bl	8001218 <lcd_set_address>
	LCD_WR_DATA(color);
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff4d 	bl	80011d4 <LCD_WR_DATA>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <lcd_show_char>:
	lcd_draw_line(x1, y2, x2, y2, color);
	lcd_draw_line(x2, y1, x2, y2, color);
}

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	4604      	mov	r4, r0
 800134c:	4608      	mov	r0, r1
 800134e:	4611      	mov	r1, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4623      	mov	r3, r4
 8001354:	80fb      	strh	r3, [r7, #6]
 8001356:	4603      	mov	r3, r0
 8001358:	80bb      	strh	r3, [r7, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	70fb      	strb	r3, [r7, #3]
 800135e:	4613      	mov	r3, r2
 8001360:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 800136a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800136e:	085b      	lsrs	r3, r3, #1
 8001370:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	08db      	lsrs	r3, r3, #3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	bf14      	ite	ne
 8001386:	2301      	movne	r3, #1
 8001388:	2300      	moveq	r3, #0
 800138a:	b2db      	uxtb	r3, r3
 800138c:	4413      	add	r3, r2
 800138e:	b29a      	uxth	r2, r3
 8001390:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001394:	b29b      	uxth	r3, r3
 8001396:	fb12 f303 	smulbb	r3, r2, r3
 800139a:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	3b20      	subs	r3, #32
 80013a0:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	4413      	add	r3, r2
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	3b01      	subs	r3, #1
 80013ae:	b29c      	uxth	r4, r3
 80013b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	88bb      	ldrh	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	3b01      	subs	r3, #1
 80013be:	b29b      	uxth	r3, r3
 80013c0:	88b9      	ldrh	r1, [r7, #4]
 80013c2:	88f8      	ldrh	r0, [r7, #6]
 80013c4:	4622      	mov	r2, r4
 80013c6:	f7ff ff27 	bl	8001218 <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 80013ca:	2300      	movs	r3, #0
 80013cc:	827b      	strh	r3, [r7, #18]
 80013ce:	e07a      	b.n	80014c6 <lcd_show_char+0x182>
		if (sizey == 12)
 80013d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013d4:	2b0c      	cmp	r3, #12
 80013d6:	d028      	beq.n	800142a <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 80013d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013dc:	2b10      	cmp	r3, #16
 80013de:	d108      	bne.n	80013f2 <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 80013e0:	78fa      	ldrb	r2, [r7, #3]
 80013e2:	8a7b      	ldrh	r3, [r7, #18]
 80013e4:	493c      	ldr	r1, [pc, #240]	@ (80014d8 <lcd_show_char+0x194>)
 80013e6:	0112      	lsls	r2, r2, #4
 80013e8:	440a      	add	r2, r1
 80013ea:	4413      	add	r3, r2
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	75fb      	strb	r3, [r7, #23]
 80013f0:	e01b      	b.n	800142a <lcd_show_char+0xe6>
		else if (sizey == 24)
 80013f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013f6:	2b18      	cmp	r3, #24
 80013f8:	d10b      	bne.n	8001412 <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 80013fa:	78fa      	ldrb	r2, [r7, #3]
 80013fc:	8a79      	ldrh	r1, [r7, #18]
 80013fe:	4837      	ldr	r0, [pc, #220]	@ (80014dc <lcd_show_char+0x198>)
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	4403      	add	r3, r0
 800140a:	440b      	add	r3, r1
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	75fb      	strb	r3, [r7, #23]
 8001410:	e00b      	b.n	800142a <lcd_show_char+0xe6>
		else if (sizey == 32)
 8001412:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001416:	2b20      	cmp	r3, #32
 8001418:	d15a      	bne.n	80014d0 <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 800141a:	78fa      	ldrb	r2, [r7, #3]
 800141c:	8a7b      	ldrh	r3, [r7, #18]
 800141e:	4930      	ldr	r1, [pc, #192]	@ (80014e0 <lcd_show_char+0x19c>)
 8001420:	0192      	lsls	r2, r2, #6
 8001422:	440a      	add	r2, r1
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 800142a:	2300      	movs	r3, #0
 800142c:	75bb      	strb	r3, [r7, #22]
 800142e:	e044      	b.n	80014ba <lcd_show_char+0x176>
			if (!mode) {
 8001430:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001434:	2b00      	cmp	r3, #0
 8001436:	d120      	bne.n	800147a <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 8001438:	7dfa      	ldrb	r2, [r7, #23]
 800143a:	7dbb      	ldrb	r3, [r7, #22]
 800143c:	fa42 f303 	asr.w	r3, r2, r3
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b00      	cmp	r3, #0
 8001446:	d004      	beq.n	8001452 <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 8001448:	883b      	ldrh	r3, [r7, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fec2 	bl	80011d4 <LCD_WR_DATA>
 8001450:	e003      	b.n	800145a <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 8001452:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff febd 	bl	80011d4 <LCD_WR_DATA>
				m++;
 800145a:	7d7b      	ldrb	r3, [r7, #21]
 800145c:	3301      	adds	r3, #1
 800145e:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 8001460:	7d7b      	ldrb	r3, [r7, #21]
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	fbb3 f1f2 	udiv	r1, r3, r2
 8001468:	fb01 f202 	mul.w	r2, r1, r2
 800146c:	1a9b      	subs	r3, r3, r2
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d11f      	bne.n	80014b4 <lcd_show_char+0x170>
					m = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	757b      	strb	r3, [r7, #21]
					break;
 8001478:	e022      	b.n	80014c0 <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 800147a:	7dfa      	ldrb	r2, [r7, #23]
 800147c:	7dbb      	ldrb	r3, [r7, #22]
 800147e:	fa42 f303 	asr.w	r3, r2, r3
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 800148a:	883a      	ldrh	r2, [r7, #0]
 800148c:	88b9      	ldrh	r1, [r7, #4]
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff3f 	bl	8001314 <lcd_draw_point>
				x++;
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	3301      	adds	r3, #1
 800149a:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 800149c:	88fa      	ldrh	r2, [r7, #6]
 800149e:	8a3b      	ldrh	r3, [r7, #16]
 80014a0:	1ad2      	subs	r2, r2, r3
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d105      	bne.n	80014b4 <lcd_show_char+0x170>
					x = x0;
 80014a8:	8a3b      	ldrh	r3, [r7, #16]
 80014aa:	80fb      	strh	r3, [r7, #6]
					y++;
 80014ac:	88bb      	ldrh	r3, [r7, #4]
 80014ae:	3301      	adds	r3, #1
 80014b0:	80bb      	strh	r3, [r7, #4]
					break;
 80014b2:	e005      	b.n	80014c0 <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 80014b4:	7dbb      	ldrb	r3, [r7, #22]
 80014b6:	3301      	adds	r3, #1
 80014b8:	75bb      	strb	r3, [r7, #22]
 80014ba:	7dbb      	ldrb	r3, [r7, #22]
 80014bc:	2b07      	cmp	r3, #7
 80014be:	d9b7      	bls.n	8001430 <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 80014c0:	8a7b      	ldrh	r3, [r7, #18]
 80014c2:	3301      	adds	r3, #1
 80014c4:	827b      	strh	r3, [r7, #18]
 80014c6:	8a7a      	ldrh	r2, [r7, #18]
 80014c8:	89bb      	ldrh	r3, [r7, #12]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d380      	bcc.n	80013d0 <lcd_show_char+0x8c>
 80014ce:	e000      	b.n	80014d2 <lcd_show_char+0x18e>
			return;
 80014d0:	bf00      	nop
				}
			}
		}
	}
}
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}
 80014d8:	08006e94 	.word	0x08006e94
 80014dc:	08007484 	.word	0x08007484
 80014e0:	08008654 	.word	0x08008654

080014e4 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n) {
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	460a      	mov	r2, r1
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	4613      	mov	r3, r2
 80014f2:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 80014f4:	2301      	movs	r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
	while (n--)
 80014f8:	e004      	b.n	8001504 <mypow+0x20>
		result *= m;
 80014fa:	79fa      	ldrb	r2, [r7, #7]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	fb02 f303 	mul.w	r3, r2, r3
 8001502:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001504:	79bb      	ldrb	r3, [r7, #6]
 8001506:	1e5a      	subs	r2, r3, #1
 8001508:	71ba      	strb	r2, [r7, #6]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f5      	bne.n	80014fa <mypow+0x16>
	return result;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <lcd_show_int_num>:

void lcd_show_int_num(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b089      	sub	sp, #36	@ 0x24
 8001520:	af04      	add	r7, sp, #16
 8001522:	4604      	mov	r4, r0
 8001524:	4608      	mov	r0, r1
 8001526:	4611      	mov	r1, r2
 8001528:	461a      	mov	r2, r3
 800152a:	4623      	mov	r3, r4
 800152c:	80fb      	strh	r3, [r7, #6]
 800152e:	4603      	mov	r3, r0
 8001530:	80bb      	strh	r3, [r7, #4]
 8001532:	460b      	mov	r3, r1
 8001534:	807b      	strh	r3, [r7, #2]
 8001536:	4613      	mov	r3, r2
 8001538:	707b      	strb	r3, [r7, #1]
	uint8_t t, temp;
	uint8_t enshow = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex = sizey / 2;
 800153e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001542:	085b      	lsrs	r3, r3, #1
 8001544:	737b      	strb	r3, [r7, #13]
	for (t = 0; t < len; t++) {
 8001546:	2300      	movs	r3, #0
 8001548:	73fb      	strb	r3, [r7, #15]
 800154a:	e059      	b.n	8001600 <lcd_show_int_num+0xe4>
		temp = (num / mypow(10, len - t - 1)) % 10;
 800154c:	887c      	ldrh	r4, [r7, #2]
 800154e:	787a      	ldrb	r2, [r7, #1]
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	b2db      	uxtb	r3, r3
 8001556:	3b01      	subs	r3, #1
 8001558:	b2db      	uxtb	r3, r3
 800155a:	4619      	mov	r1, r3
 800155c:	200a      	movs	r0, #10
 800155e:	f7ff ffc1 	bl	80014e4 <mypow>
 8001562:	4603      	mov	r3, r0
 8001564:	fbb4 f1f3 	udiv	r1, r4, r3
 8001568:	4b2a      	ldr	r3, [pc, #168]	@ (8001614 <lcd_show_int_num+0xf8>)
 800156a:	fba3 2301 	umull	r2, r3, r3, r1
 800156e:	08da      	lsrs	r2, r3, #3
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	1aca      	subs	r2, r1, r3
 800157a:	4613      	mov	r3, r2
 800157c:	733b      	strb	r3, [r7, #12]
		if (enshow == 0 && t < (len - 1)) {
 800157e:	7bbb      	ldrb	r3, [r7, #14]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d121      	bne.n	80015c8 <lcd_show_int_num+0xac>
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	787b      	ldrb	r3, [r7, #1]
 8001588:	3b01      	subs	r3, #1
 800158a:	429a      	cmp	r2, r3
 800158c:	da1c      	bge.n	80015c8 <lcd_show_int_num+0xac>
			if (temp == 0) {
 800158e:	7b3b      	ldrb	r3, [r7, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d117      	bne.n	80015c4 <lcd_show_int_num+0xa8>
				lcd_show_char(x + t * sizex, y, ' ', fc, bc, sizey, 0);
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	b29a      	uxth	r2, r3
 8001598:	7b7b      	ldrb	r3, [r7, #13]
 800159a:	b29b      	uxth	r3, r3
 800159c:	fb12 f303 	smulbb	r3, r2, r3
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	4413      	add	r3, r2
 80015a6:	b298      	uxth	r0, r3
 80015a8:	8c3a      	ldrh	r2, [r7, #32]
 80015aa:	88b9      	ldrh	r1, [r7, #4]
 80015ac:	2300      	movs	r3, #0
 80015ae:	9302      	str	r3, [sp, #8]
 80015b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4613      	mov	r3, r2
 80015bc:	2220      	movs	r2, #32
 80015be:	f7ff fec1 	bl	8001344 <lcd_show_char>
				continue;
 80015c2:	e01a      	b.n	80015fa <lcd_show_int_num+0xde>
			} else
				enshow = 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	73bb      	strb	r3, [r7, #14]

		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	7b7b      	ldrb	r3, [r7, #13]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	fb12 f303 	smulbb	r3, r2, r3
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	4413      	add	r3, r2
 80015da:	b298      	uxth	r0, r3
 80015dc:	7b3b      	ldrb	r3, [r7, #12]
 80015de:	3330      	adds	r3, #48	@ 0x30
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	8c3c      	ldrh	r4, [r7, #32]
 80015e4:	88b9      	ldrh	r1, [r7, #4]
 80015e6:	2300      	movs	r3, #0
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	4623      	mov	r3, r4
 80015f6:	f7ff fea5 	bl	8001344 <lcd_show_char>
	for (t = 0; t < len; t++) {
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	3301      	adds	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	787b      	ldrb	r3, [r7, #1]
 8001604:	429a      	cmp	r2, r3
 8001606:	d3a1      	bcc.n	800154c <lcd_show_int_num+0x30>
	}
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	bd90      	pop	{r4, r7, pc}
 8001612:	bf00      	nop
 8001614:	cccccccd 	.word	0xcccccccd

08001618 <lcd_show_float_num>:

void lcd_show_float_num(uint16_t x, uint16_t y, float num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b08b      	sub	sp, #44	@ 0x2c
 800161c:	af04      	add	r7, sp, #16
 800161e:	4604      	mov	r4, r0
 8001620:	4608      	mov	r0, r1
 8001622:	ed87 0a02 	vstr	s0, [r7, #8]
 8001626:	4611      	mov	r1, r2
 8001628:	461a      	mov	r2, r3
 800162a:	4623      	mov	r3, r4
 800162c:	81fb      	strh	r3, [r7, #14]
 800162e:	4603      	mov	r3, r0
 8001630:	81bb      	strh	r3, [r7, #12]
 8001632:	460b      	mov	r3, r1
 8001634:	71fb      	strb	r3, [r7, #7]
 8001636:	4613      	mov	r3, r2
 8001638:	80bb      	strh	r3, [r7, #4]
	uint8_t t, temp, sizex;
	uint16_t num1;
	sizex = sizey / 2;
 800163a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800163e:	085b      	lsrs	r3, r3, #1
 8001640:	75bb      	strb	r3, [r7, #22]
	num1 = num * 100;
 8001642:	edd7 7a02 	vldr	s15, [r7, #8]
 8001646:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001720 <lcd_show_float_num+0x108>
 800164a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800164e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001652:	ee17 3a90 	vmov	r3, s15
 8001656:	82bb      	strh	r3, [r7, #20]
	for (t = 0; t < len; t++) {
 8001658:	2300      	movs	r3, #0
 800165a:	75fb      	strb	r3, [r7, #23]
 800165c:	e057      	b.n	800170e <lcd_show_float_num+0xf6>
		temp = (num1 / mypow(10, len - t - 1)) % 10;
 800165e:	8abc      	ldrh	r4, [r7, #20]
 8001660:	79fa      	ldrb	r2, [r7, #7]
 8001662:	7dfb      	ldrb	r3, [r7, #23]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	3b01      	subs	r3, #1
 800166a:	b2db      	uxtb	r3, r3
 800166c:	4619      	mov	r1, r3
 800166e:	200a      	movs	r0, #10
 8001670:	f7ff ff38 	bl	80014e4 <mypow>
 8001674:	4603      	mov	r3, r0
 8001676:	fbb4 f1f3 	udiv	r1, r4, r3
 800167a:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <lcd_show_float_num+0x10c>)
 800167c:	fba3 2301 	umull	r2, r3, r3, r1
 8001680:	08da      	lsrs	r2, r3, #3
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	1aca      	subs	r2, r1, r3
 800168c:	4613      	mov	r3, r2
 800168e:	74fb      	strb	r3, [r7, #19]
		if (t == (len - 2)) {
 8001690:	7dfa      	ldrb	r2, [r7, #23]
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	3b02      	subs	r3, #2
 8001696:	429a      	cmp	r2, r3
 8001698:	d11d      	bne.n	80016d6 <lcd_show_float_num+0xbe>
			lcd_show_char(x + (len - 2) * sizex, y, '.', fc, bc, sizey, 0);
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	3b02      	subs	r3, #2
 800169e:	b29a      	uxth	r2, r3
 80016a0:	7dbb      	ldrb	r3, [r7, #22]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	fb12 f303 	smulbb	r3, r2, r3
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	89fb      	ldrh	r3, [r7, #14]
 80016ac:	4413      	add	r3, r2
 80016ae:	b298      	uxth	r0, r3
 80016b0:	88ba      	ldrh	r2, [r7, #4]
 80016b2:	89b9      	ldrh	r1, [r7, #12]
 80016b4:	2300      	movs	r3, #0
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	4613      	mov	r3, r2
 80016c4:	222e      	movs	r2, #46	@ 0x2e
 80016c6:	f7ff fe3d 	bl	8001344 <lcd_show_char>
			t++;
 80016ca:	7dfb      	ldrb	r3, [r7, #23]
 80016cc:	3301      	adds	r3, #1
 80016ce:	75fb      	strb	r3, [r7, #23]
			len += 1;
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	3301      	adds	r3, #1
 80016d4:	71fb      	strb	r3, [r7, #7]
		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 80016d6:	7dfb      	ldrb	r3, [r7, #23]
 80016d8:	b29a      	uxth	r2, r3
 80016da:	7dbb      	ldrb	r3, [r7, #22]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	fb12 f303 	smulbb	r3, r2, r3
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	89fb      	ldrh	r3, [r7, #14]
 80016e6:	4413      	add	r3, r2
 80016e8:	b298      	uxth	r0, r3
 80016ea:	7cfb      	ldrb	r3, [r7, #19]
 80016ec:	3330      	adds	r3, #48	@ 0x30
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	88bc      	ldrh	r4, [r7, #4]
 80016f2:	89b9      	ldrh	r1, [r7, #12]
 80016f4:	2300      	movs	r3, #0
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016fc:	9301      	str	r3, [sp, #4]
 80016fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	4623      	mov	r3, r4
 8001704:	f7ff fe1e 	bl	8001344 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	3301      	adds	r3, #1
 800170c:	75fb      	strb	r3, [r7, #23]
 800170e:	7dfa      	ldrb	r2, [r7, #23]
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	429a      	cmp	r2, r3
 8001714:	d3a3      	bcc.n	800165e <lcd_show_float_num+0x46>
	}
}
 8001716:	bf00      	nop
 8001718:	bf00      	nop
 800171a:	371c      	adds	r7, #28
 800171c:	46bd      	mov	sp, r7
 800171e:	bd90      	pop	{r4, r7, pc}
 8001720:	42c80000 	.word	0x42c80000
 8001724:	cccccccd 	.word	0xcccccccd

08001728 <lcd_set_direction>:
			k++;
		}
	}
}

void lcd_set_direction(uint8_t dir) {
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d007      	beq.n	8001752 <lcd_set_direction+0x2a>
		lcddev.width = 320;
 8001742:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <lcd_set_direction+0x44>)
 8001744:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001748:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <lcd_set_direction+0x44>)
 800174c:	22f0      	movs	r2, #240	@ 0xf0
 800174e:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8001750:	e006      	b.n	8001760 <lcd_set_direction+0x38>
		lcddev.width = 240;
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <lcd_set_direction+0x44>)
 8001754:	22f0      	movs	r2, #240	@ 0xf0
 8001756:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001758:	4b04      	ldr	r3, [pc, #16]	@ (800176c <lcd_set_direction+0x44>)
 800175a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800175e:	805a      	strh	r2, [r3, #2]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	2000042c 	.word	0x2000042c

08001770 <lcd_init>:

void lcd_init(void) {
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800177a:	48aa      	ldr	r0, [pc, #680]	@ (8001a24 <lcd_init+0x2b4>)
 800177c:	f002 fc46 	bl	800400c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001780:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001784:	f001 f95c 	bl	8002a40 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800178e:	48a5      	ldr	r0, [pc, #660]	@ (8001a24 <lcd_init+0x2b4>)
 8001790:	f002 fc3c 	bl	800400c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001794:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001798:	f001 f952 	bl	8002a40 <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff ffc3 	bl	8001728 <lcd_set_direction>
	LCD_WR_REG(0XD3);
 80017a2:	20d3      	movs	r0, #211	@ 0xd3
 80017a4:	f7ff fd06 	bl	80011b4 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 80017a8:	f7ff fd24 	bl	80011f4 <LCD_RD_DATA>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b9d      	ldr	r3, [pc, #628]	@ (8001a28 <lcd_init+0x2b8>)
 80017b2:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 80017b4:	f7ff fd1e 	bl	80011f4 <LCD_RD_DATA>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b9a      	ldr	r3, [pc, #616]	@ (8001a28 <lcd_init+0x2b8>)
 80017be:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 80017c0:	f7ff fd18 	bl	80011f4 <LCD_RD_DATA>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b97      	ldr	r3, [pc, #604]	@ (8001a28 <lcd_init+0x2b8>)
 80017ca:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 80017cc:	4b96      	ldr	r3, [pc, #600]	@ (8001a28 <lcd_init+0x2b8>)
 80017ce:	889b      	ldrh	r3, [r3, #4]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	4b94      	ldr	r3, [pc, #592]	@ (8001a28 <lcd_init+0x2b8>)
 80017d6:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 80017d8:	f7ff fd0c 	bl	80011f4 <LCD_RD_DATA>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	4b91      	ldr	r3, [pc, #580]	@ (8001a28 <lcd_init+0x2b8>)
 80017e2:	889b      	ldrh	r3, [r3, #4]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	4b8f      	ldr	r3, [pc, #572]	@ (8001a28 <lcd_init+0x2b8>)
 80017ea:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80017ec:	20cf      	movs	r0, #207	@ 0xcf
 80017ee:	f7ff fce1 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7ff fcee 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80017f8:	20c1      	movs	r0, #193	@ 0xc1
 80017fa:	f7ff fceb 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80017fe:	2030      	movs	r0, #48	@ 0x30
 8001800:	f7ff fce8 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001804:	20ed      	movs	r0, #237	@ 0xed
 8001806:	f7ff fcd5 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800180a:	2064      	movs	r0, #100	@ 0x64
 800180c:	f7ff fce2 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001810:	2003      	movs	r0, #3
 8001812:	f7ff fcdf 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001816:	2012      	movs	r0, #18
 8001818:	f7ff fcdc 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 800181c:	2081      	movs	r0, #129	@ 0x81
 800181e:	f7ff fcd9 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001822:	20e8      	movs	r0, #232	@ 0xe8
 8001824:	f7ff fcc6 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001828:	2085      	movs	r0, #133	@ 0x85
 800182a:	f7ff fcd3 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800182e:	2010      	movs	r0, #16
 8001830:	f7ff fcd0 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001834:	207a      	movs	r0, #122	@ 0x7a
 8001836:	f7ff fccd 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800183a:	20cb      	movs	r0, #203	@ 0xcb
 800183c:	f7ff fcba 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001840:	2039      	movs	r0, #57	@ 0x39
 8001842:	f7ff fcc7 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001846:	202c      	movs	r0, #44	@ 0x2c
 8001848:	f7ff fcc4 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800184c:	2000      	movs	r0, #0
 800184e:	f7ff fcc1 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001852:	2034      	movs	r0, #52	@ 0x34
 8001854:	f7ff fcbe 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001858:	2002      	movs	r0, #2
 800185a:	f7ff fcbb 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800185e:	20f7      	movs	r0, #247	@ 0xf7
 8001860:	f7ff fca8 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001864:	2020      	movs	r0, #32
 8001866:	f7ff fcb5 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800186a:	20ea      	movs	r0, #234	@ 0xea
 800186c:	f7ff fca2 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff fcaf 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001876:	2000      	movs	r0, #0
 8001878:	f7ff fcac 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800187c:	20c0      	movs	r0, #192	@ 0xc0
 800187e:	f7ff fc99 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001882:	201b      	movs	r0, #27
 8001884:	f7ff fca6 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001888:	20c1      	movs	r0, #193	@ 0xc1
 800188a:	f7ff fc93 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800188e:	2001      	movs	r0, #1
 8001890:	f7ff fca0 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001894:	20c5      	movs	r0, #197	@ 0xc5
 8001896:	f7ff fc8d 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800189a:	2030      	movs	r0, #48	@ 0x30
 800189c:	f7ff fc9a 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80018a0:	2030      	movs	r0, #48	@ 0x30
 80018a2:	f7ff fc97 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80018a6:	20c7      	movs	r0, #199	@ 0xc7
 80018a8:	f7ff fc84 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80018ac:	20b7      	movs	r0, #183	@ 0xb7
 80018ae:	f7ff fc91 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80018b2:	2036      	movs	r0, #54	@ 0x36
 80018b4:	f7ff fc7e 	bl	80011b4 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 80018b8:	2008      	movs	r0, #8
 80018ba:	f7ff fc8b 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80018be:	203a      	movs	r0, #58	@ 0x3a
 80018c0:	f7ff fc78 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80018c4:	2055      	movs	r0, #85	@ 0x55
 80018c6:	f7ff fc85 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80018ca:	20b1      	movs	r0, #177	@ 0xb1
 80018cc:	f7ff fc72 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80018d0:	2000      	movs	r0, #0
 80018d2:	f7ff fc7f 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80018d6:	201a      	movs	r0, #26
 80018d8:	f7ff fc7c 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80018dc:	20b6      	movs	r0, #182	@ 0xb6
 80018de:	f7ff fc69 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80018e2:	200a      	movs	r0, #10
 80018e4:	f7ff fc76 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80018e8:	20a2      	movs	r0, #162	@ 0xa2
 80018ea:	f7ff fc73 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80018ee:	20f2      	movs	r0, #242	@ 0xf2
 80018f0:	f7ff fc60 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff fc6d 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80018fa:	2026      	movs	r0, #38	@ 0x26
 80018fc:	f7ff fc5a 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001900:	2001      	movs	r0, #1
 8001902:	f7ff fc67 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001906:	20e0      	movs	r0, #224	@ 0xe0
 8001908:	f7ff fc54 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800190c:	200f      	movs	r0, #15
 800190e:	f7ff fc61 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001912:	202a      	movs	r0, #42	@ 0x2a
 8001914:	f7ff fc5e 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001918:	2028      	movs	r0, #40	@ 0x28
 800191a:	f7ff fc5b 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800191e:	2008      	movs	r0, #8
 8001920:	f7ff fc58 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001924:	200e      	movs	r0, #14
 8001926:	f7ff fc55 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800192a:	2008      	movs	r0, #8
 800192c:	f7ff fc52 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001930:	2054      	movs	r0, #84	@ 0x54
 8001932:	f7ff fc4f 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001936:	20a9      	movs	r0, #169	@ 0xa9
 8001938:	f7ff fc4c 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 800193c:	2043      	movs	r0, #67	@ 0x43
 800193e:	f7ff fc49 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001942:	200a      	movs	r0, #10
 8001944:	f7ff fc46 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001948:	200f      	movs	r0, #15
 800194a:	f7ff fc43 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff fc40 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff fc3d 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff fc3a 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001960:	2000      	movs	r0, #0
 8001962:	f7ff fc37 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001966:	20e1      	movs	r0, #225	@ 0xe1
 8001968:	f7ff fc24 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800196c:	2000      	movs	r0, #0
 800196e:	f7ff fc31 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001972:	2015      	movs	r0, #21
 8001974:	f7ff fc2e 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001978:	2017      	movs	r0, #23
 800197a:	f7ff fc2b 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800197e:	2007      	movs	r0, #7
 8001980:	f7ff fc28 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001984:	2011      	movs	r0, #17
 8001986:	f7ff fc25 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800198a:	2006      	movs	r0, #6
 800198c:	f7ff fc22 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001990:	202b      	movs	r0, #43	@ 0x2b
 8001992:	f7ff fc1f 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001996:	2056      	movs	r0, #86	@ 0x56
 8001998:	f7ff fc1c 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800199c:	203c      	movs	r0, #60	@ 0x3c
 800199e:	f7ff fc19 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80019a2:	2005      	movs	r0, #5
 80019a4:	f7ff fc16 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80019a8:	2010      	movs	r0, #16
 80019aa:	f7ff fc13 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80019ae:	200f      	movs	r0, #15
 80019b0:	f7ff fc10 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80019b4:	203f      	movs	r0, #63	@ 0x3f
 80019b6:	f7ff fc0d 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80019ba:	203f      	movs	r0, #63	@ 0x3f
 80019bc:	f7ff fc0a 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80019c0:	200f      	movs	r0, #15
 80019c2:	f7ff fc07 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80019c6:	202b      	movs	r0, #43	@ 0x2b
 80019c8:	f7ff fbf4 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80019cc:	2000      	movs	r0, #0
 80019ce:	f7ff fc01 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80019d2:	2000      	movs	r0, #0
 80019d4:	f7ff fbfe 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80019d8:	2001      	movs	r0, #1
 80019da:	f7ff fbfb 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80019de:	203f      	movs	r0, #63	@ 0x3f
 80019e0:	f7ff fbf8 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80019e4:	202a      	movs	r0, #42	@ 0x2a
 80019e6:	f7ff fbe5 	bl	80011b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff fbf2 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80019f0:	2000      	movs	r0, #0
 80019f2:	f7ff fbef 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f7ff fbec 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80019fc:	20ef      	movs	r0, #239	@ 0xef
 80019fe:	f7ff fbe9 	bl	80011d4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 8001a02:	2011      	movs	r0, #17
 8001a04:	f7ff fbd6 	bl	80011b4 <LCD_WR_REG>
	HAL_Delay(120);
 8001a08:	2078      	movs	r0, #120	@ 0x78
 8001a0a:	f001 f819 	bl	8002a40 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 8001a0e:	2029      	movs	r0, #41	@ 0x29
 8001a10:	f7ff fbd0 	bl	80011b4 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a1a:	4804      	ldr	r0, [pc, #16]	@ (8001a2c <lcd_init+0x2bc>)
 8001a1c:	f002 faf6 	bl	800400c <HAL_GPIO_WritePin>
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40020800 	.word	0x40020800
 8001a28:	2000042c 	.word	0x2000042c
 8001a2c:	40020000 	.word	0x40020000

08001a30 <lcd_show_string>:
		}
	}
}

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b08b      	sub	sp, #44	@ 0x2c
 8001a34:	af04      	add	r7, sp, #16
 8001a36:	60ba      	str	r2, [r7, #8]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	81fb      	strh	r3, [r7, #14]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	81bb      	strh	r3, [r7, #12]
 8001a42:	4613      	mov	r3, r2
 8001a44:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 8001a46:	89fb      	ldrh	r3, [r7, #14]
 8001a48:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 8001a4e:	e048      	b.n	8001ae2 <lcd_show_string+0xb2>
		if (!bHz) {
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d145      	bne.n	8001ae2 <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 8001a56:	89fa      	ldrh	r2, [r7, #14]
 8001a58:	4b26      	ldr	r3, [pc, #152]	@ (8001af4 <lcd_show_string+0xc4>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a62:	085b      	lsrs	r3, r3, #1
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	1acb      	subs	r3, r1, r3
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dc3f      	bgt.n	8001aec <lcd_show_string+0xbc>
 8001a6c:	89ba      	ldrh	r2, [r7, #12]
 8001a6e:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <lcd_show_string+0xc4>)
 8001a70:	885b      	ldrh	r3, [r3, #2]
 8001a72:	4619      	mov	r1, r3
 8001a74:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a78:	1acb      	subs	r3, r1, r3
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	dc36      	bgt.n	8001aec <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b80      	cmp	r3, #128	@ 0x80
 8001a84:	d902      	bls.n	8001a8c <lcd_show_string+0x5c>
				bHz = 1;
 8001a86:	2301      	movs	r3, #1
 8001a88:	75fb      	strb	r3, [r7, #23]
 8001a8a:	e02a      	b.n	8001ae2 <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b0d      	cmp	r3, #13
 8001a92:	d10b      	bne.n	8001aac <lcd_show_string+0x7c>
					y += sizey;
 8001a94:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	89bb      	ldrh	r3, [r7, #12]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	81bb      	strh	r3, [r7, #12]
					x = x0;
 8001aa0:	8abb      	ldrh	r3, [r7, #20]
 8001aa2:	81fb      	strh	r3, [r7, #14]
					str++;
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	e017      	b.n	8001adc <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	781a      	ldrb	r2, [r3, #0]
 8001ab0:	88fc      	ldrh	r4, [r7, #6]
 8001ab2:	89b9      	ldrh	r1, [r7, #12]
 8001ab4:	89f8      	ldrh	r0, [r7, #14]
 8001ab6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001aba:	9302      	str	r3, [sp, #8]
 8001abc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	4623      	mov	r3, r4
 8001ac8:	f7ff fc3c 	bl	8001344 <lcd_show_char>
					x += sizey / 2;
 8001acc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ad0:	085b      	lsrs	r3, r3, #1
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	89fb      	ldrh	r3, [r7, #14]
 8001ad8:	4413      	add	r3, r2
 8001ada:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1b2      	bne.n	8001a50 <lcd_show_string+0x20>
 8001aea:	e000      	b.n	8001aee <lcd_show_string+0xbe>
				return;
 8001aec:	bf00      	nop
			}
		}
	}
}
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd90      	pop	{r4, r7, pc}
 8001af4:	2000042c 	.word	0x2000042c

08001af8 <led_7seg_init>:
/**
 * @brief  	Init led 7 segment
 * @param  	None
 * @retval 	None
 */
void led_7seg_init() {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001afc:	2201      	movs	r2, #1
 8001afe:	2140      	movs	r1, #64	@ 0x40
 8001b00:	4802      	ldr	r0, [pc, #8]	@ (8001b0c <led_7seg_init+0x14>)
 8001b02:	f002 fa83 	bl	800400c <HAL_GPIO_WritePin>
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40021800 	.word	0x40021800

08001b10 <led_7seg_display>:
 * @brief	Scan led 7 segment
 * @param	None
 * @note	Call in 1ms interrupt
 * @retval 	None
 */
void led_7seg_display() {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001b14:	4b3f      	ldr	r3, [pc, #252]	@ (8001c14 <led_7seg_display+0x104>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c14 <led_7seg_display+0x104>)
 8001b1e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led_7seg[led_7seg_index] << 8;
 8001b20:	4b3d      	ldr	r3, [pc, #244]	@ (8001c18 <led_7seg_display+0x108>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b3d      	ldr	r3, [pc, #244]	@ (8001c1c <led_7seg_display+0x10c>)
 8001b28:	5c9b      	ldrb	r3, [r3, r2]
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	b21a      	sxth	r2, r3
 8001b2e:	4b39      	ldr	r3, [pc, #228]	@ (8001c14 <led_7seg_display+0x104>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b21b      	sxth	r3, r3
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	4b36      	ldr	r3, [pc, #216]	@ (8001c14 <led_7seg_display+0x104>)
 8001b3c:	801a      	strh	r2, [r3, #0]

	switch (led_7seg_index) {
 8001b3e:	4b36      	ldr	r3, [pc, #216]	@ (8001c18 <led_7seg_display+0x108>)
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d846      	bhi.n	8001bd4 <led_7seg_display+0xc4>
 8001b46:	a201      	add	r2, pc, #4	@ (adr r2, 8001b4c <led_7seg_display+0x3c>)
 8001b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4c:	08001b5d 	.word	0x08001b5d
 8001b50:	08001b7b 	.word	0x08001b7b
 8001b54:	08001b99 	.word	0x08001b99
 8001b58:	08001bb7 	.word	0x08001bb7
	case 0:
		spi_buffer |= 0x00b0;
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c14 <led_7seg_display+0x104>)
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	4b2b      	ldr	r3, [pc, #172]	@ (8001c14 <led_7seg_display+0x104>)
 8001b68:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8001b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c14 <led_7seg_display+0x104>)
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	4b27      	ldr	r3, [pc, #156]	@ (8001c14 <led_7seg_display+0x104>)
 8001b76:	801a      	strh	r2, [r3, #0]
		break;
 8001b78:	e02d      	b.n	8001bd6 <led_7seg_display+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001b7a:	4b26      	ldr	r3, [pc, #152]	@ (8001c14 <led_7seg_display+0x104>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	4b23      	ldr	r3, [pc, #140]	@ (8001c14 <led_7seg_display+0x104>)
 8001b86:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001b88:	4b22      	ldr	r3, [pc, #136]	@ (8001c14 <led_7seg_display+0x104>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	f023 0320 	bic.w	r3, r3, #32
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b20      	ldr	r3, [pc, #128]	@ (8001c14 <led_7seg_display+0x104>)
 8001b94:	801a      	strh	r2, [r3, #0]
		break;
 8001b96:	e01e      	b.n	8001bd6 <led_7seg_display+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001b98:	4b1e      	ldr	r3, [pc, #120]	@ (8001c14 <led_7seg_display+0x104>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c14 <led_7seg_display+0x104>)
 8001ba4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c14 <led_7seg_display+0x104>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	f023 0310 	bic.w	r3, r3, #16
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	4b18      	ldr	r3, [pc, #96]	@ (8001c14 <led_7seg_display+0x104>)
 8001bb2:	801a      	strh	r2, [r3, #0]
		break;
 8001bb4:	e00f      	b.n	8001bd6 <led_7seg_display+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001bb6:	4b17      	ldr	r3, [pc, #92]	@ (8001c14 <led_7seg_display+0x104>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	4b14      	ldr	r3, [pc, #80]	@ (8001c14 <led_7seg_display+0x104>)
 8001bc2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8001bc4:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <led_7seg_display+0x104>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <led_7seg_display+0x104>)
 8001bd0:	801a      	strh	r2, [r3, #0]
		break;
 8001bd2:	e000      	b.n	8001bd6 <led_7seg_display+0xc6>
	default:
		break;
 8001bd4:	bf00      	nop
	}

	led_7seg_index = (led_7seg_index + 1) % 4;
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <led_7seg_display+0x108>)
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	425a      	negs	r2, r3
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	f002 0203 	and.w	r2, r2, #3
 8001be6:	bf58      	it	pl
 8001be8:	4253      	negpl	r3, r2
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <led_7seg_display+0x108>)
 8001bee:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2140      	movs	r1, #64	@ 0x40
 8001bf4:	480a      	ldr	r0, [pc, #40]	@ (8001c20 <led_7seg_display+0x110>)
 8001bf6:	f002 fa09 	bl	800400c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 2, 1);
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	4905      	ldr	r1, [pc, #20]	@ (8001c14 <led_7seg_display+0x104>)
 8001c00:	4808      	ldr	r0, [pc, #32]	@ (8001c24 <led_7seg_display+0x114>)
 8001c02:	f002 fefe 	bl	8004a02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001c06:	2201      	movs	r2, #1
 8001c08:	2140      	movs	r1, #64	@ 0x40
 8001c0a:	4805      	ldr	r0, [pc, #20]	@ (8001c20 <led_7seg_display+0x110>)
 8001c0c:	f002 f9fe 	bl	800400c <HAL_GPIO_WritePin>
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000238 	.word	0x20000238
 8001c18:	20000432 	.word	0x20000432
 8001c1c:	20000224 	.word	0x20000224
 8001c20:	40021800 	.word	0x40021800
 8001c24:	2000065c 	.word	0x2000065c

08001c28 <led_7seg_set_digit>:
 * @param  	num	Number displayed
 * @param  	pos	The position displayed (index from 0)
 * @param  	show_dot Show dot in the led or not
 * @retval 	None
 */
void led_7seg_set_digit(int num, int position, uint8_t show_dot) {
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	4613      	mov	r3, r2
 8001c34:	71fb      	strb	r3, [r7, #7]
	if (num >= 0 && num <= 15) {
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	db0e      	blt.n	8001c5a <led_7seg_set_digit+0x32>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2b0f      	cmp	r3, #15
 8001c40:	dc0b      	bgt.n	8001c5a <led_7seg_set_digit+0x32>
		led_7seg[position] = led_7seg_map_of_output[num] - show_dot;
 8001c42:	4a09      	ldr	r2, [pc, #36]	@ (8001c68 <led_7seg_set_digit+0x40>)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	b2d9      	uxtb	r1, r3
 8001c50:	4a06      	ldr	r2, [pc, #24]	@ (8001c6c <led_7seg_set_digit+0x44>)
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	4413      	add	r3, r2
 8001c56:	460a      	mov	r2, r1
 8001c58:	701a      	strb	r2, [r3, #0]
	}
}
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000228 	.word	0x20000228
 8001c6c:	20000224 	.word	0x20000224

08001c70 <led_7seg_set_colon>:
 *          This parameter can be one of the following values:
 *				@arg 0: Turn off
 *				@arg 1: Turn on
 * @retval None
 */
void led_7seg_set_colon(uint8_t status) {
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
	if (status == 1)
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d107      	bne.n	8001c90 <led_7seg_set_colon+0x20>
		spi_buffer &= ~(1 << 3);
 8001c80:	4b0a      	ldr	r3, [pc, #40]	@ (8001cac <led_7seg_set_colon+0x3c>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	f023 0308 	bic.w	r3, r3, #8
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	4b08      	ldr	r3, [pc, #32]	@ (8001cac <led_7seg_set_colon+0x3c>)
 8001c8c:	801a      	strh	r2, [r3, #0]
	else
		spi_buffer |= (1 << 3);
}
 8001c8e:	e006      	b.n	8001c9e <led_7seg_set_colon+0x2e>
		spi_buffer |= (1 << 3);
 8001c90:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <led_7seg_set_colon+0x3c>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	f043 0308 	orr.w	r3, r3, #8
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	4b04      	ldr	r3, [pc, #16]	@ (8001cac <led_7seg_set_colon+0x3c>)
 8001c9c:	801a      	strh	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000238 	.word	0x20000238

08001cb0 <led_7seg_debug_turn_off>:
 *            	@arg 6
 *            	@arg 7
 *            	@arg 8
 * @retval None
 */
void led_7seg_debug_turn_off(uint8_t index) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
	if (index >= 6 && index <= 8) {
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d912      	bls.n	8001ce6 <led_7seg_debug_turn_off+0x36>
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d80f      	bhi.n	8001ce6 <led_7seg_debug_turn_off+0x36>
		spi_buffer &= ~(1 << (index - 6));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	3b06      	subs	r3, #6
 8001cca:	2201      	movs	r2, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	b21b      	sxth	r3, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	b21a      	sxth	r2, r3
 8001cd6:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <led_7seg_debug_turn_off+0x44>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	b21b      	sxth	r3, r3
 8001cdc:	4013      	ands	r3, r2
 8001cde:	b21b      	sxth	r3, r3
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	4b04      	ldr	r3, [pc, #16]	@ (8001cf4 <led_7seg_debug_turn_off+0x44>)
 8001ce4:	801a      	strh	r2, [r3, #0]
	}
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000238 	.word	0x20000238

08001cf8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TestADC();
void lcd_run();
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a04      	ldr	r2, [pc, #16]	@ (8001d18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d101      	bne.n	8001d0e <HAL_TIM_PeriodElapsedCallback+0x16>
		timerRun();
 8001d0a:	f000 fb63 	bl	80023d4 <timerRun>
	}
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40000400 	.word	0x40000400

08001d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d20:	f000 fe1c 	bl	800295c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d24:	f000 f86a 	bl	8001dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d28:	f7ff f964 	bl	8000ff4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d2c:	f7ff f872 	bl	8000e14 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001d30:	f000 fbea 	bl	8002508 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001d34:	f000 fbbe 	bl	80024b4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001d38:	f000 fb92 	bl	8002460 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001d3c:	f7fe fdf8 	bl	8000930 <MX_ADC1_Init>
  MX_FSMC_Init();
 8001d40:	f7ff f888 	bl	8000e54 <MX_FSMC_Init>
  MX_SPI1_Init();
 8001d44:	f000 f9b2 	bl	80020ac <MX_SPI1_Init>
  MX_TIM3_Init();
 8001d48:	f000 fab6 	bl	80022b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  led_7seg_init();
 8001d4c:	f7ff fed4 	bl	8001af8 <led_7seg_init>
  led_7seg_set_colon(1);
 8001d50:	2001      	movs	r0, #1
 8001d52:	f7ff ff8d 	bl	8001c70 <led_7seg_set_colon>
  led_7seg_debug_turn_off(6);
 8001d56:	2006      	movs	r0, #6
 8001d58:	f7ff ffaa 	bl	8001cb0 <led_7seg_debug_turn_off>
  led_7seg_debug_turn_off(7);
 8001d5c:	2007      	movs	r0, #7
 8001d5e:	f7ff ffa7 	bl	8001cb0 <led_7seg_debug_turn_off>
  led_7seg_debug_turn_off(8);
 8001d62:	2008      	movs	r0, #8
 8001d64:	f7ff ffa4 	bl	8001cb0 <led_7seg_debug_turn_off>
  led_7seg_set_digit(0, 0, 0 );
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f7ff ff5b 	bl	8001c28 <led_7seg_set_digit>
  led_7seg_set_digit(0, 1, 0 );
 8001d72:	2200      	movs	r2, #0
 8001d74:	2101      	movs	r1, #1
 8001d76:	2000      	movs	r0, #0
 8001d78:	f7ff ff56 	bl	8001c28 <led_7seg_set_digit>
  led_7seg_set_digit(0, 2, 0 );
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2102      	movs	r1, #2
 8001d80:	2000      	movs	r0, #0
 8001d82:	f7ff ff51 	bl	8001c28 <led_7seg_set_digit>
  led_7seg_set_digit(0, 3, 0 );
 8001d86:	2200      	movs	r2, #0
 8001d88:	2103      	movs	r1, #3
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7ff ff4c 	bl	8001c28 <led_7seg_set_digit>
  lcd_init();
 8001d90:	f7ff fcee 	bl	8001770 <lcd_init>
  sensor_init();
 8001d94:	f000 f97c 	bl	8002090 <sensor_init>
  lcd_clear(BLACK);
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7ff fa89 	bl	80012b0 <lcd_clear>
  HAL_TIM_Base_Start_IT(&htim3);
 8001d9e:	4816      	ldr	r0, [pc, #88]	@ (8001df8 <main+0xdc>)
 8001da0:	f003 fc10 	bl	80055c4 <HAL_TIM_Base_Start_IT>
  setTimer(TI_BUTTON_SCAN_TIMER, TI_BUTTON_SCAN_TIME);
 8001da4:	2114      	movs	r1, #20
 8001da6:	2000      	movs	r0, #0
 8001da8:	f000 fafc 	bl	80023a4 <setTimer>
  setTimer(TI_7SEG_SCAN_TIMER, TI_7SEG_SCAN_TIME);
 8001dac:	2102      	movs	r1, #2
 8001dae:	2001      	movs	r0, #1
 8001db0:	f000 faf8 	bl	80023a4 <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(isFlag(TI_BUTTON_SCAN_TIMER)){
 8001db4:	2000      	movs	r0, #0
 8001db6:	f000 fb3d 	bl	8002434 <isFlag>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <main+0xb0>
		  button_scan();
 8001dc0:	f7fe fecc 	bl	8000b5c <button_scan>
		  setTimer(TI_BUTTON_SCAN_TIMER, TI_BUTTON_SCAN_TIME);
 8001dc4:	2114      	movs	r1, #20
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f000 faec 	bl	80023a4 <setTimer>
	  }
	  if(isFlag(TI_7SEG_SCAN_TIMER)){
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f000 fb31 	bl	8002434 <isFlag>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <main+0xc8>
		  led_7seg_display();
 8001dd8:	f7ff fe9a 	bl	8001b10 <led_7seg_display>
		  setTimer(TI_7SEG_SCAN_TIMER, TI_7SEG_SCAN_TIME);
 8001ddc:	2102      	movs	r1, #2
 8001dde:	2001      	movs	r0, #1
 8001de0:	f000 fae0 	bl	80023a4 <setTimer>
	  }
	  lcd_run();
 8001de4:	f000 f874 	bl	8001ed0 <lcd_run>
	  f_user_interface();
 8001de8:	f000 fc74 	bl	80026d4 <f_user_interface>
	  f_rs485_fsm();
 8001dec:	f000 f926 	bl	800203c <f_rs485_fsm>
	  f_master_fsm();
 8001df0:	f7fe fc0c 	bl	800060c <f_master_fsm>
	  if(isFlag(TI_BUTTON_SCAN_TIMER)){
 8001df4:	e7de      	b.n	8001db4 <main+0x98>
 8001df6:	bf00      	nop
 8001df8:	200006b4 	.word	0x200006b4

08001dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b094      	sub	sp, #80	@ 0x50
 8001e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e02:	f107 0320 	add.w	r3, r7, #32
 8001e06:	2230      	movs	r2, #48	@ 0x30
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f004 ffea 	bl	8006de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	4b28      	ldr	r3, [pc, #160]	@ (8001ec8 <SystemClock_Config+0xcc>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	4a27      	ldr	r2, [pc, #156]	@ (8001ec8 <SystemClock_Config+0xcc>)
 8001e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e30:	4b25      	ldr	r3, [pc, #148]	@ (8001ec8 <SystemClock_Config+0xcc>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	4b22      	ldr	r3, [pc, #136]	@ (8001ecc <SystemClock_Config+0xd0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a21      	ldr	r2, [pc, #132]	@ (8001ecc <SystemClock_Config+0xd0>)
 8001e46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ecc <SystemClock_Config+0xd0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e60:	2310      	movs	r3, #16
 8001e62:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e64:	2302      	movs	r3, #2
 8001e66:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e6c:	2308      	movs	r3, #8
 8001e6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e70:	23a8      	movs	r3, #168	@ 0xa8
 8001e72:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e74:	2302      	movs	r3, #2
 8001e76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e78:	2304      	movs	r3, #4
 8001e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e7c:	f107 0320 	add.w	r3, r7, #32
 8001e80:	4618      	mov	r0, r3
 8001e82:	f002 f8dd 	bl	8004040 <HAL_RCC_OscConfig>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e8c:	f000 f8c4 	bl	8002018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e90:	230f      	movs	r3, #15
 8001e92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e94:	2302      	movs	r3, #2
 8001e96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e9c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ea0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001ea2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ea6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ea8:	f107 030c 	add.w	r3, r7, #12
 8001eac:	2105      	movs	r1, #5
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f002 fb3e 	bl	8004530 <HAL_RCC_ClockConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001eba:	f000 f8ad 	bl	8002018 <Error_Handler>
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	3750      	adds	r7, #80	@ 0x50
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40007000 	.word	0x40007000

08001ed0 <lcd_run>:
		lcd_show_string(10, 180, "Temperature:", RED, BLACK, 16, 0);
		lcd_show_float_num(130, 180, sensor_get_temperature(), 4, RED, BLACK,
				16);
	}
}
void lcd_run(){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af04      	add	r7, sp, #16
	lcd_show_string(10, 100, "Temperature:", RED, BLACK, 16, 0);
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	9302      	str	r3, [sp, #8]
 8001eda:	2310      	movs	r3, #16
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001ee6:	4a47      	ldr	r2, [pc, #284]	@ (8002004 <lcd_run+0x134>)
 8001ee8:	2164      	movs	r1, #100	@ 0x64
 8001eea:	200a      	movs	r0, #10
 8001eec:	f7ff fda0 	bl	8001a30 <lcd_show_string>
	lcd_show_float_num(130, 100, f_master_get_temperature(), 4, RED, BLACK, 16);
 8001ef0:	f7fe fca4 	bl	800083c <f_master_get_temperature>
 8001ef4:	eef0 7a40 	vmov.f32	s15, s0
 8001ef8:	2310      	movs	r3, #16
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	2300      	movs	r3, #0
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f04:	2204      	movs	r2, #4
 8001f06:	eeb0 0a67 	vmov.f32	s0, s15
 8001f0a:	2164      	movs	r1, #100	@ 0x64
 8001f0c:	2082      	movs	r0, #130	@ 0x82
 8001f0e:	f7ff fb83 	bl	8001618 <lcd_show_float_num>
	lcd_show_string(10, 120, "Current:", RED, BLACK, 16, 0);
 8001f12:	2300      	movs	r3, #0
 8001f14:	9302      	str	r3, [sp, #8]
 8001f16:	2310      	movs	r3, #16
 8001f18:	9301      	str	r3, [sp, #4]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f22:	4a39      	ldr	r2, [pc, #228]	@ (8002008 <lcd_run+0x138>)
 8001f24:	2178      	movs	r1, #120	@ 0x78
 8001f26:	200a      	movs	r0, #10
 8001f28:	f7ff fd82 	bl	8001a30 <lcd_show_string>
	lcd_show_float_num(130, 120, f_master_get_current(), 4, RED, BLACK, 16);
 8001f2c:	f7fe fc94 	bl	8000858 <f_master_get_current>
 8001f30:	eef0 7a40 	vmov.f32	s15, s0
 8001f34:	2310      	movs	r3, #16
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f40:	2204      	movs	r2, #4
 8001f42:	eeb0 0a67 	vmov.f32	s0, s15
 8001f46:	2178      	movs	r1, #120	@ 0x78
 8001f48:	2082      	movs	r0, #130	@ 0x82
 8001f4a:	f7ff fb65 	bl	8001618 <lcd_show_float_num>
	lcd_show_string(10, 140, "Voltage:", RED, BLACK, 16, 0);
 8001f4e:	2300      	movs	r3, #0
 8001f50:	9302      	str	r3, [sp, #8]
 8001f52:	2310      	movs	r3, #16
 8001f54:	9301      	str	r3, [sp, #4]
 8001f56:	2300      	movs	r3, #0
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f5e:	4a2b      	ldr	r2, [pc, #172]	@ (800200c <lcd_run+0x13c>)
 8001f60:	218c      	movs	r1, #140	@ 0x8c
 8001f62:	200a      	movs	r0, #10
 8001f64:	f7ff fd64 	bl	8001a30 <lcd_show_string>
	lcd_show_float_num(130, 140, f_master_get_voltage(), 4, RED, BLACK, 16);
 8001f68:	f7fe fc84 	bl	8000874 <f_master_get_voltage>
 8001f6c:	eef0 7a40 	vmov.f32	s15, s0
 8001f70:	2310      	movs	r3, #16
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	2300      	movs	r3, #0
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f82:	218c      	movs	r1, #140	@ 0x8c
 8001f84:	2082      	movs	r0, #130	@ 0x82
 8001f86:	f7ff fb47 	bl	8001618 <lcd_show_float_num>
	lcd_show_string(10, 160, "Light:", RED, BLACK, 16, 0);
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	9302      	str	r3, [sp, #8]
 8001f8e:	2310      	movs	r3, #16
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	2300      	movs	r3, #0
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002010 <lcd_run+0x140>)
 8001f9c:	21a0      	movs	r1, #160	@ 0xa0
 8001f9e:	200a      	movs	r0, #10
 8001fa0:	f7ff fd46 	bl	8001a30 <lcd_show_string>
	lcd_show_int_num(130, 160, f_master_get_light(), 4, RED, BLACK, 16);
 8001fa4:	f7fe fc74 	bl	8000890 <f_master_get_light>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	2310      	movs	r3, #16
 8001fae:	9302      	str	r3, [sp, #8]
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	2304      	movs	r3, #4
 8001fbc:	21a0      	movs	r1, #160	@ 0xa0
 8001fbe:	2082      	movs	r0, #130	@ 0x82
 8001fc0:	f7ff faac 	bl	800151c <lcd_show_int_num>
	lcd_show_string(10, 180, "Potentiometer:", RED, BLACK, 16, 0);
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	9302      	str	r3, [sp, #8]
 8001fc8:	2310      	movs	r3, #16
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001fd4:	4a0f      	ldr	r2, [pc, #60]	@ (8002014 <lcd_run+0x144>)
 8001fd6:	21b4      	movs	r1, #180	@ 0xb4
 8001fd8:	200a      	movs	r0, #10
 8001fda:	f7ff fd29 	bl	8001a30 <lcd_show_string>
	lcd_show_int_num(130, 180, f_master_get_potention(), 4, RED, BLACK,16);
 8001fde:	f7fe fc7f 	bl	80008e0 <f_master_get_potention>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	2310      	movs	r3, #16
 8001fe8:	9302      	str	r3, [sp, #8]
 8001fea:	2300      	movs	r3, #0
 8001fec:	9301      	str	r3, [sp, #4]
 8001fee:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	21b4      	movs	r1, #180	@ 0xb4
 8001ff8:	2082      	movs	r0, #130	@ 0x82
 8001ffa:	f7ff fa8f 	bl	800151c <lcd_show_int_num>
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	08006e84 	.word	0x08006e84
 8002008:	08006e60 	.word	0x08006e60
 800200c:	08006e54 	.word	0x08006e54
 8002010:	08006e6c 	.word	0x08006e6c
 8002014:	08006e74 	.word	0x08006e74

08002018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800201c:	b672      	cpsid	i
}
 800201e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <Error_Handler+0x8>

08002024 <f_rs485_send_cmd>:

void f_rs485_init(uint8_t* tx_buf, uint8_t tx_size, uint8_t* rx_buf){

}

void f_rs485_send_cmd(uint8_t* tx_buf, uint8_t tx_size){
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	70fb      	strb	r3, [r7, #3]

}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <f_rs485_fsm>:

void f_rs485_fsm(){
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <f_rs485_parserFrame>:

void f_rs485_parserFrame(uint8_t *pFrame, uint8_t FrameSize, uint8_t *Address, uint8_t *Function, uint8_t *Data, uint8_t *Datasize, uint16_t *Crc){
 800204a:	b480      	push	{r7}
 800204c:	b085      	sub	sp, #20
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]
 8002056:	460b      	mov	r3, r1
 8002058:	72fb      	strb	r3, [r7, #11]

}
 800205a:	bf00      	nop
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <f_rs485_received>:

int f_rs485_received(){
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
	return -1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	807b      	strh	r3, [r7, #2]

}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <sensor_init>:

/* Variables */
uint16_t adc_receive[5];

/* Functions */
void sensor_init() {
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (void*) adc_receive, 5);
 8002094:	2205      	movs	r2, #5
 8002096:	4903      	ldr	r1, [pc, #12]	@ (80020a4 <sensor_init+0x14>)
 8002098:	4803      	ldr	r0, [pc, #12]	@ (80020a8 <sensor_init+0x18>)
 800209a:	f000 fd39 	bl	8002b10 <HAL_ADC_Start_DMA>
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000650 	.word	0x20000650
 80020a8:	20000268 	.word	0x20000268

080020ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80020b0:	4b17      	ldr	r3, [pc, #92]	@ (8002110 <MX_SPI1_Init+0x64>)
 80020b2:	4a18      	ldr	r2, [pc, #96]	@ (8002114 <MX_SPI1_Init+0x68>)
 80020b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020b6:	4b16      	ldr	r3, [pc, #88]	@ (8002110 <MX_SPI1_Init+0x64>)
 80020b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020be:	4b14      	ldr	r3, [pc, #80]	@ (8002110 <MX_SPI1_Init+0x64>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020c4:	4b12      	ldr	r3, [pc, #72]	@ (8002110 <MX_SPI1_Init+0x64>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ca:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <MX_SPI1_Init+0x64>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002110 <MX_SPI1_Init+0x64>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <MX_SPI1_Init+0x64>)
 80020d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020de:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <MX_SPI1_Init+0x64>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002110 <MX_SPI1_Init+0x64>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020ea:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <MX_SPI1_Init+0x64>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020f0:	4b07      	ldr	r3, [pc, #28]	@ (8002110 <MX_SPI1_Init+0x64>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020f6:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <MX_SPI1_Init+0x64>)
 80020f8:	220a      	movs	r2, #10
 80020fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020fc:	4804      	ldr	r0, [pc, #16]	@ (8002110 <MX_SPI1_Init+0x64>)
 80020fe:	f002 fbf7 	bl	80048f0 <HAL_SPI_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002108:	f7ff ff86 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}
 8002110:	2000065c 	.word	0x2000065c
 8002114:	40013000 	.word	0x40013000

08002118 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	@ 0x28
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a19      	ldr	r2, [pc, #100]	@ (800219c <HAL_SPI_MspInit+0x84>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d12b      	bne.n	8002192 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	4b18      	ldr	r3, [pc, #96]	@ (80021a0 <HAL_SPI_MspInit+0x88>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002142:	4a17      	ldr	r2, [pc, #92]	@ (80021a0 <HAL_SPI_MspInit+0x88>)
 8002144:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002148:	6453      	str	r3, [r2, #68]	@ 0x44
 800214a:	4b15      	ldr	r3, [pc, #84]	@ (80021a0 <HAL_SPI_MspInit+0x88>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <HAL_SPI_MspInit+0x88>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	4a10      	ldr	r2, [pc, #64]	@ (80021a0 <HAL_SPI_MspInit+0x88>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	6313      	str	r3, [r2, #48]	@ 0x30
 8002166:	4b0e      	ldr	r3, [pc, #56]	@ (80021a0 <HAL_SPI_MspInit+0x88>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002172:	2338      	movs	r3, #56	@ 0x38
 8002174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217e:	2303      	movs	r3, #3
 8002180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002182:	2305      	movs	r3, #5
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	4619      	mov	r1, r3
 800218c:	4805      	ldr	r0, [pc, #20]	@ (80021a4 <HAL_SPI_MspInit+0x8c>)
 800218e:	f001 fda1 	bl	8003cd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002192:	bf00      	nop
 8002194:	3728      	adds	r7, #40	@ 0x28
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40013000 	.word	0x40013000
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40020400 	.word	0x40020400

080021a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	4b10      	ldr	r3, [pc, #64]	@ (80021f4 <HAL_MspInit+0x4c>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	4a0f      	ldr	r2, [pc, #60]	@ (80021f4 <HAL_MspInit+0x4c>)
 80021b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021be:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <HAL_MspInit+0x4c>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <HAL_MspInit+0x4c>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	4a08      	ldr	r2, [pc, #32]	@ (80021f4 <HAL_MspInit+0x4c>)
 80021d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021da:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_MspInit+0x4c>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800

080021f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <NMI_Handler+0x4>

08002200 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002204:	bf00      	nop
 8002206:	e7fd      	b.n	8002204 <HardFault_Handler+0x4>

08002208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800220c:	bf00      	nop
 800220e:	e7fd      	b.n	800220c <MemManage_Handler+0x4>

08002210 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <BusFault_Handler+0x4>

08002218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <UsageFault_Handler+0x4>

08002220 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800224e:	f000 fbd7 	bl	8002a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800225c:	4802      	ldr	r0, [pc, #8]	@ (8002268 <TIM3_IRQHandler+0x10>)
 800225e:	f003 fa21 	bl	80056a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200006b4 	.word	0x200006b4

0800226c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002270:	4802      	ldr	r0, [pc, #8]	@ (800227c <USART3_IRQHandler+0x10>)
 8002272:	f003 fe1d 	bl	8005eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200007dc 	.word	0x200007dc

08002280 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002284:	4802      	ldr	r0, [pc, #8]	@ (8002290 <DMA2_Stream0_IRQHandler+0x10>)
 8002286:	f001 fabb 	bl	8003800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200002b0 	.word	0x200002b0

08002294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002298:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <SystemInit+0x20>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229e:	4a05      	ldr	r2, [pc, #20]	@ (80022b4 <SystemInit+0x20>)
 80022a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022be:	f107 0308 	add.w	r3, r7, #8
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022cc:	463b      	mov	r3, r7
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022d4:	4b1d      	ldr	r3, [pc, #116]	@ (800234c <MX_TIM3_Init+0x94>)
 80022d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002350 <MX_TIM3_Init+0x98>)
 80022d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 80022da:	4b1c      	ldr	r3, [pc, #112]	@ (800234c <MX_TIM3_Init+0x94>)
 80022dc:	f240 3247 	movw	r2, #839	@ 0x347
 80022e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e2:	4b1a      	ldr	r3, [pc, #104]	@ (800234c <MX_TIM3_Init+0x94>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80022e8:	4b18      	ldr	r3, [pc, #96]	@ (800234c <MX_TIM3_Init+0x94>)
 80022ea:	2263      	movs	r2, #99	@ 0x63
 80022ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ee:	4b17      	ldr	r3, [pc, #92]	@ (800234c <MX_TIM3_Init+0x94>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f4:	4b15      	ldr	r3, [pc, #84]	@ (800234c <MX_TIM3_Init+0x94>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022fa:	4814      	ldr	r0, [pc, #80]	@ (800234c <MX_TIM3_Init+0x94>)
 80022fc:	f003 f912 	bl	8005524 <HAL_TIM_Base_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002306:	f7ff fe87 	bl	8002018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800230a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800230e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002310:	f107 0308 	add.w	r3, r7, #8
 8002314:	4619      	mov	r1, r3
 8002316:	480d      	ldr	r0, [pc, #52]	@ (800234c <MX_TIM3_Init+0x94>)
 8002318:	f003 fab4 	bl	8005884 <HAL_TIM_ConfigClockSource>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002322:	f7ff fe79 	bl	8002018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800232e:	463b      	mov	r3, r7
 8002330:	4619      	mov	r1, r3
 8002332:	4806      	ldr	r0, [pc, #24]	@ (800234c <MX_TIM3_Init+0x94>)
 8002334:	f003 fcdc 	bl	8005cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800233e:	f7ff fe6b 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002342:	bf00      	nop
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200006b4 	.word	0x200006b4
 8002350:	40000400 	.word	0x40000400

08002354 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0e      	ldr	r2, [pc, #56]	@ (800239c <HAL_TIM_Base_MspInit+0x48>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d115      	bne.n	8002392 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b0d      	ldr	r3, [pc, #52]	@ (80023a0 <HAL_TIM_Base_MspInit+0x4c>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	4a0c      	ldr	r2, [pc, #48]	@ (80023a0 <HAL_TIM_Base_MspInit+0x4c>)
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	6413      	str	r3, [r2, #64]	@ 0x40
 8002376:	4b0a      	ldr	r3, [pc, #40]	@ (80023a0 <HAL_TIM_Base_MspInit+0x4c>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002382:	2200      	movs	r2, #0
 8002384:	2100      	movs	r1, #0
 8002386:	201d      	movs	r0, #29
 8002388:	f001 f86b 	bl	8003462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800238c:	201d      	movs	r0, #29
 800238e:	f001 f884 	bl	800349a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40000400 	.word	0x40000400
 80023a0:	40023800 	.word	0x40023800

080023a4 <setTimer>:
#include "timer.h"

struct TimerStruct timer[10];

void setTimer(int idx, int counter)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
	timer[idx].counter = counter / TICK;
 80023ae:	4908      	ldr	r1, [pc, #32]	@ (80023d0 <setTimer+0x2c>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	timer[idx].flag = 0;
 80023b8:	4a05      	ldr	r2, [pc, #20]	@ (80023d0 <setTimer+0x2c>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	2200      	movs	r2, #0
 80023c2:	605a      	str	r2, [r3, #4]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	200006fc 	.word	0x200006fc

080023d4 <timerRun>:

void timerRun()
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; ++i)
 80023da:	2300      	movs	r3, #0
 80023dc:	607b      	str	r3, [r7, #4]
 80023de:	e01d      	b.n	800241c <timerRun+0x48>
	{
		if (timer[i].counter > 0)
 80023e0:	4a13      	ldr	r2, [pc, #76]	@ (8002430 <timerRun+0x5c>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	dd14      	ble.n	8002416 <timerRun+0x42>
		{
			--timer[i].counter;
 80023ec:	4a10      	ldr	r2, [pc, #64]	@ (8002430 <timerRun+0x5c>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80023f4:	1e5a      	subs	r2, r3, #1
 80023f6:	490e      	ldr	r1, [pc, #56]	@ (8002430 <timerRun+0x5c>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			if (timer[i].counter <= 0)
 80023fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002430 <timerRun+0x5c>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002406:	2b00      	cmp	r3, #0
 8002408:	dc05      	bgt.n	8002416 <timerRun+0x42>
			{
				timer[i].flag = 1;
 800240a:	4a09      	ldr	r2, [pc, #36]	@ (8002430 <timerRun+0x5c>)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	2201      	movs	r2, #1
 8002414:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 10; ++i)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3301      	adds	r3, #1
 800241a:	607b      	str	r3, [r7, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b09      	cmp	r3, #9
 8002420:	ddde      	ble.n	80023e0 <timerRun+0xc>
			}
		}
	}
}
 8002422:	bf00      	nop
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	200006fc 	.word	0x200006fc

08002434 <isFlag>:

int isFlag(int idx)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	if (timer[idx].flag)
 800243c:	4a07      	ldr	r2, [pc, #28]	@ (800245c <isFlag+0x28>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <isFlag+0x1a>
	{
		return 1;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <isFlag+0x1c>
	}
	return 0;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	200006fc 	.word	0x200006fc

08002460 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002464:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <MX_USART1_UART_Init+0x4c>)
 8002466:	4a12      	ldr	r2, [pc, #72]	@ (80024b0 <MX_USART1_UART_Init+0x50>)
 8002468:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800246a:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <MX_USART1_UART_Init+0x4c>)
 800246c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002470:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002472:	4b0e      	ldr	r3, [pc, #56]	@ (80024ac <MX_USART1_UART_Init+0x4c>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002478:	4b0c      	ldr	r3, [pc, #48]	@ (80024ac <MX_USART1_UART_Init+0x4c>)
 800247a:	2200      	movs	r2, #0
 800247c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800247e:	4b0b      	ldr	r3, [pc, #44]	@ (80024ac <MX_USART1_UART_Init+0x4c>)
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002484:	4b09      	ldr	r3, [pc, #36]	@ (80024ac <MX_USART1_UART_Init+0x4c>)
 8002486:	220c      	movs	r2, #12
 8002488:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800248a:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <MX_USART1_UART_Init+0x4c>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002490:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <MX_USART1_UART_Init+0x4c>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002496:	4805      	ldr	r0, [pc, #20]	@ (80024ac <MX_USART1_UART_Init+0x4c>)
 8002498:	f003 fcba 	bl	8005e10 <HAL_UART_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80024a2:	f7ff fdb9 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	2000074c 	.word	0x2000074c
 80024b0:	40011000 	.word	0x40011000

080024b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024b8:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <MX_USART2_UART_Init+0x4c>)
 80024ba:	4a12      	ldr	r2, [pc, #72]	@ (8002504 <MX_USART2_UART_Init+0x50>)
 80024bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024be:	4b10      	ldr	r3, [pc, #64]	@ (8002500 <MX_USART2_UART_Init+0x4c>)
 80024c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <MX_USART2_UART_Init+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <MX_USART2_UART_Init+0x4c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <MX_USART2_UART_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024d8:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <MX_USART2_UART_Init+0x4c>)
 80024da:	220c      	movs	r2, #12
 80024dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024de:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <MX_USART2_UART_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e4:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <MX_USART2_UART_Init+0x4c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024ea:	4805      	ldr	r0, [pc, #20]	@ (8002500 <MX_USART2_UART_Init+0x4c>)
 80024ec:	f003 fc90 	bl	8005e10 <HAL_UART_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024f6:	f7ff fd8f 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000794 	.word	0x20000794
 8002504:	40004400 	.word	0x40004400

08002508 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800250c:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <MX_USART3_UART_Init+0x4c>)
 800250e:	4a12      	ldr	r2, [pc, #72]	@ (8002558 <MX_USART3_UART_Init+0x50>)
 8002510:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002512:	4b10      	ldr	r3, [pc, #64]	@ (8002554 <MX_USART3_UART_Init+0x4c>)
 8002514:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002518:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800251a:	4b0e      	ldr	r3, [pc, #56]	@ (8002554 <MX_USART3_UART_Init+0x4c>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002520:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <MX_USART3_UART_Init+0x4c>)
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002526:	4b0b      	ldr	r3, [pc, #44]	@ (8002554 <MX_USART3_UART_Init+0x4c>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800252c:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <MX_USART3_UART_Init+0x4c>)
 800252e:	220c      	movs	r2, #12
 8002530:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002532:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <MX_USART3_UART_Init+0x4c>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002538:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <MX_USART3_UART_Init+0x4c>)
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800253e:	4805      	ldr	r0, [pc, #20]	@ (8002554 <MX_USART3_UART_Init+0x4c>)
 8002540:	f003 fc66 	bl	8005e10 <HAL_UART_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800254a:	f7ff fd65 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200007dc 	.word	0x200007dc
 8002558:	40004800 	.word	0x40004800

0800255c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08e      	sub	sp, #56	@ 0x38
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a50      	ldr	r2, [pc, #320]	@ (80026bc <HAL_UART_MspInit+0x160>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d12d      	bne.n	80025da <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
 8002582:	4b4f      	ldr	r3, [pc, #316]	@ (80026c0 <HAL_UART_MspInit+0x164>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	4a4e      	ldr	r2, [pc, #312]	@ (80026c0 <HAL_UART_MspInit+0x164>)
 8002588:	f043 0310 	orr.w	r3, r3, #16
 800258c:	6453      	str	r3, [r2, #68]	@ 0x44
 800258e:	4b4c      	ldr	r3, [pc, #304]	@ (80026c0 <HAL_UART_MspInit+0x164>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	623b      	str	r3, [r7, #32]
 8002598:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	4b48      	ldr	r3, [pc, #288]	@ (80026c0 <HAL_UART_MspInit+0x164>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	4a47      	ldr	r2, [pc, #284]	@ (80026c0 <HAL_UART_MspInit+0x164>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025aa:	4b45      	ldr	r3, [pc, #276]	@ (80026c0 <HAL_UART_MspInit+0x164>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025b6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80025ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025bc:	2302      	movs	r3, #2
 80025be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c4:	2303      	movs	r3, #3
 80025c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025c8:	2307      	movs	r3, #7
 80025ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025d0:	4619      	mov	r1, r3
 80025d2:	483c      	ldr	r0, [pc, #240]	@ (80026c4 <HAL_UART_MspInit+0x168>)
 80025d4:	f001 fb7e 	bl	8003cd4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025d8:	e06b      	b.n	80026b2 <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a3a      	ldr	r2, [pc, #232]	@ (80026c8 <HAL_UART_MspInit+0x16c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d12c      	bne.n	800263e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
 80025e8:	4b35      	ldr	r3, [pc, #212]	@ (80026c0 <HAL_UART_MspInit+0x164>)
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	4a34      	ldr	r2, [pc, #208]	@ (80026c0 <HAL_UART_MspInit+0x164>)
 80025ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f4:	4b32      	ldr	r3, [pc, #200]	@ (80026c0 <HAL_UART_MspInit+0x164>)
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	4b2e      	ldr	r3, [pc, #184]	@ (80026c0 <HAL_UART_MspInit+0x164>)
 8002606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002608:	4a2d      	ldr	r2, [pc, #180]	@ (80026c0 <HAL_UART_MspInit+0x164>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002610:	4b2b      	ldr	r3, [pc, #172]	@ (80026c0 <HAL_UART_MspInit+0x164>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800261c:	230c      	movs	r3, #12
 800261e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002628:	2303      	movs	r3, #3
 800262a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800262c:	2307      	movs	r3, #7
 800262e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002630:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002634:	4619      	mov	r1, r3
 8002636:	4823      	ldr	r0, [pc, #140]	@ (80026c4 <HAL_UART_MspInit+0x168>)
 8002638:	f001 fb4c 	bl	8003cd4 <HAL_GPIO_Init>
}
 800263c:	e039      	b.n	80026b2 <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART3)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a22      	ldr	r2, [pc, #136]	@ (80026cc <HAL_UART_MspInit+0x170>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d134      	bne.n	80026b2 <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	4b1c      	ldr	r3, [pc, #112]	@ (80026c0 <HAL_UART_MspInit+0x164>)
 800264e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002650:	4a1b      	ldr	r2, [pc, #108]	@ (80026c0 <HAL_UART_MspInit+0x164>)
 8002652:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002656:	6413      	str	r3, [r2, #64]	@ 0x40
 8002658:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <HAL_UART_MspInit+0x164>)
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	4b15      	ldr	r3, [pc, #84]	@ (80026c0 <HAL_UART_MspInit+0x164>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266c:	4a14      	ldr	r2, [pc, #80]	@ (80026c0 <HAL_UART_MspInit+0x164>)
 800266e:	f043 0304 	orr.w	r3, r3, #4
 8002672:	6313      	str	r3, [r2, #48]	@ 0x30
 8002674:	4b12      	ldr	r3, [pc, #72]	@ (80026c0 <HAL_UART_MspInit+0x164>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002680:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002686:	2302      	movs	r3, #2
 8002688:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268e:	2303      	movs	r3, #3
 8002690:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002692:	2307      	movs	r3, #7
 8002694:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800269a:	4619      	mov	r1, r3
 800269c:	480c      	ldr	r0, [pc, #48]	@ (80026d0 <HAL_UART_MspInit+0x174>)
 800269e:	f001 fb19 	bl	8003cd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	2027      	movs	r0, #39	@ 0x27
 80026a8:	f000 fedb 	bl	8003462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80026ac:	2027      	movs	r0, #39	@ 0x27
 80026ae:	f000 fef4 	bl	800349a <HAL_NVIC_EnableIRQ>
}
 80026b2:	bf00      	nop
 80026b4:	3738      	adds	r7, #56	@ 0x38
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40011000 	.word	0x40011000
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40020000 	.word	0x40020000
 80026c8:	40004400 	.word	0x40004400
 80026cc:	40004800 	.word	0x40004800
 80026d0:	40020800 	.word	0x40020800

080026d4 <f_user_interface>:
 *      Author: ADMIN
 */
#include "user.h"
enum user_behavior_t user_state = INIT;
uint8_t led_7seg_colon_index = 0;
void f_user_interface(){
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
	switch(user_state){
 80026d8:	4b86      	ldr	r3, [pc, #536]	@ (80028f4 <f_user_interface+0x220>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	f000 8102 	beq.w	80028e6 <f_user_interface+0x212>
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	f300 8101 	bgt.w	80028ea <f_user_interface+0x216>
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <f_user_interface+0x1e>
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d004      	beq.n	80026fa <f_user_interface+0x26>
			if(cmd_send != 0x00) flag_send_cmd = 1;
			break;
		case SEND_PERIOD:
			break;
		default:
			break;
 80026f0:	e0fb      	b.n	80028ea <f_user_interface+0x216>
			user_state = SEND_MANUAL;
 80026f2:	4b80      	ldr	r3, [pc, #512]	@ (80028f4 <f_user_interface+0x220>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
			break;
 80026f8:	e0fa      	b.n	80028f0 <f_user_interface+0x21c>
			if(isPress(0)){
 80026fa:	2000      	movs	r0, #0
 80026fc:	f7fe fb1a 	bl	8000d34 <isPress>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d033      	beq.n	800276e <f_user_interface+0x9a>
				if(led_7seg_colon_index==0){
 8002706:	4b7c      	ldr	r3, [pc, #496]	@ (80028f8 <f_user_interface+0x224>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d116      	bne.n	800273c <f_user_interface+0x68>
					slave_address+= 0x10;
 800270e:	4b7b      	ldr	r3, [pc, #492]	@ (80028fc <f_user_interface+0x228>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	3310      	adds	r3, #16
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4b79      	ldr	r3, [pc, #484]	@ (80028fc <f_user_interface+0x228>)
 8002718:	701a      	strb	r2, [r3, #0]
					led_7seg_set_digit(slave_address>>4, 0, led_7seg_colon_index==0);
 800271a:	4b78      	ldr	r3, [pc, #480]	@ (80028fc <f_user_interface+0x228>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	b2db      	uxtb	r3, r3
 8002722:	4618      	mov	r0, r3
 8002724:	4b74      	ldr	r3, [pc, #464]	@ (80028f8 <f_user_interface+0x224>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	2100      	movs	r1, #0
 8002736:	f7ff fa77 	bl	8001c28 <led_7seg_set_digit>
 800273a:	e018      	b.n	800276e <f_user_interface+0x9a>
				else if(led_7seg_colon_index==1){
 800273c:	4b6e      	ldr	r3, [pc, #440]	@ (80028f8 <f_user_interface+0x224>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d114      	bne.n	800276e <f_user_interface+0x9a>
					slave_address+= 0x01;
 8002744:	4b6d      	ldr	r3, [pc, #436]	@ (80028fc <f_user_interface+0x228>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	b2da      	uxtb	r2, r3
 800274c:	4b6b      	ldr	r3, [pc, #428]	@ (80028fc <f_user_interface+0x228>)
 800274e:	701a      	strb	r2, [r3, #0]
					led_7seg_set_digit(slave_address & 0x0F, 1, led_7seg_colon_index==1);
 8002750:	4b6a      	ldr	r3, [pc, #424]	@ (80028fc <f_user_interface+0x228>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	f003 000f 	and.w	r0, r3, #15
 8002758:	4b67      	ldr	r3, [pc, #412]	@ (80028f8 <f_user_interface+0x224>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b01      	cmp	r3, #1
 800275e:	bf0c      	ite	eq
 8002760:	2301      	moveq	r3, #1
 8002762:	2300      	movne	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	2101      	movs	r1, #1
 800276a:	f7ff fa5d 	bl	8001c28 <led_7seg_set_digit>
			if(isLongPress(0)){
 800276e:	2000      	movs	r0, #0
 8002770:	f7fe fb00 	bl	8000d74 <isLongPress>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d033      	beq.n	80027e2 <f_user_interface+0x10e>
				if(led_7seg_colon_index==0){
 800277a:	4b5f      	ldr	r3, [pc, #380]	@ (80028f8 <f_user_interface+0x224>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d116      	bne.n	80027b0 <f_user_interface+0xdc>
					slave_address+= 0x50;
 8002782:	4b5e      	ldr	r3, [pc, #376]	@ (80028fc <f_user_interface+0x228>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	3350      	adds	r3, #80	@ 0x50
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4b5c      	ldr	r3, [pc, #368]	@ (80028fc <f_user_interface+0x228>)
 800278c:	701a      	strb	r2, [r3, #0]
					led_7seg_set_digit(slave_address>>4, 0, led_7seg_colon_index==0);
 800278e:	4b5b      	ldr	r3, [pc, #364]	@ (80028fc <f_user_interface+0x228>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	b2db      	uxtb	r3, r3
 8002796:	4618      	mov	r0, r3
 8002798:	4b57      	ldr	r3, [pc, #348]	@ (80028f8 <f_user_interface+0x224>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf0c      	ite	eq
 80027a0:	2301      	moveq	r3, #1
 80027a2:	2300      	movne	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	2100      	movs	r1, #0
 80027aa:	f7ff fa3d 	bl	8001c28 <led_7seg_set_digit>
 80027ae:	e018      	b.n	80027e2 <f_user_interface+0x10e>
				else if(led_7seg_colon_index==1){
 80027b0:	4b51      	ldr	r3, [pc, #324]	@ (80028f8 <f_user_interface+0x224>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d114      	bne.n	80027e2 <f_user_interface+0x10e>
					slave_address+= 0x05;
 80027b8:	4b50      	ldr	r3, [pc, #320]	@ (80028fc <f_user_interface+0x228>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	3305      	adds	r3, #5
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	4b4e      	ldr	r3, [pc, #312]	@ (80028fc <f_user_interface+0x228>)
 80027c2:	701a      	strb	r2, [r3, #0]
					led_7seg_set_digit(slave_address & 0x0F, 1, led_7seg_colon_index==1);
 80027c4:	4b4d      	ldr	r3, [pc, #308]	@ (80028fc <f_user_interface+0x228>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	f003 000f 	and.w	r0, r3, #15
 80027cc:	4b4a      	ldr	r3, [pc, #296]	@ (80028f8 <f_user_interface+0x224>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	2101      	movs	r1, #1
 80027de:	f7ff fa23 	bl	8001c28 <led_7seg_set_digit>
			if(isPress(4)){
 80027e2:	2004      	movs	r0, #4
 80027e4:	f7fe faa6 	bl	8000d34 <isPress>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d02b      	beq.n	8002846 <f_user_interface+0x172>
				led_7seg_colon_index++;
 80027ee:	4b42      	ldr	r3, [pc, #264]	@ (80028f8 <f_user_interface+0x224>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	3301      	adds	r3, #1
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4b40      	ldr	r3, [pc, #256]	@ (80028f8 <f_user_interface+0x224>)
 80027f8:	701a      	strb	r2, [r3, #0]
				if(led_7seg_colon_index > 3) led_7seg_colon_index = 0;
 80027fa:	4b3f      	ldr	r3, [pc, #252]	@ (80028f8 <f_user_interface+0x224>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d902      	bls.n	8002808 <f_user_interface+0x134>
 8002802:	4b3d      	ldr	r3, [pc, #244]	@ (80028f8 <f_user_interface+0x224>)
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
				led_7seg_set_digit(slave_address>>4, 0, led_7seg_colon_index==0);
 8002808:	4b3c      	ldr	r3, [pc, #240]	@ (80028fc <f_user_interface+0x228>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4618      	mov	r0, r3
 8002812:	4b39      	ldr	r3, [pc, #228]	@ (80028f8 <f_user_interface+0x224>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	bf0c      	ite	eq
 800281a:	2301      	moveq	r3, #1
 800281c:	2300      	movne	r3, #0
 800281e:	b2db      	uxtb	r3, r3
 8002820:	461a      	mov	r2, r3
 8002822:	2100      	movs	r1, #0
 8002824:	f7ff fa00 	bl	8001c28 <led_7seg_set_digit>
				led_7seg_set_digit(slave_address & 0x0F, 1, led_7seg_colon_index==1);
 8002828:	4b34      	ldr	r3, [pc, #208]	@ (80028fc <f_user_interface+0x228>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	f003 000f 	and.w	r0, r3, #15
 8002830:	4b31      	ldr	r3, [pc, #196]	@ (80028f8 <f_user_interface+0x224>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	2101      	movs	r1, #1
 8002842:	f7ff f9f1 	bl	8001c28 <led_7seg_set_digit>
			if(isPress(1)){
 8002846:	2001      	movs	r0, #1
 8002848:	f7fe fa74 	bl	8000d34 <isPress>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <f_user_interface+0x184>
				cmd_send = READ_POTENTION;
 8002852:	4b2b      	ldr	r3, [pc, #172]	@ (8002900 <f_user_interface+0x22c>)
 8002854:	2206      	movs	r2, #6
 8002856:	701a      	strb	r2, [r3, #0]
			if(isPress(2)){
 8002858:	2002      	movs	r0, #2
 800285a:	f7fe fa6b 	bl	8000d34 <isPress>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <f_user_interface+0x196>
				cmd_send = READ_POTENTION;
 8002864:	4b26      	ldr	r3, [pc, #152]	@ (8002900 <f_user_interface+0x22c>)
 8002866:	2206      	movs	r2, #6
 8002868:	701a      	strb	r2, [r3, #0]
			if(isPress(3)){
 800286a:	2003      	movs	r0, #3
 800286c:	f7fe fa62 	bl	8000d34 <isPress>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <f_user_interface+0x1a8>
				cmd_send = READ_LIGHT;
 8002876:	4b22      	ldr	r3, [pc, #136]	@ (8002900 <f_user_interface+0x22c>)
 8002878:	2204      	movs	r2, #4
 800287a:	701a      	strb	r2, [r3, #0]
			if(isPress(5)){
 800287c:	2005      	movs	r0, #5
 800287e:	f7fe fa59 	bl	8000d34 <isPress>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <f_user_interface+0x1ba>
				cmd_send = READ_TEMPERATURE;
 8002888:	4b1d      	ldr	r3, [pc, #116]	@ (8002900 <f_user_interface+0x22c>)
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
			if(isPress(6)){
 800288e:	2006      	movs	r0, #6
 8002890:	f7fe fa50 	bl	8000d34 <isPress>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <f_user_interface+0x1cc>
				cmd_send = READ_CURRENT;
 800289a:	4b19      	ldr	r3, [pc, #100]	@ (8002900 <f_user_interface+0x22c>)
 800289c:	2202      	movs	r2, #2
 800289e:	701a      	strb	r2, [r3, #0]
			if(isPress(7)){
 80028a0:	2007      	movs	r0, #7
 80028a2:	f7fe fa47 	bl	8000d34 <isPress>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <f_user_interface+0x1de>
				cmd_send = READ_VOLTAGE;
 80028ac:	4b14      	ldr	r3, [pc, #80]	@ (8002900 <f_user_interface+0x22c>)
 80028ae:	2203      	movs	r2, #3
 80028b0:	701a      	strb	r2, [r3, #0]
			if(isPress(9)){
 80028b2:	2009      	movs	r0, #9
 80028b4:	f7fe fa3e 	bl	8000d34 <isPress>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <f_user_interface+0x1f0>
				cmd_send = READ_LED;
 80028be:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <f_user_interface+0x22c>)
 80028c0:	2205      	movs	r2, #5
 80028c2:	701a      	strb	r2, [r3, #0]
			if(isPress(10)){
 80028c4:	200a      	movs	r0, #10
 80028c6:	f7fe fa35 	bl	8000d34 <isPress>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <f_user_interface+0x202>
				cmd_send = WRITE_LIGHT;
 80028d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <f_user_interface+0x22c>)
 80028d2:	220a      	movs	r2, #10
 80028d4:	701a      	strb	r2, [r3, #0]
			if(cmd_send != 0x00) flag_send_cmd = 1;
 80028d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002900 <f_user_interface+0x22c>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d007      	beq.n	80028ee <f_user_interface+0x21a>
 80028de:	4b09      	ldr	r3, [pc, #36]	@ (8002904 <f_user_interface+0x230>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
			break;
 80028e4:	e003      	b.n	80028ee <f_user_interface+0x21a>
			break;
 80028e6:	bf00      	nop
 80028e8:	e002      	b.n	80028f0 <f_user_interface+0x21c>
			break;
 80028ea:	bf00      	nop
 80028ec:	e000      	b.n	80028f0 <f_user_interface+0x21c>
			break;
 80028ee:	bf00      	nop
	}
}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000824 	.word	0x20000824
 80028f8:	20000825 	.word	0x20000825
 80028fc:	20000220 	.word	0x20000220
 8002900:	20000428 	.word	0x20000428
 8002904:	20000429 	.word	0x20000429

08002908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002908:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002940 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800290c:	f7ff fcc2 	bl	8002294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002910:	480c      	ldr	r0, [pc, #48]	@ (8002944 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002912:	490d      	ldr	r1, [pc, #52]	@ (8002948 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002914:	4a0d      	ldr	r2, [pc, #52]	@ (800294c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002918:	e002      	b.n	8002920 <LoopCopyDataInit>

0800291a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800291a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800291c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800291e:	3304      	adds	r3, #4

08002920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002924:	d3f9      	bcc.n	800291a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002926:	4a0a      	ldr	r2, [pc, #40]	@ (8002950 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002928:	4c0a      	ldr	r4, [pc, #40]	@ (8002954 <LoopFillZerobss+0x22>)
  movs r3, #0
 800292a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800292c:	e001      	b.n	8002932 <LoopFillZerobss>

0800292e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800292e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002930:	3204      	adds	r2, #4

08002932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002934:	d3fb      	bcc.n	800292e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002936:	f004 fa5d 	bl	8006df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800293a:	f7ff f9ef 	bl	8001d1c <main>
  bx  lr    
 800293e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002940:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002948:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 800294c:	08009e44 	.word	0x08009e44
  ldr r2, =_sbss
 8002950:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8002954:	2000082c 	.word	0x2000082c

08002958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002958:	e7fe      	b.n	8002958 <ADC_IRQHandler>
	...

0800295c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002960:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <HAL_Init+0x40>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0d      	ldr	r2, [pc, #52]	@ (800299c <HAL_Init+0x40>)
 8002966:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800296a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800296c:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <HAL_Init+0x40>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <HAL_Init+0x40>)
 8002972:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002976:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002978:	4b08      	ldr	r3, [pc, #32]	@ (800299c <HAL_Init+0x40>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a07      	ldr	r2, [pc, #28]	@ (800299c <HAL_Init+0x40>)
 800297e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002984:	2003      	movs	r0, #3
 8002986:	f000 fd61 	bl	800344c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800298a:	200f      	movs	r0, #15
 800298c:	f000 f808 	bl	80029a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002990:	f7ff fc0a 	bl	80021a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023c00 	.word	0x40023c00

080029a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a8:	4b12      	ldr	r3, [pc, #72]	@ (80029f4 <HAL_InitTick+0x54>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b12      	ldr	r3, [pc, #72]	@ (80029f8 <HAL_InitTick+0x58>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	4619      	mov	r1, r3
 80029b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fd79 	bl	80034b6 <HAL_SYSTICK_Config>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e00e      	b.n	80029ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b0f      	cmp	r3, #15
 80029d2:	d80a      	bhi.n	80029ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029d4:	2200      	movs	r2, #0
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	f04f 30ff 	mov.w	r0, #4294967295
 80029dc:	f000 fd41 	bl	8003462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e0:	4a06      	ldr	r2, [pc, #24]	@ (80029fc <HAL_InitTick+0x5c>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	e000      	b.n	80029ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	2000023c 	.word	0x2000023c
 80029f8:	20000244 	.word	0x20000244
 80029fc:	20000240 	.word	0x20000240

08002a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a04:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <HAL_IncTick+0x20>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <HAL_IncTick+0x24>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4413      	add	r3, r2
 8002a10:	4a04      	ldr	r2, [pc, #16]	@ (8002a24 <HAL_IncTick+0x24>)
 8002a12:	6013      	str	r3, [r2, #0]
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	20000244 	.word	0x20000244
 8002a24:	20000828 	.word	0x20000828

08002a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a2c:	4b03      	ldr	r3, [pc, #12]	@ (8002a3c <HAL_GetTick+0x14>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000828 	.word	0x20000828

08002a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a48:	f7ff ffee 	bl	8002a28 <HAL_GetTick>
 8002a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d005      	beq.n	8002a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a84 <HAL_Delay+0x44>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a66:	bf00      	nop
 8002a68:	f7ff ffde 	bl	8002a28 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d8f7      	bhi.n	8002a68 <HAL_Delay+0x28>
  {
  }
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000244 	.word	0x20000244

08002a88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e033      	b.n	8002b06 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d109      	bne.n	8002aba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fd ffc4 	bl	8000a34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d118      	bne.n	8002af8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ace:	f023 0302 	bic.w	r3, r3, #2
 8002ad2:	f043 0202 	orr.w	r2, r3, #2
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fa68 	bl	8002fb0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	f023 0303 	bic.w	r3, r3, #3
 8002aee:	f043 0201 	orr.w	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002af6:	e001      	b.n	8002afc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_ADC_Start_DMA+0x1e>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e0e9      	b.n	8002d02 <HAL_ADC_Start_DMA+0x1f2>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d018      	beq.n	8002b76 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b54:	4b6d      	ldr	r3, [pc, #436]	@ (8002d0c <HAL_ADC_Start_DMA+0x1fc>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a6d      	ldr	r2, [pc, #436]	@ (8002d10 <HAL_ADC_Start_DMA+0x200>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	0c9a      	lsrs	r2, r3, #18
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002b68:	e002      	b.n	8002b70 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f9      	bne.n	8002b6a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b84:	d107      	bne.n	8002b96 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b94:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	f040 80a1 	bne.w	8002ce8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002bae:	f023 0301 	bic.w	r3, r3, #1
 8002bb2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d007      	beq.n	8002bd8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002bd0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002be4:	d106      	bne.n	8002bf4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bea:	f023 0206 	bic.w	r2, r3, #6
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	645a      	str	r2, [r3, #68]	@ 0x44
 8002bf2:	e002      	b.n	8002bfa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c02:	4b44      	ldr	r3, [pc, #272]	@ (8002d14 <HAL_ADC_Start_DMA+0x204>)
 8002c04:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0a:	4a43      	ldr	r2, [pc, #268]	@ (8002d18 <HAL_ADC_Start_DMA+0x208>)
 8002c0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c12:	4a42      	ldr	r2, [pc, #264]	@ (8002d1c <HAL_ADC_Start_DMA+0x20c>)
 8002c14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1a:	4a41      	ldr	r2, [pc, #260]	@ (8002d20 <HAL_ADC_Start_DMA+0x210>)
 8002c1c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002c26:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002c36:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c46:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	334c      	adds	r3, #76	@ 0x4c
 8002c52:	4619      	mov	r1, r3
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f000 fce8 	bl	800362c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d12a      	bne.n	8002cbe <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a2d      	ldr	r2, [pc, #180]	@ (8002d24 <HAL_ADC_Start_DMA+0x214>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d015      	beq.n	8002c9e <HAL_ADC_Start_DMA+0x18e>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a2c      	ldr	r2, [pc, #176]	@ (8002d28 <HAL_ADC_Start_DMA+0x218>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d105      	bne.n	8002c88 <HAL_ADC_Start_DMA+0x178>
 8002c7c:	4b25      	ldr	r3, [pc, #148]	@ (8002d14 <HAL_ADC_Start_DMA+0x204>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a27      	ldr	r2, [pc, #156]	@ (8002d2c <HAL_ADC_Start_DMA+0x21c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d136      	bne.n	8002d00 <HAL_ADC_Start_DMA+0x1f0>
 8002c92:	4b20      	ldr	r3, [pc, #128]	@ (8002d14 <HAL_ADC_Start_DMA+0x204>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d130      	bne.n	8002d00 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d129      	bne.n	8002d00 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	e020      	b.n	8002d00 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a18      	ldr	r2, [pc, #96]	@ (8002d24 <HAL_ADC_Start_DMA+0x214>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d11b      	bne.n	8002d00 <HAL_ADC_Start_DMA+0x1f0>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d114      	bne.n	8002d00 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	e00b      	b.n	8002d00 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	f043 0210 	orr.w	r2, r3, #16
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf8:	f043 0201 	orr.w	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	2000023c 	.word	0x2000023c
 8002d10:	431bde83 	.word	0x431bde83
 8002d14:	40012300 	.word	0x40012300
 8002d18:	080031a9 	.word	0x080031a9
 8002d1c:	08003263 	.word	0x08003263
 8002d20:	0800327f 	.word	0x0800327f
 8002d24:	40012000 	.word	0x40012000
 8002d28:	40012100 	.word	0x40012100
 8002d2c:	40012200 	.word	0x40012200

08002d30 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x1c>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e105      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x228>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b09      	cmp	r3, #9
 8002d96:	d925      	bls.n	8002de4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68d9      	ldr	r1, [r3, #12]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	3b1e      	subs	r3, #30
 8002dae:	2207      	movs	r2, #7
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43da      	mvns	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	400a      	ands	r2, r1
 8002dbc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68d9      	ldr	r1, [r3, #12]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	4618      	mov	r0, r3
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4403      	add	r3, r0
 8002dd6:	3b1e      	subs	r3, #30
 8002dd8:	409a      	lsls	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	e022      	b.n	8002e2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6919      	ldr	r1, [r3, #16]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	2207      	movs	r2, #7
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	400a      	ands	r2, r1
 8002e06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6919      	ldr	r1, [r3, #16]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	4618      	mov	r0, r3
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4403      	add	r3, r0
 8002e20:	409a      	lsls	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b06      	cmp	r3, #6
 8002e30:	d824      	bhi.n	8002e7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	3b05      	subs	r3, #5
 8002e44:	221f      	movs	r2, #31
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	400a      	ands	r2, r1
 8002e52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	4618      	mov	r0, r3
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3b05      	subs	r3, #5
 8002e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e7a:	e04c      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b0c      	cmp	r3, #12
 8002e82:	d824      	bhi.n	8002ece <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	3b23      	subs	r3, #35	@ 0x23
 8002e96:	221f      	movs	r2, #31
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43da      	mvns	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	400a      	ands	r2, r1
 8002ea4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3b23      	subs	r3, #35	@ 0x23
 8002ec0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ecc:	e023      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	3b41      	subs	r3, #65	@ 0x41
 8002ee0:	221f      	movs	r2, #31
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	400a      	ands	r2, r1
 8002eee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	4618      	mov	r0, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	3b41      	subs	r3, #65	@ 0x41
 8002f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f16:	4b22      	ldr	r3, [pc, #136]	@ (8002fa0 <HAL_ADC_ConfigChannel+0x234>)
 8002f18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a21      	ldr	r2, [pc, #132]	@ (8002fa4 <HAL_ADC_ConfigChannel+0x238>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d109      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x1cc>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b12      	cmp	r3, #18
 8002f2a:	d105      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a19      	ldr	r2, [pc, #100]	@ (8002fa4 <HAL_ADC_ConfigChannel+0x238>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d123      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x21e>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d003      	beq.n	8002f52 <HAL_ADC_ConfigChannel+0x1e6>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b11      	cmp	r3, #17
 8002f50:	d11b      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b10      	cmp	r3, #16
 8002f64:	d111      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f66:	4b10      	ldr	r3, [pc, #64]	@ (8002fa8 <HAL_ADC_ConfigChannel+0x23c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a10      	ldr	r2, [pc, #64]	@ (8002fac <HAL_ADC_ConfigChannel+0x240>)
 8002f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f70:	0c9a      	lsrs	r2, r3, #18
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f7c:	e002      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f9      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	40012300 	.word	0x40012300
 8002fa4:	40012000 	.word	0x40012000
 8002fa8:	2000023c 	.word	0x2000023c
 8002fac:	431bde83 	.word	0x431bde83

08002fb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fb8:	4b79      	ldr	r3, [pc, #484]	@ (80031a0 <ADC_Init+0x1f0>)
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fe4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	021a      	lsls	r2, r3, #8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003008:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800302a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6899      	ldr	r1, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003042:	4a58      	ldr	r2, [pc, #352]	@ (80031a4 <ADC_Init+0x1f4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d022      	beq.n	800308e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003056:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6899      	ldr	r1, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003078:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6899      	ldr	r1, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	e00f      	b.n	80030ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800309c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030ac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0202 	bic.w	r2, r2, #2
 80030bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6899      	ldr	r1, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	7e1b      	ldrb	r3, [r3, #24]
 80030c8:	005a      	lsls	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01b      	beq.n	8003114 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030ea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80030fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6859      	ldr	r1, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	3b01      	subs	r3, #1
 8003108:	035a      	lsls	r2, r3, #13
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	e007      	b.n	8003124 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003122:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003132:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	3b01      	subs	r3, #1
 8003140:	051a      	lsls	r2, r3, #20
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003158:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6899      	ldr	r1, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003166:	025a      	lsls	r2, r3, #9
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800317e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6899      	ldr	r1, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	029a      	lsls	r2, r3, #10
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	609a      	str	r2, [r3, #8]
}
 8003194:	bf00      	nop
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	40012300 	.word	0x40012300
 80031a4:	0f000001 	.word	0x0f000001

080031a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d13c      	bne.n	800323c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d12b      	bne.n	8003234 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d127      	bne.n	8003234 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ea:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d006      	beq.n	8003200 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d119      	bne.n	8003234 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0220 	bic.w	r2, r2, #32
 800320e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003214:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d105      	bne.n	8003234 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	f043 0201 	orr.w	r2, r3, #1
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f7ff fd7b 	bl	8002d30 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800323a:	e00e      	b.n	800325a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f7ff fd85 	bl	8002d58 <HAL_ADC_ErrorCallback>
}
 800324e:	e004      	b.n	800325a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	4798      	blx	r3
}
 800325a:	bf00      	nop
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800326e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f7ff fd67 	bl	8002d44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2240      	movs	r2, #64	@ 0x40
 8003290:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003296:	f043 0204 	orr.w	r2, r3, #4
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7ff fd5a 	bl	8002d58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032a4:	bf00      	nop
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032bc:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <__NVIC_SetPriorityGrouping+0x44>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032c8:	4013      	ands	r3, r2
 80032ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032de:	4a04      	ldr	r2, [pc, #16]	@ (80032f0 <__NVIC_SetPriorityGrouping+0x44>)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	60d3      	str	r3, [r2, #12]
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032f8:	4b04      	ldr	r3, [pc, #16]	@ (800330c <__NVIC_GetPriorityGrouping+0x18>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	f003 0307 	and.w	r3, r3, #7
}
 8003302:	4618      	mov	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800331a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331e:	2b00      	cmp	r3, #0
 8003320:	db0b      	blt.n	800333a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	f003 021f 	and.w	r2, r3, #31
 8003328:	4907      	ldr	r1, [pc, #28]	@ (8003348 <__NVIC_EnableIRQ+0x38>)
 800332a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	2001      	movs	r0, #1
 8003332:	fa00 f202 	lsl.w	r2, r0, r2
 8003336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	e000e100 	.word	0xe000e100

0800334c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	6039      	str	r1, [r7, #0]
 8003356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335c:	2b00      	cmp	r3, #0
 800335e:	db0a      	blt.n	8003376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	b2da      	uxtb	r2, r3
 8003364:	490c      	ldr	r1, [pc, #48]	@ (8003398 <__NVIC_SetPriority+0x4c>)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	0112      	lsls	r2, r2, #4
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	440b      	add	r3, r1
 8003370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003374:	e00a      	b.n	800338c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4908      	ldr	r1, [pc, #32]	@ (800339c <__NVIC_SetPriority+0x50>)
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	3b04      	subs	r3, #4
 8003384:	0112      	lsls	r2, r2, #4
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	440b      	add	r3, r1
 800338a:	761a      	strb	r2, [r3, #24]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000e100 	.word	0xe000e100
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b089      	sub	sp, #36	@ 0x24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f1c3 0307 	rsb	r3, r3, #7
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	bf28      	it	cs
 80033be:	2304      	movcs	r3, #4
 80033c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d902      	bls.n	80033d0 <NVIC_EncodePriority+0x30>
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3b03      	subs	r3, #3
 80033ce:	e000      	b.n	80033d2 <NVIC_EncodePriority+0x32>
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d4:	f04f 32ff 	mov.w	r2, #4294967295
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43da      	mvns	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	401a      	ands	r2, r3
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e8:	f04f 31ff 	mov.w	r1, #4294967295
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	fa01 f303 	lsl.w	r3, r1, r3
 80033f2:	43d9      	mvns	r1, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f8:	4313      	orrs	r3, r2
         );
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3724      	adds	r7, #36	@ 0x24
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3b01      	subs	r3, #1
 8003414:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003418:	d301      	bcc.n	800341e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341a:	2301      	movs	r3, #1
 800341c:	e00f      	b.n	800343e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341e:	4a0a      	ldr	r2, [pc, #40]	@ (8003448 <SysTick_Config+0x40>)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3b01      	subs	r3, #1
 8003424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003426:	210f      	movs	r1, #15
 8003428:	f04f 30ff 	mov.w	r0, #4294967295
 800342c:	f7ff ff8e 	bl	800334c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003430:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <SysTick_Config+0x40>)
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003436:	4b04      	ldr	r3, [pc, #16]	@ (8003448 <SysTick_Config+0x40>)
 8003438:	2207      	movs	r2, #7
 800343a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	e000e010 	.word	0xe000e010

0800344c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ff29 	bl	80032ac <__NVIC_SetPriorityGrouping>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003462:	b580      	push	{r7, lr}
 8003464:	b086      	sub	sp, #24
 8003466:	af00      	add	r7, sp, #0
 8003468:	4603      	mov	r3, r0
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
 800346e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003474:	f7ff ff3e 	bl	80032f4 <__NVIC_GetPriorityGrouping>
 8003478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	6978      	ldr	r0, [r7, #20]
 8003480:	f7ff ff8e 	bl	80033a0 <NVIC_EncodePriority>
 8003484:	4602      	mov	r2, r0
 8003486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff ff5d 	bl	800334c <__NVIC_SetPriority>
}
 8003492:	bf00      	nop
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	4603      	mov	r3, r0
 80034a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff ff31 	bl	8003310 <__NVIC_EnableIRQ>
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff ffa2 	bl	8003408 <SysTick_Config>
 80034c4:	4603      	mov	r3, r0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034dc:	f7ff faa4 	bl	8002a28 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e099      	b.n	8003620 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0201 	bic.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800350c:	e00f      	b.n	800352e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800350e:	f7ff fa8b 	bl	8002a28 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b05      	cmp	r3, #5
 800351a:	d908      	bls.n	800352e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2203      	movs	r2, #3
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e078      	b.n	8003620 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1e8      	bne.n	800350e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4b38      	ldr	r3, [pc, #224]	@ (8003628 <HAL_DMA_Init+0x158>)
 8003548:	4013      	ands	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800355a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003566:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003572:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	2b04      	cmp	r3, #4
 8003586:	d107      	bne.n	8003598 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003590:	4313      	orrs	r3, r2
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f023 0307 	bic.w	r3, r3, #7
 80035ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d117      	bne.n	80035f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00e      	beq.n	80035f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fb01 	bl	8003bdc <DMA_CheckFifoParam>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2240      	movs	r2, #64	@ 0x40
 80035e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80035ee:	2301      	movs	r3, #1
 80035f0:	e016      	b.n	8003620 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fab8 	bl	8003b70 <DMA_CalcBaseAndBitshift>
 8003600:	4603      	mov	r3, r0
 8003602:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003608:	223f      	movs	r2, #63	@ 0x3f
 800360a:	409a      	lsls	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	f010803f 	.word	0xf010803f

0800362c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003642:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_DMA_Start_IT+0x26>
 800364e:	2302      	movs	r3, #2
 8003650:	e040      	b.n	80036d4 <HAL_DMA_Start_IT+0xa8>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b01      	cmp	r3, #1
 8003664:	d12f      	bne.n	80036c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2202      	movs	r2, #2
 800366a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 fa4a 	bl	8003b14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003684:	223f      	movs	r2, #63	@ 0x3f
 8003686:	409a      	lsls	r2, r3
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0216 	orr.w	r2, r2, #22
 800369a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d007      	beq.n	80036b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0208 	orr.w	r2, r2, #8
 80036b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	e005      	b.n	80036d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036ce:	2302      	movs	r3, #2
 80036d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036ea:	f7ff f99d 	bl	8002a28 <HAL_GetTick>
 80036ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d008      	beq.n	800370e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2280      	movs	r2, #128	@ 0x80
 8003700:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e052      	b.n	80037b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0216 	bic.w	r2, r2, #22
 800371c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695a      	ldr	r2, [r3, #20]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800372c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d103      	bne.n	800373e <HAL_DMA_Abort+0x62>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800373a:	2b00      	cmp	r3, #0
 800373c:	d007      	beq.n	800374e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0208 	bic.w	r2, r2, #8
 800374c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0201 	bic.w	r2, r2, #1
 800375c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800375e:	e013      	b.n	8003788 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003760:	f7ff f962 	bl	8002a28 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b05      	cmp	r3, #5
 800376c:	d90c      	bls.n	8003788 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2220      	movs	r2, #32
 8003772:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2203      	movs	r2, #3
 8003778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e015      	b.n	80037b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1e4      	bne.n	8003760 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379a:	223f      	movs	r2, #63	@ 0x3f
 800379c:	409a      	lsls	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d004      	beq.n	80037da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2280      	movs	r2, #128	@ 0x80
 80037d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e00c      	b.n	80037f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2205      	movs	r2, #5
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0201 	bic.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800380c:	4b8e      	ldr	r3, [pc, #568]	@ (8003a48 <HAL_DMA_IRQHandler+0x248>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a8e      	ldr	r2, [pc, #568]	@ (8003a4c <HAL_DMA_IRQHandler+0x24c>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	0a9b      	lsrs	r3, r3, #10
 8003818:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382a:	2208      	movs	r2, #8
 800382c:	409a      	lsls	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4013      	ands	r3, r2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01a      	beq.n	800386c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d013      	beq.n	800386c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0204 	bic.w	r2, r2, #4
 8003852:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003858:	2208      	movs	r2, #8
 800385a:	409a      	lsls	r2, r3
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003864:	f043 0201 	orr.w	r2, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003870:	2201      	movs	r2, #1
 8003872:	409a      	lsls	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4013      	ands	r3, r2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d012      	beq.n	80038a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00b      	beq.n	80038a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388e:	2201      	movs	r2, #1
 8003890:	409a      	lsls	r2, r3
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389a:	f043 0202 	orr.w	r2, r3, #2
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a6:	2204      	movs	r2, #4
 80038a8:	409a      	lsls	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d012      	beq.n	80038d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00b      	beq.n	80038d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c4:	2204      	movs	r2, #4
 80038c6:	409a      	lsls	r2, r3
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d0:	f043 0204 	orr.w	r2, r3, #4
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038dc:	2210      	movs	r2, #16
 80038de:	409a      	lsls	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d043      	beq.n	8003970 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d03c      	beq.n	8003970 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fa:	2210      	movs	r2, #16
 80038fc:	409a      	lsls	r2, r3
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d018      	beq.n	8003942 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d108      	bne.n	8003930 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d024      	beq.n	8003970 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	4798      	blx	r3
 800392e:	e01f      	b.n	8003970 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01b      	beq.n	8003970 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	4798      	blx	r3
 8003940:	e016      	b.n	8003970 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d107      	bne.n	8003960 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0208 	bic.w	r2, r2, #8
 800395e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003974:	2220      	movs	r2, #32
 8003976:	409a      	lsls	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 808f 	beq.w	8003aa0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 8087 	beq.w	8003aa0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003996:	2220      	movs	r2, #32
 8003998:	409a      	lsls	r2, r3
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b05      	cmp	r3, #5
 80039a8:	d136      	bne.n	8003a18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0216 	bic.w	r2, r2, #22
 80039b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695a      	ldr	r2, [r3, #20]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d103      	bne.n	80039da <HAL_DMA_IRQHandler+0x1da>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d007      	beq.n	80039ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0208 	bic.w	r2, r2, #8
 80039e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ee:	223f      	movs	r2, #63	@ 0x3f
 80039f0:	409a      	lsls	r2, r3
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d07e      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	4798      	blx	r3
        }
        return;
 8003a16:	e079      	b.n	8003b0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d01d      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10d      	bne.n	8003a50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d031      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	4798      	blx	r3
 8003a44:	e02c      	b.n	8003aa0 <HAL_DMA_IRQHandler+0x2a0>
 8003a46:	bf00      	nop
 8003a48:	2000023c 	.word	0x2000023c
 8003a4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d023      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	4798      	blx	r3
 8003a60:	e01e      	b.n	8003aa0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10f      	bne.n	8003a90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0210 	bic.w	r2, r2, #16
 8003a7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d032      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d022      	beq.n	8003afa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2205      	movs	r2, #5
 8003ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0201 	bic.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d307      	bcc.n	8003ae8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f2      	bne.n	8003acc <HAL_DMA_IRQHandler+0x2cc>
 8003ae6:	e000      	b.n	8003aea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ae8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d005      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
 8003b0a:	e000      	b.n	8003b0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b0c:	bf00      	nop
    }
  }
}
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b40      	cmp	r3, #64	@ 0x40
 8003b40:	d108      	bne.n	8003b54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b52:	e007      	b.n	8003b64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	60da      	str	r2, [r3, #12]
}
 8003b64:	bf00      	nop
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	3b10      	subs	r3, #16
 8003b80:	4a14      	ldr	r2, [pc, #80]	@ (8003bd4 <DMA_CalcBaseAndBitshift+0x64>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	091b      	lsrs	r3, r3, #4
 8003b88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b8a:	4a13      	ldr	r2, [pc, #76]	@ (8003bd8 <DMA_CalcBaseAndBitshift+0x68>)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4413      	add	r3, r2
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	d909      	bls.n	8003bb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ba6:	f023 0303 	bic.w	r3, r3, #3
 8003baa:	1d1a      	adds	r2, r3, #4
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	659a      	str	r2, [r3, #88]	@ 0x58
 8003bb0:	e007      	b.n	8003bc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003bba:	f023 0303 	bic.w	r3, r3, #3
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	aaaaaaab 	.word	0xaaaaaaab
 8003bd8:	08009e2c 	.word	0x08009e2c

08003bdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d11f      	bne.n	8003c36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b03      	cmp	r3, #3
 8003bfa:	d856      	bhi.n	8003caa <DMA_CheckFifoParam+0xce>
 8003bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8003c04 <DMA_CheckFifoParam+0x28>)
 8003bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c02:	bf00      	nop
 8003c04:	08003c15 	.word	0x08003c15
 8003c08:	08003c27 	.word	0x08003c27
 8003c0c:	08003c15 	.word	0x08003c15
 8003c10:	08003cab 	.word	0x08003cab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d046      	beq.n	8003cae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c24:	e043      	b.n	8003cae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c2e:	d140      	bne.n	8003cb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c34:	e03d      	b.n	8003cb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c3e:	d121      	bne.n	8003c84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d837      	bhi.n	8003cb6 <DMA_CheckFifoParam+0xda>
 8003c46:	a201      	add	r2, pc, #4	@ (adr r2, 8003c4c <DMA_CheckFifoParam+0x70>)
 8003c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4c:	08003c5d 	.word	0x08003c5d
 8003c50:	08003c63 	.word	0x08003c63
 8003c54:	08003c5d 	.word	0x08003c5d
 8003c58:	08003c75 	.word	0x08003c75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c60:	e030      	b.n	8003cc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d025      	beq.n	8003cba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c72:	e022      	b.n	8003cba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c7c:	d11f      	bne.n	8003cbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c82:	e01c      	b.n	8003cbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d903      	bls.n	8003c92 <DMA_CheckFifoParam+0xb6>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d003      	beq.n	8003c98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c90:	e018      	b.n	8003cc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
      break;
 8003c96:	e015      	b.n	8003cc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00e      	beq.n	8003cc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca8:	e00b      	b.n	8003cc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003caa:	bf00      	nop
 8003cac:	e00a      	b.n	8003cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003cae:	bf00      	nop
 8003cb0:	e008      	b.n	8003cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003cb2:	bf00      	nop
 8003cb4:	e006      	b.n	8003cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003cb6:	bf00      	nop
 8003cb8:	e004      	b.n	8003cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003cba:	bf00      	nop
 8003cbc:	e002      	b.n	8003cc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003cbe:	bf00      	nop
 8003cc0:	e000      	b.n	8003cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003cc2:	bf00      	nop
    }
  } 
  
  return status; 
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop

08003cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b089      	sub	sp, #36	@ 0x24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	e16b      	b.n	8003fc8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	4013      	ands	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	f040 815a 	bne.w	8003fc2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d005      	beq.n	8003d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d130      	bne.n	8003d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	2203      	movs	r2, #3
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	43db      	mvns	r3, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	f003 0201 	and.w	r2, r3, #1
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d017      	beq.n	8003dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	2203      	movs	r2, #3
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43db      	mvns	r3, r3
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4013      	ands	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d123      	bne.n	8003e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	08da      	lsrs	r2, r3, #3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3208      	adds	r2, #8
 8003dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	220f      	movs	r2, #15
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	08da      	lsrs	r2, r3, #3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3208      	adds	r2, #8
 8003e12:	69b9      	ldr	r1, [r7, #24]
 8003e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	2203      	movs	r2, #3
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 0203 	and.w	r2, r3, #3
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80b4 	beq.w	8003fc2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	4b60      	ldr	r3, [pc, #384]	@ (8003fe0 <HAL_GPIO_Init+0x30c>)
 8003e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e62:	4a5f      	ldr	r2, [pc, #380]	@ (8003fe0 <HAL_GPIO_Init+0x30c>)
 8003e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e6a:	4b5d      	ldr	r3, [pc, #372]	@ (8003fe0 <HAL_GPIO_Init+0x30c>)
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e76:	4a5b      	ldr	r2, [pc, #364]	@ (8003fe4 <HAL_GPIO_Init+0x310>)
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	089b      	lsrs	r3, r3, #2
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	220f      	movs	r2, #15
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43db      	mvns	r3, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4013      	ands	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a52      	ldr	r2, [pc, #328]	@ (8003fe8 <HAL_GPIO_Init+0x314>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d02b      	beq.n	8003efa <HAL_GPIO_Init+0x226>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a51      	ldr	r2, [pc, #324]	@ (8003fec <HAL_GPIO_Init+0x318>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d025      	beq.n	8003ef6 <HAL_GPIO_Init+0x222>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a50      	ldr	r2, [pc, #320]	@ (8003ff0 <HAL_GPIO_Init+0x31c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01f      	beq.n	8003ef2 <HAL_GPIO_Init+0x21e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a4f      	ldr	r2, [pc, #316]	@ (8003ff4 <HAL_GPIO_Init+0x320>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d019      	beq.n	8003eee <HAL_GPIO_Init+0x21a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a4e      	ldr	r2, [pc, #312]	@ (8003ff8 <HAL_GPIO_Init+0x324>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d013      	beq.n	8003eea <HAL_GPIO_Init+0x216>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a4d      	ldr	r2, [pc, #308]	@ (8003ffc <HAL_GPIO_Init+0x328>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00d      	beq.n	8003ee6 <HAL_GPIO_Init+0x212>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a4c      	ldr	r2, [pc, #304]	@ (8004000 <HAL_GPIO_Init+0x32c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d007      	beq.n	8003ee2 <HAL_GPIO_Init+0x20e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a4b      	ldr	r2, [pc, #300]	@ (8004004 <HAL_GPIO_Init+0x330>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d101      	bne.n	8003ede <HAL_GPIO_Init+0x20a>
 8003eda:	2307      	movs	r3, #7
 8003edc:	e00e      	b.n	8003efc <HAL_GPIO_Init+0x228>
 8003ede:	2308      	movs	r3, #8
 8003ee0:	e00c      	b.n	8003efc <HAL_GPIO_Init+0x228>
 8003ee2:	2306      	movs	r3, #6
 8003ee4:	e00a      	b.n	8003efc <HAL_GPIO_Init+0x228>
 8003ee6:	2305      	movs	r3, #5
 8003ee8:	e008      	b.n	8003efc <HAL_GPIO_Init+0x228>
 8003eea:	2304      	movs	r3, #4
 8003eec:	e006      	b.n	8003efc <HAL_GPIO_Init+0x228>
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e004      	b.n	8003efc <HAL_GPIO_Init+0x228>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e002      	b.n	8003efc <HAL_GPIO_Init+0x228>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <HAL_GPIO_Init+0x228>
 8003efa:	2300      	movs	r3, #0
 8003efc:	69fa      	ldr	r2, [r7, #28]
 8003efe:	f002 0203 	and.w	r2, r2, #3
 8003f02:	0092      	lsls	r2, r2, #2
 8003f04:	4093      	lsls	r3, r2
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f0c:	4935      	ldr	r1, [pc, #212]	@ (8003fe4 <HAL_GPIO_Init+0x310>)
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	089b      	lsrs	r3, r3, #2
 8003f12:	3302      	adds	r3, #2
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f1a:	4b3b      	ldr	r3, [pc, #236]	@ (8004008 <HAL_GPIO_Init+0x334>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	43db      	mvns	r3, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4013      	ands	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f3e:	4a32      	ldr	r2, [pc, #200]	@ (8004008 <HAL_GPIO_Init+0x334>)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f44:	4b30      	ldr	r3, [pc, #192]	@ (8004008 <HAL_GPIO_Init+0x334>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4013      	ands	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f68:	4a27      	ldr	r2, [pc, #156]	@ (8004008 <HAL_GPIO_Init+0x334>)
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f6e:	4b26      	ldr	r3, [pc, #152]	@ (8004008 <HAL_GPIO_Init+0x334>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	43db      	mvns	r3, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f92:	4a1d      	ldr	r2, [pc, #116]	@ (8004008 <HAL_GPIO_Init+0x334>)
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f98:	4b1b      	ldr	r3, [pc, #108]	@ (8004008 <HAL_GPIO_Init+0x334>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fbc:	4a12      	ldr	r2, [pc, #72]	@ (8004008 <HAL_GPIO_Init+0x334>)
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	61fb      	str	r3, [r7, #28]
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	2b0f      	cmp	r3, #15
 8003fcc:	f67f ae90 	bls.w	8003cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	3724      	adds	r7, #36	@ 0x24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	40013800 	.word	0x40013800
 8003fe8:	40020000 	.word	0x40020000
 8003fec:	40020400 	.word	0x40020400
 8003ff0:	40020800 	.word	0x40020800
 8003ff4:	40020c00 	.word	0x40020c00
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40021400 	.word	0x40021400
 8004000:	40021800 	.word	0x40021800
 8004004:	40021c00 	.word	0x40021c00
 8004008:	40013c00 	.word	0x40013c00

0800400c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	807b      	strh	r3, [r7, #2]
 8004018:	4613      	mov	r3, r2
 800401a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800401c:	787b      	ldrb	r3, [r7, #1]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004022:	887a      	ldrh	r2, [r7, #2]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004028:	e003      	b.n	8004032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800402a:	887b      	ldrh	r3, [r7, #2]
 800402c:	041a      	lsls	r2, r3, #16
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	619a      	str	r2, [r3, #24]
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
	...

08004040 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e267      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d075      	beq.n	800414a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800405e:	4b88      	ldr	r3, [pc, #544]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
 8004066:	2b04      	cmp	r3, #4
 8004068:	d00c      	beq.n	8004084 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800406a:	4b85      	ldr	r3, [pc, #532]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004072:	2b08      	cmp	r3, #8
 8004074:	d112      	bne.n	800409c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004076:	4b82      	ldr	r3, [pc, #520]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800407e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004082:	d10b      	bne.n	800409c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004084:	4b7e      	ldr	r3, [pc, #504]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d05b      	beq.n	8004148 <HAL_RCC_OscConfig+0x108>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d157      	bne.n	8004148 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e242      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040a4:	d106      	bne.n	80040b4 <HAL_RCC_OscConfig+0x74>
 80040a6:	4b76      	ldr	r3, [pc, #472]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a75      	ldr	r2, [pc, #468]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e01d      	b.n	80040f0 <HAL_RCC_OscConfig+0xb0>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCC_OscConfig+0x98>
 80040be:	4b70      	ldr	r3, [pc, #448]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a6f      	ldr	r2, [pc, #444]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 80040c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	4b6d      	ldr	r3, [pc, #436]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a6c      	ldr	r2, [pc, #432]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 80040d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e00b      	b.n	80040f0 <HAL_RCC_OscConfig+0xb0>
 80040d8:	4b69      	ldr	r3, [pc, #420]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a68      	ldr	r2, [pc, #416]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 80040de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	4b66      	ldr	r3, [pc, #408]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a65      	ldr	r2, [pc, #404]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 80040ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d013      	beq.n	8004120 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f8:	f7fe fc96 	bl	8002a28 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004100:	f7fe fc92 	bl	8002a28 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b64      	cmp	r3, #100	@ 0x64
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e207      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004112:	4b5b      	ldr	r3, [pc, #364]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0xc0>
 800411e:	e014      	b.n	800414a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004120:	f7fe fc82 	bl	8002a28 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004128:	f7fe fc7e 	bl	8002a28 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	@ 0x64
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e1f3      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800413a:	4b51      	ldr	r3, [pc, #324]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0xe8>
 8004146:	e000      	b.n	800414a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d063      	beq.n	800421e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004156:	4b4a      	ldr	r3, [pc, #296]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00b      	beq.n	800417a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004162:	4b47      	ldr	r3, [pc, #284]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800416a:	2b08      	cmp	r3, #8
 800416c:	d11c      	bne.n	80041a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800416e:	4b44      	ldr	r3, [pc, #272]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d116      	bne.n	80041a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417a:	4b41      	ldr	r3, [pc, #260]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <HAL_RCC_OscConfig+0x152>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d001      	beq.n	8004192 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e1c7      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004192:	4b3b      	ldr	r3, [pc, #236]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	4937      	ldr	r1, [pc, #220]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a6:	e03a      	b.n	800421e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d020      	beq.n	80041f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041b0:	4b34      	ldr	r3, [pc, #208]	@ (8004284 <HAL_RCC_OscConfig+0x244>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b6:	f7fe fc37 	bl	8002a28 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041be:	f7fe fc33 	bl	8002a28 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e1a8      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041dc:	4b28      	ldr	r3, [pc, #160]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4925      	ldr	r1, [pc, #148]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	600b      	str	r3, [r1, #0]
 80041f0:	e015      	b.n	800421e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041f2:	4b24      	ldr	r3, [pc, #144]	@ (8004284 <HAL_RCC_OscConfig+0x244>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7fe fc16 	bl	8002a28 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004200:	f7fe fc12 	bl	8002a28 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e187      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004212:	4b1b      	ldr	r3, [pc, #108]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d036      	beq.n	8004298 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d016      	beq.n	8004260 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004232:	4b15      	ldr	r3, [pc, #84]	@ (8004288 <HAL_RCC_OscConfig+0x248>)
 8004234:	2201      	movs	r2, #1
 8004236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004238:	f7fe fbf6 	bl	8002a28 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004240:	f7fe fbf2 	bl	8002a28 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e167      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004252:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <HAL_RCC_OscConfig+0x240>)
 8004254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f0      	beq.n	8004240 <HAL_RCC_OscConfig+0x200>
 800425e:	e01b      	b.n	8004298 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004260:	4b09      	ldr	r3, [pc, #36]	@ (8004288 <HAL_RCC_OscConfig+0x248>)
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004266:	f7fe fbdf 	bl	8002a28 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800426c:	e00e      	b.n	800428c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800426e:	f7fe fbdb 	bl	8002a28 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d907      	bls.n	800428c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e150      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
 8004280:	40023800 	.word	0x40023800
 8004284:	42470000 	.word	0x42470000
 8004288:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800428c:	4b88      	ldr	r3, [pc, #544]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 800428e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1ea      	bne.n	800426e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 8097 	beq.w	80043d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042a6:	2300      	movs	r3, #0
 80042a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042aa:	4b81      	ldr	r3, [pc, #516]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10f      	bne.n	80042d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b6:	2300      	movs	r3, #0
 80042b8:	60bb      	str	r3, [r7, #8]
 80042ba:	4b7d      	ldr	r3, [pc, #500]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	4a7c      	ldr	r2, [pc, #496]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 80042c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80042c6:	4b7a      	ldr	r3, [pc, #488]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ce:	60bb      	str	r3, [r7, #8]
 80042d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d2:	2301      	movs	r3, #1
 80042d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d6:	4b77      	ldr	r3, [pc, #476]	@ (80044b4 <HAL_RCC_OscConfig+0x474>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d118      	bne.n	8004314 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042e2:	4b74      	ldr	r3, [pc, #464]	@ (80044b4 <HAL_RCC_OscConfig+0x474>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a73      	ldr	r2, [pc, #460]	@ (80044b4 <HAL_RCC_OscConfig+0x474>)
 80042e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ee:	f7fe fb9b 	bl	8002a28 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f6:	f7fe fb97 	bl	8002a28 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e10c      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004308:	4b6a      	ldr	r3, [pc, #424]	@ (80044b4 <HAL_RCC_OscConfig+0x474>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0f0      	beq.n	80042f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d106      	bne.n	800432a <HAL_RCC_OscConfig+0x2ea>
 800431c:	4b64      	ldr	r3, [pc, #400]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 800431e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004320:	4a63      	ldr	r2, [pc, #396]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 8004322:	f043 0301 	orr.w	r3, r3, #1
 8004326:	6713      	str	r3, [r2, #112]	@ 0x70
 8004328:	e01c      	b.n	8004364 <HAL_RCC_OscConfig+0x324>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b05      	cmp	r3, #5
 8004330:	d10c      	bne.n	800434c <HAL_RCC_OscConfig+0x30c>
 8004332:	4b5f      	ldr	r3, [pc, #380]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004336:	4a5e      	ldr	r2, [pc, #376]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 8004338:	f043 0304 	orr.w	r3, r3, #4
 800433c:	6713      	str	r3, [r2, #112]	@ 0x70
 800433e:	4b5c      	ldr	r3, [pc, #368]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004342:	4a5b      	ldr	r2, [pc, #364]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	6713      	str	r3, [r2, #112]	@ 0x70
 800434a:	e00b      	b.n	8004364 <HAL_RCC_OscConfig+0x324>
 800434c:	4b58      	ldr	r3, [pc, #352]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004350:	4a57      	ldr	r2, [pc, #348]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 8004352:	f023 0301 	bic.w	r3, r3, #1
 8004356:	6713      	str	r3, [r2, #112]	@ 0x70
 8004358:	4b55      	ldr	r3, [pc, #340]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 800435a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800435c:	4a54      	ldr	r2, [pc, #336]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 800435e:	f023 0304 	bic.w	r3, r3, #4
 8004362:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d015      	beq.n	8004398 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436c:	f7fe fb5c 	bl	8002a28 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004372:	e00a      	b.n	800438a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004374:	f7fe fb58 	bl	8002a28 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e0cb      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800438a:	4b49      	ldr	r3, [pc, #292]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0ee      	beq.n	8004374 <HAL_RCC_OscConfig+0x334>
 8004396:	e014      	b.n	80043c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004398:	f7fe fb46 	bl	8002a28 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a0:	f7fe fb42 	bl	8002a28 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e0b5      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b6:	4b3e      	ldr	r3, [pc, #248]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1ee      	bne.n	80043a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d105      	bne.n	80043d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c8:	4b39      	ldr	r3, [pc, #228]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 80043ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043cc:	4a38      	ldr	r2, [pc, #224]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 80043ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80a1 	beq.w	8004520 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043de:	4b34      	ldr	r3, [pc, #208]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d05c      	beq.n	80044a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d141      	bne.n	8004476 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f2:	4b31      	ldr	r3, [pc, #196]	@ (80044b8 <HAL_RCC_OscConfig+0x478>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fe fb16 	bl	8002a28 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004400:	f7fe fb12 	bl	8002a28 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e087      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004412:	4b27      	ldr	r3, [pc, #156]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69da      	ldr	r2, [r3, #28]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	019b      	lsls	r3, r3, #6
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004434:	085b      	lsrs	r3, r3, #1
 8004436:	3b01      	subs	r3, #1
 8004438:	041b      	lsls	r3, r3, #16
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004440:	061b      	lsls	r3, r3, #24
 8004442:	491b      	ldr	r1, [pc, #108]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 8004444:	4313      	orrs	r3, r2
 8004446:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004448:	4b1b      	ldr	r3, [pc, #108]	@ (80044b8 <HAL_RCC_OscConfig+0x478>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444e:	f7fe faeb 	bl	8002a28 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004456:	f7fe fae7 	bl	8002a28 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e05c      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004468:	4b11      	ldr	r3, [pc, #68]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x416>
 8004474:	e054      	b.n	8004520 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004476:	4b10      	ldr	r3, [pc, #64]	@ (80044b8 <HAL_RCC_OscConfig+0x478>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7fe fad4 	bl	8002a28 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004484:	f7fe fad0 	bl	8002a28 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e045      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004496:	4b06      	ldr	r3, [pc, #24]	@ (80044b0 <HAL_RCC_OscConfig+0x470>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x444>
 80044a2:	e03d      	b.n	8004520 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d107      	bne.n	80044bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e038      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
 80044b0:	40023800 	.word	0x40023800
 80044b4:	40007000 	.word	0x40007000
 80044b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044bc:	4b1b      	ldr	r3, [pc, #108]	@ (800452c <HAL_RCC_OscConfig+0x4ec>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d028      	beq.n	800451c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d121      	bne.n	800451c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d11a      	bne.n	800451c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044ec:	4013      	ands	r3, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d111      	bne.n	800451c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	3b01      	subs	r3, #1
 8004506:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004508:	429a      	cmp	r2, r3
 800450a:	d107      	bne.n	800451c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004516:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004518:	429a      	cmp	r2, r3
 800451a:	d001      	beq.n	8004520 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800

08004530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0cc      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004544:	4b68      	ldr	r3, [pc, #416]	@ (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d90c      	bls.n	800456c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004552:	4b65      	ldr	r3, [pc, #404]	@ (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800455a:	4b63      	ldr	r3, [pc, #396]	@ (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0307 	and.w	r3, r3, #7
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d001      	beq.n	800456c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e0b8      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d020      	beq.n	80045ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004584:	4b59      	ldr	r3, [pc, #356]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	4a58      	ldr	r2, [pc, #352]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800458e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800459c:	4b53      	ldr	r3, [pc, #332]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	4a52      	ldr	r2, [pc, #328]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a8:	4b50      	ldr	r3, [pc, #320]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	494d      	ldr	r1, [pc, #308]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d044      	beq.n	8004650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d107      	bne.n	80045de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ce:	4b47      	ldr	r3, [pc, #284]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d119      	bne.n	800460e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e07f      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d003      	beq.n	80045ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d107      	bne.n	80045fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ee:	4b3f      	ldr	r3, [pc, #252]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d109      	bne.n	800460e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e06f      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fe:	4b3b      	ldr	r3, [pc, #236]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e067      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800460e:	4b37      	ldr	r3, [pc, #220]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f023 0203 	bic.w	r2, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	4934      	ldr	r1, [pc, #208]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	4313      	orrs	r3, r2
 800461e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004620:	f7fe fa02 	bl	8002a28 <HAL_GetTick>
 8004624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004626:	e00a      	b.n	800463e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004628:	f7fe f9fe 	bl	8002a28 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004636:	4293      	cmp	r3, r2
 8004638:	d901      	bls.n	800463e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e04f      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463e:	4b2b      	ldr	r3, [pc, #172]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 020c 	and.w	r2, r3, #12
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	429a      	cmp	r2, r3
 800464e:	d1eb      	bne.n	8004628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004650:	4b25      	ldr	r3, [pc, #148]	@ (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d20c      	bcs.n	8004678 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465e:	4b22      	ldr	r3, [pc, #136]	@ (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004666:	4b20      	ldr	r3, [pc, #128]	@ (80046e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d001      	beq.n	8004678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e032      	b.n	80046de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004684:	4b19      	ldr	r3, [pc, #100]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4916      	ldr	r1, [pc, #88]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046a2:	4b12      	ldr	r3, [pc, #72]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	490e      	ldr	r1, [pc, #56]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046b6:	f000 f821 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 80046ba:	4602      	mov	r2, r0
 80046bc:	4b0b      	ldr	r3, [pc, #44]	@ (80046ec <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	091b      	lsrs	r3, r3, #4
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	490a      	ldr	r1, [pc, #40]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c0>)
 80046c8:	5ccb      	ldrb	r3, [r1, r3]
 80046ca:	fa22 f303 	lsr.w	r3, r2, r3
 80046ce:	4a09      	ldr	r2, [pc, #36]	@ (80046f4 <HAL_RCC_ClockConfig+0x1c4>)
 80046d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80046d2:	4b09      	ldr	r3, [pc, #36]	@ (80046f8 <HAL_RCC_ClockConfig+0x1c8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe f962 	bl	80029a0 <HAL_InitTick>

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40023c00 	.word	0x40023c00
 80046ec:	40023800 	.word	0x40023800
 80046f0:	08009e14 	.word	0x08009e14
 80046f4:	2000023c 	.word	0x2000023c
 80046f8:	20000240 	.word	0x20000240

080046fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004700:	b090      	sub	sp, #64	@ 0x40
 8004702:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004714:	4b59      	ldr	r3, [pc, #356]	@ (800487c <HAL_RCC_GetSysClockFreq+0x180>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 030c 	and.w	r3, r3, #12
 800471c:	2b08      	cmp	r3, #8
 800471e:	d00d      	beq.n	800473c <HAL_RCC_GetSysClockFreq+0x40>
 8004720:	2b08      	cmp	r3, #8
 8004722:	f200 80a1 	bhi.w	8004868 <HAL_RCC_GetSysClockFreq+0x16c>
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0x34>
 800472a:	2b04      	cmp	r3, #4
 800472c:	d003      	beq.n	8004736 <HAL_RCC_GetSysClockFreq+0x3a>
 800472e:	e09b      	b.n	8004868 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004730:	4b53      	ldr	r3, [pc, #332]	@ (8004880 <HAL_RCC_GetSysClockFreq+0x184>)
 8004732:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004734:	e09b      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004736:	4b53      	ldr	r3, [pc, #332]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x188>)
 8004738:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800473a:	e098      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800473c:	4b4f      	ldr	r3, [pc, #316]	@ (800487c <HAL_RCC_GetSysClockFreq+0x180>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004744:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004746:	4b4d      	ldr	r3, [pc, #308]	@ (800487c <HAL_RCC_GetSysClockFreq+0x180>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d028      	beq.n	80047a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004752:	4b4a      	ldr	r3, [pc, #296]	@ (800487c <HAL_RCC_GetSysClockFreq+0x180>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	099b      	lsrs	r3, r3, #6
 8004758:	2200      	movs	r2, #0
 800475a:	623b      	str	r3, [r7, #32]
 800475c:	627a      	str	r2, [r7, #36]	@ 0x24
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004764:	2100      	movs	r1, #0
 8004766:	4b47      	ldr	r3, [pc, #284]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x188>)
 8004768:	fb03 f201 	mul.w	r2, r3, r1
 800476c:	2300      	movs	r3, #0
 800476e:	fb00 f303 	mul.w	r3, r0, r3
 8004772:	4413      	add	r3, r2
 8004774:	4a43      	ldr	r2, [pc, #268]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x188>)
 8004776:	fba0 1202 	umull	r1, r2, r0, r2
 800477a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800477c:	460a      	mov	r2, r1
 800477e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004780:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004782:	4413      	add	r3, r2
 8004784:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004788:	2200      	movs	r2, #0
 800478a:	61bb      	str	r3, [r7, #24]
 800478c:	61fa      	str	r2, [r7, #28]
 800478e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004792:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004796:	f7fb fd17 	bl	80001c8 <__aeabi_uldivmod>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4613      	mov	r3, r2
 80047a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047a2:	e053      	b.n	800484c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a4:	4b35      	ldr	r3, [pc, #212]	@ (800487c <HAL_RCC_GetSysClockFreq+0x180>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	099b      	lsrs	r3, r3, #6
 80047aa:	2200      	movs	r2, #0
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	617a      	str	r2, [r7, #20]
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80047b6:	f04f 0b00 	mov.w	fp, #0
 80047ba:	4652      	mov	r2, sl
 80047bc:	465b      	mov	r3, fp
 80047be:	f04f 0000 	mov.w	r0, #0
 80047c2:	f04f 0100 	mov.w	r1, #0
 80047c6:	0159      	lsls	r1, r3, #5
 80047c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047cc:	0150      	lsls	r0, r2, #5
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	ebb2 080a 	subs.w	r8, r2, sl
 80047d6:	eb63 090b 	sbc.w	r9, r3, fp
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80047e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047ee:	ebb2 0408 	subs.w	r4, r2, r8
 80047f2:	eb63 0509 	sbc.w	r5, r3, r9
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	00eb      	lsls	r3, r5, #3
 8004800:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004804:	00e2      	lsls	r2, r4, #3
 8004806:	4614      	mov	r4, r2
 8004808:	461d      	mov	r5, r3
 800480a:	eb14 030a 	adds.w	r3, r4, sl
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	eb45 030b 	adc.w	r3, r5, fp
 8004814:	607b      	str	r3, [r7, #4]
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004822:	4629      	mov	r1, r5
 8004824:	028b      	lsls	r3, r1, #10
 8004826:	4621      	mov	r1, r4
 8004828:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800482c:	4621      	mov	r1, r4
 800482e:	028a      	lsls	r2, r1, #10
 8004830:	4610      	mov	r0, r2
 8004832:	4619      	mov	r1, r3
 8004834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004836:	2200      	movs	r2, #0
 8004838:	60bb      	str	r3, [r7, #8]
 800483a:	60fa      	str	r2, [r7, #12]
 800483c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004840:	f7fb fcc2 	bl	80001c8 <__aeabi_uldivmod>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4613      	mov	r3, r2
 800484a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800484c:	4b0b      	ldr	r3, [pc, #44]	@ (800487c <HAL_RCC_GetSysClockFreq+0x180>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	0c1b      	lsrs	r3, r3, #16
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	3301      	adds	r3, #1
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800485c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800485e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004866:	e002      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004868:	4b05      	ldr	r3, [pc, #20]	@ (8004880 <HAL_RCC_GetSysClockFreq+0x184>)
 800486a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800486c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800486e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004870:	4618      	mov	r0, r3
 8004872:	3740      	adds	r7, #64	@ 0x40
 8004874:	46bd      	mov	sp, r7
 8004876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800487a:	bf00      	nop
 800487c:	40023800 	.word	0x40023800
 8004880:	00f42400 	.word	0x00f42400
 8004884:	017d7840 	.word	0x017d7840

08004888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800488c:	4b03      	ldr	r3, [pc, #12]	@ (800489c <HAL_RCC_GetHCLKFreq+0x14>)
 800488e:	681b      	ldr	r3, [r3, #0]
}
 8004890:	4618      	mov	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	2000023c 	.word	0x2000023c

080048a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048a4:	f7ff fff0 	bl	8004888 <HAL_RCC_GetHCLKFreq>
 80048a8:	4602      	mov	r2, r0
 80048aa:	4b05      	ldr	r3, [pc, #20]	@ (80048c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	0a9b      	lsrs	r3, r3, #10
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	4903      	ldr	r1, [pc, #12]	@ (80048c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048b6:	5ccb      	ldrb	r3, [r1, r3]
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40023800 	.word	0x40023800
 80048c4:	08009e24 	.word	0x08009e24

080048c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048cc:	f7ff ffdc 	bl	8004888 <HAL_RCC_GetHCLKFreq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4b05      	ldr	r3, [pc, #20]	@ (80048e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	0b5b      	lsrs	r3, r3, #13
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	4903      	ldr	r1, [pc, #12]	@ (80048ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80048de:	5ccb      	ldrb	r3, [r1, r3]
 80048e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40023800 	.word	0x40023800
 80048ec:	08009e24 	.word	0x08009e24

080048f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e07b      	b.n	80049fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004906:	2b00      	cmp	r3, #0
 8004908:	d108      	bne.n	800491c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004912:	d009      	beq.n	8004928 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	61da      	str	r2, [r3, #28]
 800491a:	e005      	b.n	8004928 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fd fbe8 	bl	8002118 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800495e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ac:	ea42 0103 	orr.w	r1, r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	0c1b      	lsrs	r3, r3, #16
 80049c6:	f003 0104 	and.w	r1, r3, #4
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ce:	f003 0210 	and.w	r2, r3, #16
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69da      	ldr	r2, [r3, #28]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b088      	sub	sp, #32
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a12:	f7fe f809 	bl	8002a28 <HAL_GetTick>
 8004a16:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004a18:	88fb      	ldrh	r3, [r7, #6]
 8004a1a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d001      	beq.n	8004a2c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e12a      	b.n	8004c82 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <HAL_SPI_Transmit+0x36>
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e122      	b.n	8004c82 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_SPI_Transmit+0x48>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e11b      	b.n	8004c82 <HAL_SPI_Transmit+0x280>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2203      	movs	r2, #3
 8004a56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	88fa      	ldrh	r2, [r7, #6]
 8004a6a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	88fa      	ldrh	r2, [r7, #6]
 8004a70:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a98:	d10f      	bne.n	8004aba <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aa8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ab8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac4:	2b40      	cmp	r3, #64	@ 0x40
 8004ac6:	d007      	beq.n	8004ad8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ad6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ae0:	d152      	bne.n	8004b88 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <HAL_SPI_Transmit+0xee>
 8004aea:	8b7b      	ldrh	r3, [r7, #26]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d145      	bne.n	8004b7c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af4:	881a      	ldrh	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b00:	1c9a      	adds	r2, r3, #2
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b14:	e032      	b.n	8004b7c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d112      	bne.n	8004b4a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b28:	881a      	ldrh	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b34:	1c9a      	adds	r2, r3, #2
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004b48:	e018      	b.n	8004b7c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b4a:	f7fd ff6d 	bl	8002a28 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d803      	bhi.n	8004b62 <HAL_SPI_Transmit+0x160>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b60:	d102      	bne.n	8004b68 <HAL_SPI_Transmit+0x166>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d109      	bne.n	8004b7c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e082      	b.n	8004c82 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1c7      	bne.n	8004b16 <HAL_SPI_Transmit+0x114>
 8004b86:	e053      	b.n	8004c30 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_SPI_Transmit+0x194>
 8004b90:	8b7b      	ldrh	r3, [r7, #26]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d147      	bne.n	8004c26 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	330c      	adds	r3, #12
 8004ba0:	7812      	ldrb	r2, [r2, #0]
 8004ba2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004bbc:	e033      	b.n	8004c26 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d113      	bne.n	8004bf4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	330c      	adds	r3, #12
 8004bd6:	7812      	ldrb	r2, [r2, #0]
 8004bd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004bf2:	e018      	b.n	8004c26 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bf4:	f7fd ff18 	bl	8002a28 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d803      	bhi.n	8004c0c <HAL_SPI_Transmit+0x20a>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0a:	d102      	bne.n	8004c12 <HAL_SPI_Transmit+0x210>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d109      	bne.n	8004c26 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e02d      	b.n	8004c82 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1c6      	bne.n	8004bbe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	6839      	ldr	r1, [r7, #0]
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 fbd9 	bl	80053ec <SPI_EndRxTxTransaction>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10a      	bne.n	8004c64 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004c80:	2300      	movs	r3, #0
  }
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b088      	sub	sp, #32
 8004c8e:	af02      	add	r7, sp, #8
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	603b      	str	r3, [r7, #0]
 8004c96:	4613      	mov	r3, r2
 8004c98:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d001      	beq.n	8004caa <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e104      	b.n	8004eb4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cb2:	d112      	bne.n	8004cda <HAL_SPI_Receive+0x50>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10e      	bne.n	8004cda <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004cc4:	88fa      	ldrh	r2, [r7, #6]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 f8f3 	bl	8004ebc <HAL_SPI_TransmitReceive>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	e0ec      	b.n	8004eb4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cda:	f7fd fea5 	bl	8002a28 <HAL_GetTick>
 8004cde:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_SPI_Receive+0x62>
 8004ce6:	88fb      	ldrh	r3, [r7, #6]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0e1      	b.n	8004eb4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d101      	bne.n	8004cfe <HAL_SPI_Receive+0x74>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	e0da      	b.n	8004eb4 <HAL_SPI_Receive+0x22a>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2204      	movs	r2, #4
 8004d0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	88fa      	ldrh	r2, [r7, #6]
 8004d1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d4c:	d10f      	bne.n	8004d6e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d6c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d78:	2b40      	cmp	r3, #64	@ 0x40
 8004d7a:	d007      	beq.n	8004d8c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d170      	bne.n	8004e76 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d94:	e035      	b.n	8004e02 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d115      	bne.n	8004dd0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f103 020c 	add.w	r2, r3, #12
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db0:	7812      	ldrb	r2, [r2, #0]
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004dce:	e018      	b.n	8004e02 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dd0:	f7fd fe2a 	bl	8002a28 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d803      	bhi.n	8004de8 <HAL_SPI_Receive+0x15e>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de6:	d102      	bne.n	8004dee <HAL_SPI_Receive+0x164>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d109      	bne.n	8004e02 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e058      	b.n	8004eb4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1c4      	bne.n	8004d96 <HAL_SPI_Receive+0x10c>
 8004e0c:	e038      	b.n	8004e80 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d113      	bne.n	8004e44 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e26:	b292      	uxth	r2, r2
 8004e28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2e:	1c9a      	adds	r2, r3, #2
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e42:	e018      	b.n	8004e76 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e44:	f7fd fdf0 	bl	8002a28 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d803      	bhi.n	8004e5c <HAL_SPI_Receive+0x1d2>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5a:	d102      	bne.n	8004e62 <HAL_SPI_Receive+0x1d8>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d109      	bne.n	8004e76 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e01e      	b.n	8004eb4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1c6      	bne.n	8004e0e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	6839      	ldr	r1, [r7, #0]
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 fa4b 	bl	8005320 <SPI_EndRxTransaction>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e000      	b.n	8004eb4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
  }
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08a      	sub	sp, #40	@ 0x28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ece:	f7fd fdab 	bl	8002a28 <HAL_GetTick>
 8004ed2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004eda:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004ee2:	887b      	ldrh	r3, [r7, #2]
 8004ee4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ee6:	7ffb      	ldrb	r3, [r7, #31]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d00c      	beq.n	8004f06 <HAL_SPI_TransmitReceive+0x4a>
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ef2:	d106      	bne.n	8004f02 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d102      	bne.n	8004f02 <HAL_SPI_TransmitReceive+0x46>
 8004efc:	7ffb      	ldrb	r3, [r7, #31]
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d001      	beq.n	8004f06 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004f02:	2302      	movs	r3, #2
 8004f04:	e17f      	b.n	8005206 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <HAL_SPI_TransmitReceive+0x5c>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <HAL_SPI_TransmitReceive+0x5c>
 8004f12:	887b      	ldrh	r3, [r7, #2]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e174      	b.n	8005206 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x6e>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e16d      	b.n	8005206 <HAL_SPI_TransmitReceive+0x34a>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d003      	beq.n	8004f46 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2205      	movs	r2, #5
 8004f42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	887a      	ldrh	r2, [r7, #2]
 8004f56:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	887a      	ldrh	r2, [r7, #2]
 8004f5c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	887a      	ldrh	r2, [r7, #2]
 8004f68:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	887a      	ldrh	r2, [r7, #2]
 8004f6e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f86:	2b40      	cmp	r3, #64	@ 0x40
 8004f88:	d007      	beq.n	8004f9a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fa2:	d17e      	bne.n	80050a2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <HAL_SPI_TransmitReceive+0xf6>
 8004fac:	8afb      	ldrh	r3, [r7, #22]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d16c      	bne.n	800508c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb6:	881a      	ldrh	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc2:	1c9a      	adds	r2, r3, #2
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fd6:	e059      	b.n	800508c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d11b      	bne.n	800501e <HAL_SPI_TransmitReceive+0x162>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d016      	beq.n	800501e <HAL_SPI_TransmitReceive+0x162>
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d113      	bne.n	800501e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffa:	881a      	ldrh	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005006:	1c9a      	adds	r2, r3, #2
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005010:	b29b      	uxth	r3, r3
 8005012:	3b01      	subs	r3, #1
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b01      	cmp	r3, #1
 800502a:	d119      	bne.n	8005060 <HAL_SPI_TransmitReceive+0x1a4>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005030:	b29b      	uxth	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d014      	beq.n	8005060 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005040:	b292      	uxth	r2, r2
 8005042:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005048:	1c9a      	adds	r2, r3, #2
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800505c:	2301      	movs	r3, #1
 800505e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005060:	f7fd fce2 	bl	8002a28 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800506c:	429a      	cmp	r2, r3
 800506e:	d80d      	bhi.n	800508c <HAL_SPI_TransmitReceive+0x1d0>
 8005070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	d009      	beq.n	800508c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e0bc      	b.n	8005206 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005090:	b29b      	uxth	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1a0      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0x11c>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d19b      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0x11c>
 80050a0:	e082      	b.n	80051a8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <HAL_SPI_TransmitReceive+0x1f4>
 80050aa:	8afb      	ldrh	r3, [r7, #22]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d171      	bne.n	8005194 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	330c      	adds	r3, #12
 80050ba:	7812      	ldrb	r2, [r2, #0]
 80050bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050d6:	e05d      	b.n	8005194 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d11c      	bne.n	8005120 <HAL_SPI_TransmitReceive+0x264>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d017      	beq.n	8005120 <HAL_SPI_TransmitReceive+0x264>
 80050f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d114      	bne.n	8005120 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	330c      	adds	r3, #12
 8005100:	7812      	ldrb	r2, [r2, #0]
 8005102:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	b29a      	uxth	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b01      	cmp	r3, #1
 800512c:	d119      	bne.n	8005162 <HAL_SPI_TransmitReceive+0x2a6>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d014      	beq.n	8005162 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800515e:	2301      	movs	r3, #1
 8005160:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005162:	f7fd fc61 	bl	8002a28 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800516e:	429a      	cmp	r2, r3
 8005170:	d803      	bhi.n	800517a <HAL_SPI_TransmitReceive+0x2be>
 8005172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005178:	d102      	bne.n	8005180 <HAL_SPI_TransmitReceive+0x2c4>
 800517a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517c:	2b00      	cmp	r3, #0
 800517e:	d109      	bne.n	8005194 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e038      	b.n	8005206 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d19c      	bne.n	80050d8 <HAL_SPI_TransmitReceive+0x21c>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d197      	bne.n	80050d8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051a8:	6a3a      	ldr	r2, [r7, #32]
 80051aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 f91d 	bl	80053ec <SPI_EndRxTxTransaction>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e01d      	b.n	8005206 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051d2:	2300      	movs	r3, #0
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e000      	b.n	8005206 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005204:	2300      	movs	r3, #0
  }
}
 8005206:	4618      	mov	r0, r3
 8005208:	3728      	adds	r7, #40	@ 0x28
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	4613      	mov	r3, r2
 800521e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005220:	f7fd fc02 	bl	8002a28 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005228:	1a9b      	subs	r3, r3, r2
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	4413      	add	r3, r2
 800522e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005230:	f7fd fbfa 	bl	8002a28 <HAL_GetTick>
 8005234:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005236:	4b39      	ldr	r3, [pc, #228]	@ (800531c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	015b      	lsls	r3, r3, #5
 800523c:	0d1b      	lsrs	r3, r3, #20
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	fb02 f303 	mul.w	r3, r2, r3
 8005244:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005246:	e054      	b.n	80052f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524e:	d050      	beq.n	80052f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005250:	f7fd fbea 	bl	8002a28 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	429a      	cmp	r2, r3
 800525e:	d902      	bls.n	8005266 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d13d      	bne.n	80052e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005274:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800527e:	d111      	bne.n	80052a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005288:	d004      	beq.n	8005294 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005292:	d107      	bne.n	80052a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ac:	d10f      	bne.n	80052ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e017      	b.n	8005312 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4013      	ands	r3, r2
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	429a      	cmp	r2, r3
 8005300:	bf0c      	ite	eq
 8005302:	2301      	moveq	r3, #1
 8005304:	2300      	movne	r3, #0
 8005306:	b2db      	uxtb	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	429a      	cmp	r2, r3
 800530e:	d19b      	bne.n	8005248 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3720      	adds	r7, #32
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	2000023c 	.word	0x2000023c

08005320 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af02      	add	r7, sp, #8
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005334:	d111      	bne.n	800535a <SPI_EndRxTransaction+0x3a>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800533e:	d004      	beq.n	800534a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005348:	d107      	bne.n	800535a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005358:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005362:	d12a      	bne.n	80053ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800536c:	d012      	beq.n	8005394 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2200      	movs	r2, #0
 8005376:	2180      	movs	r1, #128	@ 0x80
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7ff ff49 	bl	8005210 <SPI_WaitFlagStateUntilTimeout>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d02d      	beq.n	80053e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005388:	f043 0220 	orr.w	r2, r3, #32
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e026      	b.n	80053e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2200      	movs	r2, #0
 800539c:	2101      	movs	r1, #1
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f7ff ff36 	bl	8005210 <SPI_WaitFlagStateUntilTimeout>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d01a      	beq.n	80053e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ae:	f043 0220 	orr.w	r2, r3, #32
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e013      	b.n	80053e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2200      	movs	r2, #0
 80053c2:	2101      	movs	r1, #1
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f7ff ff23 	bl	8005210 <SPI_WaitFlagStateUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d007      	beq.n	80053e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d4:	f043 0220 	orr.w	r2, r3, #32
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e000      	b.n	80053e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2201      	movs	r2, #1
 8005400:	2102      	movs	r1, #2
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f7ff ff04 	bl	8005210 <SPI_WaitFlagStateUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d007      	beq.n	800541e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005412:	f043 0220 	orr.w	r2, r3, #32
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e032      	b.n	8005484 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800541e:	4b1b      	ldr	r3, [pc, #108]	@ (800548c <SPI_EndRxTxTransaction+0xa0>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1b      	ldr	r2, [pc, #108]	@ (8005490 <SPI_EndRxTxTransaction+0xa4>)
 8005424:	fba2 2303 	umull	r2, r3, r2, r3
 8005428:	0d5b      	lsrs	r3, r3, #21
 800542a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800542e:	fb02 f303 	mul.w	r3, r2, r3
 8005432:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800543c:	d112      	bne.n	8005464 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2200      	movs	r2, #0
 8005446:	2180      	movs	r1, #128	@ 0x80
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f7ff fee1 	bl	8005210 <SPI_WaitFlagStateUntilTimeout>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d016      	beq.n	8005482 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005458:	f043 0220 	orr.w	r2, r3, #32
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e00f      	b.n	8005484 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	3b01      	subs	r3, #1
 800546e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800547a:	2b80      	cmp	r3, #128	@ 0x80
 800547c:	d0f2      	beq.n	8005464 <SPI_EndRxTxTransaction+0x78>
 800547e:	e000      	b.n	8005482 <SPI_EndRxTxTransaction+0x96>
        break;
 8005480:	bf00      	nop
  }

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	2000023c 	.word	0x2000023c
 8005490:	165e9f81 	.word	0x165e9f81

08005494 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e038      	b.n	800551c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f7fb fd8e 	bl	8000fe0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3308      	adds	r3, #8
 80054cc:	4619      	mov	r1, r3
 80054ce:	4610      	mov	r0, r2
 80054d0:	f001 fbb0 	bl	8006c34 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	461a      	mov	r2, r3
 80054de:	68b9      	ldr	r1, [r7, #8]
 80054e0:	f001 fc12 	bl	8006d08 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6858      	ldr	r0, [r3, #4]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	f001 fc3f 	bl	8006d74 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	6892      	ldr	r2, [r2, #8]
 80054fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	6892      	ldr	r2, [r2, #8]
 800550a:	f041 0101 	orr.w	r1, r1, #1
 800550e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e041      	b.n	80055ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fc ff02 	bl	8002354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3304      	adds	r3, #4
 8005560:	4619      	mov	r1, r3
 8005562:	4610      	mov	r0, r2
 8005564:	f000 fa7e 	bl	8005a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d001      	beq.n	80055dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e04e      	b.n	800567a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a23      	ldr	r2, [pc, #140]	@ (8005688 <HAL_TIM_Base_Start_IT+0xc4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d022      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x80>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005606:	d01d      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x80>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a1f      	ldr	r2, [pc, #124]	@ (800568c <HAL_TIM_Base_Start_IT+0xc8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d018      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x80>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a1e      	ldr	r2, [pc, #120]	@ (8005690 <HAL_TIM_Base_Start_IT+0xcc>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d013      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x80>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a1c      	ldr	r2, [pc, #112]	@ (8005694 <HAL_TIM_Base_Start_IT+0xd0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d00e      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x80>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a1b      	ldr	r2, [pc, #108]	@ (8005698 <HAL_TIM_Base_Start_IT+0xd4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d009      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x80>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a19      	ldr	r2, [pc, #100]	@ (800569c <HAL_TIM_Base_Start_IT+0xd8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d004      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x80>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a18      	ldr	r2, [pc, #96]	@ (80056a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d111      	bne.n	8005668 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 0307 	and.w	r3, r3, #7
 800564e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2b06      	cmp	r3, #6
 8005654:	d010      	beq.n	8005678 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0201 	orr.w	r2, r2, #1
 8005664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005666:	e007      	b.n	8005678 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0201 	orr.w	r2, r2, #1
 8005676:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40010000 	.word	0x40010000
 800568c:	40000400 	.word	0x40000400
 8005690:	40000800 	.word	0x40000800
 8005694:	40000c00 	.word	0x40000c00
 8005698:	40010400 	.word	0x40010400
 800569c:	40014000 	.word	0x40014000
 80056a0:	40001800 	.word	0x40001800

080056a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d020      	beq.n	8005708 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01b      	beq.n	8005708 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f06f 0202 	mvn.w	r2, #2
 80056d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f999 	bl	8005a26 <HAL_TIM_IC_CaptureCallback>
 80056f4:	e005      	b.n	8005702 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f98b 	bl	8005a12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f99c 	bl	8005a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f003 0304 	and.w	r3, r3, #4
 800570e:	2b00      	cmp	r3, #0
 8005710:	d020      	beq.n	8005754 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01b      	beq.n	8005754 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0204 	mvn.w	r2, #4
 8005724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2202      	movs	r2, #2
 800572a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f973 	bl	8005a26 <HAL_TIM_IC_CaptureCallback>
 8005740:	e005      	b.n	800574e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f965 	bl	8005a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f976 	bl	8005a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f003 0308 	and.w	r3, r3, #8
 800575a:	2b00      	cmp	r3, #0
 800575c:	d020      	beq.n	80057a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	2b00      	cmp	r3, #0
 8005766:	d01b      	beq.n	80057a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0208 	mvn.w	r2, #8
 8005770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2204      	movs	r2, #4
 8005776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f94d 	bl	8005a26 <HAL_TIM_IC_CaptureCallback>
 800578c:	e005      	b.n	800579a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f93f 	bl	8005a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f950 	bl	8005a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d020      	beq.n	80057ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f003 0310 	and.w	r3, r3, #16
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d01b      	beq.n	80057ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0210 	mvn.w	r2, #16
 80057bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2208      	movs	r2, #8
 80057c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f927 	bl	8005a26 <HAL_TIM_IC_CaptureCallback>
 80057d8:	e005      	b.n	80057e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f919 	bl	8005a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f92a 	bl	8005a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00c      	beq.n	8005810 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d007      	beq.n	8005810 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0201 	mvn.w	r2, #1
 8005808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fc fa74 	bl	8001cf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00c      	beq.n	8005834 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005820:	2b00      	cmp	r3, #0
 8005822:	d007      	beq.n	8005834 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800582c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fae4 	bl	8005dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00c      	beq.n	8005858 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d007      	beq.n	8005858 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f8fb 	bl	8005a4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00c      	beq.n	800587c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f003 0320 	and.w	r3, r3, #32
 8005868:	2b00      	cmp	r3, #0
 800586a:	d007      	beq.n	800587c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0220 	mvn.w	r2, #32
 8005874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fab6 	bl	8005de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800587c:	bf00      	nop
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005898:	2b01      	cmp	r3, #1
 800589a:	d101      	bne.n	80058a0 <HAL_TIM_ConfigClockSource+0x1c>
 800589c:	2302      	movs	r3, #2
 800589e:	e0b4      	b.n	8005a0a <HAL_TIM_ConfigClockSource+0x186>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80058be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058d8:	d03e      	beq.n	8005958 <HAL_TIM_ConfigClockSource+0xd4>
 80058da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058de:	f200 8087 	bhi.w	80059f0 <HAL_TIM_ConfigClockSource+0x16c>
 80058e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058e6:	f000 8086 	beq.w	80059f6 <HAL_TIM_ConfigClockSource+0x172>
 80058ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ee:	d87f      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x16c>
 80058f0:	2b70      	cmp	r3, #112	@ 0x70
 80058f2:	d01a      	beq.n	800592a <HAL_TIM_ConfigClockSource+0xa6>
 80058f4:	2b70      	cmp	r3, #112	@ 0x70
 80058f6:	d87b      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x16c>
 80058f8:	2b60      	cmp	r3, #96	@ 0x60
 80058fa:	d050      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x11a>
 80058fc:	2b60      	cmp	r3, #96	@ 0x60
 80058fe:	d877      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005900:	2b50      	cmp	r3, #80	@ 0x50
 8005902:	d03c      	beq.n	800597e <HAL_TIM_ConfigClockSource+0xfa>
 8005904:	2b50      	cmp	r3, #80	@ 0x50
 8005906:	d873      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005908:	2b40      	cmp	r3, #64	@ 0x40
 800590a:	d058      	beq.n	80059be <HAL_TIM_ConfigClockSource+0x13a>
 800590c:	2b40      	cmp	r3, #64	@ 0x40
 800590e:	d86f      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005910:	2b30      	cmp	r3, #48	@ 0x30
 8005912:	d064      	beq.n	80059de <HAL_TIM_ConfigClockSource+0x15a>
 8005914:	2b30      	cmp	r3, #48	@ 0x30
 8005916:	d86b      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005918:	2b20      	cmp	r3, #32
 800591a:	d060      	beq.n	80059de <HAL_TIM_ConfigClockSource+0x15a>
 800591c:	2b20      	cmp	r3, #32
 800591e:	d867      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005920:	2b00      	cmp	r3, #0
 8005922:	d05c      	beq.n	80059de <HAL_TIM_ConfigClockSource+0x15a>
 8005924:	2b10      	cmp	r3, #16
 8005926:	d05a      	beq.n	80059de <HAL_TIM_ConfigClockSource+0x15a>
 8005928:	e062      	b.n	80059f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800593a:	f000 f9b9 	bl	8005cb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800594c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	609a      	str	r2, [r3, #8]
      break;
 8005956:	e04f      	b.n	80059f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005968:	f000 f9a2 	bl	8005cb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689a      	ldr	r2, [r3, #8]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800597a:	609a      	str	r2, [r3, #8]
      break;
 800597c:	e03c      	b.n	80059f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800598a:	461a      	mov	r2, r3
 800598c:	f000 f916 	bl	8005bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2150      	movs	r1, #80	@ 0x50
 8005996:	4618      	mov	r0, r3
 8005998:	f000 f96f 	bl	8005c7a <TIM_ITRx_SetConfig>
      break;
 800599c:	e02c      	b.n	80059f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059aa:	461a      	mov	r2, r3
 80059ac:	f000 f935 	bl	8005c1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2160      	movs	r1, #96	@ 0x60
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 f95f 	bl	8005c7a <TIM_ITRx_SetConfig>
      break;
 80059bc:	e01c      	b.n	80059f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ca:	461a      	mov	r2, r3
 80059cc:	f000 f8f6 	bl	8005bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2140      	movs	r1, #64	@ 0x40
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 f94f 	bl	8005c7a <TIM_ITRx_SetConfig>
      break;
 80059dc:	e00c      	b.n	80059f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f000 f946 	bl	8005c7a <TIM_ITRx_SetConfig>
      break;
 80059ee:	e003      	b.n	80059f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	73fb      	strb	r3, [r7, #15]
      break;
 80059f4:	e000      	b.n	80059f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
	...

08005a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a46      	ldr	r2, [pc, #280]	@ (8005b90 <TIM_Base_SetConfig+0x12c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d013      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a82:	d00f      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a43      	ldr	r2, [pc, #268]	@ (8005b94 <TIM_Base_SetConfig+0x130>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00b      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a42      	ldr	r2, [pc, #264]	@ (8005b98 <TIM_Base_SetConfig+0x134>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d007      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a41      	ldr	r2, [pc, #260]	@ (8005b9c <TIM_Base_SetConfig+0x138>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d003      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a40      	ldr	r2, [pc, #256]	@ (8005ba0 <TIM_Base_SetConfig+0x13c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d108      	bne.n	8005ab6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a35      	ldr	r2, [pc, #212]	@ (8005b90 <TIM_Base_SetConfig+0x12c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d02b      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ac4:	d027      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a32      	ldr	r2, [pc, #200]	@ (8005b94 <TIM_Base_SetConfig+0x130>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d023      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a31      	ldr	r2, [pc, #196]	@ (8005b98 <TIM_Base_SetConfig+0x134>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d01f      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a30      	ldr	r2, [pc, #192]	@ (8005b9c <TIM_Base_SetConfig+0x138>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d01b      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a2f      	ldr	r2, [pc, #188]	@ (8005ba0 <TIM_Base_SetConfig+0x13c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d017      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a2e      	ldr	r2, [pc, #184]	@ (8005ba4 <TIM_Base_SetConfig+0x140>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d013      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a2d      	ldr	r2, [pc, #180]	@ (8005ba8 <TIM_Base_SetConfig+0x144>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d00f      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a2c      	ldr	r2, [pc, #176]	@ (8005bac <TIM_Base_SetConfig+0x148>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00b      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a2b      	ldr	r2, [pc, #172]	@ (8005bb0 <TIM_Base_SetConfig+0x14c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d007      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a2a      	ldr	r2, [pc, #168]	@ (8005bb4 <TIM_Base_SetConfig+0x150>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d003      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a29      	ldr	r2, [pc, #164]	@ (8005bb8 <TIM_Base_SetConfig+0x154>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d108      	bne.n	8005b28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a10      	ldr	r2, [pc, #64]	@ (8005b90 <TIM_Base_SetConfig+0x12c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d003      	beq.n	8005b5c <TIM_Base_SetConfig+0xf8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a12      	ldr	r2, [pc, #72]	@ (8005ba0 <TIM_Base_SetConfig+0x13c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d103      	bne.n	8005b64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d105      	bne.n	8005b82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f023 0201 	bic.w	r2, r3, #1
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	611a      	str	r2, [r3, #16]
  }
}
 8005b82:	bf00      	nop
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	40010000 	.word	0x40010000
 8005b94:	40000400 	.word	0x40000400
 8005b98:	40000800 	.word	0x40000800
 8005b9c:	40000c00 	.word	0x40000c00
 8005ba0:	40010400 	.word	0x40010400
 8005ba4:	40014000 	.word	0x40014000
 8005ba8:	40014400 	.word	0x40014400
 8005bac:	40014800 	.word	0x40014800
 8005bb0:	40001800 	.word	0x40001800
 8005bb4:	40001c00 	.word	0x40001c00
 8005bb8:	40002000 	.word	0x40002000

08005bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	f023 0201 	bic.w	r2, r3, #1
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f023 030a 	bic.w	r3, r3, #10
 8005bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	621a      	str	r2, [r3, #32]
}
 8005c0e:	bf00      	nop
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b087      	sub	sp, #28
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	f023 0210 	bic.w	r2, r3, #16
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	031b      	lsls	r3, r3, #12
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	621a      	str	r2, [r3, #32]
}
 8005c6e:	bf00      	nop
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b085      	sub	sp, #20
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f043 0307 	orr.w	r3, r3, #7
 8005c9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	609a      	str	r2, [r3, #8]
}
 8005ca4:	bf00      	nop
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	021a      	lsls	r2, r3, #8
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	609a      	str	r2, [r3, #8]
}
 8005ce4:	bf00      	nop
 8005ce6:	371c      	adds	r7, #28
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d04:	2302      	movs	r3, #2
 8005d06:	e05a      	b.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a21      	ldr	r2, [pc, #132]	@ (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d022      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d54:	d01d      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d018      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1b      	ldr	r2, [pc, #108]	@ (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d013      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00e      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a18      	ldr	r2, [pc, #96]	@ (8005ddc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d009      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a17      	ldr	r2, [pc, #92]	@ (8005de0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d004      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a15      	ldr	r2, [pc, #84]	@ (8005de4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d10c      	bne.n	8005dac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	40010000 	.word	0x40010000
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40000800 	.word	0x40000800
 8005dd8:	40000c00 	.word	0x40000c00
 8005ddc:	40010400 	.word	0x40010400
 8005de0:	40014000 	.word	0x40014000
 8005de4:	40001800 	.word	0x40001800

08005de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e042      	b.n	8005ea8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fc fb90 	bl	800255c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2224      	movs	r2, #36	@ 0x24
 8005e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fc79 	bl	800674c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	691a      	ldr	r2, [r3, #16]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	695a      	ldr	r2, [r3, #20]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b0ba      	sub	sp, #232	@ 0xe8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ee6:	f003 030f 	and.w	r3, r3, #15
 8005eea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005eee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10f      	bne.n	8005f16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005efa:	f003 0320 	and.w	r3, r3, #32
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d009      	beq.n	8005f16 <HAL_UART_IRQHandler+0x66>
 8005f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fb5d 	bl	80065ce <UART_Receive_IT>
      return;
 8005f14:	e25b      	b.n	80063ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 80de 	beq.w	80060dc <HAL_UART_IRQHandler+0x22c>
 8005f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d106      	bne.n	8005f3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 80d1 	beq.w	80060dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00b      	beq.n	8005f5e <HAL_UART_IRQHandler+0xae>
 8005f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f56:	f043 0201 	orr.w	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00b      	beq.n	8005f82 <HAL_UART_IRQHandler+0xd2>
 8005f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d005      	beq.n	8005f82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f7a:	f043 0202 	orr.w	r2, r3, #2
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00b      	beq.n	8005fa6 <HAL_UART_IRQHandler+0xf6>
 8005f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d005      	beq.n	8005fa6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f9e:	f043 0204 	orr.w	r2, r3, #4
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d011      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x126>
 8005fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d105      	bne.n	8005fca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d005      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fce:	f043 0208 	orr.w	r2, r3, #8
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 81f2 	beq.w	80063c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fe4:	f003 0320 	and.w	r3, r3, #32
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d008      	beq.n	8005ffe <HAL_UART_IRQHandler+0x14e>
 8005fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ff0:	f003 0320 	and.w	r3, r3, #32
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fae8 	bl	80065ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006008:	2b40      	cmp	r3, #64	@ 0x40
 800600a:	bf0c      	ite	eq
 800600c:	2301      	moveq	r3, #1
 800600e:	2300      	movne	r3, #0
 8006010:	b2db      	uxtb	r3, r3
 8006012:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800601a:	f003 0308 	and.w	r3, r3, #8
 800601e:	2b00      	cmp	r3, #0
 8006020:	d103      	bne.n	800602a <HAL_UART_IRQHandler+0x17a>
 8006022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006026:	2b00      	cmp	r3, #0
 8006028:	d04f      	beq.n	80060ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f9f0 	bl	8006410 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800603a:	2b40      	cmp	r3, #64	@ 0x40
 800603c:	d141      	bne.n	80060c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3314      	adds	r3, #20
 8006044:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006048:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800604c:	e853 3f00 	ldrex	r3, [r3]
 8006050:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006054:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006058:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800605c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3314      	adds	r3, #20
 8006066:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800606a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800606e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006072:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006076:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1d9      	bne.n	800603e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800608e:	2b00      	cmp	r3, #0
 8006090:	d013      	beq.n	80060ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006096:	4a7e      	ldr	r2, [pc, #504]	@ (8006290 <HAL_UART_IRQHandler+0x3e0>)
 8006098:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fd fb8c 	bl	80037bc <HAL_DMA_Abort_IT>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d016      	beq.n	80060d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80060b4:	4610      	mov	r0, r2
 80060b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b8:	e00e      	b.n	80060d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f99e 	bl	80063fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c0:	e00a      	b.n	80060d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f99a 	bl	80063fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c8:	e006      	b.n	80060d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f996 	bl	80063fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80060d6:	e175      	b.n	80063c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d8:	bf00      	nop
    return;
 80060da:	e173      	b.n	80063c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	f040 814f 	bne.w	8006384 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80060e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060ea:	f003 0310 	and.w	r3, r3, #16
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 8148 	beq.w	8006384 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 8141 	beq.w	8006384 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006102:	2300      	movs	r3, #0
 8006104:	60bb      	str	r3, [r7, #8]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	60bb      	str	r3, [r7, #8]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	60bb      	str	r3, [r7, #8]
 8006116:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006122:	2b40      	cmp	r3, #64	@ 0x40
 8006124:	f040 80b6 	bne.w	8006294 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006134:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 8145 	beq.w	80063c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006142:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006146:	429a      	cmp	r2, r3
 8006148:	f080 813e 	bcs.w	80063c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006152:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800615e:	f000 8088 	beq.w	8006272 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	330c      	adds	r3, #12
 8006168:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006178:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800617c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006180:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	330c      	adds	r3, #12
 800618a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800618e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006192:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800619a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800619e:	e841 2300 	strex	r3, r2, [r1]
 80061a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80061a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1d9      	bne.n	8006162 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3314      	adds	r3, #20
 80061b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80061be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061c0:	f023 0301 	bic.w	r3, r3, #1
 80061c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3314      	adds	r3, #20
 80061ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80061d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80061d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80061e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e1      	bne.n	80061ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3314      	adds	r3, #20
 80061f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80061fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006200:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3314      	adds	r3, #20
 800620a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800620e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006210:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006214:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800621c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e3      	bne.n	80061ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2220      	movs	r2, #32
 8006226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006242:	f023 0310 	bic.w	r3, r3, #16
 8006246:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	330c      	adds	r3, #12
 8006250:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006254:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006256:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800625a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006262:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e3      	bne.n	8006230 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800626c:	4618      	mov	r0, r3
 800626e:	f7fd fa35 	bl	80036dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2202      	movs	r2, #2
 8006276:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006280:	b29b      	uxth	r3, r3
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	b29b      	uxth	r3, r3
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7fb fef5 	bl	8002078 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800628e:	e09b      	b.n	80063c8 <HAL_UART_IRQHandler+0x518>
 8006290:	080064d7 	.word	0x080064d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800629c:	b29b      	uxth	r3, r3
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 808e 	beq.w	80063cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80062b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 8089 	beq.w	80063cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	330c      	adds	r3, #12
 80062c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	330c      	adds	r3, #12
 80062da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80062de:	647a      	str	r2, [r7, #68]	@ 0x44
 80062e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062e6:	e841 2300 	strex	r3, r2, [r1]
 80062ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1e3      	bne.n	80062ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3314      	adds	r3, #20
 80062f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	623b      	str	r3, [r7, #32]
   return(result);
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	f023 0301 	bic.w	r3, r3, #1
 8006308:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3314      	adds	r3, #20
 8006312:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006316:	633a      	str	r2, [r7, #48]	@ 0x30
 8006318:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800631c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e3      	bne.n	80062f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2220      	movs	r2, #32
 800632e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	330c      	adds	r3, #12
 800633e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	60fb      	str	r3, [r7, #12]
   return(result);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0310 	bic.w	r3, r3, #16
 800634e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	330c      	adds	r3, #12
 8006358:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800635c:	61fa      	str	r2, [r7, #28]
 800635e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006360:	69b9      	ldr	r1, [r7, #24]
 8006362:	69fa      	ldr	r2, [r7, #28]
 8006364:	e841 2300 	strex	r3, r2, [r1]
 8006368:	617b      	str	r3, [r7, #20]
   return(result);
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1e3      	bne.n	8006338 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006376:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7fb fe7b 	bl	8002078 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006382:	e023      	b.n	80063cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800638c:	2b00      	cmp	r3, #0
 800638e:	d009      	beq.n	80063a4 <HAL_UART_IRQHandler+0x4f4>
 8006390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006398:	2b00      	cmp	r3, #0
 800639a:	d003      	beq.n	80063a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f8ae 	bl	80064fe <UART_Transmit_IT>
    return;
 80063a2:	e014      	b.n	80063ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00e      	beq.n	80063ce <HAL_UART_IRQHandler+0x51e>
 80063b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d008      	beq.n	80063ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f8ee 	bl	800659e <UART_EndTransmit_IT>
    return;
 80063c2:	e004      	b.n	80063ce <HAL_UART_IRQHandler+0x51e>
    return;
 80063c4:	bf00      	nop
 80063c6:	e002      	b.n	80063ce <HAL_UART_IRQHandler+0x51e>
      return;
 80063c8:	bf00      	nop
 80063ca:	e000      	b.n	80063ce <HAL_UART_IRQHandler+0x51e>
      return;
 80063cc:	bf00      	nop
  }
}
 80063ce:	37e8      	adds	r7, #232	@ 0xe8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006410:	b480      	push	{r7}
 8006412:	b095      	sub	sp, #84	@ 0x54
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	330c      	adds	r3, #12
 800641e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006422:	e853 3f00 	ldrex	r3, [r3]
 8006426:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800642e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	330c      	adds	r3, #12
 8006436:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006438:	643a      	str	r2, [r7, #64]	@ 0x40
 800643a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800643e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006440:	e841 2300 	strex	r3, r2, [r1]
 8006444:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1e5      	bne.n	8006418 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3314      	adds	r3, #20
 8006452:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006454:	6a3b      	ldr	r3, [r7, #32]
 8006456:	e853 3f00 	ldrex	r3, [r3]
 800645a:	61fb      	str	r3, [r7, #28]
   return(result);
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	f023 0301 	bic.w	r3, r3, #1
 8006462:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3314      	adds	r3, #20
 800646a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800646c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800646e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006470:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006474:	e841 2300 	strex	r3, r2, [r1]
 8006478:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1e5      	bne.n	800644c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006484:	2b01      	cmp	r3, #1
 8006486:	d119      	bne.n	80064bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	330c      	adds	r3, #12
 800648e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	e853 3f00 	ldrex	r3, [r3]
 8006496:	60bb      	str	r3, [r7, #8]
   return(result);
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f023 0310 	bic.w	r3, r3, #16
 800649e:	647b      	str	r3, [r7, #68]	@ 0x44
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	330c      	adds	r3, #12
 80064a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064a8:	61ba      	str	r2, [r7, #24]
 80064aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ac:	6979      	ldr	r1, [r7, #20]
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	e841 2300 	strex	r3, r2, [r1]
 80064b4:	613b      	str	r3, [r7, #16]
   return(result);
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1e5      	bne.n	8006488 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2220      	movs	r2, #32
 80064c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80064ca:	bf00      	nop
 80064cc:	3754      	adds	r7, #84	@ 0x54
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f7ff ff83 	bl	80063fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064f6:	bf00      	nop
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80064fe:	b480      	push	{r7}
 8006500:	b085      	sub	sp, #20
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b21      	cmp	r3, #33	@ 0x21
 8006510:	d13e      	bne.n	8006590 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800651a:	d114      	bne.n	8006546 <UART_Transmit_IT+0x48>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d110      	bne.n	8006546 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006538:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	1c9a      	adds	r2, r3, #2
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	621a      	str	r2, [r3, #32]
 8006544:	e008      	b.n	8006558 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	1c59      	adds	r1, r3, #1
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6211      	str	r1, [r2, #32]
 8006550:	781a      	ldrb	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800655c:	b29b      	uxth	r3, r3
 800655e:	3b01      	subs	r3, #1
 8006560:	b29b      	uxth	r3, r3
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	4619      	mov	r1, r3
 8006566:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10f      	bne.n	800658c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800657a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800658a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800658c:	2300      	movs	r3, #0
 800658e:	e000      	b.n	8006592 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006590:	2302      	movs	r3, #2
  }
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b082      	sub	sp, #8
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2220      	movs	r2, #32
 80065ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7ff ff08 	bl	80063d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b08c      	sub	sp, #48	@ 0x30
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b22      	cmp	r3, #34	@ 0x22
 80065e0:	f040 80ae 	bne.w	8006740 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ec:	d117      	bne.n	800661e <UART_Receive_IT+0x50>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d113      	bne.n	800661e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	b29b      	uxth	r3, r3
 8006608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660c:	b29a      	uxth	r2, r3
 800660e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006610:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006616:	1c9a      	adds	r2, r3, #2
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	629a      	str	r2, [r3, #40]	@ 0x28
 800661c:	e026      	b.n	800666c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006622:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006624:	2300      	movs	r3, #0
 8006626:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006630:	d007      	beq.n	8006642 <UART_Receive_IT+0x74>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <UART_Receive_IT+0x82>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d106      	bne.n	8006650 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	b2da      	uxtb	r2, r3
 800664a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	e008      	b.n	8006662 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	b2db      	uxtb	r3, r3
 8006658:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800665c:	b2da      	uxtb	r2, r3
 800665e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006660:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006670:	b29b      	uxth	r3, r3
 8006672:	3b01      	subs	r3, #1
 8006674:	b29b      	uxth	r3, r3
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	4619      	mov	r1, r3
 800667a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800667c:	2b00      	cmp	r3, #0
 800667e:	d15d      	bne.n	800673c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f022 0220 	bic.w	r2, r2, #32
 800668e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800669e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695a      	ldr	r2, [r3, #20]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d135      	bne.n	8006732 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	330c      	adds	r3, #12
 80066d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	e853 3f00 	ldrex	r3, [r3]
 80066da:	613b      	str	r3, [r7, #16]
   return(result);
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f023 0310 	bic.w	r3, r3, #16
 80066e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	330c      	adds	r3, #12
 80066ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ec:	623a      	str	r2, [r7, #32]
 80066ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	69f9      	ldr	r1, [r7, #28]
 80066f2:	6a3a      	ldr	r2, [r7, #32]
 80066f4:	e841 2300 	strex	r3, r2, [r1]
 80066f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e5      	bne.n	80066cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0310 	and.w	r3, r3, #16
 800670a:	2b10      	cmp	r3, #16
 800670c:	d10a      	bne.n	8006724 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006728:	4619      	mov	r1, r3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fb fca4 	bl	8002078 <HAL_UARTEx_RxEventCallback>
 8006730:	e002      	b.n	8006738 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff fe58 	bl	80063e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	e002      	b.n	8006742 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	e000      	b.n	8006742 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006740:	2302      	movs	r3, #2
  }
}
 8006742:	4618      	mov	r0, r3
 8006744:	3730      	adds	r7, #48	@ 0x30
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800674c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006750:	b0c0      	sub	sp, #256	@ 0x100
 8006752:	af00      	add	r7, sp, #0
 8006754:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006768:	68d9      	ldr	r1, [r3, #12]
 800676a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	ea40 0301 	orr.w	r3, r0, r1
 8006774:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	431a      	orrs	r2, r3
 8006784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	431a      	orrs	r2, r3
 800678c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	4313      	orrs	r3, r2
 8006794:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80067a4:	f021 010c 	bic.w	r1, r1, #12
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80067b2:	430b      	orrs	r3, r1
 80067b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80067c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c6:	6999      	ldr	r1, [r3, #24]
 80067c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	ea40 0301 	orr.w	r3, r0, r1
 80067d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	4b8f      	ldr	r3, [pc, #572]	@ (8006a18 <UART_SetConfig+0x2cc>)
 80067dc:	429a      	cmp	r2, r3
 80067de:	d005      	beq.n	80067ec <UART_SetConfig+0xa0>
 80067e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	4b8d      	ldr	r3, [pc, #564]	@ (8006a1c <UART_SetConfig+0x2d0>)
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d104      	bne.n	80067f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067ec:	f7fe f86c 	bl	80048c8 <HAL_RCC_GetPCLK2Freq>
 80067f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80067f4:	e003      	b.n	80067fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067f6:	f7fe f853 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 80067fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006808:	f040 810c 	bne.w	8006a24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800680c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006810:	2200      	movs	r2, #0
 8006812:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006816:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800681a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800681e:	4622      	mov	r2, r4
 8006820:	462b      	mov	r3, r5
 8006822:	1891      	adds	r1, r2, r2
 8006824:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006826:	415b      	adcs	r3, r3
 8006828:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800682a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800682e:	4621      	mov	r1, r4
 8006830:	eb12 0801 	adds.w	r8, r2, r1
 8006834:	4629      	mov	r1, r5
 8006836:	eb43 0901 	adc.w	r9, r3, r1
 800683a:	f04f 0200 	mov.w	r2, #0
 800683e:	f04f 0300 	mov.w	r3, #0
 8006842:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006846:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800684a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800684e:	4690      	mov	r8, r2
 8006850:	4699      	mov	r9, r3
 8006852:	4623      	mov	r3, r4
 8006854:	eb18 0303 	adds.w	r3, r8, r3
 8006858:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800685c:	462b      	mov	r3, r5
 800685e:	eb49 0303 	adc.w	r3, r9, r3
 8006862:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006872:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006876:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800687a:	460b      	mov	r3, r1
 800687c:	18db      	adds	r3, r3, r3
 800687e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006880:	4613      	mov	r3, r2
 8006882:	eb42 0303 	adc.w	r3, r2, r3
 8006886:	657b      	str	r3, [r7, #84]	@ 0x54
 8006888:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800688c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006890:	f7f9 fc9a 	bl	80001c8 <__aeabi_uldivmod>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	4b61      	ldr	r3, [pc, #388]	@ (8006a20 <UART_SetConfig+0x2d4>)
 800689a:	fba3 2302 	umull	r2, r3, r3, r2
 800689e:	095b      	lsrs	r3, r3, #5
 80068a0:	011c      	lsls	r4, r3, #4
 80068a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80068b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80068b4:	4642      	mov	r2, r8
 80068b6:	464b      	mov	r3, r9
 80068b8:	1891      	adds	r1, r2, r2
 80068ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80068bc:	415b      	adcs	r3, r3
 80068be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80068c4:	4641      	mov	r1, r8
 80068c6:	eb12 0a01 	adds.w	sl, r2, r1
 80068ca:	4649      	mov	r1, r9
 80068cc:	eb43 0b01 	adc.w	fp, r3, r1
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068e4:	4692      	mov	sl, r2
 80068e6:	469b      	mov	fp, r3
 80068e8:	4643      	mov	r3, r8
 80068ea:	eb1a 0303 	adds.w	r3, sl, r3
 80068ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068f2:	464b      	mov	r3, r9
 80068f4:	eb4b 0303 	adc.w	r3, fp, r3
 80068f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80068fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006908:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800690c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006910:	460b      	mov	r3, r1
 8006912:	18db      	adds	r3, r3, r3
 8006914:	643b      	str	r3, [r7, #64]	@ 0x40
 8006916:	4613      	mov	r3, r2
 8006918:	eb42 0303 	adc.w	r3, r2, r3
 800691c:	647b      	str	r3, [r7, #68]	@ 0x44
 800691e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006922:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006926:	f7f9 fc4f 	bl	80001c8 <__aeabi_uldivmod>
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	4611      	mov	r1, r2
 8006930:	4b3b      	ldr	r3, [pc, #236]	@ (8006a20 <UART_SetConfig+0x2d4>)
 8006932:	fba3 2301 	umull	r2, r3, r3, r1
 8006936:	095b      	lsrs	r3, r3, #5
 8006938:	2264      	movs	r2, #100	@ 0x64
 800693a:	fb02 f303 	mul.w	r3, r2, r3
 800693e:	1acb      	subs	r3, r1, r3
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006946:	4b36      	ldr	r3, [pc, #216]	@ (8006a20 <UART_SetConfig+0x2d4>)
 8006948:	fba3 2302 	umull	r2, r3, r3, r2
 800694c:	095b      	lsrs	r3, r3, #5
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006954:	441c      	add	r4, r3
 8006956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800695a:	2200      	movs	r2, #0
 800695c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006960:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006964:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006968:	4642      	mov	r2, r8
 800696a:	464b      	mov	r3, r9
 800696c:	1891      	adds	r1, r2, r2
 800696e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006970:	415b      	adcs	r3, r3
 8006972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006974:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006978:	4641      	mov	r1, r8
 800697a:	1851      	adds	r1, r2, r1
 800697c:	6339      	str	r1, [r7, #48]	@ 0x30
 800697e:	4649      	mov	r1, r9
 8006980:	414b      	adcs	r3, r1
 8006982:	637b      	str	r3, [r7, #52]	@ 0x34
 8006984:	f04f 0200 	mov.w	r2, #0
 8006988:	f04f 0300 	mov.w	r3, #0
 800698c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006990:	4659      	mov	r1, fp
 8006992:	00cb      	lsls	r3, r1, #3
 8006994:	4651      	mov	r1, sl
 8006996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800699a:	4651      	mov	r1, sl
 800699c:	00ca      	lsls	r2, r1, #3
 800699e:	4610      	mov	r0, r2
 80069a0:	4619      	mov	r1, r3
 80069a2:	4603      	mov	r3, r0
 80069a4:	4642      	mov	r2, r8
 80069a6:	189b      	adds	r3, r3, r2
 80069a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069ac:	464b      	mov	r3, r9
 80069ae:	460a      	mov	r2, r1
 80069b0:	eb42 0303 	adc.w	r3, r2, r3
 80069b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80069c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80069c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80069cc:	460b      	mov	r3, r1
 80069ce:	18db      	adds	r3, r3, r3
 80069d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069d2:	4613      	mov	r3, r2
 80069d4:	eb42 0303 	adc.w	r3, r2, r3
 80069d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80069de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80069e2:	f7f9 fbf1 	bl	80001c8 <__aeabi_uldivmod>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006a20 <UART_SetConfig+0x2d4>)
 80069ec:	fba3 1302 	umull	r1, r3, r3, r2
 80069f0:	095b      	lsrs	r3, r3, #5
 80069f2:	2164      	movs	r1, #100	@ 0x64
 80069f4:	fb01 f303 	mul.w	r3, r1, r3
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	3332      	adds	r3, #50	@ 0x32
 80069fe:	4a08      	ldr	r2, [pc, #32]	@ (8006a20 <UART_SetConfig+0x2d4>)
 8006a00:	fba2 2303 	umull	r2, r3, r2, r3
 8006a04:	095b      	lsrs	r3, r3, #5
 8006a06:	f003 0207 	and.w	r2, r3, #7
 8006a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4422      	add	r2, r4
 8006a12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a14:	e106      	b.n	8006c24 <UART_SetConfig+0x4d8>
 8006a16:	bf00      	nop
 8006a18:	40011000 	.word	0x40011000
 8006a1c:	40011400 	.word	0x40011400
 8006a20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006a32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006a36:	4642      	mov	r2, r8
 8006a38:	464b      	mov	r3, r9
 8006a3a:	1891      	adds	r1, r2, r2
 8006a3c:	6239      	str	r1, [r7, #32]
 8006a3e:	415b      	adcs	r3, r3
 8006a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a46:	4641      	mov	r1, r8
 8006a48:	1854      	adds	r4, r2, r1
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	eb43 0501 	adc.w	r5, r3, r1
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	00eb      	lsls	r3, r5, #3
 8006a5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a5e:	00e2      	lsls	r2, r4, #3
 8006a60:	4614      	mov	r4, r2
 8006a62:	461d      	mov	r5, r3
 8006a64:	4643      	mov	r3, r8
 8006a66:	18e3      	adds	r3, r4, r3
 8006a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a6c:	464b      	mov	r3, r9
 8006a6e:	eb45 0303 	adc.w	r3, r5, r3
 8006a72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a86:	f04f 0200 	mov.w	r2, #0
 8006a8a:	f04f 0300 	mov.w	r3, #0
 8006a8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006a92:	4629      	mov	r1, r5
 8006a94:	008b      	lsls	r3, r1, #2
 8006a96:	4621      	mov	r1, r4
 8006a98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	008a      	lsls	r2, r1, #2
 8006aa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006aa4:	f7f9 fb90 	bl	80001c8 <__aeabi_uldivmod>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4b60      	ldr	r3, [pc, #384]	@ (8006c30 <UART_SetConfig+0x4e4>)
 8006aae:	fba3 2302 	umull	r2, r3, r3, r2
 8006ab2:	095b      	lsrs	r3, r3, #5
 8006ab4:	011c      	lsls	r4, r3, #4
 8006ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006aba:	2200      	movs	r2, #0
 8006abc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ac0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ac4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006ac8:	4642      	mov	r2, r8
 8006aca:	464b      	mov	r3, r9
 8006acc:	1891      	adds	r1, r2, r2
 8006ace:	61b9      	str	r1, [r7, #24]
 8006ad0:	415b      	adcs	r3, r3
 8006ad2:	61fb      	str	r3, [r7, #28]
 8006ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ad8:	4641      	mov	r1, r8
 8006ada:	1851      	adds	r1, r2, r1
 8006adc:	6139      	str	r1, [r7, #16]
 8006ade:	4649      	mov	r1, r9
 8006ae0:	414b      	adcs	r3, r1
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006af0:	4659      	mov	r1, fp
 8006af2:	00cb      	lsls	r3, r1, #3
 8006af4:	4651      	mov	r1, sl
 8006af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006afa:	4651      	mov	r1, sl
 8006afc:	00ca      	lsls	r2, r1, #3
 8006afe:	4610      	mov	r0, r2
 8006b00:	4619      	mov	r1, r3
 8006b02:	4603      	mov	r3, r0
 8006b04:	4642      	mov	r2, r8
 8006b06:	189b      	adds	r3, r3, r2
 8006b08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b0c:	464b      	mov	r3, r9
 8006b0e:	460a      	mov	r2, r1
 8006b10:	eb42 0303 	adc.w	r3, r2, r3
 8006b14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006b24:	f04f 0200 	mov.w	r2, #0
 8006b28:	f04f 0300 	mov.w	r3, #0
 8006b2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006b30:	4649      	mov	r1, r9
 8006b32:	008b      	lsls	r3, r1, #2
 8006b34:	4641      	mov	r1, r8
 8006b36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b3a:	4641      	mov	r1, r8
 8006b3c:	008a      	lsls	r2, r1, #2
 8006b3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006b42:	f7f9 fb41 	bl	80001c8 <__aeabi_uldivmod>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	4b38      	ldr	r3, [pc, #224]	@ (8006c30 <UART_SetConfig+0x4e4>)
 8006b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	2264      	movs	r2, #100	@ 0x64
 8006b56:	fb02 f303 	mul.w	r3, r2, r3
 8006b5a:	1acb      	subs	r3, r1, r3
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	3332      	adds	r3, #50	@ 0x32
 8006b60:	4a33      	ldr	r2, [pc, #204]	@ (8006c30 <UART_SetConfig+0x4e4>)
 8006b62:	fba2 2303 	umull	r2, r3, r2, r3
 8006b66:	095b      	lsrs	r3, r3, #5
 8006b68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b6c:	441c      	add	r4, r3
 8006b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b72:	2200      	movs	r2, #0
 8006b74:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b76:	677a      	str	r2, [r7, #116]	@ 0x74
 8006b78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006b7c:	4642      	mov	r2, r8
 8006b7e:	464b      	mov	r3, r9
 8006b80:	1891      	adds	r1, r2, r2
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	415b      	adcs	r3, r3
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b8c:	4641      	mov	r1, r8
 8006b8e:	1851      	adds	r1, r2, r1
 8006b90:	6039      	str	r1, [r7, #0]
 8006b92:	4649      	mov	r1, r9
 8006b94:	414b      	adcs	r3, r1
 8006b96:	607b      	str	r3, [r7, #4]
 8006b98:	f04f 0200 	mov.w	r2, #0
 8006b9c:	f04f 0300 	mov.w	r3, #0
 8006ba0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ba4:	4659      	mov	r1, fp
 8006ba6:	00cb      	lsls	r3, r1, #3
 8006ba8:	4651      	mov	r1, sl
 8006baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bae:	4651      	mov	r1, sl
 8006bb0:	00ca      	lsls	r2, r1, #3
 8006bb2:	4610      	mov	r0, r2
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	4642      	mov	r2, r8
 8006bba:	189b      	adds	r3, r3, r2
 8006bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bbe:	464b      	mov	r3, r9
 8006bc0:	460a      	mov	r2, r1
 8006bc2:	eb42 0303 	adc.w	r3, r2, r3
 8006bc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bd2:	667a      	str	r2, [r7, #100]	@ 0x64
 8006bd4:	f04f 0200 	mov.w	r2, #0
 8006bd8:	f04f 0300 	mov.w	r3, #0
 8006bdc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006be0:	4649      	mov	r1, r9
 8006be2:	008b      	lsls	r3, r1, #2
 8006be4:	4641      	mov	r1, r8
 8006be6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bea:	4641      	mov	r1, r8
 8006bec:	008a      	lsls	r2, r1, #2
 8006bee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006bf2:	f7f9 fae9 	bl	80001c8 <__aeabi_uldivmod>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006c30 <UART_SetConfig+0x4e4>)
 8006bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8006c00:	095b      	lsrs	r3, r3, #5
 8006c02:	2164      	movs	r1, #100	@ 0x64
 8006c04:	fb01 f303 	mul.w	r3, r1, r3
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	3332      	adds	r3, #50	@ 0x32
 8006c0e:	4a08      	ldr	r2, [pc, #32]	@ (8006c30 <UART_SetConfig+0x4e4>)
 8006c10:	fba2 2303 	umull	r2, r3, r2, r3
 8006c14:	095b      	lsrs	r3, r3, #5
 8006c16:	f003 020f 	and.w	r2, r3, #15
 8006c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4422      	add	r2, r4
 8006c22:	609a      	str	r2, [r3, #8]
}
 8006c24:	bf00      	nop
 8006c26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c30:	51eb851f 	.word	0x51eb851f

08006c34 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c48:	683a      	ldr	r2, [r7, #0]
 8006c4a:	6812      	ldr	r2, [r2, #0]
 8006c4c:	f023 0101 	bic.w	r1, r3, #1
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	2b08      	cmp	r3, #8
 8006c5c:	d102      	bne.n	8006c64 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006c5e:	2340      	movs	r3, #64	@ 0x40
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	e001      	b.n	8006c68 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006c64:	2300      	movs	r3, #0
 8006c66:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006c74:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006c7a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006c80:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006c86:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006c8c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006c92:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8006c98:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8006c9e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8006ca4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8006caa:	4313      	orrs	r3, r2
 8006cac:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8006cc2:	4b10      	ldr	r3, [pc, #64]	@ (8006d04 <FSMC_NORSRAM_Init+0xd0>)
 8006cc4:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ccc:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006cd4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	43db      	mvns	r3, r3
 8006ce4:	ea02 0103 	and.w	r1, r2, r3
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	4319      	orrs	r1, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	371c      	adds	r7, #28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	0008fb7f 	.word	0x0008fb7f

08006d08 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1e:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	021b      	lsls	r3, r3, #8
 8006d34:	431a      	orrs	r2, r3
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	041b      	lsls	r3, r3, #16
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	051b      	lsls	r3, r3, #20
 8006d46:	431a      	orrs	r2, r3
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	3b02      	subs	r3, #2
 8006d4e:	061b      	lsls	r3, r3, #24
 8006d50:	431a      	orrs	r2, r3
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	3201      	adds	r2, #1
 8006d5c:	4319      	orrs	r1, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
	...

08006d74 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
 8006d80:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d88:	d11d      	bne.n	8006dc6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d92:	4b13      	ldr	r3, [pc, #76]	@ (8006de0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006d94:	4013      	ands	r3, r2
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	6811      	ldr	r1, [r2, #0]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	6852      	ldr	r2, [r2, #4]
 8006d9e:	0112      	lsls	r2, r2, #4
 8006da0:	4311      	orrs	r1, r2
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	6892      	ldr	r2, [r2, #8]
 8006da6:	0212      	lsls	r2, r2, #8
 8006da8:	4311      	orrs	r1, r2
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	6992      	ldr	r2, [r2, #24]
 8006dae:	4311      	orrs	r1, r2
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	68d2      	ldr	r2, [r2, #12]
 8006db4:	0412      	lsls	r2, r2, #16
 8006db6:	430a      	orrs	r2, r1
 8006db8:	ea43 0102 	orr.w	r1, r3, r2
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006dc4:	e005      	b.n	8006dd2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8006dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	cff00000 	.word	0xcff00000

08006de4 <memset>:
 8006de4:	4402      	add	r2, r0
 8006de6:	4603      	mov	r3, r0
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d100      	bne.n	8006dee <memset+0xa>
 8006dec:	4770      	bx	lr
 8006dee:	f803 1b01 	strb.w	r1, [r3], #1
 8006df2:	e7f9      	b.n	8006de8 <memset+0x4>

08006df4 <__libc_init_array>:
 8006df4:	b570      	push	{r4, r5, r6, lr}
 8006df6:	4d0d      	ldr	r5, [pc, #52]	@ (8006e2c <__libc_init_array+0x38>)
 8006df8:	4c0d      	ldr	r4, [pc, #52]	@ (8006e30 <__libc_init_array+0x3c>)
 8006dfa:	1b64      	subs	r4, r4, r5
 8006dfc:	10a4      	asrs	r4, r4, #2
 8006dfe:	2600      	movs	r6, #0
 8006e00:	42a6      	cmp	r6, r4
 8006e02:	d109      	bne.n	8006e18 <__libc_init_array+0x24>
 8006e04:	4d0b      	ldr	r5, [pc, #44]	@ (8006e34 <__libc_init_array+0x40>)
 8006e06:	4c0c      	ldr	r4, [pc, #48]	@ (8006e38 <__libc_init_array+0x44>)
 8006e08:	f000 f818 	bl	8006e3c <_init>
 8006e0c:	1b64      	subs	r4, r4, r5
 8006e0e:	10a4      	asrs	r4, r4, #2
 8006e10:	2600      	movs	r6, #0
 8006e12:	42a6      	cmp	r6, r4
 8006e14:	d105      	bne.n	8006e22 <__libc_init_array+0x2e>
 8006e16:	bd70      	pop	{r4, r5, r6, pc}
 8006e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e1c:	4798      	blx	r3
 8006e1e:	3601      	adds	r6, #1
 8006e20:	e7ee      	b.n	8006e00 <__libc_init_array+0xc>
 8006e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e26:	4798      	blx	r3
 8006e28:	3601      	adds	r6, #1
 8006e2a:	e7f2      	b.n	8006e12 <__libc_init_array+0x1e>
 8006e2c:	08009e3c 	.word	0x08009e3c
 8006e30:	08009e3c 	.word	0x08009e3c
 8006e34:	08009e3c 	.word	0x08009e3c
 8006e38:	08009e40 	.word	0x08009e40

08006e3c <_init>:
 8006e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3e:	bf00      	nop
 8006e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e42:	bc08      	pop	{r3}
 8006e44:	469e      	mov	lr, r3
 8006e46:	4770      	bx	lr

08006e48 <_fini>:
 8006e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4a:	bf00      	nop
 8006e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e4e:	bc08      	pop	{r3}
 8006e50:	469e      	mov	lr, r3
 8006e52:	4770      	bx	lr
