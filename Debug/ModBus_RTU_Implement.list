
ModBus_RTU_Implement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c50  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe0  08006dd8  08006dd8  00007dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009db8  08009db8  0000b248  2**0
                  CONTENTS
  4 .ARM          00000008  08009db8  08009db8  0000adb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dc0  08009dc0  0000b248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dc0  08009dc0  0000adc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009dc4  08009dc4  0000adc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000248  20000000  08009dc8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b248  2**0
                  CONTENTS
 10 .bss          000005e4  20000248  20000248  0000b248  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000082c  2000082c  0000b248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b248  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d47  00000000  00000000  0000b278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f80  00000000  00000000  00021fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  00025f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f6b  00000000  00000000  00027378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000258bd  00000000  00000000  000282e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bc87  00000000  00000000  0004dba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd768  00000000  00000000  00069827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00146f8f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005118  00000000  00000000  00146fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0014c0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000248 	.word	0x20000248
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006dc0 	.word	0x08006dc0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000024c 	.word	0x2000024c
 80001c4:	08006dc0 	.word	0x08006dc0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004be:	463b      	mov	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ca:	4b39      	ldr	r3, [pc, #228]	@ (80005b0 <MX_ADC1_Init+0xf8>)
 80004cc:	4a39      	ldr	r2, [pc, #228]	@ (80005b4 <MX_ADC1_Init+0xfc>)
 80004ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004d0:	4b37      	ldr	r3, [pc, #220]	@ (80005b0 <MX_ADC1_Init+0xf8>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004d6:	4b36      	ldr	r3, [pc, #216]	@ (80005b0 <MX_ADC1_Init+0xf8>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004dc:	4b34      	ldr	r3, [pc, #208]	@ (80005b0 <MX_ADC1_Init+0xf8>)
 80004de:	2201      	movs	r2, #1
 80004e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004e2:	4b33      	ldr	r3, [pc, #204]	@ (80005b0 <MX_ADC1_Init+0xf8>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004e8:	4b31      	ldr	r3, [pc, #196]	@ (80005b0 <MX_ADC1_Init+0xf8>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004f0:	4b2f      	ldr	r3, [pc, #188]	@ (80005b0 <MX_ADC1_Init+0xf8>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004f6:	4b2e      	ldr	r3, [pc, #184]	@ (80005b0 <MX_ADC1_Init+0xf8>)
 80004f8:	4a2f      	ldr	r2, [pc, #188]	@ (80005b8 <MX_ADC1_Init+0x100>)
 80004fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004fc:	4b2c      	ldr	r3, [pc, #176]	@ (80005b0 <MX_ADC1_Init+0xf8>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000502:	4b2b      	ldr	r3, [pc, #172]	@ (80005b0 <MX_ADC1_Init+0xf8>)
 8000504:	2205      	movs	r2, #5
 8000506:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000508:	4b29      	ldr	r3, [pc, #164]	@ (80005b0 <MX_ADC1_Init+0xf8>)
 800050a:	2200      	movs	r2, #0
 800050c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000510:	4b27      	ldr	r3, [pc, #156]	@ (80005b0 <MX_ADC1_Init+0xf8>)
 8000512:	2201      	movs	r2, #1
 8000514:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000516:	4826      	ldr	r0, [pc, #152]	@ (80005b0 <MX_ADC1_Init+0xf8>)
 8000518:	f002 fa78 	bl	8002a0c <HAL_ADC_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000522:	f001 fb3d 	bl	8001ba0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000526:	2308      	movs	r3, #8
 8000528:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800052a:	2301      	movs	r3, #1
 800052c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800052e:	2301      	movs	r3, #1
 8000530:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000532:	463b      	mov	r3, r7
 8000534:	4619      	mov	r1, r3
 8000536:	481e      	ldr	r0, [pc, #120]	@ (80005b0 <MX_ADC1_Init+0xf8>)
 8000538:	f002 fbda 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000542:	f001 fb2d 	bl	8001ba0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000546:	2302      	movs	r3, #2
 8000548:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054a:	463b      	mov	r3, r7
 800054c:	4619      	mov	r1, r3
 800054e:	4818      	ldr	r0, [pc, #96]	@ (80005b0 <MX_ADC1_Init+0xf8>)
 8000550:	f002 fbce 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800055a:	f001 fb21 	bl	8001ba0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 800055e:	2303      	movs	r3, #3
 8000560:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000562:	463b      	mov	r3, r7
 8000564:	4619      	mov	r1, r3
 8000566:	4812      	ldr	r0, [pc, #72]	@ (80005b0 <MX_ADC1_Init+0xf8>)
 8000568:	f002 fbc2 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8000572:	f001 fb15 	bl	8001ba0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8000576:	2304      	movs	r3, #4
 8000578:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057a:	463b      	mov	r3, r7
 800057c:	4619      	mov	r1, r3
 800057e:	480c      	ldr	r0, [pc, #48]	@ (80005b0 <MX_ADC1_Init+0xf8>)
 8000580:	f002 fbb6 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800058a:	f001 fb09 	bl	8001ba0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 800058e:	2305      	movs	r3, #5
 8000590:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000592:	463b      	mov	r3, r7
 8000594:	4619      	mov	r1, r3
 8000596:	4806      	ldr	r0, [pc, #24]	@ (80005b0 <MX_ADC1_Init+0xf8>)
 8000598:	f002 fbaa 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80005a2:	f001 fafd 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000264 	.word	0x20000264
 80005b4:	40012000 	.word	0x40012000
 80005b8:	0f000001 	.word	0x0f000001

080005bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	@ 0x28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a3c      	ldr	r2, [pc, #240]	@ (80006cc <HAL_ADC_MspInit+0x110>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d171      	bne.n	80006c2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	4b3b      	ldr	r3, [pc, #236]	@ (80006d0 <HAL_ADC_MspInit+0x114>)
 80005e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005e6:	4a3a      	ldr	r2, [pc, #232]	@ (80006d0 <HAL_ADC_MspInit+0x114>)
 80005e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80005ee:	4b38      	ldr	r3, [pc, #224]	@ (80006d0 <HAL_ADC_MspInit+0x114>)
 80005f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	4b34      	ldr	r3, [pc, #208]	@ (80006d0 <HAL_ADC_MspInit+0x114>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a33      	ldr	r2, [pc, #204]	@ (80006d0 <HAL_ADC_MspInit+0x114>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b31      	ldr	r3, [pc, #196]	@ (80006d0 <HAL_ADC_MspInit+0x114>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	4b2d      	ldr	r3, [pc, #180]	@ (80006d0 <HAL_ADC_MspInit+0x114>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a2c      	ldr	r2, [pc, #176]	@ (80006d0 <HAL_ADC_MspInit+0x114>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
 8000626:	4b2a      	ldr	r3, [pc, #168]	@ (80006d0 <HAL_ADC_MspInit+0x114>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000632:	2307      	movs	r3, #7
 8000634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000636:	2303      	movs	r3, #3
 8000638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	4823      	ldr	r0, [pc, #140]	@ (80006d4 <HAL_ADC_MspInit+0x118>)
 8000646:	f003 fb07 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800064a:	2303      	movs	r3, #3
 800064c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800064e:	2303      	movs	r3, #3
 8000650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4619      	mov	r1, r3
 800065c:	481e      	ldr	r0, [pc, #120]	@ (80006d8 <HAL_ADC_MspInit+0x11c>)
 800065e:	f003 fafb 	bl	8003c58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000662:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <HAL_ADC_MspInit+0x120>)
 8000664:	4a1e      	ldr	r2, [pc, #120]	@ (80006e0 <HAL_ADC_MspInit+0x124>)
 8000666:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000668:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <HAL_ADC_MspInit+0x120>)
 800066a:	2200      	movs	r2, #0
 800066c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800066e:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <HAL_ADC_MspInit+0x120>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000674:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <HAL_ADC_MspInit+0x120>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800067a:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <HAL_ADC_MspInit+0x120>)
 800067c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000680:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000682:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <HAL_ADC_MspInit+0x120>)
 8000684:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000688:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <HAL_ADC_MspInit+0x120>)
 800068c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000690:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <HAL_ADC_MspInit+0x120>)
 8000694:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000698:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800069a:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <HAL_ADC_MspInit+0x120>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006a0:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <HAL_ADC_MspInit+0x120>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006a6:	480d      	ldr	r0, [pc, #52]	@ (80006dc <HAL_ADC_MspInit+0x120>)
 80006a8:	f002 fed4 	bl	8003454 <HAL_DMA_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80006b2:	f001 fa75 	bl	8001ba0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a08      	ldr	r2, [pc, #32]	@ (80006dc <HAL_ADC_MspInit+0x120>)
 80006ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80006bc:	4a07      	ldr	r2, [pc, #28]	@ (80006dc <HAL_ADC_MspInit+0x120>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006c2:	bf00      	nop
 80006c4:	3728      	adds	r7, #40	@ 0x28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40012000 	.word	0x40012000
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40020800 	.word	0x40020800
 80006d8:	40020400 	.word	0x40020400
 80006dc:	200002ac 	.word	0x200002ac
 80006e0:	40026410 	.word	0x40026410

080006e4 <button_scan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void button_scan() {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
	// Shift button input
	for (int i = 0; i < 16; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
 80006ee:	e012      	b.n	8000716 <button_scan+0x32>
	{
		button_count2[i] = button_count1[i];
 80006f0:	4a68      	ldr	r2, [pc, #416]	@ (8000894 <button_scan+0x1b0>)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80006f8:	4a67      	ldr	r2, [pc, #412]	@ (8000898 <button_scan+0x1b4>)
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		button_count1[i] = button_count[i];
 8000700:	4a66      	ldr	r2, [pc, #408]	@ (800089c <button_scan+0x1b8>)
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000708:	4a62      	ldr	r2, [pc, #392]	@ (8000894 <button_scan+0x1b0>)
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 16; i++)
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	3301      	adds	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	2b0f      	cmp	r3, #15
 800071a:	dde9      	ble.n	80006f0 <button_scan+0xc>
	}

	// Get new key input to button_count
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800071c:	2200      	movs	r2, #0
 800071e:	2108      	movs	r1, #8
 8000720:	485f      	ldr	r0, [pc, #380]	@ (80008a0 <button_scan+0x1bc>)
 8000722:	f003 fc35 	bl	8003f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000726:	2201      	movs	r2, #1
 8000728:	2108      	movs	r1, #8
 800072a:	485d      	ldr	r0, [pc, #372]	@ (80008a0 <button_scan+0x1bc>)
 800072c:	f003 fc30 	bl	8003f90 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 8000730:	230a      	movs	r3, #10
 8000732:	2202      	movs	r2, #2
 8000734:	495b      	ldr	r1, [pc, #364]	@ (80008a4 <button_scan+0x1c0>)
 8000736:	485c      	ldr	r0, [pc, #368]	@ (80008a8 <button_scan+0x1c4>)
 8000738:	f004 fa69 	bl	8004c0e <HAL_SPI_Receive>

	int button_index = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
	uint16_t mask = 0x8000;
 8000740:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000744:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++) {
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	e03a      	b.n	80007c2 <button_scan+0xde>
		if (i >= 0 && i <= 3) {
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	2b00      	cmp	r3, #0
 8000750:	db06      	blt.n	8000760 <button_scan+0x7c>
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	2b03      	cmp	r3, #3
 8000756:	dc03      	bgt.n	8000760 <button_scan+0x7c>
			button_index = i + 4;
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	3304      	adds	r3, #4
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	e018      	b.n	8000792 <button_scan+0xae>
		} else if (i >= 4 && i <= 7) {
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	2b03      	cmp	r3, #3
 8000764:	dd07      	ble.n	8000776 <button_scan+0x92>
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	2b07      	cmp	r3, #7
 800076a:	dc04      	bgt.n	8000776 <button_scan+0x92>
			button_index = 7 - i;
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	f1c3 0307 	rsb	r3, r3, #7
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	e00d      	b.n	8000792 <button_scan+0xae>
		} else if (i >= 8 && i <= 11) {
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	2b07      	cmp	r3, #7
 800077a:	dd06      	ble.n	800078a <button_scan+0xa6>
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	2b0b      	cmp	r3, #11
 8000780:	dc03      	bgt.n	800078a <button_scan+0xa6>
			button_index = i + 4;
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	3304      	adds	r3, #4
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	e003      	b.n	8000792 <button_scan+0xae>
		} else {
			button_index = 23 - i;
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	f1c3 0317 	rsb	r3, r3, #23
 8000790:	613b      	str	r3, [r7, #16]
		}
		if (button_spi_buffer & mask)
 8000792:	4b44      	ldr	r3, [pc, #272]	@ (80008a4 <button_scan+0x1c0>)
 8000794:	881a      	ldrh	r2, [r3, #0]
 8000796:	89fb      	ldrh	r3, [r7, #14]
 8000798:	4013      	ands	r3, r2
 800079a:	b29b      	uxth	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d005      	beq.n	80007ac <button_scan+0xc8>
			button_count[button_index] = 0;
 80007a0:	4a3e      	ldr	r2, [pc, #248]	@ (800089c <button_scan+0x1b8>)
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	2100      	movs	r1, #0
 80007a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80007aa:	e004      	b.n	80007b6 <button_scan+0xd2>
		else
			button_count[button_index] = 1;
 80007ac:	4a3b      	ldr	r2, [pc, #236]	@ (800089c <button_scan+0x1b8>)
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	2101      	movs	r1, #1
 80007b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 80007b6:	89fb      	ldrh	r3, [r7, #14]
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++) {
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	3301      	adds	r3, #1
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	2b0f      	cmp	r3, #15
 80007c6:	ddc1      	ble.n	800074c <button_scan+0x68>
	}

	for (int i = 0; i < 16; i++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	e059      	b.n	8000882 <button_scan+0x19e>
	{
		if ((button_count[i] == button_count1[i]) && (button_count1[i] == button_count2[i]))
 80007ce:	4a33      	ldr	r2, [pc, #204]	@ (800089c <button_scan+0x1b8>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80007d6:	492f      	ldr	r1, [pc, #188]	@ (8000894 <button_scan+0x1b0>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007de:	429a      	cmp	r2, r3
 80007e0:	d14c      	bne.n	800087c <button_scan+0x198>
 80007e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000894 <button_scan+0x1b0>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80007ea:	492b      	ldr	r1, [pc, #172]	@ (8000898 <button_scan+0x1b4>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d142      	bne.n	800087c <button_scan+0x198>
		{
			if (button_count2[i] != button_count3[i])
 80007f6:	4a28      	ldr	r2, [pc, #160]	@ (8000898 <button_scan+0x1b4>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80007fe:	492b      	ldr	r1, [pc, #172]	@ (80008ac <button_scan+0x1c8>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000806:	429a      	cmp	r2, r3
 8000808:	d018      	beq.n	800083c <button_scan+0x158>
			{
				button_count3[i] = button_count2[i];
 800080a:	4a23      	ldr	r2, [pc, #140]	@ (8000898 <button_scan+0x1b4>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000812:	4a26      	ldr	r2, [pc, #152]	@ (80008ac <button_scan+0x1c8>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				if (button_count3[i] == 1) // PRESSED
 800081a:	4a24      	ldr	r2, [pc, #144]	@ (80008ac <button_scan+0x1c8>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d12a      	bne.n	800087c <button_scan+0x198>
				{
					timeOutForPress[i] = TIME_OUT_FOR_LONG_PRESS / TI_BUTTON_SCAN_TIME;
 8000826:	4a22      	ldr	r2, [pc, #136]	@ (80008b0 <button_scan+0x1cc>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2119      	movs	r1, #25
 800082c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					isPressed[i] = 1;
 8000830:	4a20      	ldr	r2, [pc, #128]	@ (80008b4 <button_scan+0x1d0>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2101      	movs	r1, #1
 8000836:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800083a:	e01f      	b.n	800087c <button_scan+0x198>
				}
			}
			else
			{
				timeOutForPress[i]--;
 800083c:	4a1c      	ldr	r2, [pc, #112]	@ (80008b0 <button_scan+0x1cc>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000844:	3b01      	subs	r3, #1
 8000846:	b299      	uxth	r1, r3
 8000848:	4a19      	ldr	r2, [pc, #100]	@ (80008b0 <button_scan+0x1cc>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if (timeOutForPress[i] <= 0)
 8000850:	4a17      	ldr	r2, [pc, #92]	@ (80008b0 <button_scan+0x1cc>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d10f      	bne.n	800087c <button_scan+0x198>
				{
					timeOutForPress[i] = TIME_OUT_FOR_LONG_PRESS / TI_BUTTON_SCAN_TIME;
 800085c:	4a14      	ldr	r2, [pc, #80]	@ (80008b0 <button_scan+0x1cc>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2119      	movs	r1, #25
 8000862:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (button_count3[i] == 1) // PRESSED
 8000866:	4a11      	ldr	r2, [pc, #68]	@ (80008ac <button_scan+0x1c8>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d104      	bne.n	800087c <button_scan+0x198>
					{
						isLongPressed[i] = 1;
 8000872:	4a11      	ldr	r2, [pc, #68]	@ (80008b8 <button_scan+0x1d4>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2101      	movs	r1, #1
 8000878:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 16; i++)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3301      	adds	r3, #1
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b0f      	cmp	r3, #15
 8000886:	dda2      	ble.n	80007ce <button_scan+0xea>
					}
				}
			}
		}
	}
}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000038c 	.word	0x2000038c
 8000898:	2000036c 	.word	0x2000036c
 800089c:	200003ac 	.word	0x200003ac
 80008a0:	40020c00 	.word	0x40020c00
 80008a4:	200003cc 	.word	0x200003cc
 80008a8:	2000065c 	.word	0x2000065c
 80008ac:	2000034c 	.word	0x2000034c
 80008b0:	20000000 	.word	0x20000000
 80008b4:	2000030c 	.word	0x2000030c
 80008b8:	2000032c 	.word	0x2000032c

080008bc <isPress>:

uint8_t isPress(uint8_t index)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index > 15) return 0;
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b0f      	cmp	r3, #15
 80008ca:	d901      	bls.n	80008d0 <isPress+0x14>
 80008cc:	2300      	movs	r3, #0
 80008ce:	e00d      	b.n	80008ec <isPress+0x30>
	if (isPressed[index] == 1)
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a09      	ldr	r2, [pc, #36]	@ (80008f8 <isPress+0x3c>)
 80008d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d106      	bne.n	80008ea <isPress+0x2e>
	{
		isPressed[index] = 0;
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4a06      	ldr	r2, [pc, #24]	@ (80008f8 <isPress+0x3c>)
 80008e0:	2100      	movs	r1, #0
 80008e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		return 1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e000      	b.n	80008ec <isPress+0x30>
	}
	return 0;
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	2000030c 	.word	0x2000030c

080008fc <isLongPress>:

uint8_t isLongPress(uint8_t index)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index > 15) return 0;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b0f      	cmp	r3, #15
 800090a:	d901      	bls.n	8000910 <isLongPress+0x14>
 800090c:	2300      	movs	r3, #0
 800090e:	e00d      	b.n	800092c <isLongPress+0x30>
	if (isLongPressed[index] == 1)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	4a09      	ldr	r2, [pc, #36]	@ (8000938 <isLongPress+0x3c>)
 8000914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d106      	bne.n	800092a <isLongPress+0x2e>
	{
		isLongPressed[index] = 0;
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	4a06      	ldr	r2, [pc, #24]	@ (8000938 <isLongPress+0x3c>)
 8000920:	2100      	movs	r1, #0
 8000922:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		return 1;
 8000926:	2301      	movs	r3, #1
 8000928:	e000      	b.n	800092c <isLongPress+0x30>
	}
	return 0;
 800092a:	2300      	movs	r3, #0
}
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	2000032c 	.word	0x2000032c

0800093c <crc16>:
    0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641,
    0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040
};

uint16_t crc16(const uint8_t *data, uint16_t num_bytes)
{
 800093c:	b480      	push	{r7}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	807b      	strh	r3, [r7, #2]

    uint16_t crc = 0xFFFF;
 8000948:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800094c:	82fb      	strh	r3, [r7, #22]
    const uint8_t *ptr = data;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	613b      	str	r3, [r7, #16]

    if (ptr != NULL)
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d018      	beq.n	800098a <crc16+0x4e>
    {
        for (uint16_t i = 0; i < num_bytes; i++)
 8000958:	2300      	movs	r3, #0
 800095a:	81fb      	strh	r3, [r7, #14]
 800095c:	e011      	b.n	8000982 <crc16+0x46>
        {
            crc = (crc >> 8) ^ crc16_lookup_table[(crc ^ (uint16_t)*ptr++) & 0x00FF];
 800095e:	8afb      	ldrh	r3, [r7, #22]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	b29a      	uxth	r2, r3
 8000964:	8af9      	ldrh	r1, [r7, #22]
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	1c58      	adds	r0, r3, #1
 800096a:	6138      	str	r0, [r7, #16]
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	404b      	eors	r3, r1
 8000970:	b2db      	uxtb	r3, r3
 8000972:	4909      	ldr	r1, [pc, #36]	@ (8000998 <crc16+0x5c>)
 8000974:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000978:	4053      	eors	r3, r2
 800097a:	82fb      	strh	r3, [r7, #22]
        for (uint16_t i = 0; i < num_bytes; i++)
 800097c:	89fb      	ldrh	r3, [r7, #14]
 800097e:	3301      	adds	r3, #1
 8000980:	81fb      	strh	r3, [r7, #14]
 8000982:	89fa      	ldrh	r2, [r7, #14]
 8000984:	887b      	ldrh	r3, [r7, #2]
 8000986:	429a      	cmp	r2, r3
 8000988:	d3e9      	bcc.n	800095e <crc16+0x22>
        }
    }

    return crc;
 800098a:	8afb      	ldrh	r3, [r7, #22]
}
 800098c:	4618      	mov	r0, r3
 800098e:	371c      	adds	r7, #28
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	20000020 	.word	0x20000020

0800099c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_DMA_Init+0x3c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a0b      	ldr	r2, [pc, #44]	@ (80009d8 <MX_DMA_Init+0x3c>)
 80009ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_DMA_Init+0x3c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	2038      	movs	r0, #56	@ 0x38
 80009c4:	f002 fd0f 	bl	80033e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009c8:	2038      	movs	r0, #56	@ 0x38
 80009ca:	f002 fd28 	bl	800341e <HAL_NVIC_EnableIRQ>

}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800

080009dc <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08e      	sub	sp, #56	@ 0x38
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
 80009f2:	615a      	str	r2, [r3, #20]
 80009f4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80009f6:	463b      	mov	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
 8000a04:	615a      	str	r2, [r3, #20]
 8000a06:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000a08:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac8 <MX_FSMC_Init+0xec>)
 8000a0a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000a0e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000a10:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac8 <MX_FSMC_Init+0xec>)
 8000a12:	4a2e      	ldr	r2, [pc, #184]	@ (8000acc <MX_FSMC_Init+0xf0>)
 8000a14:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000a16:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac8 <MX_FSMC_Init+0xec>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac8 <MX_FSMC_Init+0xec>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000a22:	4b29      	ldr	r3, [pc, #164]	@ (8000ac8 <MX_FSMC_Init+0xec>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000a28:	4b27      	ldr	r3, [pc, #156]	@ (8000ac8 <MX_FSMC_Init+0xec>)
 8000a2a:	2210      	movs	r2, #16
 8000a2c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000a2e:	4b26      	ldr	r3, [pc, #152]	@ (8000ac8 <MX_FSMC_Init+0xec>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000a34:	4b24      	ldr	r3, [pc, #144]	@ (8000ac8 <MX_FSMC_Init+0xec>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000a3a:	4b23      	ldr	r3, [pc, #140]	@ (8000ac8 <MX_FSMC_Init+0xec>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000a40:	4b21      	ldr	r3, [pc, #132]	@ (8000ac8 <MX_FSMC_Init+0xec>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000a46:	4b20      	ldr	r3, [pc, #128]	@ (8000ac8 <MX_FSMC_Init+0xec>)
 8000a48:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac8 <MX_FSMC_Init+0xec>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000a54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac8 <MX_FSMC_Init+0xec>)
 8000a56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <MX_FSMC_Init+0xec>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000a62:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <MX_FSMC_Init+0xec>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000a68:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <MX_FSMC_Init+0xec>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000a6e:	230f      	movs	r3, #15
 8000a70:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000a72:	230f      	movs	r3, #15
 8000a74:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000a76:	233c      	movs	r3, #60	@ 0x3c
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000a7e:	2310      	movs	r3, #16
 8000a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000a82:	2311      	movs	r3, #17
 8000a84:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000a86:	2300      	movs	r3, #0
 8000a88:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000a8a:	2308      	movs	r3, #8
 8000a8c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000a8e:	230f      	movs	r3, #15
 8000a90:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000a92:	2309      	movs	r3, #9
 8000a94:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000a9e:	2311      	movs	r3, #17
 8000aa0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000aa6:	463a      	mov	r2, r7
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	@ (8000ac8 <MX_FSMC_Init+0xec>)
 8000ab0:	f004 fcb2 	bl	8005418 <HAL_SRAM_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000aba:	f001 f871 	bl	8001ba0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000abe:	bf00      	nop
 8000ac0:	3738      	adds	r7, #56	@ 0x38
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200003d0 	.word	0x200003d0
 8000acc:	a0000104 	.word	0xa0000104

08000ad0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b58 <HAL_FSMC_MspInit+0x88>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d131      	bne.n	8000b50 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <HAL_FSMC_MspInit+0x88>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <HAL_FSMC_MspInit+0x8c>)
 8000af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000afa:	4a18      	ldr	r2, [pc, #96]	@ (8000b5c <HAL_FSMC_MspInit+0x8c>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6393      	str	r3, [r2, #56]	@ 0x38
 8000b02:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <HAL_FSMC_MspInit+0x8c>)
 8000b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000b0e:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000b12:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000b20:	230c      	movs	r3, #12
 8000b22:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	4619      	mov	r1, r3
 8000b28:	480d      	ldr	r0, [pc, #52]	@ (8000b60 <HAL_FSMC_MspInit+0x90>)
 8000b2a:	f003 f895 	bl	8003c58 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000b2e:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000b32:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000b40:	230c      	movs	r3, #12
 8000b42:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	4619      	mov	r1, r3
 8000b48:	4806      	ldr	r0, [pc, #24]	@ (8000b64 <HAL_FSMC_MspInit+0x94>)
 8000b4a:	f003 f885 	bl	8003c58 <HAL_GPIO_Init>
 8000b4e:	e000      	b.n	8000b52 <HAL_FSMC_MspInit+0x82>
    return;
 8000b50:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000420 	.word	0x20000420
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40020c00 	.word	0x40020c00

08000b68 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000b70:	f7ff ffae 	bl	8000ad0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08c      	sub	sp, #48	@ 0x30
 8000b80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
 8000b96:	4b63      	ldr	r3, [pc, #396]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a62      	ldr	r2, [pc, #392]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000b9c:	f043 0310 	orr.w	r3, r3, #16
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b60      	ldr	r3, [pc, #384]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0310 	and.w	r3, r3, #16
 8000baa:	61bb      	str	r3, [r7, #24]
 8000bac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a5b      	ldr	r2, [pc, #364]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b59      	ldr	r3, [pc, #356]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b55      	ldr	r3, [pc, #340]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a54      	ldr	r2, [pc, #336]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b52      	ldr	r3, [pc, #328]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b4e      	ldr	r3, [pc, #312]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a4d      	ldr	r2, [pc, #308]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b4b      	ldr	r3, [pc, #300]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	4b47      	ldr	r3, [pc, #284]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a46      	ldr	r2, [pc, #280]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b44      	ldr	r3, [pc, #272]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	4b40      	ldr	r3, [pc, #256]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a3f      	ldr	r2, [pc, #252]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	4b39      	ldr	r3, [pc, #228]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a38      	ldr	r2, [pc, #224]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000c44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b36      	ldr	r3, [pc, #216]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2110      	movs	r1, #16
 8000c5a:	4833      	ldr	r0, [pc, #204]	@ (8000d28 <MX_GPIO_Init+0x1ac>)
 8000c5c:	f003 f998 	bl	8003f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c66:	4831      	ldr	r0, [pc, #196]	@ (8000d2c <MX_GPIO_Init+0x1b0>)
 8000c68:	f003 f992 	bl	8003f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2140      	movs	r1, #64	@ 0x40
 8000c70:	482f      	ldr	r0, [pc, #188]	@ (8000d30 <MX_GPIO_Init+0x1b4>)
 8000c72:	f003 f98d 	bl	8003f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FSMC_BLK_Pin|EN_RS485_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8000c7c:	482d      	ldr	r0, [pc, #180]	@ (8000d34 <MX_GPIO_Init+0x1b8>)
 8000c7e:	f003 f987 	bl	8003f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2108      	movs	r1, #8
 8000c86:	482c      	ldr	r0, [pc, #176]	@ (8000d38 <MX_GPIO_Init+0x1bc>)
 8000c88:	f003 f982 	bl	8003f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c8c:	2310      	movs	r3, #16
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4821      	ldr	r0, [pc, #132]	@ (8000d28 <MX_GPIO_Init+0x1ac>)
 8000ca4:	f002 ffd8 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000ca8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	481a      	ldr	r0, [pc, #104]	@ (8000d2c <MX_GPIO_Init+0x1b0>)
 8000cc2:	f002 ffc9 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000cc6:	2340      	movs	r3, #64	@ 0x40
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4814      	ldr	r0, [pc, #80]	@ (8000d30 <MX_GPIO_Init+0x1b4>)
 8000cde:	f002 ffbb 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin|EN_RS485_Pin;
 8000ce2:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480e      	ldr	r0, [pc, #56]	@ (8000d34 <MX_GPIO_Init+0x1b8>)
 8000cfc:	f002 ffac 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000d00:	2308      	movs	r3, #8
 8000d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	4808      	ldr	r0, [pc, #32]	@ (8000d38 <MX_GPIO_Init+0x1bc>)
 8000d18:	f002 ff9e 	bl	8003c58 <HAL_GPIO_Init>

}
 8000d1c:	bf00      	nop
 8000d1e:	3730      	adds	r7, #48	@ 0x30
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40020800 	.word	0x40020800
 8000d30:	40021800 	.word	0x40021800
 8000d34:	40020000 	.word	0x40020000
 8000d38:	40020c00 	.word	0x40020c00

08000d3c <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 8000d46:	4a04      	ldr	r2, [pc, #16]	@ (8000d58 <LCD_WR_REG+0x1c>)
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	8013      	strh	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	600ffffe 	.word	0x600ffffe

08000d5c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 8000d66:	4a04      	ldr	r2, [pc, #16]	@ (8000d78 <LCD_WR_DATA+0x1c>)
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	8053      	strh	r3, [r2, #2]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	600ffffe 	.word	0x600ffffe

08000d7c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 8000d82:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <LCD_RD_DATA+0x20>)
 8000d84:	885b      	ldrh	r3, [r3, #2]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	b29b      	uxth	r3, r3
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	600ffffe 	.word	0x600ffffe

08000da0 <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4604      	mov	r4, r0
 8000da8:	4608      	mov	r0, r1
 8000daa:	4611      	mov	r1, r2
 8000dac:	461a      	mov	r2, r3
 8000dae:	4623      	mov	r3, r4
 8000db0:	80fb      	strh	r3, [r7, #6]
 8000db2:	4603      	mov	r3, r0
 8000db4:	80bb      	strh	r3, [r7, #4]
 8000db6:	460b      	mov	r3, r1
 8000db8:	807b      	strh	r3, [r7, #2]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 8000dbe:	202a      	movs	r0, #42	@ 0x2a
 8000dc0:	f7ff ffbc 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	0a1b      	lsrs	r3, r3, #8
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ffc6 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ffc0 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 8000ddc:	887b      	ldrh	r3, [r7, #2]
 8000dde:	0a1b      	lsrs	r3, r3, #8
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ffba 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ffb4 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 8000df4:	202b      	movs	r0, #43	@ 0x2b
 8000df6:	f7ff ffa1 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 8000dfa:	88bb      	ldrh	r3, [r7, #4]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ffab 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 8000e06:	88bb      	ldrh	r3, [r7, #4]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ffa5 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 8000e12:	883b      	ldrh	r3, [r7, #0]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff9f 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 8000e1e:	883b      	ldrh	r3, [r7, #0]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff99 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 8000e2a:	202c      	movs	r0, #44	@ 0x2c
 8000e2c:	f7ff ff86 	bl	8000d3c <LCD_WR_REG>
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd90      	pop	{r4, r7, pc}

08000e38 <lcd_clear>:
/**
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 8000e42:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <lcd_clear+0x60>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <lcd_clear+0x60>)
 8000e4c:	885b      	ldrh	r3, [r3, #2]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	2000      	movs	r0, #0
 8000e56:	f7ff ffa3 	bl	8000da0 <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	81fb      	strh	r3, [r7, #14]
 8000e5e:	e011      	b.n	8000e84 <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 8000e60:	2300      	movs	r3, #0
 8000e62:	81bb      	strh	r3, [r7, #12]
 8000e64:	e006      	b.n	8000e74 <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff77 	bl	8000d5c <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 8000e6e:	89bb      	ldrh	r3, [r7, #12]
 8000e70:	3301      	adds	r3, #1
 8000e72:	81bb      	strh	r3, [r7, #12]
 8000e74:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <lcd_clear+0x60>)
 8000e76:	885b      	ldrh	r3, [r3, #2]
 8000e78:	89ba      	ldrh	r2, [r7, #12]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d3f3      	bcc.n	8000e66 <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 8000e7e:	89fb      	ldrh	r3, [r7, #14]
 8000e80:	3301      	adds	r3, #1
 8000e82:	81fb      	strh	r3, [r7, #14]
 8000e84:	4b04      	ldr	r3, [pc, #16]	@ (8000e98 <lcd_clear+0x60>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	89fa      	ldrh	r2, [r7, #14]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d3e8      	bcc.n	8000e60 <lcd_clear+0x28>
		}
	}
}
 8000e8e:	bf00      	nop
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000428 	.word	0x20000428

08000e9c <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	80fb      	strh	r3, [r7, #6]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	80bb      	strh	r3, [r7, #4]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 8000eae:	88bb      	ldrh	r3, [r7, #4]
 8000eb0:	88fa      	ldrh	r2, [r7, #6]
 8000eb2:	88b9      	ldrh	r1, [r7, #4]
 8000eb4:	88f8      	ldrh	r0, [r7, #6]
 8000eb6:	f7ff ff73 	bl	8000da0 <lcd_set_address>
	LCD_WR_DATA(color);
 8000eba:	887b      	ldrh	r3, [r7, #2]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff4d 	bl	8000d5c <LCD_WR_DATA>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <lcd_show_char>:
	lcd_draw_line(x1, y2, x2, y2, color);
	lcd_draw_line(x2, y1, x2, y2, color);
}

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4623      	mov	r3, r4
 8000edc:	80fb      	strh	r3, [r7, #6]
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80bb      	strh	r3, [r7, #4]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	70fb      	strb	r3, [r7, #3]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 8000ef2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ef6:	085b      	lsrs	r3, r3, #1
 8000ef8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	08db      	lsrs	r3, r3, #3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	461a      	mov	r2, r3
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	bf14      	ite	ne
 8000f0e:	2301      	movne	r3, #1
 8000f10:	2300      	moveq	r3, #0
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	4413      	add	r3, r2
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	fb12 f303 	smulbb	r3, r2, r3
 8000f22:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	3b20      	subs	r3, #32
 8000f28:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	4413      	add	r3, r2
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	3b01      	subs	r3, #1
 8000f36:	b29c      	uxth	r4, r3
 8000f38:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	88bb      	ldrh	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	3b01      	subs	r3, #1
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	88b9      	ldrh	r1, [r7, #4]
 8000f4a:	88f8      	ldrh	r0, [r7, #6]
 8000f4c:	4622      	mov	r2, r4
 8000f4e:	f7ff ff27 	bl	8000da0 <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	827b      	strh	r3, [r7, #18]
 8000f56:	e07a      	b.n	800104e <lcd_show_char+0x182>
		if (sizey == 12)
 8000f58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f5c:	2b0c      	cmp	r3, #12
 8000f5e:	d028      	beq.n	8000fb2 <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 8000f60:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f64:	2b10      	cmp	r3, #16
 8000f66:	d108      	bne.n	8000f7a <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 8000f68:	78fa      	ldrb	r2, [r7, #3]
 8000f6a:	8a7b      	ldrh	r3, [r7, #18]
 8000f6c:	493c      	ldr	r1, [pc, #240]	@ (8001060 <lcd_show_char+0x194>)
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	440a      	add	r2, r1
 8000f72:	4413      	add	r3, r2
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	75fb      	strb	r3, [r7, #23]
 8000f78:	e01b      	b.n	8000fb2 <lcd_show_char+0xe6>
		else if (sizey == 24)
 8000f7a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f7e:	2b18      	cmp	r3, #24
 8000f80:	d10b      	bne.n	8000f9a <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 8000f82:	78fa      	ldrb	r2, [r7, #3]
 8000f84:	8a79      	ldrh	r1, [r7, #18]
 8000f86:	4837      	ldr	r0, [pc, #220]	@ (8001064 <lcd_show_char+0x198>)
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	4403      	add	r3, r0
 8000f92:	440b      	add	r3, r1
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	75fb      	strb	r3, [r7, #23]
 8000f98:	e00b      	b.n	8000fb2 <lcd_show_char+0xe6>
		else if (sizey == 32)
 8000f9a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f9e:	2b20      	cmp	r3, #32
 8000fa0:	d15a      	bne.n	8001058 <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 8000fa2:	78fa      	ldrb	r2, [r7, #3]
 8000fa4:	8a7b      	ldrh	r3, [r7, #18]
 8000fa6:	4930      	ldr	r1, [pc, #192]	@ (8001068 <lcd_show_char+0x19c>)
 8000fa8:	0192      	lsls	r2, r2, #6
 8000faa:	440a      	add	r2, r1
 8000fac:	4413      	add	r3, r2
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	75bb      	strb	r3, [r7, #22]
 8000fb6:	e044      	b.n	8001042 <lcd_show_char+0x176>
			if (!mode) {
 8000fb8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d120      	bne.n	8001002 <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 8000fc0:	7dfa      	ldrb	r2, [r7, #23]
 8000fc2:	7dbb      	ldrb	r3, [r7, #22]
 8000fc4:	fa42 f303 	asr.w	r3, r2, r3
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d004      	beq.n	8000fda <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 8000fd0:	883b      	ldrh	r3, [r7, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fec2 	bl	8000d5c <LCD_WR_DATA>
 8000fd8:	e003      	b.n	8000fe2 <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 8000fda:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff febd 	bl	8000d5c <LCD_WR_DATA>
				m++;
 8000fe2:	7d7b      	ldrb	r3, [r7, #21]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 8000fe8:	7d7b      	ldrb	r3, [r7, #21]
 8000fea:	7bfa      	ldrb	r2, [r7, #15]
 8000fec:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ff0:	fb01 f202 	mul.w	r2, r1, r2
 8000ff4:	1a9b      	subs	r3, r3, r2
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d11f      	bne.n	800103c <lcd_show_char+0x170>
					m = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	757b      	strb	r3, [r7, #21]
					break;
 8001000:	e022      	b.n	8001048 <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 8001002:	7dfa      	ldrb	r2, [r7, #23]
 8001004:	7dbb      	ldrb	r3, [r7, #22]
 8001006:	fa42 f303 	asr.w	r3, r2, r3
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 8001012:	883a      	ldrh	r2, [r7, #0]
 8001014:	88b9      	ldrh	r1, [r7, #4]
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff3f 	bl	8000e9c <lcd_draw_point>
				x++;
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	3301      	adds	r3, #1
 8001022:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 8001024:	88fa      	ldrh	r2, [r7, #6]
 8001026:	8a3b      	ldrh	r3, [r7, #16]
 8001028:	1ad2      	subs	r2, r2, r3
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	429a      	cmp	r2, r3
 800102e:	d105      	bne.n	800103c <lcd_show_char+0x170>
					x = x0;
 8001030:	8a3b      	ldrh	r3, [r7, #16]
 8001032:	80fb      	strh	r3, [r7, #6]
					y++;
 8001034:	88bb      	ldrh	r3, [r7, #4]
 8001036:	3301      	adds	r3, #1
 8001038:	80bb      	strh	r3, [r7, #4]
					break;
 800103a:	e005      	b.n	8001048 <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 800103c:	7dbb      	ldrb	r3, [r7, #22]
 800103e:	3301      	adds	r3, #1
 8001040:	75bb      	strb	r3, [r7, #22]
 8001042:	7dbb      	ldrb	r3, [r7, #22]
 8001044:	2b07      	cmp	r3, #7
 8001046:	d9b7      	bls.n	8000fb8 <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 8001048:	8a7b      	ldrh	r3, [r7, #18]
 800104a:	3301      	adds	r3, #1
 800104c:	827b      	strh	r3, [r7, #18]
 800104e:	8a7a      	ldrh	r2, [r7, #18]
 8001050:	89bb      	ldrh	r3, [r7, #12]
 8001052:	429a      	cmp	r2, r3
 8001054:	d380      	bcc.n	8000f58 <lcd_show_char+0x8c>
 8001056:	e000      	b.n	800105a <lcd_show_char+0x18e>
			return;
 8001058:	bf00      	nop
				}
			}
		}
	}
}
 800105a:	371c      	adds	r7, #28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd90      	pop	{r4, r7, pc}
 8001060:	08006e18 	.word	0x08006e18
 8001064:	08007408 	.word	0x08007408
 8001068:	080085d8 	.word	0x080085d8

0800106c <mypow>:

uint32_t mypow(uint8_t m, uint8_t n) {
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	460a      	mov	r2, r1
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 800107c:	2301      	movs	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001080:	e004      	b.n	800108c <mypow+0x20>
		result *= m;
 8001082:	79fa      	ldrb	r2, [r7, #7]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	fb02 f303 	mul.w	r3, r2, r3
 800108a:	60fb      	str	r3, [r7, #12]
	while (n--)
 800108c:	79bb      	ldrb	r3, [r7, #6]
 800108e:	1e5a      	subs	r2, r3, #1
 8001090:	71ba      	strb	r2, [r7, #6]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f5      	bne.n	8001082 <mypow+0x16>
	return result;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <lcd_show_int_num>:

void lcd_show_int_num(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b089      	sub	sp, #36	@ 0x24
 80010a8:	af04      	add	r7, sp, #16
 80010aa:	4604      	mov	r4, r0
 80010ac:	4608      	mov	r0, r1
 80010ae:	4611      	mov	r1, r2
 80010b0:	461a      	mov	r2, r3
 80010b2:	4623      	mov	r3, r4
 80010b4:	80fb      	strh	r3, [r7, #6]
 80010b6:	4603      	mov	r3, r0
 80010b8:	80bb      	strh	r3, [r7, #4]
 80010ba:	460b      	mov	r3, r1
 80010bc:	807b      	strh	r3, [r7, #2]
 80010be:	4613      	mov	r3, r2
 80010c0:	707b      	strb	r3, [r7, #1]
	uint8_t t, temp;
	uint8_t enshow = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex = sizey / 2;
 80010c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80010ca:	085b      	lsrs	r3, r3, #1
 80010cc:	737b      	strb	r3, [r7, #13]
	for (t = 0; t < len; t++) {
 80010ce:	2300      	movs	r3, #0
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	e059      	b.n	8001188 <lcd_show_int_num+0xe4>
		temp = (num / mypow(10, len - t - 1)) % 10;
 80010d4:	887c      	ldrh	r4, [r7, #2]
 80010d6:	787a      	ldrb	r2, [r7, #1]
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	3b01      	subs	r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	4619      	mov	r1, r3
 80010e4:	200a      	movs	r0, #10
 80010e6:	f7ff ffc1 	bl	800106c <mypow>
 80010ea:	4603      	mov	r3, r0
 80010ec:	fbb4 f1f3 	udiv	r1, r4, r3
 80010f0:	4b2a      	ldr	r3, [pc, #168]	@ (800119c <lcd_show_int_num+0xf8>)
 80010f2:	fba3 2301 	umull	r2, r3, r3, r1
 80010f6:	08da      	lsrs	r2, r3, #3
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	1aca      	subs	r2, r1, r3
 8001102:	4613      	mov	r3, r2
 8001104:	733b      	strb	r3, [r7, #12]
		if (enshow == 0 && t < (len - 1)) {
 8001106:	7bbb      	ldrb	r3, [r7, #14]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d121      	bne.n	8001150 <lcd_show_int_num+0xac>
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	787b      	ldrb	r3, [r7, #1]
 8001110:	3b01      	subs	r3, #1
 8001112:	429a      	cmp	r2, r3
 8001114:	da1c      	bge.n	8001150 <lcd_show_int_num+0xac>
			if (temp == 0) {
 8001116:	7b3b      	ldrb	r3, [r7, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d117      	bne.n	800114c <lcd_show_int_num+0xa8>
				lcd_show_char(x + t * sizex, y, ' ', fc, bc, sizey, 0);
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	b29a      	uxth	r2, r3
 8001120:	7b7b      	ldrb	r3, [r7, #13]
 8001122:	b29b      	uxth	r3, r3
 8001124:	fb12 f303 	smulbb	r3, r2, r3
 8001128:	b29a      	uxth	r2, r3
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	4413      	add	r3, r2
 800112e:	b298      	uxth	r0, r3
 8001130:	8c3a      	ldrh	r2, [r7, #32]
 8001132:	88b9      	ldrh	r1, [r7, #4]
 8001134:	2300      	movs	r3, #0
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	4613      	mov	r3, r2
 8001144:	2220      	movs	r2, #32
 8001146:	f7ff fec1 	bl	8000ecc <lcd_show_char>
				continue;
 800114a:	e01a      	b.n	8001182 <lcd_show_int_num+0xde>
			} else
				enshow = 1;
 800114c:	2301      	movs	r3, #1
 800114e:	73bb      	strb	r3, [r7, #14]

		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	b29a      	uxth	r2, r3
 8001154:	7b7b      	ldrb	r3, [r7, #13]
 8001156:	b29b      	uxth	r3, r3
 8001158:	fb12 f303 	smulbb	r3, r2, r3
 800115c:	b29a      	uxth	r2, r3
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	4413      	add	r3, r2
 8001162:	b298      	uxth	r0, r3
 8001164:	7b3b      	ldrb	r3, [r7, #12]
 8001166:	3330      	adds	r3, #48	@ 0x30
 8001168:	b2da      	uxtb	r2, r3
 800116a:	8c3c      	ldrh	r4, [r7, #32]
 800116c:	88b9      	ldrh	r1, [r7, #4]
 800116e:	2300      	movs	r3, #0
 8001170:	9302      	str	r3, [sp, #8]
 8001172:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	4623      	mov	r3, r4
 800117e:	f7ff fea5 	bl	8000ecc <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	3301      	adds	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	787b      	ldrb	r3, [r7, #1]
 800118c:	429a      	cmp	r2, r3
 800118e:	d3a1      	bcc.n	80010d4 <lcd_show_int_num+0x30>
	}
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	bd90      	pop	{r4, r7, pc}
 800119a:	bf00      	nop
 800119c:	cccccccd 	.word	0xcccccccd

080011a0 <lcd_show_float_num>:

void lcd_show_float_num(uint16_t x, uint16_t y, float num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b08b      	sub	sp, #44	@ 0x2c
 80011a4:	af04      	add	r7, sp, #16
 80011a6:	4604      	mov	r4, r0
 80011a8:	4608      	mov	r0, r1
 80011aa:	ed87 0a02 	vstr	s0, [r7, #8]
 80011ae:	4611      	mov	r1, r2
 80011b0:	461a      	mov	r2, r3
 80011b2:	4623      	mov	r3, r4
 80011b4:	81fb      	strh	r3, [r7, #14]
 80011b6:	4603      	mov	r3, r0
 80011b8:	81bb      	strh	r3, [r7, #12]
 80011ba:	460b      	mov	r3, r1
 80011bc:	71fb      	strb	r3, [r7, #7]
 80011be:	4613      	mov	r3, r2
 80011c0:	80bb      	strh	r3, [r7, #4]
	uint8_t t, temp, sizex;
	uint16_t num1;
	sizex = sizey / 2;
 80011c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80011c6:	085b      	lsrs	r3, r3, #1
 80011c8:	75bb      	strb	r3, [r7, #22]
	num1 = num * 100;
 80011ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ce:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80012a8 <lcd_show_float_num+0x108>
 80011d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011da:	ee17 3a90 	vmov	r3, s15
 80011de:	82bb      	strh	r3, [r7, #20]
	for (t = 0; t < len; t++) {
 80011e0:	2300      	movs	r3, #0
 80011e2:	75fb      	strb	r3, [r7, #23]
 80011e4:	e057      	b.n	8001296 <lcd_show_float_num+0xf6>
		temp = (num1 / mypow(10, len - t - 1)) % 10;
 80011e6:	8abc      	ldrh	r4, [r7, #20]
 80011e8:	79fa      	ldrb	r2, [r7, #7]
 80011ea:	7dfb      	ldrb	r3, [r7, #23]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	3b01      	subs	r3, #1
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	4619      	mov	r1, r3
 80011f6:	200a      	movs	r0, #10
 80011f8:	f7ff ff38 	bl	800106c <mypow>
 80011fc:	4603      	mov	r3, r0
 80011fe:	fbb4 f1f3 	udiv	r1, r4, r3
 8001202:	4b2a      	ldr	r3, [pc, #168]	@ (80012ac <lcd_show_float_num+0x10c>)
 8001204:	fba3 2301 	umull	r2, r3, r3, r1
 8001208:	08da      	lsrs	r2, r3, #3
 800120a:	4613      	mov	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	1aca      	subs	r2, r1, r3
 8001214:	4613      	mov	r3, r2
 8001216:	74fb      	strb	r3, [r7, #19]
		if (t == (len - 2)) {
 8001218:	7dfa      	ldrb	r2, [r7, #23]
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	3b02      	subs	r3, #2
 800121e:	429a      	cmp	r2, r3
 8001220:	d11d      	bne.n	800125e <lcd_show_float_num+0xbe>
			lcd_show_char(x + (len - 2) * sizex, y, '.', fc, bc, sizey, 0);
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	3b02      	subs	r3, #2
 8001226:	b29a      	uxth	r2, r3
 8001228:	7dbb      	ldrb	r3, [r7, #22]
 800122a:	b29b      	uxth	r3, r3
 800122c:	fb12 f303 	smulbb	r3, r2, r3
 8001230:	b29a      	uxth	r2, r3
 8001232:	89fb      	ldrh	r3, [r7, #14]
 8001234:	4413      	add	r3, r2
 8001236:	b298      	uxth	r0, r3
 8001238:	88ba      	ldrh	r2, [r7, #4]
 800123a:	89b9      	ldrh	r1, [r7, #12]
 800123c:	2300      	movs	r3, #0
 800123e:	9302      	str	r3, [sp, #8]
 8001240:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	4613      	mov	r3, r2
 800124c:	222e      	movs	r2, #46	@ 0x2e
 800124e:	f7ff fe3d 	bl	8000ecc <lcd_show_char>
			t++;
 8001252:	7dfb      	ldrb	r3, [r7, #23]
 8001254:	3301      	adds	r3, #1
 8001256:	75fb      	strb	r3, [r7, #23]
			len += 1;
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	3301      	adds	r3, #1
 800125c:	71fb      	strb	r3, [r7, #7]
		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 800125e:	7dfb      	ldrb	r3, [r7, #23]
 8001260:	b29a      	uxth	r2, r3
 8001262:	7dbb      	ldrb	r3, [r7, #22]
 8001264:	b29b      	uxth	r3, r3
 8001266:	fb12 f303 	smulbb	r3, r2, r3
 800126a:	b29a      	uxth	r2, r3
 800126c:	89fb      	ldrh	r3, [r7, #14]
 800126e:	4413      	add	r3, r2
 8001270:	b298      	uxth	r0, r3
 8001272:	7cfb      	ldrb	r3, [r7, #19]
 8001274:	3330      	adds	r3, #48	@ 0x30
 8001276:	b2da      	uxtb	r2, r3
 8001278:	88bc      	ldrh	r4, [r7, #4]
 800127a:	89b9      	ldrh	r1, [r7, #12]
 800127c:	2300      	movs	r3, #0
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001284:	9301      	str	r3, [sp, #4]
 8001286:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	4623      	mov	r3, r4
 800128c:	f7ff fe1e 	bl	8000ecc <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001290:	7dfb      	ldrb	r3, [r7, #23]
 8001292:	3301      	adds	r3, #1
 8001294:	75fb      	strb	r3, [r7, #23]
 8001296:	7dfa      	ldrb	r2, [r7, #23]
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	429a      	cmp	r2, r3
 800129c:	d3a3      	bcc.n	80011e6 <lcd_show_float_num+0x46>
	}
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}
 80012a8:	42c80000 	.word	0x42c80000
 80012ac:	cccccccd 	.word	0xcccccccd

080012b0 <lcd_set_direction>:
			k++;
		}
	}
}

void lcd_set_direction(uint8_t dir) {
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	091b      	lsrs	r3, r3, #4
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d007      	beq.n	80012da <lcd_set_direction+0x2a>
		lcddev.width = 320;
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <lcd_set_direction+0x44>)
 80012cc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80012d0:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 80012d2:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <lcd_set_direction+0x44>)
 80012d4:	22f0      	movs	r2, #240	@ 0xf0
 80012d6:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 80012d8:	e006      	b.n	80012e8 <lcd_set_direction+0x38>
		lcddev.width = 240;
 80012da:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <lcd_set_direction+0x44>)
 80012dc:	22f0      	movs	r2, #240	@ 0xf0
 80012de:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 80012e0:	4b04      	ldr	r3, [pc, #16]	@ (80012f4 <lcd_set_direction+0x44>)
 80012e2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80012e6:	805a      	strh	r2, [r3, #2]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	20000428 	.word	0x20000428

080012f8 <lcd_init>:

void lcd_init(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001302:	48aa      	ldr	r0, [pc, #680]	@ (80015ac <lcd_init+0x2b4>)
 8001304:	f002 fe44 	bl	8003f90 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001308:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800130c:	f001 fb5a 	bl	80029c4 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001316:	48a5      	ldr	r0, [pc, #660]	@ (80015ac <lcd_init+0x2b4>)
 8001318:	f002 fe3a 	bl	8003f90 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800131c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001320:	f001 fb50 	bl	80029c4 <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff ffc3 	bl	80012b0 <lcd_set_direction>
	LCD_WR_REG(0XD3);
 800132a:	20d3      	movs	r0, #211	@ 0xd3
 800132c:	f7ff fd06 	bl	8000d3c <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8001330:	f7ff fd24 	bl	8000d7c <LCD_RD_DATA>
 8001334:	4603      	mov	r3, r0
 8001336:	461a      	mov	r2, r3
 8001338:	4b9d      	ldr	r3, [pc, #628]	@ (80015b0 <lcd_init+0x2b8>)
 800133a:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 800133c:	f7ff fd1e 	bl	8000d7c <LCD_RD_DATA>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b9a      	ldr	r3, [pc, #616]	@ (80015b0 <lcd_init+0x2b8>)
 8001346:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001348:	f7ff fd18 	bl	8000d7c <LCD_RD_DATA>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	4b97      	ldr	r3, [pc, #604]	@ (80015b0 <lcd_init+0x2b8>)
 8001352:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8001354:	4b96      	ldr	r3, [pc, #600]	@ (80015b0 <lcd_init+0x2b8>)
 8001356:	889b      	ldrh	r3, [r3, #4]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b29a      	uxth	r2, r3
 800135c:	4b94      	ldr	r3, [pc, #592]	@ (80015b0 <lcd_init+0x2b8>)
 800135e:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8001360:	f7ff fd0c 	bl	8000d7c <LCD_RD_DATA>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	4b91      	ldr	r3, [pc, #580]	@ (80015b0 <lcd_init+0x2b8>)
 800136a:	889b      	ldrh	r3, [r3, #4]
 800136c:	4313      	orrs	r3, r2
 800136e:	b29a      	uxth	r2, r3
 8001370:	4b8f      	ldr	r3, [pc, #572]	@ (80015b0 <lcd_init+0x2b8>)
 8001372:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001374:	20cf      	movs	r0, #207	@ 0xcf
 8001376:	f7ff fce1 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff fcee 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001380:	20c1      	movs	r0, #193	@ 0xc1
 8001382:	f7ff fceb 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001386:	2030      	movs	r0, #48	@ 0x30
 8001388:	f7ff fce8 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 800138c:	20ed      	movs	r0, #237	@ 0xed
 800138e:	f7ff fcd5 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001392:	2064      	movs	r0, #100	@ 0x64
 8001394:	f7ff fce2 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001398:	2003      	movs	r0, #3
 800139a:	f7ff fcdf 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800139e:	2012      	movs	r0, #18
 80013a0:	f7ff fcdc 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80013a4:	2081      	movs	r0, #129	@ 0x81
 80013a6:	f7ff fcd9 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80013aa:	20e8      	movs	r0, #232	@ 0xe8
 80013ac:	f7ff fcc6 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80013b0:	2085      	movs	r0, #133	@ 0x85
 80013b2:	f7ff fcd3 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80013b6:	2010      	movs	r0, #16
 80013b8:	f7ff fcd0 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80013bc:	207a      	movs	r0, #122	@ 0x7a
 80013be:	f7ff fccd 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80013c2:	20cb      	movs	r0, #203	@ 0xcb
 80013c4:	f7ff fcba 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80013c8:	2039      	movs	r0, #57	@ 0x39
 80013ca:	f7ff fcc7 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80013ce:	202c      	movs	r0, #44	@ 0x2c
 80013d0:	f7ff fcc4 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fcc1 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80013da:	2034      	movs	r0, #52	@ 0x34
 80013dc:	f7ff fcbe 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80013e0:	2002      	movs	r0, #2
 80013e2:	f7ff fcbb 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80013e6:	20f7      	movs	r0, #247	@ 0xf7
 80013e8:	f7ff fca8 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80013ec:	2020      	movs	r0, #32
 80013ee:	f7ff fcb5 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80013f2:	20ea      	movs	r0, #234	@ 0xea
 80013f4:	f7ff fca2 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff fcaf 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff fcac 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001404:	20c0      	movs	r0, #192	@ 0xc0
 8001406:	f7ff fc99 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800140a:	201b      	movs	r0, #27
 800140c:	f7ff fca6 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001410:	20c1      	movs	r0, #193	@ 0xc1
 8001412:	f7ff fc93 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001416:	2001      	movs	r0, #1
 8001418:	f7ff fca0 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 800141c:	20c5      	movs	r0, #197	@ 0xc5
 800141e:	f7ff fc8d 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001422:	2030      	movs	r0, #48	@ 0x30
 8001424:	f7ff fc9a 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001428:	2030      	movs	r0, #48	@ 0x30
 800142a:	f7ff fc97 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800142e:	20c7      	movs	r0, #199	@ 0xc7
 8001430:	f7ff fc84 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001434:	20b7      	movs	r0, #183	@ 0xb7
 8001436:	f7ff fc91 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800143a:	2036      	movs	r0, #54	@ 0x36
 800143c:	f7ff fc7e 	bl	8000d3c <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8001440:	2008      	movs	r0, #8
 8001442:	f7ff fc8b 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001446:	203a      	movs	r0, #58	@ 0x3a
 8001448:	f7ff fc78 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 800144c:	2055      	movs	r0, #85	@ 0x55
 800144e:	f7ff fc85 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001452:	20b1      	movs	r0, #177	@ 0xb1
 8001454:	f7ff fc72 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001458:	2000      	movs	r0, #0
 800145a:	f7ff fc7f 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800145e:	201a      	movs	r0, #26
 8001460:	f7ff fc7c 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001464:	20b6      	movs	r0, #182	@ 0xb6
 8001466:	f7ff fc69 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800146a:	200a      	movs	r0, #10
 800146c:	f7ff fc76 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001470:	20a2      	movs	r0, #162	@ 0xa2
 8001472:	f7ff fc73 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001476:	20f2      	movs	r0, #242	@ 0xf2
 8001478:	f7ff fc60 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff fc6d 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001482:	2026      	movs	r0, #38	@ 0x26
 8001484:	f7ff fc5a 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001488:	2001      	movs	r0, #1
 800148a:	f7ff fc67 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800148e:	20e0      	movs	r0, #224	@ 0xe0
 8001490:	f7ff fc54 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001494:	200f      	movs	r0, #15
 8001496:	f7ff fc61 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800149a:	202a      	movs	r0, #42	@ 0x2a
 800149c:	f7ff fc5e 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80014a0:	2028      	movs	r0, #40	@ 0x28
 80014a2:	f7ff fc5b 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80014a6:	2008      	movs	r0, #8
 80014a8:	f7ff fc58 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80014ac:	200e      	movs	r0, #14
 80014ae:	f7ff fc55 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80014b2:	2008      	movs	r0, #8
 80014b4:	f7ff fc52 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80014b8:	2054      	movs	r0, #84	@ 0x54
 80014ba:	f7ff fc4f 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80014be:	20a9      	movs	r0, #169	@ 0xa9
 80014c0:	f7ff fc4c 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80014c4:	2043      	movs	r0, #67	@ 0x43
 80014c6:	f7ff fc49 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80014ca:	200a      	movs	r0, #10
 80014cc:	f7ff fc46 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80014d0:	200f      	movs	r0, #15
 80014d2:	f7ff fc43 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff fc40 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80014dc:	2000      	movs	r0, #0
 80014de:	f7ff fc3d 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff fc3a 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff fc37 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80014ee:	20e1      	movs	r0, #225	@ 0xe1
 80014f0:	f7ff fc24 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff fc31 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80014fa:	2015      	movs	r0, #21
 80014fc:	f7ff fc2e 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001500:	2017      	movs	r0, #23
 8001502:	f7ff fc2b 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001506:	2007      	movs	r0, #7
 8001508:	f7ff fc28 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800150c:	2011      	movs	r0, #17
 800150e:	f7ff fc25 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001512:	2006      	movs	r0, #6
 8001514:	f7ff fc22 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001518:	202b      	movs	r0, #43	@ 0x2b
 800151a:	f7ff fc1f 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800151e:	2056      	movs	r0, #86	@ 0x56
 8001520:	f7ff fc1c 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001524:	203c      	movs	r0, #60	@ 0x3c
 8001526:	f7ff fc19 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800152a:	2005      	movs	r0, #5
 800152c:	f7ff fc16 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001530:	2010      	movs	r0, #16
 8001532:	f7ff fc13 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001536:	200f      	movs	r0, #15
 8001538:	f7ff fc10 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800153c:	203f      	movs	r0, #63	@ 0x3f
 800153e:	f7ff fc0d 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001542:	203f      	movs	r0, #63	@ 0x3f
 8001544:	f7ff fc0a 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001548:	200f      	movs	r0, #15
 800154a:	f7ff fc07 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800154e:	202b      	movs	r0, #43	@ 0x2b
 8001550:	f7ff fbf4 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001554:	2000      	movs	r0, #0
 8001556:	f7ff fc01 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800155a:	2000      	movs	r0, #0
 800155c:	f7ff fbfe 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001560:	2001      	movs	r0, #1
 8001562:	f7ff fbfb 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001566:	203f      	movs	r0, #63	@ 0x3f
 8001568:	f7ff fbf8 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 800156c:	202a      	movs	r0, #42	@ 0x2a
 800156e:	f7ff fbe5 	bl	8000d3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001572:	2000      	movs	r0, #0
 8001574:	f7ff fbf2 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff fbef 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800157e:	2000      	movs	r0, #0
 8001580:	f7ff fbec 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001584:	20ef      	movs	r0, #239	@ 0xef
 8001586:	f7ff fbe9 	bl	8000d5c <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 800158a:	2011      	movs	r0, #17
 800158c:	f7ff fbd6 	bl	8000d3c <LCD_WR_REG>
	HAL_Delay(120);
 8001590:	2078      	movs	r0, #120	@ 0x78
 8001592:	f001 fa17 	bl	80029c4 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 8001596:	2029      	movs	r0, #41	@ 0x29
 8001598:	f7ff fbd0 	bl	8000d3c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800159c:	2201      	movs	r2, #1
 800159e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015a2:	4804      	ldr	r0, [pc, #16]	@ (80015b4 <lcd_init+0x2bc>)
 80015a4:	f002 fcf4 	bl	8003f90 <HAL_GPIO_WritePin>
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40020800 	.word	0x40020800
 80015b0:	20000428 	.word	0x20000428
 80015b4:	40020000 	.word	0x40020000

080015b8 <lcd_show_string>:
		}
	}
}

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b08b      	sub	sp, #44	@ 0x2c
 80015bc:	af04      	add	r7, sp, #16
 80015be:	60ba      	str	r2, [r7, #8]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4603      	mov	r3, r0
 80015c4:	81fb      	strh	r3, [r7, #14]
 80015c6:	460b      	mov	r3, r1
 80015c8:	81bb      	strh	r3, [r7, #12]
 80015ca:	4613      	mov	r3, r2
 80015cc:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 80015ce:	89fb      	ldrh	r3, [r7, #14]
 80015d0:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 80015d6:	e048      	b.n	800166a <lcd_show_string+0xb2>
		if (!bHz) {
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d145      	bne.n	800166a <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 80015de:	89fa      	ldrh	r2, [r7, #14]
 80015e0:	4b26      	ldr	r3, [pc, #152]	@ (800167c <lcd_show_string+0xc4>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015ea:	085b      	lsrs	r3, r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	1acb      	subs	r3, r1, r3
 80015f0:	429a      	cmp	r2, r3
 80015f2:	dc3f      	bgt.n	8001674 <lcd_show_string+0xbc>
 80015f4:	89ba      	ldrh	r2, [r7, #12]
 80015f6:	4b21      	ldr	r3, [pc, #132]	@ (800167c <lcd_show_string+0xc4>)
 80015f8:	885b      	ldrh	r3, [r3, #2]
 80015fa:	4619      	mov	r1, r3
 80015fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001600:	1acb      	subs	r3, r1, r3
 8001602:	429a      	cmp	r2, r3
 8001604:	dc36      	bgt.n	8001674 <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b80      	cmp	r3, #128	@ 0x80
 800160c:	d902      	bls.n	8001614 <lcd_show_string+0x5c>
				bHz = 1;
 800160e:	2301      	movs	r3, #1
 8001610:	75fb      	strb	r3, [r7, #23]
 8001612:	e02a      	b.n	800166a <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b0d      	cmp	r3, #13
 800161a:	d10b      	bne.n	8001634 <lcd_show_string+0x7c>
					y += sizey;
 800161c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001620:	b29a      	uxth	r2, r3
 8001622:	89bb      	ldrh	r3, [r7, #12]
 8001624:	4413      	add	r3, r2
 8001626:	81bb      	strh	r3, [r7, #12]
					x = x0;
 8001628:	8abb      	ldrh	r3, [r7, #20]
 800162a:	81fb      	strh	r3, [r7, #14]
					str++;
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	3301      	adds	r3, #1
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	e017      	b.n	8001664 <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	781a      	ldrb	r2, [r3, #0]
 8001638:	88fc      	ldrh	r4, [r7, #6]
 800163a:	89b9      	ldrh	r1, [r7, #12]
 800163c:	89f8      	ldrh	r0, [r7, #14]
 800163e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	4623      	mov	r3, r4
 8001650:	f7ff fc3c 	bl	8000ecc <lcd_show_char>
					x += sizey / 2;
 8001654:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001658:	085b      	lsrs	r3, r3, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	461a      	mov	r2, r3
 800165e:	89fb      	ldrh	r3, [r7, #14]
 8001660:	4413      	add	r3, r2
 8001662:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	3301      	adds	r3, #1
 8001668:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1b2      	bne.n	80015d8 <lcd_show_string+0x20>
 8001672:	e000      	b.n	8001676 <lcd_show_string+0xbe>
				return;
 8001674:	bf00      	nop
			}
		}
	}
}
 8001676:	371c      	adds	r7, #28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd90      	pop	{r4, r7, pc}
 800167c:	20000428 	.word	0x20000428

08001680 <led_7seg_init>:
/**
 * @brief  	Init led 7 segment
 * @param  	None
 * @retval 	None
 */
void led_7seg_init() {
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001684:	2201      	movs	r2, #1
 8001686:	2140      	movs	r1, #64	@ 0x40
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <led_7seg_init+0x14>)
 800168a:	f002 fc81 	bl	8003f90 <HAL_GPIO_WritePin>
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40021800 	.word	0x40021800

08001698 <led_7seg_display>:
 * @brief	Scan led 7 segment
 * @param	None
 * @note	Call in 1ms interrupt
 * @retval 	None
 */
void led_7seg_display() {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 800169c:	4b3f      	ldr	r3, [pc, #252]	@ (800179c <led_7seg_display+0x104>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	4b3d      	ldr	r3, [pc, #244]	@ (800179c <led_7seg_display+0x104>)
 80016a6:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led_7seg[led_7seg_index] << 8;
 80016a8:	4b3d      	ldr	r3, [pc, #244]	@ (80017a0 <led_7seg_display+0x108>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b3d      	ldr	r3, [pc, #244]	@ (80017a4 <led_7seg_display+0x10c>)
 80016b0:	5c9b      	ldrb	r3, [r3, r2]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	4b39      	ldr	r3, [pc, #228]	@ (800179c <led_7seg_display+0x104>)
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	b21b      	sxth	r3, r3
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4b36      	ldr	r3, [pc, #216]	@ (800179c <led_7seg_display+0x104>)
 80016c4:	801a      	strh	r2, [r3, #0]

	switch (led_7seg_index) {
 80016c6:	4b36      	ldr	r3, [pc, #216]	@ (80017a0 <led_7seg_display+0x108>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d846      	bhi.n	800175c <led_7seg_display+0xc4>
 80016ce:	a201      	add	r2, pc, #4	@ (adr r2, 80016d4 <led_7seg_display+0x3c>)
 80016d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d4:	080016e5 	.word	0x080016e5
 80016d8:	08001703 	.word	0x08001703
 80016dc:	08001721 	.word	0x08001721
 80016e0:	0800173f 	.word	0x0800173f
	case 0:
		spi_buffer |= 0x00b0;
 80016e4:	4b2d      	ldr	r3, [pc, #180]	@ (800179c <led_7seg_display+0x104>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	4b2b      	ldr	r3, [pc, #172]	@ (800179c <led_7seg_display+0x104>)
 80016f0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80016f2:	4b2a      	ldr	r3, [pc, #168]	@ (800179c <led_7seg_display+0x104>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	4b27      	ldr	r3, [pc, #156]	@ (800179c <led_7seg_display+0x104>)
 80016fe:	801a      	strh	r2, [r3, #0]
		break;
 8001700:	e02d      	b.n	800175e <led_7seg_display+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001702:	4b26      	ldr	r3, [pc, #152]	@ (800179c <led_7seg_display+0x104>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 800170a:	b29a      	uxth	r2, r3
 800170c:	4b23      	ldr	r3, [pc, #140]	@ (800179c <led_7seg_display+0x104>)
 800170e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001710:	4b22      	ldr	r3, [pc, #136]	@ (800179c <led_7seg_display+0x104>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	f023 0320 	bic.w	r3, r3, #32
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b20      	ldr	r3, [pc, #128]	@ (800179c <led_7seg_display+0x104>)
 800171c:	801a      	strh	r2, [r3, #0]
		break;
 800171e:	e01e      	b.n	800175e <led_7seg_display+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001720:	4b1e      	ldr	r3, [pc, #120]	@ (800179c <led_7seg_display+0x104>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8001728:	b29a      	uxth	r2, r3
 800172a:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <led_7seg_display+0x104>)
 800172c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 800172e:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <led_7seg_display+0x104>)
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	f023 0310 	bic.w	r3, r3, #16
 8001736:	b29a      	uxth	r2, r3
 8001738:	4b18      	ldr	r3, [pc, #96]	@ (800179c <led_7seg_display+0x104>)
 800173a:	801a      	strh	r2, [r3, #0]
		break;
 800173c:	e00f      	b.n	800175e <led_7seg_display+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800173e:	4b17      	ldr	r3, [pc, #92]	@ (800179c <led_7seg_display+0x104>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001746:	b29a      	uxth	r2, r3
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <led_7seg_display+0x104>)
 800174a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 800174c:	4b13      	ldr	r3, [pc, #76]	@ (800179c <led_7seg_display+0x104>)
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001754:	b29a      	uxth	r2, r3
 8001756:	4b11      	ldr	r3, [pc, #68]	@ (800179c <led_7seg_display+0x104>)
 8001758:	801a      	strh	r2, [r3, #0]
		break;
 800175a:	e000      	b.n	800175e <led_7seg_display+0xc6>
	default:
		break;
 800175c:	bf00      	nop
	}

	led_7seg_index = (led_7seg_index + 1) % 4;
 800175e:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <led_7seg_display+0x108>)
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	3301      	adds	r3, #1
 8001764:	425a      	negs	r2, r3
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	f002 0203 	and.w	r2, r2, #3
 800176e:	bf58      	it	pl
 8001770:	4253      	negpl	r3, r2
 8001772:	b29a      	uxth	r2, r3
 8001774:	4b0a      	ldr	r3, [pc, #40]	@ (80017a0 <led_7seg_display+0x108>)
 8001776:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001778:	2200      	movs	r2, #0
 800177a:	2140      	movs	r1, #64	@ 0x40
 800177c:	480a      	ldr	r0, [pc, #40]	@ (80017a8 <led_7seg_display+0x110>)
 800177e:	f002 fc07 	bl	8003f90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 2, 1);
 8001782:	2301      	movs	r3, #1
 8001784:	2202      	movs	r2, #2
 8001786:	4905      	ldr	r1, [pc, #20]	@ (800179c <led_7seg_display+0x104>)
 8001788:	4808      	ldr	r0, [pc, #32]	@ (80017ac <led_7seg_display+0x114>)
 800178a:	f003 f8fc 	bl	8004986 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800178e:	2201      	movs	r2, #1
 8001790:	2140      	movs	r1, #64	@ 0x40
 8001792:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <led_7seg_display+0x110>)
 8001794:	f002 fbfc 	bl	8003f90 <HAL_GPIO_WritePin>
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000238 	.word	0x20000238
 80017a0:	2000042e 	.word	0x2000042e
 80017a4:	20000224 	.word	0x20000224
 80017a8:	40021800 	.word	0x40021800
 80017ac:	2000065c 	.word	0x2000065c

080017b0 <led_7seg_set_digit>:
 * @param  	num	Number displayed
 * @param  	pos	The position displayed (index from 0)
 * @param  	show_dot Show dot in the led or not
 * @retval 	None
 */
void led_7seg_set_digit(int num, int position, uint8_t show_dot) {
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	4613      	mov	r3, r2
 80017bc:	71fb      	strb	r3, [r7, #7]
	if (num >= 0 && num <= 15) {
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	db0e      	blt.n	80017e2 <led_7seg_set_digit+0x32>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b0f      	cmp	r3, #15
 80017c8:	dc0b      	bgt.n	80017e2 <led_7seg_set_digit+0x32>
		led_7seg[position] = led_7seg_map_of_output[num] - show_dot;
 80017ca:	4a09      	ldr	r2, [pc, #36]	@ (80017f0 <led_7seg_set_digit+0x40>)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4413      	add	r3, r2
 80017d0:	781a      	ldrb	r2, [r3, #0]
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	b2d9      	uxtb	r1, r3
 80017d8:	4a06      	ldr	r2, [pc, #24]	@ (80017f4 <led_7seg_set_digit+0x44>)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	4413      	add	r3, r2
 80017de:	460a      	mov	r2, r1
 80017e0:	701a      	strb	r2, [r3, #0]
	}
}
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000228 	.word	0x20000228
 80017f4:	20000224 	.word	0x20000224

080017f8 <led_7seg_set_colon>:
 *          This parameter can be one of the following values:
 *				@arg 0: Turn off
 *				@arg 1: Turn on
 * @retval None
 */
void led_7seg_set_colon(uint8_t status) {
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
	if (status == 1)
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d107      	bne.n	8001818 <led_7seg_set_colon+0x20>
		spi_buffer &= ~(1 << 3);
 8001808:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <led_7seg_set_colon+0x3c>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	f023 0308 	bic.w	r3, r3, #8
 8001810:	b29a      	uxth	r2, r3
 8001812:	4b08      	ldr	r3, [pc, #32]	@ (8001834 <led_7seg_set_colon+0x3c>)
 8001814:	801a      	strh	r2, [r3, #0]
	else
		spi_buffer |= (1 << 3);
}
 8001816:	e006      	b.n	8001826 <led_7seg_set_colon+0x2e>
		spi_buffer |= (1 << 3);
 8001818:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <led_7seg_set_colon+0x3c>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	f043 0308 	orr.w	r3, r3, #8
 8001820:	b29a      	uxth	r2, r3
 8001822:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <led_7seg_set_colon+0x3c>)
 8001824:	801a      	strh	r2, [r3, #0]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000238 	.word	0x20000238

08001838 <led_7seg_debug_turn_off>:
 *            	@arg 6
 *            	@arg 7
 *            	@arg 8
 * @retval None
 */
void led_7seg_debug_turn_off(uint8_t index) {
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
	if (index >= 6 && index <= 8) {
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b05      	cmp	r3, #5
 8001846:	d912      	bls.n	800186e <led_7seg_debug_turn_off+0x36>
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	2b08      	cmp	r3, #8
 800184c:	d80f      	bhi.n	800186e <led_7seg_debug_turn_off+0x36>
		spi_buffer &= ~(1 << (index - 6));
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	3b06      	subs	r3, #6
 8001852:	2201      	movs	r2, #1
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	b21b      	sxth	r3, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	b21a      	sxth	r2, r3
 800185e:	4b07      	ldr	r3, [pc, #28]	@ (800187c <led_7seg_debug_turn_off+0x44>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	b21b      	sxth	r3, r3
 8001864:	4013      	ands	r3, r2
 8001866:	b21b      	sxth	r3, r3
 8001868:	b29a      	uxth	r2, r3
 800186a:	4b04      	ldr	r3, [pc, #16]	@ (800187c <led_7seg_debug_turn_off+0x44>)
 800186c:	801a      	strh	r2, [r3, #0]
	}
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000238 	.word	0x20000238

08001880 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TestADC();
void lcd_run();
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a04      	ldr	r2, [pc, #16]	@ (80018a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d101      	bne.n	8001896 <HAL_TIM_PeriodElapsedCallback+0x16>
		timerRun();
 8001892:	f000 fd61 	bl	8002358 <timerRun>
	}
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40000400 	.word	0x40000400

080018a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018a8:	f001 f81a 	bl	80028e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ac:	f000 f86a 	bl	8001984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b0:	f7ff f964 	bl	8000b7c <MX_GPIO_Init>
  MX_DMA_Init();
 80018b4:	f7ff f872 	bl	800099c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80018b8:	f000 fde8 	bl	800248c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80018bc:	f000 fdbc 	bl	8002438 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80018c0:	f000 fd90 	bl	80023e4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80018c4:	f7fe fdf8 	bl	80004b8 <MX_ADC1_Init>
  MX_FSMC_Init();
 80018c8:	f7ff f888 	bl	80009dc <MX_FSMC_Init>
  MX_SPI1_Init();
 80018cc:	f000 fbb0 	bl	8002030 <MX_SPI1_Init>
  MX_TIM3_Init();
 80018d0:	f000 fcb4 	bl	800223c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  led_7seg_init();
 80018d4:	f7ff fed4 	bl	8001680 <led_7seg_init>
  led_7seg_set_colon(1);
 80018d8:	2001      	movs	r0, #1
 80018da:	f7ff ff8d 	bl	80017f8 <led_7seg_set_colon>
  led_7seg_debug_turn_off(6);
 80018de:	2006      	movs	r0, #6
 80018e0:	f7ff ffaa 	bl	8001838 <led_7seg_debug_turn_off>
  led_7seg_debug_turn_off(7);
 80018e4:	2007      	movs	r0, #7
 80018e6:	f7ff ffa7 	bl	8001838 <led_7seg_debug_turn_off>
  led_7seg_debug_turn_off(8);
 80018ea:	2008      	movs	r0, #8
 80018ec:	f7ff ffa4 	bl	8001838 <led_7seg_debug_turn_off>
  led_7seg_set_digit(0, 0, 0 );
 80018f0:	2200      	movs	r2, #0
 80018f2:	2100      	movs	r1, #0
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff ff5b 	bl	80017b0 <led_7seg_set_digit>
  led_7seg_set_digit(0, 1, 0 );
 80018fa:	2200      	movs	r2, #0
 80018fc:	2101      	movs	r1, #1
 80018fe:	2000      	movs	r0, #0
 8001900:	f7ff ff56 	bl	80017b0 <led_7seg_set_digit>
  led_7seg_set_digit(0, 2, 0 );
 8001904:	2200      	movs	r2, #0
 8001906:	2102      	movs	r1, #2
 8001908:	2000      	movs	r0, #0
 800190a:	f7ff ff51 	bl	80017b0 <led_7seg_set_digit>
  led_7seg_set_digit(0, 3, 0 );
 800190e:	2200      	movs	r2, #0
 8001910:	2103      	movs	r1, #3
 8001912:	2000      	movs	r0, #0
 8001914:	f7ff ff4c 	bl	80017b0 <led_7seg_set_digit>
  lcd_init();
 8001918:	f7ff fcee 	bl	80012f8 <lcd_init>
  sensor_init();
 800191c:	f000 fb7a 	bl	8002014 <sensor_init>
  lcd_clear(BLACK);
 8001920:	2000      	movs	r0, #0
 8001922:	f7ff fa89 	bl	8000e38 <lcd_clear>
  HAL_TIM_Base_Start_IT(&htim3);
 8001926:	4816      	ldr	r0, [pc, #88]	@ (8001980 <main+0xdc>)
 8001928:	f003 fe0e 	bl	8005548 <HAL_TIM_Base_Start_IT>
  setTimer(TI_BUTTON_SCAN_TIMER, TI_BUTTON_SCAN_TIME);
 800192c:	2114      	movs	r1, #20
 800192e:	2000      	movs	r0, #0
 8001930:	f000 fcfa 	bl	8002328 <setTimer>
  setTimer(TI_7SEG_SCAN_TIMER, TI_7SEG_SCAN_TIME);
 8001934:	2102      	movs	r1, #2
 8001936:	2001      	movs	r0, #1
 8001938:	f000 fcf6 	bl	8002328 <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(isFlag(TI_BUTTON_SCAN_TIMER)){
 800193c:	2000      	movs	r0, #0
 800193e:	f000 fd3b 	bl	80023b8 <isFlag>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <main+0xb0>
		  button_scan();
 8001948:	f7fe fecc 	bl	80006e4 <button_scan>
		  setTimer(TI_BUTTON_SCAN_TIMER, TI_BUTTON_SCAN_TIME);
 800194c:	2114      	movs	r1, #20
 800194e:	2000      	movs	r0, #0
 8001950:	f000 fcea 	bl	8002328 <setTimer>
	  }
	  if(isFlag(TI_7SEG_SCAN_TIMER)){
 8001954:	2001      	movs	r0, #1
 8001956:	f000 fd2f 	bl	80023b8 <isFlag>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <main+0xc8>
		  led_7seg_display();
 8001960:	f7ff fe9a 	bl	8001698 <led_7seg_display>
		  setTimer(TI_7SEG_SCAN_TIMER, TI_7SEG_SCAN_TIME);
 8001964:	2102      	movs	r1, #2
 8001966:	2001      	movs	r0, #1
 8001968:	f000 fcde 	bl	8002328 <setTimer>
	  }
	  lcd_run();
 800196c:	f000 f874 	bl	8001a58 <lcd_run>
	  f_user_interface_def();
 8001970:	f000 fe72 	bl	8002658 <f_user_interface_def>
	  f_rs485_fsm_def();
 8001974:	f000 fb24 	bl	8001fc0 <f_rs485_fsm_def>
	  f_master_fsm_def();
 8001978:	f000 f918 	bl	8001bac <f_master_fsm_def>
	  if(isFlag(TI_BUTTON_SCAN_TIMER)){
 800197c:	e7de      	b.n	800193c <main+0x98>
 800197e:	bf00      	nop
 8001980:	200006b4 	.word	0x200006b4

08001984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b094      	sub	sp, #80	@ 0x50
 8001988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198a:	f107 0320 	add.w	r3, r7, #32
 800198e:	2230      	movs	r2, #48	@ 0x30
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f005 f9e8 	bl	8006d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	4b28      	ldr	r3, [pc, #160]	@ (8001a50 <SystemClock_Config+0xcc>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b0:	4a27      	ldr	r2, [pc, #156]	@ (8001a50 <SystemClock_Config+0xcc>)
 80019b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b8:	4b25      	ldr	r3, [pc, #148]	@ (8001a50 <SystemClock_Config+0xcc>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	4b22      	ldr	r3, [pc, #136]	@ (8001a54 <SystemClock_Config+0xd0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a21      	ldr	r2, [pc, #132]	@ (8001a54 <SystemClock_Config+0xd0>)
 80019ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a54 <SystemClock_Config+0xd0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019e0:	2302      	movs	r3, #2
 80019e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e4:	2301      	movs	r3, #1
 80019e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019e8:	2310      	movs	r3, #16
 80019ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ec:	2302      	movs	r3, #2
 80019ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019f0:	2300      	movs	r3, #0
 80019f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019f4:	2308      	movs	r3, #8
 80019f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019f8:	23a8      	movs	r3, #168	@ 0xa8
 80019fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019fc:	2302      	movs	r3, #2
 80019fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a00:	2304      	movs	r3, #4
 8001a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a04:	f107 0320 	add.w	r3, r7, #32
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 fadb 	bl	8003fc4 <HAL_RCC_OscConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a14:	f000 f8c4 	bl	8001ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a18:	230f      	movs	r3, #15
 8001a1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a24:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001a2a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	2105      	movs	r1, #5
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 fd3c 	bl	80044b4 <HAL_RCC_ClockConfig>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a42:	f000 f8ad 	bl	8001ba0 <Error_Handler>
  }
}
 8001a46:	bf00      	nop
 8001a48:	3750      	adds	r7, #80	@ 0x50
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40007000 	.word	0x40007000

08001a58 <lcd_run>:
		lcd_show_string(10, 180, "Temperature:", RED, BLACK, 16, 0);
		lcd_show_float_num(130, 180, sensor_get_temperature(), 4, RED, BLACK,
				16);
	}
}
void lcd_run(){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af04      	add	r7, sp, #16
	lcd_show_string(10, 100, "Temperature:", RED, BLACK, 16, 0);
 8001a5e:	2300      	movs	r3, #0
 8001a60:	9302      	str	r3, [sp, #8]
 8001a62:	2310      	movs	r3, #16
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	2300      	movs	r3, #0
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001a6e:	4a47      	ldr	r2, [pc, #284]	@ (8001b8c <lcd_run+0x134>)
 8001a70:	2164      	movs	r1, #100	@ 0x64
 8001a72:	200a      	movs	r0, #10
 8001a74:	f7ff fda0 	bl	80015b8 <lcd_show_string>
	lcd_show_float_num(130, 100, f_master_get_temperature_def(), 4, RED, BLACK, 16);
 8001a78:	f000 fa1c 	bl	8001eb4 <f_master_get_temperature_def>
 8001a7c:	eef0 7a40 	vmov.f32	s15, s0
 8001a80:	2310      	movs	r3, #16
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	2300      	movs	r3, #0
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001a8c:	2204      	movs	r2, #4
 8001a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a92:	2164      	movs	r1, #100	@ 0x64
 8001a94:	2082      	movs	r0, #130	@ 0x82
 8001a96:	f7ff fb83 	bl	80011a0 <lcd_show_float_num>
	lcd_show_string(10, 120, "Current:", RED, BLACK, 16, 0);
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	9302      	str	r3, [sp, #8]
 8001a9e:	2310      	movs	r3, #16
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001aaa:	4a39      	ldr	r2, [pc, #228]	@ (8001b90 <lcd_run+0x138>)
 8001aac:	2178      	movs	r1, #120	@ 0x78
 8001aae:	200a      	movs	r0, #10
 8001ab0:	f7ff fd82 	bl	80015b8 <lcd_show_string>
	lcd_show_float_num(130, 120, f_master_get_current_def(), 4, RED, BLACK, 16);
 8001ab4:	f000 fa0c 	bl	8001ed0 <f_master_get_current_def>
 8001ab8:	eef0 7a40 	vmov.f32	s15, s0
 8001abc:	2310      	movs	r3, #16
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001ac8:	2204      	movs	r2, #4
 8001aca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ace:	2178      	movs	r1, #120	@ 0x78
 8001ad0:	2082      	movs	r0, #130	@ 0x82
 8001ad2:	f7ff fb65 	bl	80011a0 <lcd_show_float_num>
	lcd_show_string(10, 140, "Voltage:", RED, BLACK, 16, 0);
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	9302      	str	r3, [sp, #8]
 8001ada:	2310      	movs	r3, #16
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001ae6:	4a2b      	ldr	r2, [pc, #172]	@ (8001b94 <lcd_run+0x13c>)
 8001ae8:	218c      	movs	r1, #140	@ 0x8c
 8001aea:	200a      	movs	r0, #10
 8001aec:	f7ff fd64 	bl	80015b8 <lcd_show_string>
	lcd_show_float_num(130, 140, f_master_get_voltage_def(), 4, RED, BLACK, 16);
 8001af0:	f000 f9fc 	bl	8001eec <f_master_get_voltage_def>
 8001af4:	eef0 7a40 	vmov.f32	s15, s0
 8001af8:	2310      	movs	r3, #16
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	2300      	movs	r3, #0
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001b04:	2204      	movs	r2, #4
 8001b06:	eeb0 0a67 	vmov.f32	s0, s15
 8001b0a:	218c      	movs	r1, #140	@ 0x8c
 8001b0c:	2082      	movs	r0, #130	@ 0x82
 8001b0e:	f7ff fb47 	bl	80011a0 <lcd_show_float_num>
	lcd_show_string(10, 160, "Light:", RED, BLACK, 16, 0);
 8001b12:	2300      	movs	r3, #0
 8001b14:	9302      	str	r3, [sp, #8]
 8001b16:	2310      	movs	r3, #16
 8001b18:	9301      	str	r3, [sp, #4]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001b22:	4a1d      	ldr	r2, [pc, #116]	@ (8001b98 <lcd_run+0x140>)
 8001b24:	21a0      	movs	r1, #160	@ 0xa0
 8001b26:	200a      	movs	r0, #10
 8001b28:	f7ff fd46 	bl	80015b8 <lcd_show_string>
	lcd_show_int_num(130, 160, f_master_get_light_def(), 4, RED, BLACK, 16);
 8001b2c:	f000 f9ec 	bl	8001f08 <f_master_get_light_def>
 8001b30:	4603      	mov	r3, r0
 8001b32:	461a      	mov	r2, r3
 8001b34:	2310      	movs	r3, #16
 8001b36:	9302      	str	r3, [sp, #8]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	9301      	str	r3, [sp, #4]
 8001b3c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2304      	movs	r3, #4
 8001b44:	21a0      	movs	r1, #160	@ 0xa0
 8001b46:	2082      	movs	r0, #130	@ 0x82
 8001b48:	f7ff faac 	bl	80010a4 <lcd_show_int_num>
	lcd_show_string(10, 180, "Potentiometer:", RED, BLACK, 16, 0);
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	2310      	movs	r3, #16
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	2300      	movs	r3, #0
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001b5c:	4a0f      	ldr	r2, [pc, #60]	@ (8001b9c <lcd_run+0x144>)
 8001b5e:	21b4      	movs	r1, #180	@ 0xb4
 8001b60:	200a      	movs	r0, #10
 8001b62:	f7ff fd29 	bl	80015b8 <lcd_show_string>
	lcd_show_int_num(130, 180, f_master_get_potention_def(), 4, RED, BLACK,16);
 8001b66:	f000 f9f7 	bl	8001f58 <f_master_get_potention_def>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	2310      	movs	r3, #16
 8001b70:	9302      	str	r3, [sp, #8]
 8001b72:	2300      	movs	r3, #0
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	21b4      	movs	r1, #180	@ 0xb4
 8001b80:	2082      	movs	r0, #130	@ 0x82
 8001b82:	f7ff fa8f 	bl	80010a4 <lcd_show_int_num>
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	08006e08 	.word	0x08006e08
 8001b90:	08006de4 	.word	0x08006de4
 8001b94:	08006dd8 	.word	0x08006dd8
 8001b98:	08006df0 	.word	0x08006df0
 8001b9c:	08006df8 	.word	0x08006df8

08001ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba4:	b672      	cpsid	i
}
 8001ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <Error_Handler+0x8>

08001bac <f_master_fsm_def>:
 *  Created on: Dec 7, 2024
 *      Author: ADMIN
 */
#include "master.h"
enum MASTER_STATE _master_behavior = IDLE;
void f_master_fsm_def(){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b0c8      	sub	sp, #288	@ 0x120
 8001bb0:	af04      	add	r7, sp, #16
	switch(_master_behavior){
 8001bb2:	4bb9      	ldr	r3, [pc, #740]	@ (8001e98 <f_master_fsm_def+0x2ec>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	f200 8161 	bhi.w	8001e7e <f_master_fsm_def+0x2d2>
 8001bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc4 <f_master_fsm_def+0x18>)
 8001bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc2:	bf00      	nop
 8001bc4:	08001bd9 	.word	0x08001bd9
 8001bc8:	08001d37 	.word	0x08001d37
 8001bcc:	08001d4d 	.word	0x08001d4d
 8001bd0:	08001d75 	.word	0x08001d75
 8001bd4:	08001e47 	.word	0x08001e47
		case IDLE:
			if(send_cmd_flag){
 8001bd8:	4bb0      	ldr	r3, [pc, #704]	@ (8001e9c <f_master_fsm_def+0x2f0>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 8150 	beq.w	8001e82 <f_master_fsm_def+0x2d6>
				switch(cmd_send){
 8001be2:	4baf      	ldr	r3, [pc, #700]	@ (8001ea0 <f_master_fsm_def+0x2f4>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	2b05      	cmp	r3, #5
 8001bea:	f200 8087 	bhi.w	8001cfc <f_master_fsm_def+0x150>
 8001bee:	a201      	add	r2, pc, #4	@ (adr r2, 8001bf4 <f_master_fsm_def+0x48>)
 8001bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf4:	08001c0d 	.word	0x08001c0d
 8001bf8:	08001c3d 	.word	0x08001c3d
 8001bfc:	08001c6d 	.word	0x08001c6d
 8001c00:	08001c9d 	.word	0x08001c9d
 8001c04:	08001cfd 	.word	0x08001cfd
 8001c08:	08001ccd 	.word	0x08001ccd
					case READ_TEMPERATURE:
						master.tx_buf[0] = slave_address;
 8001c0c:	4ba5      	ldr	r3, [pc, #660]	@ (8001ea4 <f_master_fsm_def+0x2f8>)
 8001c0e:	781a      	ldrb	r2, [r3, #0]
 8001c10:	4ba5      	ldr	r3, [pc, #660]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c12:	715a      	strb	r2, [r3, #5]
						master.tx_buf[1] = READ_HOLDING_REGISTER;
 8001c14:	4ba4      	ldr	r3, [pc, #656]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c16:	2203      	movs	r2, #3
 8001c18:	719a      	strb	r2, [r3, #6]
						master.tx_buf[2] = 0x00;
 8001c1a:	4ba3      	ldr	r3, [pc, #652]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	71da      	strb	r2, [r3, #7]
						master.tx_buf[3] = TEMPERATURE_REGISTER_ADDRESS;
 8001c20:	4ba1      	ldr	r3, [pc, #644]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c22:	2206      	movs	r2, #6
 8001c24:	721a      	strb	r2, [r3, #8]
						master.tx_buf[4] = 0x00;
 8001c26:	4ba0      	ldr	r3, [pc, #640]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	725a      	strb	r2, [r3, #9]
						master.tx_buf[5] = 0x01;
 8001c2c:	4b9e      	ldr	r3, [pc, #632]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	729a      	strb	r2, [r3, #10]
						master.tx_size = 6;
 8001c32:	4b9d      	ldr	r3, [pc, #628]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c34:	2206      	movs	r2, #6
 8001c36:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
						break;
 8001c3a:	e060      	b.n	8001cfe <f_master_fsm_def+0x152>
					case READ_CURRENT:
						master.tx_buf[0] = slave_address;
 8001c3c:	4b99      	ldr	r3, [pc, #612]	@ (8001ea4 <f_master_fsm_def+0x2f8>)
 8001c3e:	781a      	ldrb	r2, [r3, #0]
 8001c40:	4b99      	ldr	r3, [pc, #612]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c42:	715a      	strb	r2, [r3, #5]
						master.tx_buf[1] = READ_HOLDING_REGISTER;
 8001c44:	4b98      	ldr	r3, [pc, #608]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c46:	2203      	movs	r2, #3
 8001c48:	719a      	strb	r2, [r3, #6]
						master.tx_buf[2] = 0x00;
 8001c4a:	4b97      	ldr	r3, [pc, #604]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	71da      	strb	r2, [r3, #7]
						master.tx_buf[3] = CURRENT_REGISTER_ADDRESS;
 8001c50:	4b95      	ldr	r3, [pc, #596]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c52:	220a      	movs	r2, #10
 8001c54:	721a      	strb	r2, [r3, #8]
						master.tx_buf[4] = 0x00;
 8001c56:	4b94      	ldr	r3, [pc, #592]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	725a      	strb	r2, [r3, #9]
						master.tx_buf[5] = 0x01;
 8001c5c:	4b92      	ldr	r3, [pc, #584]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	729a      	strb	r2, [r3, #10]
						master.tx_size = 6;
 8001c62:	4b91      	ldr	r3, [pc, #580]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c64:	2206      	movs	r2, #6
 8001c66:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
						break;
 8001c6a:	e048      	b.n	8001cfe <f_master_fsm_def+0x152>
					case READ_VOLTAGE:
						master.tx_buf[0] = slave_address;
 8001c6c:	4b8d      	ldr	r3, [pc, #564]	@ (8001ea4 <f_master_fsm_def+0x2f8>)
 8001c6e:	781a      	ldrb	r2, [r3, #0]
 8001c70:	4b8d      	ldr	r3, [pc, #564]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c72:	715a      	strb	r2, [r3, #5]
						master.tx_buf[1] = READ_HOLDING_REGISTER;
 8001c74:	4b8c      	ldr	r3, [pc, #560]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c76:	2203      	movs	r2, #3
 8001c78:	719a      	strb	r2, [r3, #6]
						master.tx_buf[2] = 0x00;
 8001c7a:	4b8b      	ldr	r3, [pc, #556]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	71da      	strb	r2, [r3, #7]
						master.tx_buf[3] = VOLTAGE_REGISTER_ADDRESS;
 8001c80:	4b89      	ldr	r3, [pc, #548]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c82:	220e      	movs	r2, #14
 8001c84:	721a      	strb	r2, [r3, #8]
						master.tx_buf[4] = 0x00;
 8001c86:	4b88      	ldr	r3, [pc, #544]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	725a      	strb	r2, [r3, #9]
						master.tx_buf[5] = 0x01;
 8001c8c:	4b86      	ldr	r3, [pc, #536]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	729a      	strb	r2, [r3, #10]
						master.tx_size = 6;
 8001c92:	4b85      	ldr	r3, [pc, #532]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001c94:	2206      	movs	r2, #6
 8001c96:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
						break;
 8001c9a:	e030      	b.n	8001cfe <f_master_fsm_def+0x152>
					case READ_LIGHT:
						master.tx_buf[0] = slave_address;
 8001c9c:	4b81      	ldr	r3, [pc, #516]	@ (8001ea4 <f_master_fsm_def+0x2f8>)
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	4b81      	ldr	r3, [pc, #516]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001ca2:	715a      	strb	r2, [r3, #5]
						master.tx_buf[1] = READ_HOLDING_REGISTER;
 8001ca4:	4b80      	ldr	r3, [pc, #512]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	719a      	strb	r2, [r3, #6]
						master.tx_buf[2] = 0x00;
 8001caa:	4b7f      	ldr	r3, [pc, #508]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	71da      	strb	r2, [r3, #7]
						master.tx_buf[3] = LIGHT_REGISTER_ADDRESS;
 8001cb0:	4b7d      	ldr	r3, [pc, #500]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	721a      	strb	r2, [r3, #8]
						master.tx_buf[4] = 0x00;
 8001cb6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	725a      	strb	r2, [r3, #9]
						master.tx_buf[5] = 0x01;
 8001cbc:	4b7a      	ldr	r3, [pc, #488]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	729a      	strb	r2, [r3, #10]
						master.tx_size = 6;
 8001cc2:	4b79      	ldr	r3, [pc, #484]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001cc4:	2206      	movs	r2, #6
 8001cc6:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
						break;
 8001cca:	e018      	b.n	8001cfe <f_master_fsm_def+0x152>
					case READ_POTENTION:
						master.tx_buf[0] = slave_address;
 8001ccc:	4b75      	ldr	r3, [pc, #468]	@ (8001ea4 <f_master_fsm_def+0x2f8>)
 8001cce:	781a      	ldrb	r2, [r3, #0]
 8001cd0:	4b75      	ldr	r3, [pc, #468]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001cd2:	715a      	strb	r2, [r3, #5]
						master.tx_buf[1] = READ_HOLDING_REGISTER;
 8001cd4:	4b74      	ldr	r3, [pc, #464]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	719a      	strb	r2, [r3, #6]
						master.tx_buf[2] = 0x00;
 8001cda:	4b73      	ldr	r3, [pc, #460]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	71da      	strb	r2, [r3, #7]
						master.tx_buf[3] = POTENTIOMETER_REGISTER_ADDRESS;
 8001ce0:	4b71      	ldr	r3, [pc, #452]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	721a      	strb	r2, [r3, #8]
						master.tx_buf[4] = 0x00;
 8001ce6:	4b70      	ldr	r3, [pc, #448]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	725a      	strb	r2, [r3, #9]
						master.tx_buf[5] = 0x01;
 8001cec:	4b6e      	ldr	r3, [pc, #440]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	729a      	strb	r2, [r3, #10]
						master.tx_size = 6;
 8001cf2:	4b6d      	ldr	r3, [pc, #436]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001cf4:	2206      	movs	r2, #6
 8001cf6:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
						break;
 8001cfa:	e000      	b.n	8001cfe <f_master_fsm_def+0x152>
					default:
						break;
 8001cfc:	bf00      	nop
				}
				f_rs485_send_cmd_def(master.tx_buf, master.tx_size);
 8001cfe:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001d00:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	4619      	mov	r1, r3
 8001d08:	4868      	ldr	r0, [pc, #416]	@ (8001eac <f_master_fsm_def+0x300>)
 8001d0a:	f000 f94d 	bl	8001fa8 <f_rs485_send_cmd_def>
				if(cmd_send == BROAD_CAST){
 8001d0e:	4b64      	ldr	r3, [pc, #400]	@ (8001ea0 <f_master_fsm_def+0x2f4>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2bff      	cmp	r3, #255	@ 0xff
 8001d14:	d107      	bne.n	8001d26 <f_master_fsm_def+0x17a>
					setTimer(TI_MASTER_TURN_ARROUND_TIMER, TI_MASTER_TURN_ARROUND_TIME);
 8001d16:	2132      	movs	r1, #50	@ 0x32
 8001d18:	2005      	movs	r0, #5
 8001d1a:	f000 fb05 	bl	8002328 <setTimer>
					_master_behavior = WAITING_TURN_ARROUND_DELAY;
 8001d1e:	4b5e      	ldr	r3, [pc, #376]	@ (8001e98 <f_master_fsm_def+0x2ec>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
					break;
 8001d24:	e0b2      	b.n	8001e8c <f_master_fsm_def+0x2e0>
				}
				setTimer(TI_MASTER_WAITING_TIMER, TI_MASTER_TURN_ARROUND_TIME);
 8001d26:	2132      	movs	r1, #50	@ 0x32
 8001d28:	2006      	movs	r0, #6
 8001d2a:	f000 fafd 	bl	8002328 <setTimer>
				_master_behavior = WAITING_FOR_REPLY;
 8001d2e:	4b5a      	ldr	r3, [pc, #360]	@ (8001e98 <f_master_fsm_def+0x2ec>)
 8001d30:	2202      	movs	r2, #2
 8001d32:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001d34:	e0a5      	b.n	8001e82 <f_master_fsm_def+0x2d6>
		case WAITING_TURN_ARROUND_DELAY:
			if(isFlag(TI_MASTER_TURN_ARROUND_TIMER)) _master_behavior = IDLE;
 8001d36:	2005      	movs	r0, #5
 8001d38:	f000 fb3e 	bl	80023b8 <isFlag>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 80a1 	beq.w	8001e86 <f_master_fsm_def+0x2da>
 8001d44:	4b54      	ldr	r3, [pc, #336]	@ (8001e98 <f_master_fsm_def+0x2ec>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
			break;
 8001d4a:	e09c      	b.n	8001e86 <f_master_fsm_def+0x2da>
		case WAITING_FOR_REPLY:
			if(isFlag(TI_MASTER_TURN_ARROUND_TIME)) _master_behavior = PROCESSING_ERROR;
 8001d4c:	2032      	movs	r0, #50	@ 0x32
 8001d4e:	f000 fb33 	bl	80023b8 <isFlag>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <f_master_fsm_def+0x1b4>
 8001d58:	4b4f      	ldr	r3, [pc, #316]	@ (8001e98 <f_master_fsm_def+0x2ec>)
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	701a      	strb	r2, [r3, #0]
			else if(f_rs485_received_def()){
				_master_behavior = PROCESSING_REPLY;
			}
			break;
 8001d5e:	e094      	b.n	8001e8a <f_master_fsm_def+0x2de>
			else if(f_rs485_received_def()){
 8001d60:	f000 f943 	bl	8001fea <f_rs485_received_def>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 808f 	beq.w	8001e8a <f_master_fsm_def+0x2de>
				_master_behavior = PROCESSING_REPLY;
 8001d6c:	4b4a      	ldr	r3, [pc, #296]	@ (8001e98 <f_master_fsm_def+0x2ec>)
 8001d6e:	2203      	movs	r2, #3
 8001d70:	701a      	strb	r2, [r3, #0]
			break;
 8001d72:	e08a      	b.n	8001e8a <f_master_fsm_def+0x2de>
			uint8_t _address_def;
			uint8_t _function_def;
			uint8_t _data_def[256];
			uint8_t _data_size_def;
			uint16_t _crc_receive_def;
			f_rs485_parserFrame_def(master.rx_buf, master.rx_size, &_address_def, &_function_def, _data_def,&_data_size_def, &_crc_receive_def);
 8001d74:	4b4c      	ldr	r3, [pc, #304]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001d76:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8001d7a:	b2d9      	uxtb	r1, r3
 8001d7c:	f507 7083 	add.w	r0, r7, #262	@ 0x106
 8001d80:	f207 1207 	addw	r2, r7, #263	@ 0x107
 8001d84:	f507 7381 	add.w	r3, r7, #258	@ 0x102
 8001d88:	9302      	str	r3, [sp, #8]
 8001d8a:	f207 1305 	addw	r3, r7, #261	@ 0x105
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	463b      	mov	r3, r7
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	4603      	mov	r3, r0
 8001d96:	4846      	ldr	r0, [pc, #280]	@ (8001eb0 <f_master_fsm_def+0x304>)
 8001d98:	f000 f919 	bl	8001fce <f_rs485_parserFrame_def>
			if(_crc_receive_def == crc16(master.rx_buf, master.rx_size - 2)){
 8001d9c:	4b42      	ldr	r3, [pc, #264]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001d9e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8001da2:	3b02      	subs	r3, #2
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	4619      	mov	r1, r3
 8001da8:	4841      	ldr	r0, [pc, #260]	@ (8001eb0 <f_master_fsm_def+0x304>)
 8001daa:	f7fe fdc7 	bl	800093c <crc16>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d141      	bne.n	8001e3e <f_master_fsm_def+0x292>
					switch(_function_def){
 8001dba:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 8001dbe:	2b10      	cmp	r3, #16
 8001dc0:	d036      	beq.n	8001e30 <f_master_fsm_def+0x284>
 8001dc2:	2b10      	cmp	r3, #16
 8001dc4:	dc36      	bgt.n	8001e34 <f_master_fsm_def+0x288>
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d001      	beq.n	8001dce <f_master_fsm_def+0x222>
 8001dca:	2b05      	cmp	r3, #5
						}
						break;
					case WRITE_MULTIPLE_HOLDING_REGISTER:
						break;
					case WRITE_SINGLE_COIL:
						break;
 8001dcc:	e033      	b.n	8001e36 <f_master_fsm_def+0x28a>
						uint8_t _num_bytes = master.rx_buf[2];
 8001dce:	4b36      	ldr	r3, [pc, #216]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001dd0:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8001dd4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
						uint16_t _address = (((uint16_t)master.tx_buf[2]<<8)|(master.tx_buf[3]));
 8001dd8:	4b33      	ldr	r3, [pc, #204]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001dda:	79db      	ldrb	r3, [r3, #7]
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	b21a      	sxth	r2, r3
 8001de0:	4b31      	ldr	r3, [pc, #196]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001de2:	7a1b      	ldrb	r3, [r3, #8]
 8001de4:	b21b      	sxth	r3, r3
 8001de6:	4313      	orrs	r3, r2
 8001de8:	b21b      	sxth	r3, r3
 8001dea:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
						for(int i=0;i<_num_bytes;i++){
 8001dee:	2300      	movs	r3, #0
 8001df0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001df4:	e015      	b.n	8001e22 <f_master_fsm_def+0x276>
							master.holding_register[i + _address]  = master.rx_buf[i+3];
 8001df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001dfa:	1cda      	adds	r2, r3, #3
 8001dfc:	f8b7 1108 	ldrh.w	r1, [r7, #264]	@ 0x108
 8001e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001e04:	440b      	add	r3, r1
 8001e06:	4928      	ldr	r1, [pc, #160]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001e08:	440a      	add	r2, r1
 8001e0a:	f892 1108 	ldrb.w	r1, [r2, #264]	@ 0x108
 8001e0e:	4a26      	ldr	r2, [pc, #152]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001e10:	4413      	add	r3, r2
 8001e12:	460a      	mov	r2, r1
 8001e14:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
						for(int i=0;i<_num_bytes;i++){
 8001e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001e22:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8001e26:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	dbe3      	blt.n	8001df6 <f_master_fsm_def+0x24a>
						break;
 8001e2e:	e002      	b.n	8001e36 <f_master_fsm_def+0x28a>
						break;
 8001e30:	bf00      	nop
 8001e32:	e000      	b.n	8001e36 <f_master_fsm_def+0x28a>
					default:
						break;
 8001e34:	bf00      	nop
					}
				_master_behavior = PROCESSING_ERROR;
 8001e36:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <f_master_fsm_def+0x2ec>)
 8001e38:	2204      	movs	r2, #4
 8001e3a:	701a      	strb	r2, [r3, #0]
			}
			else{
				_master_behavior = PROCESSING_ERROR;
			}
			break;
 8001e3c:	e026      	b.n	8001e8c <f_master_fsm_def+0x2e0>
				_master_behavior = PROCESSING_ERROR;
 8001e3e:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <f_master_fsm_def+0x2ec>)
 8001e40:	2204      	movs	r2, #4
 8001e42:	701a      	strb	r2, [r3, #0]
			break;
 8001e44:	e022      	b.n	8001e8c <f_master_fsm_def+0x2e0>
		case PROCESSING_ERROR:
			f_rs485_send_cmd_def(master.tx_buf, master.tx_size);
 8001e46:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <f_master_fsm_def+0x2fc>)
 8001e48:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4816      	ldr	r0, [pc, #88]	@ (8001eac <f_master_fsm_def+0x300>)
 8001e52:	f000 f8a9 	bl	8001fa8 <f_rs485_send_cmd_def>
			if(cmd_send == BROAD_CAST){
 8001e56:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <f_master_fsm_def+0x2f4>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2bff      	cmp	r3, #255	@ 0xff
 8001e5c:	d107      	bne.n	8001e6e <f_master_fsm_def+0x2c2>
				setTimer(TI_MASTER_TURN_ARROUND_TIMER, TI_MASTER_TURN_ARROUND_TIME);
 8001e5e:	2132      	movs	r1, #50	@ 0x32
 8001e60:	2005      	movs	r0, #5
 8001e62:	f000 fa61 	bl	8002328 <setTimer>
				_master_behavior = WAITING_TURN_ARROUND_DELAY;
 8001e66:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <f_master_fsm_def+0x2ec>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
				break;
 8001e6c:	e00e      	b.n	8001e8c <f_master_fsm_def+0x2e0>
			}
			setTimer(TI_MASTER_WAITING_TIMER, TI_MASTER_TURN_ARROUND_TIME);
 8001e6e:	2132      	movs	r1, #50	@ 0x32
 8001e70:	2006      	movs	r0, #6
 8001e72:	f000 fa59 	bl	8002328 <setTimer>
			_master_behavior = WAITING_FOR_REPLY;
 8001e76:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <f_master_fsm_def+0x2ec>)
 8001e78:	2202      	movs	r2, #2
 8001e7a:	701a      	strb	r2, [r3, #0]
			break;
 8001e7c:	e006      	b.n	8001e8c <f_master_fsm_def+0x2e0>
		default:
			break;
 8001e7e:	bf00      	nop
 8001e80:	e004      	b.n	8001e8c <f_master_fsm_def+0x2e0>
			break;
 8001e82:	bf00      	nop
 8001e84:	e002      	b.n	8001e8c <f_master_fsm_def+0x2e0>
			break;
 8001e86:	bf00      	nop
 8001e88:	e000      	b.n	8001e8c <f_master_fsm_def+0x2e0>
			break;
 8001e8a:	bf00      	nop
	}
}
 8001e8c:	bf00      	nop
 8001e8e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000064c 	.word	0x2000064c
 8001e9c:	20000425 	.word	0x20000425
 8001ea0:	20000424 	.word	0x20000424
 8001ea4:	20000220 	.word	0x20000220
 8001ea8:	20000430 	.word	0x20000430
 8001eac:	20000435 	.word	0x20000435
 8001eb0:	20000538 	.word	0x20000538

08001eb4 <f_master_get_temperature_def>:
float f_master_get_temperature_def(){
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
	return *((float*)((master.holding_register + TEMPERATURE_REGISTER_ADDRESS)));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <f_master_get_temperature_def+0x18>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	ee07 3a90 	vmov	s15, r3
}
 8001ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	20000640 	.word	0x20000640

08001ed0 <f_master_get_current_def>:
float f_master_get_current_def(){
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
	return *((float*)((master.holding_register + CURRENT_REGISTER_ADDRESS)));;
 8001ed4:	4b04      	ldr	r3, [pc, #16]	@ (8001ee8 <f_master_get_current_def+0x18>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	ee07 3a90 	vmov	s15, r3
}
 8001edc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	20000644 	.word	0x20000644

08001eec <f_master_get_voltage_def>:
float f_master_get_voltage_def(){
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
	return *((float*)((master.holding_register + VOLTAGE_REGISTER_ADDRESS)));
 8001ef0:	4b04      	ldr	r3, [pc, #16]	@ (8001f04 <f_master_get_voltage_def+0x18>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	ee07 3a90 	vmov	s15, r3
}
 8001ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	20000648 	.word	0x20000648

08001f08 <f_master_get_light_def>:
uint16_t f_master_get_light_def(){
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
	uint16_t _return_val_def = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	81fb      	strh	r3, [r7, #14]
	uint8_t _size_of_reg_def = 2;
 8001f12:	2302      	movs	r3, #2
 8001f14:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < _size_of_reg_def; i++){
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	e00f      	b.n	8001f3c <f_master_get_light_def+0x34>
		_return_val_def = (_return_val_def<<8)|(master.holding_register[LIGHT_REGISTER_ADDRESS + i]);
 8001f1c:	89fb      	ldrh	r3, [r7, #14]
 8001f1e:	021b      	lsls	r3, r3, #8
 8001f20:	b21a      	sxth	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	3304      	adds	r3, #4
 8001f26:	490b      	ldr	r1, [pc, #44]	@ (8001f54 <f_master_get_light_def+0x4c>)
 8001f28:	440b      	add	r3, r1
 8001f2a:	f893 320a 	ldrb.w	r3, [r3, #522]	@ 0x20a
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	4313      	orrs	r3, r2
 8001f32:	b21b      	sxth	r3, r3
 8001f34:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < _size_of_reg_def; i++){
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	dbeb      	blt.n	8001f1c <f_master_get_light_def+0x14>
	}
	return _return_val_def;
 8001f44:	89fb      	ldrh	r3, [r7, #14]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000430 	.word	0x20000430

08001f58 <f_master_get_potention_def>:
uint16_t f_master_get_potention_def(){
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
	uint16_t _return_val_def = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	81fb      	strh	r3, [r7, #14]
	uint8_t _size_of_reg_def = 2;
 8001f62:	2302      	movs	r3, #2
 8001f64:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < _size_of_reg_def; i++){
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	e00f      	b.n	8001f8c <f_master_get_potention_def+0x34>
		_return_val_def = (_return_val_def<<8)|(master.holding_register[POTENTIOMETER_REGISTER_ADDRESS + i]);
 8001f6c:	89fb      	ldrh	r3, [r7, #14]
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	b21a      	sxth	r2, r3
 8001f72:	490c      	ldr	r1, [pc, #48]	@ (8001fa4 <f_master_get_potention_def+0x4c>)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	440b      	add	r3, r1
 8001f78:	f203 230a 	addw	r3, r3, #522	@ 0x20a
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	4313      	orrs	r3, r2
 8001f82:	b21b      	sxth	r3, r3
 8001f84:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < _size_of_reg_def; i++){
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	dbeb      	blt.n	8001f6c <f_master_get_potention_def+0x14>
	}
	return _return_val_def;
 8001f94:	89fb      	ldrh	r3, [r7, #14]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000430 	.word	0x20000430

08001fa8 <f_rs485_send_cmd_def>:
//	HAL_UARTEx_ReceiveToIdle_IT(hModbus->huart, hModbus->Rx_buf, MAX_SIZE);
//}
void f_rs485_init_def(uint8_t* tx_buf, uint8_t tx_size, uint8_t* rx_buf){

}
void f_rs485_send_cmd_def(uint8_t* tx_buf, uint8_t tx_size){
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]

}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <f_rs485_fsm_def>:
void f_rs485_fsm_def(){
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <f_rs485_parserFrame_def>:
void f_rs485_parserFrame_def(uint8_t *pFrame, uint8_t FrameSize, uint8_t *Address, uint8_t *Function, uint8_t *Data, uint8_t *Datasize, uint16_t *Crc){
 8001fce:	b480      	push	{r7}
 8001fd0:	b085      	sub	sp, #20
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	72fb      	strb	r3, [r7, #11]

}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <f_rs485_received_def>:
int f_rs485_received_def(){
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0
	return -1;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	807b      	strh	r3, [r7, #2]

}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <sensor_init>:

/* Variables */
uint16_t adc_receive[5];

/* Functions */
void sensor_init() {
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (void*) adc_receive, 5);
 8002018:	2205      	movs	r2, #5
 800201a:	4903      	ldr	r1, [pc, #12]	@ (8002028 <sensor_init+0x14>)
 800201c:	4803      	ldr	r0, [pc, #12]	@ (800202c <sensor_init+0x18>)
 800201e:	f000 fd39 	bl	8002a94 <HAL_ADC_Start_DMA>
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000650 	.word	0x20000650
 800202c:	20000264 	.word	0x20000264

08002030 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002034:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <MX_SPI1_Init+0x64>)
 8002036:	4a18      	ldr	r2, [pc, #96]	@ (8002098 <MX_SPI1_Init+0x68>)
 8002038:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800203a:	4b16      	ldr	r3, [pc, #88]	@ (8002094 <MX_SPI1_Init+0x64>)
 800203c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002040:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002042:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <MX_SPI1_Init+0x64>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002048:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <MX_SPI1_Init+0x64>)
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800204e:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <MX_SPI1_Init+0x64>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002054:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <MX_SPI1_Init+0x64>)
 8002056:	2200      	movs	r2, #0
 8002058:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800205a:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <MX_SPI1_Init+0x64>)
 800205c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002060:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002062:	4b0c      	ldr	r3, [pc, #48]	@ (8002094 <MX_SPI1_Init+0x64>)
 8002064:	2200      	movs	r2, #0
 8002066:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002068:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <MX_SPI1_Init+0x64>)
 800206a:	2200      	movs	r2, #0
 800206c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800206e:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <MX_SPI1_Init+0x64>)
 8002070:	2200      	movs	r2, #0
 8002072:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002074:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <MX_SPI1_Init+0x64>)
 8002076:	2200      	movs	r2, #0
 8002078:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800207a:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <MX_SPI1_Init+0x64>)
 800207c:	220a      	movs	r2, #10
 800207e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002080:	4804      	ldr	r0, [pc, #16]	@ (8002094 <MX_SPI1_Init+0x64>)
 8002082:	f002 fbf7 	bl	8004874 <HAL_SPI_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800208c:	f7ff fd88 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	2000065c 	.word	0x2000065c
 8002098:	40013000 	.word	0x40013000

0800209c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	@ 0x28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a19      	ldr	r2, [pc, #100]	@ (8002120 <HAL_SPI_MspInit+0x84>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d12b      	bne.n	8002116 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	4b18      	ldr	r3, [pc, #96]	@ (8002124 <HAL_SPI_MspInit+0x88>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c6:	4a17      	ldr	r2, [pc, #92]	@ (8002124 <HAL_SPI_MspInit+0x88>)
 80020c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ce:	4b15      	ldr	r3, [pc, #84]	@ (8002124 <HAL_SPI_MspInit+0x88>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <HAL_SPI_MspInit+0x88>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	4a10      	ldr	r2, [pc, #64]	@ (8002124 <HAL_SPI_MspInit+0x88>)
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <HAL_SPI_MspInit+0x88>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80020f6:	2338      	movs	r3, #56	@ 0x38
 80020f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002102:	2303      	movs	r3, #3
 8002104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002106:	2305      	movs	r3, #5
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	4619      	mov	r1, r3
 8002110:	4805      	ldr	r0, [pc, #20]	@ (8002128 <HAL_SPI_MspInit+0x8c>)
 8002112:	f001 fda1 	bl	8003c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002116:	bf00      	nop
 8002118:	3728      	adds	r7, #40	@ 0x28
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40013000 	.word	0x40013000
 8002124:	40023800 	.word	0x40023800
 8002128:	40020400 	.word	0x40020400

0800212c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <HAL_MspInit+0x4c>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213a:	4a0f      	ldr	r2, [pc, #60]	@ (8002178 <HAL_MspInit+0x4c>)
 800213c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002140:	6453      	str	r3, [r2, #68]	@ 0x44
 8002142:	4b0d      	ldr	r3, [pc, #52]	@ (8002178 <HAL_MspInit+0x4c>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <HAL_MspInit+0x4c>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	4a08      	ldr	r2, [pc, #32]	@ (8002178 <HAL_MspInit+0x4c>)
 8002158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800215c:	6413      	str	r3, [r2, #64]	@ 0x40
 800215e:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_MspInit+0x4c>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800

0800217c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <NMI_Handler+0x4>

08002184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <HardFault_Handler+0x4>

0800218c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <MemManage_Handler+0x4>

08002194 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <BusFault_Handler+0x4>

0800219c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <UsageFault_Handler+0x4>

080021a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d2:	f000 fbd7 	bl	8002984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021e0:	4802      	ldr	r0, [pc, #8]	@ (80021ec <TIM3_IRQHandler+0x10>)
 80021e2:	f003 fa21 	bl	8005628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	200006b4 	.word	0x200006b4

080021f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021f4:	4802      	ldr	r0, [pc, #8]	@ (8002200 <USART3_IRQHandler+0x10>)
 80021f6:	f003 fe1d 	bl	8005e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200007dc 	.word	0x200007dc

08002204 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002208:	4802      	ldr	r0, [pc, #8]	@ (8002214 <DMA2_Stream0_IRQHandler+0x10>)
 800220a:	f001 fabb 	bl	8003784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200002ac 	.word	0x200002ac

08002218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800221c:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <SystemInit+0x20>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002222:	4a05      	ldr	r2, [pc, #20]	@ (8002238 <SystemInit+0x20>)
 8002224:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002228:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002242:	f107 0308 	add.w	r3, r7, #8
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002250:	463b      	mov	r3, r7
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002258:	4b1d      	ldr	r3, [pc, #116]	@ (80022d0 <MX_TIM3_Init+0x94>)
 800225a:	4a1e      	ldr	r2, [pc, #120]	@ (80022d4 <MX_TIM3_Init+0x98>)
 800225c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 800225e:	4b1c      	ldr	r3, [pc, #112]	@ (80022d0 <MX_TIM3_Init+0x94>)
 8002260:	f240 3247 	movw	r2, #839	@ 0x347
 8002264:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002266:	4b1a      	ldr	r3, [pc, #104]	@ (80022d0 <MX_TIM3_Init+0x94>)
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800226c:	4b18      	ldr	r3, [pc, #96]	@ (80022d0 <MX_TIM3_Init+0x94>)
 800226e:	2263      	movs	r2, #99	@ 0x63
 8002270:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002272:	4b17      	ldr	r3, [pc, #92]	@ (80022d0 <MX_TIM3_Init+0x94>)
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002278:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <MX_TIM3_Init+0x94>)
 800227a:	2200      	movs	r2, #0
 800227c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800227e:	4814      	ldr	r0, [pc, #80]	@ (80022d0 <MX_TIM3_Init+0x94>)
 8002280:	f003 f912 	bl	80054a8 <HAL_TIM_Base_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800228a:	f7ff fc89 	bl	8001ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800228e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002292:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002294:	f107 0308 	add.w	r3, r7, #8
 8002298:	4619      	mov	r1, r3
 800229a:	480d      	ldr	r0, [pc, #52]	@ (80022d0 <MX_TIM3_Init+0x94>)
 800229c:	f003 fab4 	bl	8005808 <HAL_TIM_ConfigClockSource>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80022a6:	f7ff fc7b 	bl	8001ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022b2:	463b      	mov	r3, r7
 80022b4:	4619      	mov	r1, r3
 80022b6:	4806      	ldr	r0, [pc, #24]	@ (80022d0 <MX_TIM3_Init+0x94>)
 80022b8:	f003 fcdc 	bl	8005c74 <HAL_TIMEx_MasterConfigSynchronization>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80022c2:	f7ff fc6d 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022c6:	bf00      	nop
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200006b4 	.word	0x200006b4
 80022d4:	40000400 	.word	0x40000400

080022d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002320 <HAL_TIM_Base_MspInit+0x48>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d115      	bne.n	8002316 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002324 <HAL_TIM_Base_MspInit+0x4c>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002324 <HAL_TIM_Base_MspInit+0x4c>)
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002324 <HAL_TIM_Base_MspInit+0x4c>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	201d      	movs	r0, #29
 800230c:	f001 f86b 	bl	80033e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002310:	201d      	movs	r0, #29
 8002312:	f001 f884 	bl	800341e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40000400 	.word	0x40000400
 8002324:	40023800 	.word	0x40023800

08002328 <setTimer>:
#include "timer.h"

struct TimerStruct timer[10];

void setTimer(int idx, int counter)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
	timer[idx].counter = counter / TICK;
 8002332:	4908      	ldr	r1, [pc, #32]	@ (8002354 <setTimer+0x2c>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	timer[idx].flag = 0;
 800233c:	4a05      	ldr	r2, [pc, #20]	@ (8002354 <setTimer+0x2c>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	2200      	movs	r2, #0
 8002346:	605a      	str	r2, [r3, #4]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	200006fc 	.word	0x200006fc

08002358 <timerRun>:

void timerRun()
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; ++i)
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	e01d      	b.n	80023a0 <timerRun+0x48>
	{
		if (timer[i].counter > 0)
 8002364:	4a13      	ldr	r2, [pc, #76]	@ (80023b4 <timerRun+0x5c>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800236c:	2b00      	cmp	r3, #0
 800236e:	dd14      	ble.n	800239a <timerRun+0x42>
		{
			--timer[i].counter;
 8002370:	4a10      	ldr	r2, [pc, #64]	@ (80023b4 <timerRun+0x5c>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002378:	1e5a      	subs	r2, r3, #1
 800237a:	490e      	ldr	r1, [pc, #56]	@ (80023b4 <timerRun+0x5c>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			if (timer[i].counter <= 0)
 8002382:	4a0c      	ldr	r2, [pc, #48]	@ (80023b4 <timerRun+0x5c>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800238a:	2b00      	cmp	r3, #0
 800238c:	dc05      	bgt.n	800239a <timerRun+0x42>
			{
				timer[i].flag = 1;
 800238e:	4a09      	ldr	r2, [pc, #36]	@ (80023b4 <timerRun+0x5c>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4413      	add	r3, r2
 8002396:	2201      	movs	r2, #1
 8002398:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 10; ++i)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3301      	adds	r3, #1
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b09      	cmp	r3, #9
 80023a4:	ddde      	ble.n	8002364 <timerRun+0xc>
			}
		}
	}
}
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	200006fc 	.word	0x200006fc

080023b8 <isFlag>:

int isFlag(int idx)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	if (timer[idx].flag)
 80023c0:	4a07      	ldr	r2, [pc, #28]	@ (80023e0 <isFlag+0x28>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <isFlag+0x1a>
	{
		return 1;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <isFlag+0x1c>
	}
	return 0;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	200006fc 	.word	0x200006fc

080023e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023e8:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <MX_USART1_UART_Init+0x4c>)
 80023ea:	4a12      	ldr	r2, [pc, #72]	@ (8002434 <MX_USART1_UART_Init+0x50>)
 80023ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80023ee:	4b10      	ldr	r3, [pc, #64]	@ (8002430 <MX_USART1_UART_Init+0x4c>)
 80023f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80023f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002430 <MX_USART1_UART_Init+0x4c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <MX_USART1_UART_Init+0x4c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002402:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <MX_USART1_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002408:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <MX_USART1_UART_Init+0x4c>)
 800240a:	220c      	movs	r2, #12
 800240c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240e:	4b08      	ldr	r3, [pc, #32]	@ (8002430 <MX_USART1_UART_Init+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002414:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <MX_USART1_UART_Init+0x4c>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800241a:	4805      	ldr	r0, [pc, #20]	@ (8002430 <MX_USART1_UART_Init+0x4c>)
 800241c:	f003 fcba 	bl	8005d94 <HAL_UART_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002426:	f7ff fbbb 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	2000074c 	.word	0x2000074c
 8002434:	40011000 	.word	0x40011000

08002438 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800243c:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <MX_USART2_UART_Init+0x4c>)
 800243e:	4a12      	ldr	r2, [pc, #72]	@ (8002488 <MX_USART2_UART_Init+0x50>)
 8002440:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002442:	4b10      	ldr	r3, [pc, #64]	@ (8002484 <MX_USART2_UART_Init+0x4c>)
 8002444:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002448:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800244a:	4b0e      	ldr	r3, [pc, #56]	@ (8002484 <MX_USART2_UART_Init+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002450:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <MX_USART2_UART_Init+0x4c>)
 8002452:	2200      	movs	r2, #0
 8002454:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002456:	4b0b      	ldr	r3, [pc, #44]	@ (8002484 <MX_USART2_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800245c:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <MX_USART2_UART_Init+0x4c>)
 800245e:	220c      	movs	r2, #12
 8002460:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002462:	4b08      	ldr	r3, [pc, #32]	@ (8002484 <MX_USART2_UART_Init+0x4c>)
 8002464:	2200      	movs	r2, #0
 8002466:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002468:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <MX_USART2_UART_Init+0x4c>)
 800246a:	2200      	movs	r2, #0
 800246c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800246e:	4805      	ldr	r0, [pc, #20]	@ (8002484 <MX_USART2_UART_Init+0x4c>)
 8002470:	f003 fc90 	bl	8005d94 <HAL_UART_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800247a:	f7ff fb91 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000794 	.word	0x20000794
 8002488:	40004400 	.word	0x40004400

0800248c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002490:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <MX_USART3_UART_Init+0x4c>)
 8002492:	4a12      	ldr	r2, [pc, #72]	@ (80024dc <MX_USART3_UART_Init+0x50>)
 8002494:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002496:	4b10      	ldr	r3, [pc, #64]	@ (80024d8 <MX_USART3_UART_Init+0x4c>)
 8002498:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800249c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800249e:	4b0e      	ldr	r3, [pc, #56]	@ (80024d8 <MX_USART3_UART_Init+0x4c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024a4:	4b0c      	ldr	r3, [pc, #48]	@ (80024d8 <MX_USART3_UART_Init+0x4c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024aa:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <MX_USART3_UART_Init+0x4c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024b0:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <MX_USART3_UART_Init+0x4c>)
 80024b2:	220c      	movs	r2, #12
 80024b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b6:	4b08      	ldr	r3, [pc, #32]	@ (80024d8 <MX_USART3_UART_Init+0x4c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024bc:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <MX_USART3_UART_Init+0x4c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024c2:	4805      	ldr	r0, [pc, #20]	@ (80024d8 <MX_USART3_UART_Init+0x4c>)
 80024c4:	f003 fc66 	bl	8005d94 <HAL_UART_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80024ce:	f7ff fb67 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200007dc 	.word	0x200007dc
 80024dc:	40004800 	.word	0x40004800

080024e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08e      	sub	sp, #56	@ 0x38
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a50      	ldr	r2, [pc, #320]	@ (8002640 <HAL_UART_MspInit+0x160>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d12d      	bne.n	800255e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	623b      	str	r3, [r7, #32]
 8002506:	4b4f      	ldr	r3, [pc, #316]	@ (8002644 <HAL_UART_MspInit+0x164>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	4a4e      	ldr	r2, [pc, #312]	@ (8002644 <HAL_UART_MspInit+0x164>)
 800250c:	f043 0310 	orr.w	r3, r3, #16
 8002510:	6453      	str	r3, [r2, #68]	@ 0x44
 8002512:	4b4c      	ldr	r3, [pc, #304]	@ (8002644 <HAL_UART_MspInit+0x164>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002516:	f003 0310 	and.w	r3, r3, #16
 800251a:	623b      	str	r3, [r7, #32]
 800251c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	4b48      	ldr	r3, [pc, #288]	@ (8002644 <HAL_UART_MspInit+0x164>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	4a47      	ldr	r2, [pc, #284]	@ (8002644 <HAL_UART_MspInit+0x164>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	6313      	str	r3, [r2, #48]	@ 0x30
 800252e:	4b45      	ldr	r3, [pc, #276]	@ (8002644 <HAL_UART_MspInit+0x164>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	61fb      	str	r3, [r7, #28]
 8002538:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800253a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800253e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002548:	2303      	movs	r3, #3
 800254a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800254c:	2307      	movs	r3, #7
 800254e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002554:	4619      	mov	r1, r3
 8002556:	483c      	ldr	r0, [pc, #240]	@ (8002648 <HAL_UART_MspInit+0x168>)
 8002558:	f001 fb7e 	bl	8003c58 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800255c:	e06b      	b.n	8002636 <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART2)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a3a      	ldr	r2, [pc, #232]	@ (800264c <HAL_UART_MspInit+0x16c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d12c      	bne.n	80025c2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002568:	2300      	movs	r3, #0
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	4b35      	ldr	r3, [pc, #212]	@ (8002644 <HAL_UART_MspInit+0x164>)
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	4a34      	ldr	r2, [pc, #208]	@ (8002644 <HAL_UART_MspInit+0x164>)
 8002572:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002576:	6413      	str	r3, [r2, #64]	@ 0x40
 8002578:	4b32      	ldr	r3, [pc, #200]	@ (8002644 <HAL_UART_MspInit+0x164>)
 800257a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	4b2e      	ldr	r3, [pc, #184]	@ (8002644 <HAL_UART_MspInit+0x164>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258c:	4a2d      	ldr	r2, [pc, #180]	@ (8002644 <HAL_UART_MspInit+0x164>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6313      	str	r3, [r2, #48]	@ 0x30
 8002594:	4b2b      	ldr	r3, [pc, #172]	@ (8002644 <HAL_UART_MspInit+0x164>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025a0:	230c      	movs	r3, #12
 80025a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ac:	2303      	movs	r3, #3
 80025ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025b0:	2307      	movs	r3, #7
 80025b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025b8:	4619      	mov	r1, r3
 80025ba:	4823      	ldr	r0, [pc, #140]	@ (8002648 <HAL_UART_MspInit+0x168>)
 80025bc:	f001 fb4c 	bl	8003c58 <HAL_GPIO_Init>
}
 80025c0:	e039      	b.n	8002636 <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART3)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a22      	ldr	r2, [pc, #136]	@ (8002650 <HAL_UART_MspInit+0x170>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d134      	bne.n	8002636 <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025cc:	2300      	movs	r3, #0
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002644 <HAL_UART_MspInit+0x164>)
 80025d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002644 <HAL_UART_MspInit+0x164>)
 80025d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025da:	6413      	str	r3, [r2, #64]	@ 0x40
 80025dc:	4b19      	ldr	r3, [pc, #100]	@ (8002644 <HAL_UART_MspInit+0x164>)
 80025de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	4b15      	ldr	r3, [pc, #84]	@ (8002644 <HAL_UART_MspInit+0x164>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f0:	4a14      	ldr	r2, [pc, #80]	@ (8002644 <HAL_UART_MspInit+0x164>)
 80025f2:	f043 0304 	orr.w	r3, r3, #4
 80025f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f8:	4b12      	ldr	r3, [pc, #72]	@ (8002644 <HAL_UART_MspInit+0x164>)
 80025fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002604:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002608:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002612:	2303      	movs	r3, #3
 8002614:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002616:	2307      	movs	r3, #7
 8002618:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800261a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800261e:	4619      	mov	r1, r3
 8002620:	480c      	ldr	r0, [pc, #48]	@ (8002654 <HAL_UART_MspInit+0x174>)
 8002622:	f001 fb19 	bl	8003c58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002626:	2200      	movs	r2, #0
 8002628:	2100      	movs	r1, #0
 800262a:	2027      	movs	r0, #39	@ 0x27
 800262c:	f000 fedb 	bl	80033e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002630:	2027      	movs	r0, #39	@ 0x27
 8002632:	f000 fef4 	bl	800341e <HAL_NVIC_EnableIRQ>
}
 8002636:	bf00      	nop
 8002638:	3738      	adds	r7, #56	@ 0x38
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40011000 	.word	0x40011000
 8002644:	40023800 	.word	0x40023800
 8002648:	40020000 	.word	0x40020000
 800264c:	40004400 	.word	0x40004400
 8002650:	40004800 	.word	0x40004800
 8002654:	40020800 	.word	0x40020800

08002658 <f_user_interface_def>:
 *      Author: ADMIN
 */
#include "user.h"
enum USER_BEHAVIOR user_state = INIT;
uint8_t led_7seg_colon_index = 0;
void f_user_interface_def(){
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
	switch(user_state){
 800265c:	4b86      	ldr	r3, [pc, #536]	@ (8002878 <f_user_interface_def+0x220>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b02      	cmp	r3, #2
 8002662:	f000 8102 	beq.w	800286a <f_user_interface_def+0x212>
 8002666:	2b02      	cmp	r3, #2
 8002668:	f300 8101 	bgt.w	800286e <f_user_interface_def+0x216>
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <f_user_interface_def+0x1e>
 8002670:	2b01      	cmp	r3, #1
 8002672:	d004      	beq.n	800267e <f_user_interface_def+0x26>
			if(cmd_send != 0x00) send_cmd_flag = 1;
			break;
		case SEND_PERIOD:
			break;
		default:
			break;
 8002674:	e0fb      	b.n	800286e <f_user_interface_def+0x216>
			user_state = SEND_MANUAL;
 8002676:	4b80      	ldr	r3, [pc, #512]	@ (8002878 <f_user_interface_def+0x220>)
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]
			break;
 800267c:	e0fa      	b.n	8002874 <f_user_interface_def+0x21c>
			if(isPress(0)){
 800267e:	2000      	movs	r0, #0
 8002680:	f7fe f91c 	bl	80008bc <isPress>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d033      	beq.n	80026f2 <f_user_interface_def+0x9a>
				if(led_7seg_colon_index==0){
 800268a:	4b7c      	ldr	r3, [pc, #496]	@ (800287c <f_user_interface_def+0x224>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d116      	bne.n	80026c0 <f_user_interface_def+0x68>
					slave_address+= 0x10;
 8002692:	4b7b      	ldr	r3, [pc, #492]	@ (8002880 <f_user_interface_def+0x228>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	3310      	adds	r3, #16
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4b79      	ldr	r3, [pc, #484]	@ (8002880 <f_user_interface_def+0x228>)
 800269c:	701a      	strb	r2, [r3, #0]
					led_7seg_set_digit(slave_address>>4, 0, led_7seg_colon_index==0);
 800269e:	4b78      	ldr	r3, [pc, #480]	@ (8002880 <f_user_interface_def+0x228>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	4618      	mov	r0, r3
 80026a8:	4b74      	ldr	r3, [pc, #464]	@ (800287c <f_user_interface_def+0x224>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	bf0c      	ite	eq
 80026b0:	2301      	moveq	r3, #1
 80026b2:	2300      	movne	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	2100      	movs	r1, #0
 80026ba:	f7ff f879 	bl	80017b0 <led_7seg_set_digit>
 80026be:	e018      	b.n	80026f2 <f_user_interface_def+0x9a>
				else if(led_7seg_colon_index==1){
 80026c0:	4b6e      	ldr	r3, [pc, #440]	@ (800287c <f_user_interface_def+0x224>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d114      	bne.n	80026f2 <f_user_interface_def+0x9a>
					slave_address+= 0x01;
 80026c8:	4b6d      	ldr	r3, [pc, #436]	@ (8002880 <f_user_interface_def+0x228>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	3301      	adds	r3, #1
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002880 <f_user_interface_def+0x228>)
 80026d2:	701a      	strb	r2, [r3, #0]
					led_7seg_set_digit(slave_address & 0x0F, 1, led_7seg_colon_index==1);
 80026d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002880 <f_user_interface_def+0x228>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	f003 000f 	and.w	r0, r3, #15
 80026dc:	4b67      	ldr	r3, [pc, #412]	@ (800287c <f_user_interface_def+0x224>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	bf0c      	ite	eq
 80026e4:	2301      	moveq	r3, #1
 80026e6:	2300      	movne	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	461a      	mov	r2, r3
 80026ec:	2101      	movs	r1, #1
 80026ee:	f7ff f85f 	bl	80017b0 <led_7seg_set_digit>
			if(isLongPress(0)){
 80026f2:	2000      	movs	r0, #0
 80026f4:	f7fe f902 	bl	80008fc <isLongPress>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d033      	beq.n	8002766 <f_user_interface_def+0x10e>
				if(led_7seg_colon_index==0){
 80026fe:	4b5f      	ldr	r3, [pc, #380]	@ (800287c <f_user_interface_def+0x224>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d116      	bne.n	8002734 <f_user_interface_def+0xdc>
					slave_address+= 0x50;
 8002706:	4b5e      	ldr	r3, [pc, #376]	@ (8002880 <f_user_interface_def+0x228>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	3350      	adds	r3, #80	@ 0x50
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4b5c      	ldr	r3, [pc, #368]	@ (8002880 <f_user_interface_def+0x228>)
 8002710:	701a      	strb	r2, [r3, #0]
					led_7seg_set_digit(slave_address>>4, 0, led_7seg_colon_index==0);
 8002712:	4b5b      	ldr	r3, [pc, #364]	@ (8002880 <f_user_interface_def+0x228>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	b2db      	uxtb	r3, r3
 800271a:	4618      	mov	r0, r3
 800271c:	4b57      	ldr	r3, [pc, #348]	@ (800287c <f_user_interface_def+0x224>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf0c      	ite	eq
 8002724:	2301      	moveq	r3, #1
 8002726:	2300      	movne	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	2100      	movs	r1, #0
 800272e:	f7ff f83f 	bl	80017b0 <led_7seg_set_digit>
 8002732:	e018      	b.n	8002766 <f_user_interface_def+0x10e>
				else if(led_7seg_colon_index==1){
 8002734:	4b51      	ldr	r3, [pc, #324]	@ (800287c <f_user_interface_def+0x224>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d114      	bne.n	8002766 <f_user_interface_def+0x10e>
					slave_address+= 0x05;
 800273c:	4b50      	ldr	r3, [pc, #320]	@ (8002880 <f_user_interface_def+0x228>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	3305      	adds	r3, #5
 8002742:	b2da      	uxtb	r2, r3
 8002744:	4b4e      	ldr	r3, [pc, #312]	@ (8002880 <f_user_interface_def+0x228>)
 8002746:	701a      	strb	r2, [r3, #0]
					led_7seg_set_digit(slave_address & 0x0F, 1, led_7seg_colon_index==1);
 8002748:	4b4d      	ldr	r3, [pc, #308]	@ (8002880 <f_user_interface_def+0x228>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	f003 000f 	and.w	r0, r3, #15
 8002750:	4b4a      	ldr	r3, [pc, #296]	@ (800287c <f_user_interface_def+0x224>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b01      	cmp	r3, #1
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	2101      	movs	r1, #1
 8002762:	f7ff f825 	bl	80017b0 <led_7seg_set_digit>
			if(isPress(4)){
 8002766:	2004      	movs	r0, #4
 8002768:	f7fe f8a8 	bl	80008bc <isPress>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d02b      	beq.n	80027ca <f_user_interface_def+0x172>
				led_7seg_colon_index++;
 8002772:	4b42      	ldr	r3, [pc, #264]	@ (800287c <f_user_interface_def+0x224>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	3301      	adds	r3, #1
 8002778:	b2da      	uxtb	r2, r3
 800277a:	4b40      	ldr	r3, [pc, #256]	@ (800287c <f_user_interface_def+0x224>)
 800277c:	701a      	strb	r2, [r3, #0]
				if(led_7seg_colon_index > 3) led_7seg_colon_index = 0;
 800277e:	4b3f      	ldr	r3, [pc, #252]	@ (800287c <f_user_interface_def+0x224>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b03      	cmp	r3, #3
 8002784:	d902      	bls.n	800278c <f_user_interface_def+0x134>
 8002786:	4b3d      	ldr	r3, [pc, #244]	@ (800287c <f_user_interface_def+0x224>)
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
				led_7seg_set_digit(slave_address>>4, 0, led_7seg_colon_index==0);
 800278c:	4b3c      	ldr	r3, [pc, #240]	@ (8002880 <f_user_interface_def+0x228>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	b2db      	uxtb	r3, r3
 8002794:	4618      	mov	r0, r3
 8002796:	4b39      	ldr	r3, [pc, #228]	@ (800287c <f_user_interface_def+0x224>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	bf0c      	ite	eq
 800279e:	2301      	moveq	r3, #1
 80027a0:	2300      	movne	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	2100      	movs	r1, #0
 80027a8:	f7ff f802 	bl	80017b0 <led_7seg_set_digit>
				led_7seg_set_digit(slave_address & 0x0F, 1, led_7seg_colon_index==1);
 80027ac:	4b34      	ldr	r3, [pc, #208]	@ (8002880 <f_user_interface_def+0x228>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	f003 000f 	and.w	r0, r3, #15
 80027b4:	4b31      	ldr	r3, [pc, #196]	@ (800287c <f_user_interface_def+0x224>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	bf0c      	ite	eq
 80027bc:	2301      	moveq	r3, #1
 80027be:	2300      	movne	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	2101      	movs	r1, #1
 80027c6:	f7fe fff3 	bl	80017b0 <led_7seg_set_digit>
			if(isPress(1)){
 80027ca:	2001      	movs	r0, #1
 80027cc:	f7fe f876 	bl	80008bc <isPress>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <f_user_interface_def+0x184>
				cmd_send = READ_POTENTION;
 80027d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002884 <f_user_interface_def+0x22c>)
 80027d8:	2206      	movs	r2, #6
 80027da:	701a      	strb	r2, [r3, #0]
			if(isPress(2)){
 80027dc:	2002      	movs	r0, #2
 80027de:	f7fe f86d 	bl	80008bc <isPress>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <f_user_interface_def+0x196>
				cmd_send = READ_POTENTION;
 80027e8:	4b26      	ldr	r3, [pc, #152]	@ (8002884 <f_user_interface_def+0x22c>)
 80027ea:	2206      	movs	r2, #6
 80027ec:	701a      	strb	r2, [r3, #0]
			if(isPress(3)){
 80027ee:	2003      	movs	r0, #3
 80027f0:	f7fe f864 	bl	80008bc <isPress>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <f_user_interface_def+0x1a8>
				cmd_send = READ_LIGHT;
 80027fa:	4b22      	ldr	r3, [pc, #136]	@ (8002884 <f_user_interface_def+0x22c>)
 80027fc:	2204      	movs	r2, #4
 80027fe:	701a      	strb	r2, [r3, #0]
			if(isPress(5)){
 8002800:	2005      	movs	r0, #5
 8002802:	f7fe f85b 	bl	80008bc <isPress>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <f_user_interface_def+0x1ba>
				cmd_send = READ_TEMPERATURE;
 800280c:	4b1d      	ldr	r3, [pc, #116]	@ (8002884 <f_user_interface_def+0x22c>)
 800280e:	2201      	movs	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
			if(isPress(6)){
 8002812:	2006      	movs	r0, #6
 8002814:	f7fe f852 	bl	80008bc <isPress>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <f_user_interface_def+0x1cc>
				cmd_send = READ_CURRENT;
 800281e:	4b19      	ldr	r3, [pc, #100]	@ (8002884 <f_user_interface_def+0x22c>)
 8002820:	2202      	movs	r2, #2
 8002822:	701a      	strb	r2, [r3, #0]
			if(isPress(7)){
 8002824:	2007      	movs	r0, #7
 8002826:	f7fe f849 	bl	80008bc <isPress>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <f_user_interface_def+0x1de>
				cmd_send = READ_VOLTAGE;
 8002830:	4b14      	ldr	r3, [pc, #80]	@ (8002884 <f_user_interface_def+0x22c>)
 8002832:	2203      	movs	r2, #3
 8002834:	701a      	strb	r2, [r3, #0]
			if(isPress(9)){
 8002836:	2009      	movs	r0, #9
 8002838:	f7fe f840 	bl	80008bc <isPress>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <f_user_interface_def+0x1f0>
				cmd_send = READ_LED;
 8002842:	4b10      	ldr	r3, [pc, #64]	@ (8002884 <f_user_interface_def+0x22c>)
 8002844:	2205      	movs	r2, #5
 8002846:	701a      	strb	r2, [r3, #0]
			if(isPress(10)){
 8002848:	200a      	movs	r0, #10
 800284a:	f7fe f837 	bl	80008bc <isPress>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <f_user_interface_def+0x202>
				cmd_send = WRITE_LIGHT;
 8002854:	4b0b      	ldr	r3, [pc, #44]	@ (8002884 <f_user_interface_def+0x22c>)
 8002856:	220a      	movs	r2, #10
 8002858:	701a      	strb	r2, [r3, #0]
			if(cmd_send != 0x00) send_cmd_flag = 1;
 800285a:	4b0a      	ldr	r3, [pc, #40]	@ (8002884 <f_user_interface_def+0x22c>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <f_user_interface_def+0x21a>
 8002862:	4b09      	ldr	r3, [pc, #36]	@ (8002888 <f_user_interface_def+0x230>)
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
			break;
 8002868:	e003      	b.n	8002872 <f_user_interface_def+0x21a>
			break;
 800286a:	bf00      	nop
 800286c:	e002      	b.n	8002874 <f_user_interface_def+0x21c>
			break;
 800286e:	bf00      	nop
 8002870:	e000      	b.n	8002874 <f_user_interface_def+0x21c>
			break;
 8002872:	bf00      	nop
	}
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000824 	.word	0x20000824
 800287c:	20000825 	.word	0x20000825
 8002880:	20000220 	.word	0x20000220
 8002884:	20000424 	.word	0x20000424
 8002888:	20000425 	.word	0x20000425

0800288c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800288c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002890:	f7ff fcc2 	bl	8002218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002894:	480c      	ldr	r0, [pc, #48]	@ (80028c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002896:	490d      	ldr	r1, [pc, #52]	@ (80028cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002898:	4a0d      	ldr	r2, [pc, #52]	@ (80028d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800289a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800289c:	e002      	b.n	80028a4 <LoopCopyDataInit>

0800289e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800289e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028a2:	3304      	adds	r3, #4

080028a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a8:	d3f9      	bcc.n	800289e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028aa:	4a0a      	ldr	r2, [pc, #40]	@ (80028d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028ac:	4c0a      	ldr	r4, [pc, #40]	@ (80028d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b0:	e001      	b.n	80028b6 <LoopFillZerobss>

080028b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b4:	3204      	adds	r2, #4

080028b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b8:	d3fb      	bcc.n	80028b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ba:	f004 fa5d 	bl	8006d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028be:	f7fe fff1 	bl	80018a4 <main>
  bx  lr    
 80028c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028cc:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 80028d0:	08009dc8 	.word	0x08009dc8
  ldr r2, =_sbss
 80028d4:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 80028d8:	2000082c 	.word	0x2000082c

080028dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028dc:	e7fe      	b.n	80028dc <ADC_IRQHandler>
	...

080028e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002920 <HAL_Init+0x40>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002920 <HAL_Init+0x40>)
 80028ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002920 <HAL_Init+0x40>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002920 <HAL_Init+0x40>)
 80028f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028fc:	4b08      	ldr	r3, [pc, #32]	@ (8002920 <HAL_Init+0x40>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a07      	ldr	r2, [pc, #28]	@ (8002920 <HAL_Init+0x40>)
 8002902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002906:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002908:	2003      	movs	r0, #3
 800290a:	f000 fd61 	bl	80033d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800290e:	200f      	movs	r0, #15
 8002910:	f000 f808 	bl	8002924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002914:	f7ff fc0a 	bl	800212c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023c00 	.word	0x40023c00

08002924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800292c:	4b12      	ldr	r3, [pc, #72]	@ (8002978 <HAL_InitTick+0x54>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b12      	ldr	r3, [pc, #72]	@ (800297c <HAL_InitTick+0x58>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	4619      	mov	r1, r3
 8002936:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800293a:	fbb3 f3f1 	udiv	r3, r3, r1
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fd79 	bl	800343a <HAL_SYSTICK_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e00e      	b.n	8002970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b0f      	cmp	r3, #15
 8002956:	d80a      	bhi.n	800296e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002958:	2200      	movs	r2, #0
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	f04f 30ff 	mov.w	r0, #4294967295
 8002960:	f000 fd41 	bl	80033e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002964:	4a06      	ldr	r2, [pc, #24]	@ (8002980 <HAL_InitTick+0x5c>)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e000      	b.n	8002970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	2000023c 	.word	0x2000023c
 800297c:	20000244 	.word	0x20000244
 8002980:	20000240 	.word	0x20000240

08002984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002988:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <HAL_IncTick+0x20>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <HAL_IncTick+0x24>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4413      	add	r3, r2
 8002994:	4a04      	ldr	r2, [pc, #16]	@ (80029a8 <HAL_IncTick+0x24>)
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000244 	.word	0x20000244
 80029a8:	20000828 	.word	0x20000828

080029ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return uwTick;
 80029b0:	4b03      	ldr	r3, [pc, #12]	@ (80029c0 <HAL_GetTick+0x14>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000828 	.word	0x20000828

080029c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029cc:	f7ff ffee 	bl	80029ac <HAL_GetTick>
 80029d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d005      	beq.n	80029ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029de:	4b0a      	ldr	r3, [pc, #40]	@ (8002a08 <HAL_Delay+0x44>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4413      	add	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029ea:	bf00      	nop
 80029ec:	f7ff ffde 	bl	80029ac <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d8f7      	bhi.n	80029ec <HAL_Delay+0x28>
  {
  }
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000244 	.word	0x20000244

08002a0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e033      	b.n	8002a8a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fd fdc6 	bl	80005bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d118      	bne.n	8002a7c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a52:	f023 0302 	bic.w	r3, r3, #2
 8002a56:	f043 0202 	orr.w	r2, r3, #2
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fa68 	bl	8002f34 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	f023 0303 	bic.w	r3, r3, #3
 8002a72:	f043 0201 	orr.w	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a7a:	e001      	b.n	8002a80 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_Start_DMA+0x1e>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e0e9      	b.n	8002c86 <HAL_ADC_Start_DMA+0x1f2>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d018      	beq.n	8002afa <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ad8:	4b6d      	ldr	r3, [pc, #436]	@ (8002c90 <HAL_ADC_Start_DMA+0x1fc>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a6d      	ldr	r2, [pc, #436]	@ (8002c94 <HAL_ADC_Start_DMA+0x200>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	0c9a      	lsrs	r2, r3, #18
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002aec:	e002      	b.n	8002af4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f9      	bne.n	8002aee <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b08:	d107      	bne.n	8002b1a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b18:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	f040 80a1 	bne.w	8002c6c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002b32:	f023 0301 	bic.w	r3, r3, #1
 8002b36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b54:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b68:	d106      	bne.n	8002b78 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	f023 0206 	bic.w	r2, r3, #6
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b76:	e002      	b.n	8002b7e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b86:	4b44      	ldr	r3, [pc, #272]	@ (8002c98 <HAL_ADC_Start_DMA+0x204>)
 8002b88:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8e:	4a43      	ldr	r2, [pc, #268]	@ (8002c9c <HAL_ADC_Start_DMA+0x208>)
 8002b90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b96:	4a42      	ldr	r2, [pc, #264]	@ (8002ca0 <HAL_ADC_Start_DMA+0x20c>)
 8002b98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9e:	4a41      	ldr	r2, [pc, #260]	@ (8002ca4 <HAL_ADC_Start_DMA+0x210>)
 8002ba0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002baa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002bba:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bca:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	334c      	adds	r3, #76	@ 0x4c
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f000 fce8 	bl	80035b0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d12a      	bne.n	8002c42 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a2d      	ldr	r2, [pc, #180]	@ (8002ca8 <HAL_ADC_Start_DMA+0x214>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d015      	beq.n	8002c22 <HAL_ADC_Start_DMA+0x18e>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a2c      	ldr	r2, [pc, #176]	@ (8002cac <HAL_ADC_Start_DMA+0x218>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d105      	bne.n	8002c0c <HAL_ADC_Start_DMA+0x178>
 8002c00:	4b25      	ldr	r3, [pc, #148]	@ (8002c98 <HAL_ADC_Start_DMA+0x204>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a27      	ldr	r2, [pc, #156]	@ (8002cb0 <HAL_ADC_Start_DMA+0x21c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d136      	bne.n	8002c84 <HAL_ADC_Start_DMA+0x1f0>
 8002c16:	4b20      	ldr	r3, [pc, #128]	@ (8002c98 <HAL_ADC_Start_DMA+0x204>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d130      	bne.n	8002c84 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d129      	bne.n	8002c84 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	e020      	b.n	8002c84 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a18      	ldr	r2, [pc, #96]	@ (8002ca8 <HAL_ADC_Start_DMA+0x214>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d11b      	bne.n	8002c84 <HAL_ADC_Start_DMA+0x1f0>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d114      	bne.n	8002c84 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	e00b      	b.n	8002c84 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	f043 0210 	orr.w	r2, r3, #16
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7c:	f043 0201 	orr.w	r2, r3, #1
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	2000023c 	.word	0x2000023c
 8002c94:	431bde83 	.word	0x431bde83
 8002c98:	40012300 	.word	0x40012300
 8002c9c:	0800312d 	.word	0x0800312d
 8002ca0:	080031e7 	.word	0x080031e7
 8002ca4:	08003203 	.word	0x08003203
 8002ca8:	40012000 	.word	0x40012000
 8002cac:	40012100 	.word	0x40012100
 8002cb0:	40012200 	.word	0x40012200

08002cb4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x1c>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e105      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x228>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b09      	cmp	r3, #9
 8002d1a:	d925      	bls.n	8002d68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68d9      	ldr	r1, [r3, #12]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	4413      	add	r3, r2
 8002d30:	3b1e      	subs	r3, #30
 8002d32:	2207      	movs	r2, #7
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43da      	mvns	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	400a      	ands	r2, r1
 8002d40:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68d9      	ldr	r1, [r3, #12]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	4618      	mov	r0, r3
 8002d54:	4603      	mov	r3, r0
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4403      	add	r3, r0
 8002d5a:	3b1e      	subs	r3, #30
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	e022      	b.n	8002dae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6919      	ldr	r1, [r3, #16]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	461a      	mov	r2, r3
 8002d76:	4613      	mov	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	2207      	movs	r2, #7
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43da      	mvns	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	400a      	ands	r2, r1
 8002d8a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6919      	ldr	r1, [r3, #16]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	4603      	mov	r3, r0
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4403      	add	r3, r0
 8002da4:	409a      	lsls	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b06      	cmp	r3, #6
 8002db4:	d824      	bhi.n	8002e00 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3b05      	subs	r3, #5
 8002dc8:	221f      	movs	r2, #31
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	400a      	ands	r2, r1
 8002dd6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	4618      	mov	r0, r3
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	3b05      	subs	r3, #5
 8002df2:	fa00 f203 	lsl.w	r2, r0, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dfe:	e04c      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b0c      	cmp	r3, #12
 8002e06:	d824      	bhi.n	8002e52 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	3b23      	subs	r3, #35	@ 0x23
 8002e1a:	221f      	movs	r2, #31
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43da      	mvns	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	400a      	ands	r2, r1
 8002e28:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	4618      	mov	r0, r3
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	3b23      	subs	r3, #35	@ 0x23
 8002e44:	fa00 f203 	lsl.w	r2, r0, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e50:	e023      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	3b41      	subs	r3, #65	@ 0x41
 8002e64:	221f      	movs	r2, #31
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43da      	mvns	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	400a      	ands	r2, r1
 8002e72:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	4618      	mov	r0, r3
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3b41      	subs	r3, #65	@ 0x41
 8002e8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e9a:	4b22      	ldr	r3, [pc, #136]	@ (8002f24 <HAL_ADC_ConfigChannel+0x234>)
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a21      	ldr	r2, [pc, #132]	@ (8002f28 <HAL_ADC_ConfigChannel+0x238>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d109      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x1cc>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b12      	cmp	r3, #18
 8002eae:	d105      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a19      	ldr	r2, [pc, #100]	@ (8002f28 <HAL_ADC_ConfigChannel+0x238>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d123      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x21e>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b10      	cmp	r3, #16
 8002ecc:	d003      	beq.n	8002ed6 <HAL_ADC_ConfigChannel+0x1e6>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b11      	cmp	r3, #17
 8002ed4:	d11b      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b10      	cmp	r3, #16
 8002ee8:	d111      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eea:	4b10      	ldr	r3, [pc, #64]	@ (8002f2c <HAL_ADC_ConfigChannel+0x23c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a10      	ldr	r2, [pc, #64]	@ (8002f30 <HAL_ADC_ConfigChannel+0x240>)
 8002ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef4:	0c9a      	lsrs	r2, r3, #18
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f00:	e002      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f9      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	40012300 	.word	0x40012300
 8002f28:	40012000 	.word	0x40012000
 8002f2c:	2000023c 	.word	0x2000023c
 8002f30:	431bde83 	.word	0x431bde83

08002f34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f3c:	4b79      	ldr	r3, [pc, #484]	@ (8003124 <ADC_Init+0x1f0>)
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	021a      	lsls	r2, r3, #8
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6859      	ldr	r1, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6899      	ldr	r1, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc6:	4a58      	ldr	r2, [pc, #352]	@ (8003128 <ADC_Init+0x1f4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d022      	beq.n	8003012 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6899      	ldr	r1, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ffc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6899      	ldr	r1, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	e00f      	b.n	8003032 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003020:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003030:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0202 	bic.w	r2, r2, #2
 8003040:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6899      	ldr	r1, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	7e1b      	ldrb	r3, [r3, #24]
 800304c:	005a      	lsls	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3020 	ldrb.w	r3, [r3, #32]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01b      	beq.n	8003098 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800306e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800307e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6859      	ldr	r1, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	3b01      	subs	r3, #1
 800308c:	035a      	lsls	r2, r3, #13
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	e007      	b.n	80030a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030a6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80030b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	051a      	lsls	r2, r3, #20
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80030dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6899      	ldr	r1, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030ea:	025a      	lsls	r2, r3, #9
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003102:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6899      	ldr	r1, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	029a      	lsls	r2, r3, #10
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	609a      	str	r2, [r3, #8]
}
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	40012300 	.word	0x40012300
 8003128:	0f000001 	.word	0x0f000001

0800312c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003138:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003142:	2b00      	cmp	r3, #0
 8003144:	d13c      	bne.n	80031c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d12b      	bne.n	80031b8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003164:	2b00      	cmp	r3, #0
 8003166:	d127      	bne.n	80031b8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003172:	2b00      	cmp	r3, #0
 8003174:	d006      	beq.n	8003184 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003180:	2b00      	cmp	r3, #0
 8003182:	d119      	bne.n	80031b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0220 	bic.w	r2, r2, #32
 8003192:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d105      	bne.n	80031b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	f043 0201 	orr.w	r2, r3, #1
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f7ff fd7b 	bl	8002cb4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031be:	e00e      	b.n	80031de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f7ff fd85 	bl	8002cdc <HAL_ADC_ErrorCallback>
}
 80031d2:	e004      	b.n	80031de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	4798      	blx	r3
}
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b084      	sub	sp, #16
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f7ff fd67 	bl	8002cc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031fa:	bf00      	nop
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2240      	movs	r2, #64	@ 0x40
 8003214:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321a:	f043 0204 	orr.w	r2, r3, #4
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f7ff fd5a 	bl	8002cdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003228:	bf00      	nop
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003240:	4b0c      	ldr	r3, [pc, #48]	@ (8003274 <__NVIC_SetPriorityGrouping+0x44>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800324c:	4013      	ands	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003258:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800325c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003262:	4a04      	ldr	r2, [pc, #16]	@ (8003274 <__NVIC_SetPriorityGrouping+0x44>)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	60d3      	str	r3, [r2, #12]
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800327c:	4b04      	ldr	r3, [pc, #16]	@ (8003290 <__NVIC_GetPriorityGrouping+0x18>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	0a1b      	lsrs	r3, r3, #8
 8003282:	f003 0307 	and.w	r3, r3, #7
}
 8003286:	4618      	mov	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	db0b      	blt.n	80032be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	4907      	ldr	r1, [pc, #28]	@ (80032cc <__NVIC_EnableIRQ+0x38>)
 80032ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	2001      	movs	r0, #1
 80032b6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	e000e100 	.word	0xe000e100

080032d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	6039      	str	r1, [r7, #0]
 80032da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	db0a      	blt.n	80032fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	490c      	ldr	r1, [pc, #48]	@ (800331c <__NVIC_SetPriority+0x4c>)
 80032ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ee:	0112      	lsls	r2, r2, #4
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	440b      	add	r3, r1
 80032f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f8:	e00a      	b.n	8003310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	4908      	ldr	r1, [pc, #32]	@ (8003320 <__NVIC_SetPriority+0x50>)
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	3b04      	subs	r3, #4
 8003308:	0112      	lsls	r2, r2, #4
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	440b      	add	r3, r1
 800330e:	761a      	strb	r2, [r3, #24]
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	e000e100 	.word	0xe000e100
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003324:	b480      	push	{r7}
 8003326:	b089      	sub	sp, #36	@ 0x24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f1c3 0307 	rsb	r3, r3, #7
 800333e:	2b04      	cmp	r3, #4
 8003340:	bf28      	it	cs
 8003342:	2304      	movcs	r3, #4
 8003344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3304      	adds	r3, #4
 800334a:	2b06      	cmp	r3, #6
 800334c:	d902      	bls.n	8003354 <NVIC_EncodePriority+0x30>
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	3b03      	subs	r3, #3
 8003352:	e000      	b.n	8003356 <NVIC_EncodePriority+0x32>
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003358:	f04f 32ff 	mov.w	r2, #4294967295
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43da      	mvns	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	401a      	ands	r2, r3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800336c:	f04f 31ff 	mov.w	r1, #4294967295
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	fa01 f303 	lsl.w	r3, r1, r3
 8003376:	43d9      	mvns	r1, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800337c:	4313      	orrs	r3, r2
         );
}
 800337e:	4618      	mov	r0, r3
 8003380:	3724      	adds	r7, #36	@ 0x24
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3b01      	subs	r3, #1
 8003398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800339c:	d301      	bcc.n	80033a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800339e:	2301      	movs	r3, #1
 80033a0:	e00f      	b.n	80033c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033a2:	4a0a      	ldr	r2, [pc, #40]	@ (80033cc <SysTick_Config+0x40>)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033aa:	210f      	movs	r1, #15
 80033ac:	f04f 30ff 	mov.w	r0, #4294967295
 80033b0:	f7ff ff8e 	bl	80032d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033b4:	4b05      	ldr	r3, [pc, #20]	@ (80033cc <SysTick_Config+0x40>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ba:	4b04      	ldr	r3, [pc, #16]	@ (80033cc <SysTick_Config+0x40>)
 80033bc:	2207      	movs	r2, #7
 80033be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	e000e010 	.word	0xe000e010

080033d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff ff29 	bl	8003230 <__NVIC_SetPriorityGrouping>
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b086      	sub	sp, #24
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	4603      	mov	r3, r0
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033f8:	f7ff ff3e 	bl	8003278 <__NVIC_GetPriorityGrouping>
 80033fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	6978      	ldr	r0, [r7, #20]
 8003404:	f7ff ff8e 	bl	8003324 <NVIC_EncodePriority>
 8003408:	4602      	mov	r2, r0
 800340a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340e:	4611      	mov	r1, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ff5d 	bl	80032d0 <__NVIC_SetPriority>
}
 8003416:	bf00      	nop
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	4603      	mov	r3, r0
 8003426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff31 	bl	8003294 <__NVIC_EnableIRQ>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ffa2 	bl	800338c <SysTick_Config>
 8003448:	4603      	mov	r3, r0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003460:	f7ff faa4 	bl	80029ac <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e099      	b.n	80035a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0201 	bic.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003490:	e00f      	b.n	80034b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003492:	f7ff fa8b 	bl	80029ac <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b05      	cmp	r3, #5
 800349e:	d908      	bls.n	80034b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2203      	movs	r2, #3
 80034aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e078      	b.n	80035a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1e8      	bne.n	8003492 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4b38      	ldr	r3, [pc, #224]	@ (80035ac <HAL_DMA_Init+0x158>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	2b04      	cmp	r3, #4
 800350a:	d107      	bne.n	800351c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003514:	4313      	orrs	r3, r2
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f023 0307 	bic.w	r3, r3, #7
 8003532:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003542:	2b04      	cmp	r3, #4
 8003544:	d117      	bne.n	8003576 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00e      	beq.n	8003576 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fb01 	bl	8003b60 <DMA_CheckFifoParam>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2240      	movs	r2, #64	@ 0x40
 8003568:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003572:	2301      	movs	r3, #1
 8003574:	e016      	b.n	80035a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fab8 	bl	8003af4 <DMA_CalcBaseAndBitshift>
 8003584:	4603      	mov	r3, r0
 8003586:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800358c:	223f      	movs	r2, #63	@ 0x3f
 800358e:	409a      	lsls	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	f010803f 	.word	0xf010803f

080035b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_DMA_Start_IT+0x26>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e040      	b.n	8003658 <HAL_DMA_Start_IT+0xa8>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d12f      	bne.n	800364a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2202      	movs	r2, #2
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fa4a 	bl	8003a98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003608:	223f      	movs	r2, #63	@ 0x3f
 800360a:	409a      	lsls	r2, r3
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0216 	orr.w	r2, r2, #22
 800361e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0208 	orr.w	r2, r2, #8
 8003636:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e005      	b.n	8003656 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003652:	2302      	movs	r3, #2
 8003654:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003656:	7dfb      	ldrb	r3, [r7, #23]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800366e:	f7ff f99d 	bl	80029ac <HAL_GetTick>
 8003672:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d008      	beq.n	8003692 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2280      	movs	r2, #128	@ 0x80
 8003684:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e052      	b.n	8003738 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0216 	bic.w	r2, r2, #22
 80036a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d103      	bne.n	80036c2 <HAL_DMA_Abort+0x62>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0208 	bic.w	r2, r2, #8
 80036d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0201 	bic.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036e2:	e013      	b.n	800370c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036e4:	f7ff f962 	bl	80029ac <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b05      	cmp	r3, #5
 80036f0:	d90c      	bls.n	800370c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2220      	movs	r2, #32
 80036f6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2203      	movs	r2, #3
 80036fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e015      	b.n	8003738 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e4      	bne.n	80036e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371e:	223f      	movs	r2, #63	@ 0x3f
 8003720:	409a      	lsls	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d004      	beq.n	800375e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2280      	movs	r2, #128	@ 0x80
 8003758:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e00c      	b.n	8003778 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2205      	movs	r2, #5
 8003762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0201 	bic.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003790:	4b8e      	ldr	r3, [pc, #568]	@ (80039cc <HAL_DMA_IRQHandler+0x248>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a8e      	ldr	r2, [pc, #568]	@ (80039d0 <HAL_DMA_IRQHandler+0x24c>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	0a9b      	lsrs	r3, r3, #10
 800379c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ae:	2208      	movs	r2, #8
 80037b0:	409a      	lsls	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d01a      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d013      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0204 	bic.w	r2, r2, #4
 80037d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037dc:	2208      	movs	r2, #8
 80037de:	409a      	lsls	r2, r3
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e8:	f043 0201 	orr.w	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f4:	2201      	movs	r2, #1
 80037f6:	409a      	lsls	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4013      	ands	r3, r2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d012      	beq.n	8003826 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00b      	beq.n	8003826 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003812:	2201      	movs	r2, #1
 8003814:	409a      	lsls	r2, r3
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381e:	f043 0202 	orr.w	r2, r3, #2
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382a:	2204      	movs	r2, #4
 800382c:	409a      	lsls	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4013      	ands	r3, r2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d012      	beq.n	800385c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00b      	beq.n	800385c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003848:	2204      	movs	r2, #4
 800384a:	409a      	lsls	r2, r3
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003854:	f043 0204 	orr.w	r2, r3, #4
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003860:	2210      	movs	r2, #16
 8003862:	409a      	lsls	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d043      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d03c      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387e:	2210      	movs	r2, #16
 8003880:	409a      	lsls	r2, r3
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d018      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d108      	bne.n	80038b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d024      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	4798      	blx	r3
 80038b2:	e01f      	b.n	80038f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d01b      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
 80038c4:	e016      	b.n	80038f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d107      	bne.n	80038e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0208 	bic.w	r2, r2, #8
 80038e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f8:	2220      	movs	r2, #32
 80038fa:	409a      	lsls	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4013      	ands	r3, r2
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 808f 	beq.w	8003a24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8087 	beq.w	8003a24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391a:	2220      	movs	r2, #32
 800391c:	409a      	lsls	r2, r3
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b05      	cmp	r3, #5
 800392c:	d136      	bne.n	800399c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0216 	bic.w	r2, r2, #22
 800393c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695a      	ldr	r2, [r3, #20]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800394c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	2b00      	cmp	r3, #0
 8003954:	d103      	bne.n	800395e <HAL_DMA_IRQHandler+0x1da>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800395a:	2b00      	cmp	r3, #0
 800395c:	d007      	beq.n	800396e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0208 	bic.w	r2, r2, #8
 800396c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003972:	223f      	movs	r2, #63	@ 0x3f
 8003974:	409a      	lsls	r2, r3
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800398e:	2b00      	cmp	r3, #0
 8003990:	d07e      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	4798      	blx	r3
        }
        return;
 800399a:	e079      	b.n	8003a90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d01d      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10d      	bne.n	80039d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d031      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	4798      	blx	r3
 80039c8:	e02c      	b.n	8003a24 <HAL_DMA_IRQHandler+0x2a0>
 80039ca:	bf00      	nop
 80039cc:	2000023c 	.word	0x2000023c
 80039d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d023      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	4798      	blx	r3
 80039e4:	e01e      	b.n	8003a24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10f      	bne.n	8003a14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0210 	bic.w	r2, r2, #16
 8003a02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d032      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d022      	beq.n	8003a7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2205      	movs	r2, #5
 8003a3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	3301      	adds	r3, #1
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d307      	bcc.n	8003a6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f2      	bne.n	8003a50 <HAL_DMA_IRQHandler+0x2cc>
 8003a6a:	e000      	b.n	8003a6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	4798      	blx	r3
 8003a8e:	e000      	b.n	8003a92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a90:	bf00      	nop
    }
  }
}
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ab4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b40      	cmp	r3, #64	@ 0x40
 8003ac4:	d108      	bne.n	8003ad8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ad6:	e007      	b.n	8003ae8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	60da      	str	r2, [r3, #12]
}
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	3b10      	subs	r3, #16
 8003b04:	4a14      	ldr	r2, [pc, #80]	@ (8003b58 <DMA_CalcBaseAndBitshift+0x64>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	091b      	lsrs	r3, r3, #4
 8003b0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b0e:	4a13      	ldr	r2, [pc, #76]	@ (8003b5c <DMA_CalcBaseAndBitshift+0x68>)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4413      	add	r3, r2
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d909      	bls.n	8003b36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b2a:	f023 0303 	bic.w	r3, r3, #3
 8003b2e:	1d1a      	adds	r2, r3, #4
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b34:	e007      	b.n	8003b46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b3e:	f023 0303 	bic.w	r3, r3, #3
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	aaaaaaab 	.word	0xaaaaaaab
 8003b5c:	08009db0 	.word	0x08009db0

08003b60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d11f      	bne.n	8003bba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d856      	bhi.n	8003c2e <DMA_CheckFifoParam+0xce>
 8003b80:	a201      	add	r2, pc, #4	@ (adr r2, 8003b88 <DMA_CheckFifoParam+0x28>)
 8003b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b86:	bf00      	nop
 8003b88:	08003b99 	.word	0x08003b99
 8003b8c:	08003bab 	.word	0x08003bab
 8003b90:	08003b99 	.word	0x08003b99
 8003b94:	08003c2f 	.word	0x08003c2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d046      	beq.n	8003c32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba8:	e043      	b.n	8003c32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003bb2:	d140      	bne.n	8003c36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb8:	e03d      	b.n	8003c36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bc2:	d121      	bne.n	8003c08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d837      	bhi.n	8003c3a <DMA_CheckFifoParam+0xda>
 8003bca:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd0 <DMA_CheckFifoParam+0x70>)
 8003bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd0:	08003be1 	.word	0x08003be1
 8003bd4:	08003be7 	.word	0x08003be7
 8003bd8:	08003be1 	.word	0x08003be1
 8003bdc:	08003bf9 	.word	0x08003bf9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
      break;
 8003be4:	e030      	b.n	8003c48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d025      	beq.n	8003c3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bf6:	e022      	b.n	8003c3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c00:	d11f      	bne.n	8003c42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c06:	e01c      	b.n	8003c42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d903      	bls.n	8003c16 <DMA_CheckFifoParam+0xb6>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d003      	beq.n	8003c1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c14:	e018      	b.n	8003c48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	73fb      	strb	r3, [r7, #15]
      break;
 8003c1a:	e015      	b.n	8003c48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00e      	beq.n	8003c46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c2c:	e00b      	b.n	8003c46 <DMA_CheckFifoParam+0xe6>
      break;
 8003c2e:	bf00      	nop
 8003c30:	e00a      	b.n	8003c48 <DMA_CheckFifoParam+0xe8>
      break;
 8003c32:	bf00      	nop
 8003c34:	e008      	b.n	8003c48 <DMA_CheckFifoParam+0xe8>
      break;
 8003c36:	bf00      	nop
 8003c38:	e006      	b.n	8003c48 <DMA_CheckFifoParam+0xe8>
      break;
 8003c3a:	bf00      	nop
 8003c3c:	e004      	b.n	8003c48 <DMA_CheckFifoParam+0xe8>
      break;
 8003c3e:	bf00      	nop
 8003c40:	e002      	b.n	8003c48 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c42:	bf00      	nop
 8003c44:	e000      	b.n	8003c48 <DMA_CheckFifoParam+0xe8>
      break;
 8003c46:	bf00      	nop
    }
  } 
  
  return status; 
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop

08003c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b089      	sub	sp, #36	@ 0x24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	e16b      	b.n	8003f4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c74:	2201      	movs	r2, #1
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4013      	ands	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	f040 815a 	bne.w	8003f46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d005      	beq.n	8003caa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d130      	bne.n	8003d0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 0201 	and.w	r2, r3, #1
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d017      	beq.n	8003d48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	2203      	movs	r2, #3
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d123      	bne.n	8003d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	08da      	lsrs	r2, r3, #3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3208      	adds	r2, #8
 8003d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	220f      	movs	r2, #15
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	08da      	lsrs	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3208      	adds	r2, #8
 8003d96:	69b9      	ldr	r1, [r7, #24]
 8003d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	2203      	movs	r2, #3
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4013      	ands	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 0203 	and.w	r2, r3, #3
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80b4 	beq.w	8003f46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	4b60      	ldr	r3, [pc, #384]	@ (8003f64 <HAL_GPIO_Init+0x30c>)
 8003de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de6:	4a5f      	ldr	r2, [pc, #380]	@ (8003f64 <HAL_GPIO_Init+0x30c>)
 8003de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dee:	4b5d      	ldr	r3, [pc, #372]	@ (8003f64 <HAL_GPIO_Init+0x30c>)
 8003df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dfa:	4a5b      	ldr	r2, [pc, #364]	@ (8003f68 <HAL_GPIO_Init+0x310>)
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	3302      	adds	r3, #2
 8003e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	220f      	movs	r2, #15
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43db      	mvns	r3, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a52      	ldr	r2, [pc, #328]	@ (8003f6c <HAL_GPIO_Init+0x314>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d02b      	beq.n	8003e7e <HAL_GPIO_Init+0x226>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a51      	ldr	r2, [pc, #324]	@ (8003f70 <HAL_GPIO_Init+0x318>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d025      	beq.n	8003e7a <HAL_GPIO_Init+0x222>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a50      	ldr	r2, [pc, #320]	@ (8003f74 <HAL_GPIO_Init+0x31c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01f      	beq.n	8003e76 <HAL_GPIO_Init+0x21e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a4f      	ldr	r2, [pc, #316]	@ (8003f78 <HAL_GPIO_Init+0x320>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d019      	beq.n	8003e72 <HAL_GPIO_Init+0x21a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a4e      	ldr	r2, [pc, #312]	@ (8003f7c <HAL_GPIO_Init+0x324>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <HAL_GPIO_Init+0x216>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a4d      	ldr	r2, [pc, #308]	@ (8003f80 <HAL_GPIO_Init+0x328>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00d      	beq.n	8003e6a <HAL_GPIO_Init+0x212>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a4c      	ldr	r2, [pc, #304]	@ (8003f84 <HAL_GPIO_Init+0x32c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d007      	beq.n	8003e66 <HAL_GPIO_Init+0x20e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a4b      	ldr	r2, [pc, #300]	@ (8003f88 <HAL_GPIO_Init+0x330>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d101      	bne.n	8003e62 <HAL_GPIO_Init+0x20a>
 8003e5e:	2307      	movs	r3, #7
 8003e60:	e00e      	b.n	8003e80 <HAL_GPIO_Init+0x228>
 8003e62:	2308      	movs	r3, #8
 8003e64:	e00c      	b.n	8003e80 <HAL_GPIO_Init+0x228>
 8003e66:	2306      	movs	r3, #6
 8003e68:	e00a      	b.n	8003e80 <HAL_GPIO_Init+0x228>
 8003e6a:	2305      	movs	r3, #5
 8003e6c:	e008      	b.n	8003e80 <HAL_GPIO_Init+0x228>
 8003e6e:	2304      	movs	r3, #4
 8003e70:	e006      	b.n	8003e80 <HAL_GPIO_Init+0x228>
 8003e72:	2303      	movs	r3, #3
 8003e74:	e004      	b.n	8003e80 <HAL_GPIO_Init+0x228>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e002      	b.n	8003e80 <HAL_GPIO_Init+0x228>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <HAL_GPIO_Init+0x228>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	f002 0203 	and.w	r2, r2, #3
 8003e86:	0092      	lsls	r2, r2, #2
 8003e88:	4093      	lsls	r3, r2
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e90:	4935      	ldr	r1, [pc, #212]	@ (8003f68 <HAL_GPIO_Init+0x310>)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	3302      	adds	r3, #2
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e9e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f8c <HAL_GPIO_Init+0x334>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ec2:	4a32      	ldr	r2, [pc, #200]	@ (8003f8c <HAL_GPIO_Init+0x334>)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ec8:	4b30      	ldr	r3, [pc, #192]	@ (8003f8c <HAL_GPIO_Init+0x334>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003eec:	4a27      	ldr	r2, [pc, #156]	@ (8003f8c <HAL_GPIO_Init+0x334>)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ef2:	4b26      	ldr	r3, [pc, #152]	@ (8003f8c <HAL_GPIO_Init+0x334>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f16:	4a1d      	ldr	r2, [pc, #116]	@ (8003f8c <HAL_GPIO_Init+0x334>)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f8c <HAL_GPIO_Init+0x334>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f40:	4a12      	ldr	r2, [pc, #72]	@ (8003f8c <HAL_GPIO_Init+0x334>)
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	2b0f      	cmp	r3, #15
 8003f50:	f67f ae90 	bls.w	8003c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	3724      	adds	r7, #36	@ 0x24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40013800 	.word	0x40013800
 8003f6c:	40020000 	.word	0x40020000
 8003f70:	40020400 	.word	0x40020400
 8003f74:	40020800 	.word	0x40020800
 8003f78:	40020c00 	.word	0x40020c00
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40021400 	.word	0x40021400
 8003f84:	40021800 	.word	0x40021800
 8003f88:	40021c00 	.word	0x40021c00
 8003f8c:	40013c00 	.word	0x40013c00

08003f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	807b      	strh	r3, [r7, #2]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fa0:	787b      	ldrb	r3, [r7, #1]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fa6:	887a      	ldrh	r2, [r7, #2]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fac:	e003      	b.n	8003fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fae:	887b      	ldrh	r3, [r7, #2]
 8003fb0:	041a      	lsls	r2, r3, #16
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	619a      	str	r2, [r3, #24]
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
	...

08003fc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e267      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d075      	beq.n	80040ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fe2:	4b88      	ldr	r3, [pc, #544]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d00c      	beq.n	8004008 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fee:	4b85      	ldr	r3, [pc, #532]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d112      	bne.n	8004020 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ffa:	4b82      	ldr	r3, [pc, #520]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004002:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004006:	d10b      	bne.n	8004020 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004008:	4b7e      	ldr	r3, [pc, #504]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d05b      	beq.n	80040cc <HAL_RCC_OscConfig+0x108>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d157      	bne.n	80040cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e242      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004028:	d106      	bne.n	8004038 <HAL_RCC_OscConfig+0x74>
 800402a:	4b76      	ldr	r3, [pc, #472]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a75      	ldr	r2, [pc, #468]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 8004030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	e01d      	b.n	8004074 <HAL_RCC_OscConfig+0xb0>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004040:	d10c      	bne.n	800405c <HAL_RCC_OscConfig+0x98>
 8004042:	4b70      	ldr	r3, [pc, #448]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a6f      	ldr	r2, [pc, #444]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 8004048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	4b6d      	ldr	r3, [pc, #436]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a6c      	ldr	r2, [pc, #432]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 8004054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	e00b      	b.n	8004074 <HAL_RCC_OscConfig+0xb0>
 800405c:	4b69      	ldr	r3, [pc, #420]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a68      	ldr	r2, [pc, #416]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 8004062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	4b66      	ldr	r3, [pc, #408]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a65      	ldr	r2, [pc, #404]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 800406e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d013      	beq.n	80040a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fe fc96 	bl	80029ac <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004084:	f7fe fc92 	bl	80029ac <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b64      	cmp	r3, #100	@ 0x64
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e207      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004096:	4b5b      	ldr	r3, [pc, #364]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0xc0>
 80040a2:	e014      	b.n	80040ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7fe fc82 	bl	80029ac <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040ac:	f7fe fc7e 	bl	80029ac <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	@ 0x64
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e1f3      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040be:	4b51      	ldr	r3, [pc, #324]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f0      	bne.n	80040ac <HAL_RCC_OscConfig+0xe8>
 80040ca:	e000      	b.n	80040ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d063      	beq.n	80041a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040da:	4b4a      	ldr	r3, [pc, #296]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00b      	beq.n	80040fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040e6:	4b47      	ldr	r3, [pc, #284]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d11c      	bne.n	800412c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040f2:	4b44      	ldr	r3, [pc, #272]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d116      	bne.n	800412c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040fe:	4b41      	ldr	r3, [pc, #260]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <HAL_RCC_OscConfig+0x152>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d001      	beq.n	8004116 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e1c7      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004116:	4b3b      	ldr	r3, [pc, #236]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	4937      	ldr	r1, [pc, #220]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800412a:	e03a      	b.n	80041a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d020      	beq.n	8004176 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004134:	4b34      	ldr	r3, [pc, #208]	@ (8004208 <HAL_RCC_OscConfig+0x244>)
 8004136:	2201      	movs	r2, #1
 8004138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413a:	f7fe fc37 	bl	80029ac <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004142:	f7fe fc33 	bl	80029ac <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e1a8      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004154:	4b2b      	ldr	r3, [pc, #172]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0f0      	beq.n	8004142 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004160:	4b28      	ldr	r3, [pc, #160]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	4925      	ldr	r1, [pc, #148]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 8004170:	4313      	orrs	r3, r2
 8004172:	600b      	str	r3, [r1, #0]
 8004174:	e015      	b.n	80041a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004176:	4b24      	ldr	r3, [pc, #144]	@ (8004208 <HAL_RCC_OscConfig+0x244>)
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417c:	f7fe fc16 	bl	80029ac <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004184:	f7fe fc12 	bl	80029ac <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e187      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004196:	4b1b      	ldr	r3, [pc, #108]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d036      	beq.n	800421c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d016      	beq.n	80041e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041b6:	4b15      	ldr	r3, [pc, #84]	@ (800420c <HAL_RCC_OscConfig+0x248>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041bc:	f7fe fbf6 	bl	80029ac <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c4:	f7fe fbf2 	bl	80029ac <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e167      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004204 <HAL_RCC_OscConfig+0x240>)
 80041d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f0      	beq.n	80041c4 <HAL_RCC_OscConfig+0x200>
 80041e2:	e01b      	b.n	800421c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e4:	4b09      	ldr	r3, [pc, #36]	@ (800420c <HAL_RCC_OscConfig+0x248>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ea:	f7fe fbdf 	bl	80029ac <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f0:	e00e      	b.n	8004210 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f2:	f7fe fbdb 	bl	80029ac <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d907      	bls.n	8004210 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e150      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e2>
 8004204:	40023800 	.word	0x40023800
 8004208:	42470000 	.word	0x42470000
 800420c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004210:	4b88      	ldr	r3, [pc, #544]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 8004212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1ea      	bne.n	80041f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 8097 	beq.w	8004358 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422a:	2300      	movs	r3, #0
 800422c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800422e:	4b81      	ldr	r3, [pc, #516]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10f      	bne.n	800425a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800423a:	2300      	movs	r3, #0
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	4b7d      	ldr	r3, [pc, #500]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	4a7c      	ldr	r2, [pc, #496]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 8004244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004248:	6413      	str	r3, [r2, #64]	@ 0x40
 800424a:	4b7a      	ldr	r3, [pc, #488]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004256:	2301      	movs	r3, #1
 8004258:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425a:	4b77      	ldr	r3, [pc, #476]	@ (8004438 <HAL_RCC_OscConfig+0x474>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d118      	bne.n	8004298 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004266:	4b74      	ldr	r3, [pc, #464]	@ (8004438 <HAL_RCC_OscConfig+0x474>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a73      	ldr	r2, [pc, #460]	@ (8004438 <HAL_RCC_OscConfig+0x474>)
 800426c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004272:	f7fe fb9b 	bl	80029ac <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800427a:	f7fe fb97 	bl	80029ac <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e10c      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428c:	4b6a      	ldr	r3, [pc, #424]	@ (8004438 <HAL_RCC_OscConfig+0x474>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0f0      	beq.n	800427a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d106      	bne.n	80042ae <HAL_RCC_OscConfig+0x2ea>
 80042a0:	4b64      	ldr	r3, [pc, #400]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 80042a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a4:	4a63      	ldr	r2, [pc, #396]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ac:	e01c      	b.n	80042e8 <HAL_RCC_OscConfig+0x324>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b05      	cmp	r3, #5
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x30c>
 80042b6:	4b5f      	ldr	r3, [pc, #380]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ba:	4a5e      	ldr	r2, [pc, #376]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 80042bc:	f043 0304 	orr.w	r3, r3, #4
 80042c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c2:	4b5c      	ldr	r3, [pc, #368]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c6:	4a5b      	ldr	r2, [pc, #364]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ce:	e00b      	b.n	80042e8 <HAL_RCC_OscConfig+0x324>
 80042d0:	4b58      	ldr	r3, [pc, #352]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 80042d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d4:	4a57      	ldr	r2, [pc, #348]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	6713      	str	r3, [r2, #112]	@ 0x70
 80042dc:	4b55      	ldr	r3, [pc, #340]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 80042de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e0:	4a54      	ldr	r2, [pc, #336]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 80042e2:	f023 0304 	bic.w	r3, r3, #4
 80042e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d015      	beq.n	800431c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f0:	f7fe fb5c 	bl	80029ac <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f6:	e00a      	b.n	800430e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f8:	f7fe fb58 	bl	80029ac <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004306:	4293      	cmp	r3, r2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e0cb      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430e:	4b49      	ldr	r3, [pc, #292]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0ee      	beq.n	80042f8 <HAL_RCC_OscConfig+0x334>
 800431a:	e014      	b.n	8004346 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800431c:	f7fe fb46 	bl	80029ac <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004322:	e00a      	b.n	800433a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004324:	f7fe fb42 	bl	80029ac <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004332:	4293      	cmp	r3, r2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e0b5      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800433a:	4b3e      	ldr	r3, [pc, #248]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 800433c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1ee      	bne.n	8004324 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004346:	7dfb      	ldrb	r3, [r7, #23]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d105      	bne.n	8004358 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800434c:	4b39      	ldr	r3, [pc, #228]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 800434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004350:	4a38      	ldr	r2, [pc, #224]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 8004352:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004356:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80a1 	beq.w	80044a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004362:	4b34      	ldr	r3, [pc, #208]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	2b08      	cmp	r3, #8
 800436c:	d05c      	beq.n	8004428 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d141      	bne.n	80043fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004376:	4b31      	ldr	r3, [pc, #196]	@ (800443c <HAL_RCC_OscConfig+0x478>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fe fb16 	bl	80029ac <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004384:	f7fe fb12 	bl	80029ac <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e087      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004396:	4b27      	ldr	r3, [pc, #156]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69da      	ldr	r2, [r3, #28]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b0:	019b      	lsls	r3, r3, #6
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b8:	085b      	lsrs	r3, r3, #1
 80043ba:	3b01      	subs	r3, #1
 80043bc:	041b      	lsls	r3, r3, #16
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c4:	061b      	lsls	r3, r3, #24
 80043c6:	491b      	ldr	r1, [pc, #108]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043cc:	4b1b      	ldr	r3, [pc, #108]	@ (800443c <HAL_RCC_OscConfig+0x478>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d2:	f7fe faeb 	bl	80029ac <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043da:	f7fe fae7 	bl	80029ac <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e05c      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ec:	4b11      	ldr	r3, [pc, #68]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f0      	beq.n	80043da <HAL_RCC_OscConfig+0x416>
 80043f8:	e054      	b.n	80044a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fa:	4b10      	ldr	r3, [pc, #64]	@ (800443c <HAL_RCC_OscConfig+0x478>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004400:	f7fe fad4 	bl	80029ac <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004408:	f7fe fad0 	bl	80029ac <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e045      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441a:	4b06      	ldr	r3, [pc, #24]	@ (8004434 <HAL_RCC_OscConfig+0x470>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x444>
 8004426:	e03d      	b.n	80044a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d107      	bne.n	8004440 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e038      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e2>
 8004434:	40023800 	.word	0x40023800
 8004438:	40007000 	.word	0x40007000
 800443c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004440:	4b1b      	ldr	r3, [pc, #108]	@ (80044b0 <HAL_RCC_OscConfig+0x4ec>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d028      	beq.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d121      	bne.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d11a      	bne.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004470:	4013      	ands	r3, r2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004476:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004478:	4293      	cmp	r3, r2
 800447a:	d111      	bne.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004486:	085b      	lsrs	r3, r3, #1
 8004488:	3b01      	subs	r3, #1
 800448a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d107      	bne.n	80044a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d001      	beq.n	80044a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40023800 	.word	0x40023800

080044b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0cc      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044c8:	4b68      	ldr	r3, [pc, #416]	@ (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d90c      	bls.n	80044f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d6:	4b65      	ldr	r3, [pc, #404]	@ (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044de:	4b63      	ldr	r3, [pc, #396]	@ (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d001      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0b8      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d020      	beq.n	800453e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004508:	4b59      	ldr	r3, [pc, #356]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	4a58      	ldr	r2, [pc, #352]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004512:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004520:	4b53      	ldr	r3, [pc, #332]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	4a52      	ldr	r2, [pc, #328]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800452a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800452c:	4b50      	ldr	r3, [pc, #320]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	494d      	ldr	r1, [pc, #308]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	4313      	orrs	r3, r2
 800453c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d044      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d107      	bne.n	8004562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004552:	4b47      	ldr	r3, [pc, #284]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d119      	bne.n	8004592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e07f      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d003      	beq.n	8004572 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800456e:	2b03      	cmp	r3, #3
 8004570:	d107      	bne.n	8004582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004572:	4b3f      	ldr	r3, [pc, #252]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e06f      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004582:	4b3b      	ldr	r3, [pc, #236]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e067      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004592:	4b37      	ldr	r3, [pc, #220]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f023 0203 	bic.w	r2, r3, #3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	4934      	ldr	r1, [pc, #208]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045a4:	f7fe fa02 	bl	80029ac <HAL_GetTick>
 80045a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045aa:	e00a      	b.n	80045c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ac:	f7fe f9fe 	bl	80029ac <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e04f      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 020c 	and.w	r2, r3, #12
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d1eb      	bne.n	80045ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045d4:	4b25      	ldr	r3, [pc, #148]	@ (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d20c      	bcs.n	80045fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e2:	4b22      	ldr	r3, [pc, #136]	@ (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ea:	4b20      	ldr	r3, [pc, #128]	@ (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e032      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d008      	beq.n	800461a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004608:	4b19      	ldr	r3, [pc, #100]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	4916      	ldr	r1, [pc, #88]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	4313      	orrs	r3, r2
 8004618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004626:	4b12      	ldr	r3, [pc, #72]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	490e      	ldr	r1, [pc, #56]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	4313      	orrs	r3, r2
 8004638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800463a:	f000 f821 	bl	8004680 <HAL_RCC_GetSysClockFreq>
 800463e:	4602      	mov	r2, r0
 8004640:	4b0b      	ldr	r3, [pc, #44]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	091b      	lsrs	r3, r3, #4
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	490a      	ldr	r1, [pc, #40]	@ (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 800464c:	5ccb      	ldrb	r3, [r1, r3]
 800464e:	fa22 f303 	lsr.w	r3, r2, r3
 8004652:	4a09      	ldr	r2, [pc, #36]	@ (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004656:	4b09      	ldr	r3, [pc, #36]	@ (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe f962 	bl	8002924 <HAL_InitTick>

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40023c00 	.word	0x40023c00
 8004670:	40023800 	.word	0x40023800
 8004674:	08009d98 	.word	0x08009d98
 8004678:	2000023c 	.word	0x2000023c
 800467c:	20000240 	.word	0x20000240

08004680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004684:	b090      	sub	sp, #64	@ 0x40
 8004686:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004698:	4b59      	ldr	r3, [pc, #356]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x180>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 030c 	and.w	r3, r3, #12
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d00d      	beq.n	80046c0 <HAL_RCC_GetSysClockFreq+0x40>
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	f200 80a1 	bhi.w	80047ec <HAL_RCC_GetSysClockFreq+0x16c>
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0x34>
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d003      	beq.n	80046ba <HAL_RCC_GetSysClockFreq+0x3a>
 80046b2:	e09b      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046b4:	4b53      	ldr	r3, [pc, #332]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x184>)
 80046b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046b8:	e09b      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ba:	4b53      	ldr	r3, [pc, #332]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x188>)
 80046bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046be:	e098      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046c0:	4b4f      	ldr	r3, [pc, #316]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x180>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046ca:	4b4d      	ldr	r3, [pc, #308]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x180>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d028      	beq.n	8004728 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x180>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	099b      	lsrs	r3, r3, #6
 80046dc:	2200      	movs	r2, #0
 80046de:	623b      	str	r3, [r7, #32]
 80046e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046e8:	2100      	movs	r1, #0
 80046ea:	4b47      	ldr	r3, [pc, #284]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x188>)
 80046ec:	fb03 f201 	mul.w	r2, r3, r1
 80046f0:	2300      	movs	r3, #0
 80046f2:	fb00 f303 	mul.w	r3, r0, r3
 80046f6:	4413      	add	r3, r2
 80046f8:	4a43      	ldr	r2, [pc, #268]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x188>)
 80046fa:	fba0 1202 	umull	r1, r2, r0, r2
 80046fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004700:	460a      	mov	r2, r1
 8004702:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004706:	4413      	add	r3, r2
 8004708:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800470a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800470c:	2200      	movs	r2, #0
 800470e:	61bb      	str	r3, [r7, #24]
 8004710:	61fa      	str	r2, [r7, #28]
 8004712:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004716:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800471a:	f7fb fd55 	bl	80001c8 <__aeabi_uldivmod>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4613      	mov	r3, r2
 8004724:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004726:	e053      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004728:	4b35      	ldr	r3, [pc, #212]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x180>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	099b      	lsrs	r3, r3, #6
 800472e:	2200      	movs	r2, #0
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	617a      	str	r2, [r7, #20]
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800473a:	f04f 0b00 	mov.w	fp, #0
 800473e:	4652      	mov	r2, sl
 8004740:	465b      	mov	r3, fp
 8004742:	f04f 0000 	mov.w	r0, #0
 8004746:	f04f 0100 	mov.w	r1, #0
 800474a:	0159      	lsls	r1, r3, #5
 800474c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004750:	0150      	lsls	r0, r2, #5
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	ebb2 080a 	subs.w	r8, r2, sl
 800475a:	eb63 090b 	sbc.w	r9, r3, fp
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800476a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800476e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004772:	ebb2 0408 	subs.w	r4, r2, r8
 8004776:	eb63 0509 	sbc.w	r5, r3, r9
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	00eb      	lsls	r3, r5, #3
 8004784:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004788:	00e2      	lsls	r2, r4, #3
 800478a:	4614      	mov	r4, r2
 800478c:	461d      	mov	r5, r3
 800478e:	eb14 030a 	adds.w	r3, r4, sl
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	eb45 030b 	adc.w	r3, r5, fp
 8004798:	607b      	str	r3, [r7, #4]
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047a6:	4629      	mov	r1, r5
 80047a8:	028b      	lsls	r3, r1, #10
 80047aa:	4621      	mov	r1, r4
 80047ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047b0:	4621      	mov	r1, r4
 80047b2:	028a      	lsls	r2, r1, #10
 80047b4:	4610      	mov	r0, r2
 80047b6:	4619      	mov	r1, r3
 80047b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ba:	2200      	movs	r2, #0
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	60fa      	str	r2, [r7, #12]
 80047c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047c4:	f7fb fd00 	bl	80001c8 <__aeabi_uldivmod>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4613      	mov	r3, r2
 80047ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80047d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x180>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	0c1b      	lsrs	r3, r3, #16
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	3301      	adds	r3, #1
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80047e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80047e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047ea:	e002      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047ec:	4b05      	ldr	r3, [pc, #20]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x184>)
 80047ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3740      	adds	r7, #64	@ 0x40
 80047f8:	46bd      	mov	sp, r7
 80047fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047fe:	bf00      	nop
 8004800:	40023800 	.word	0x40023800
 8004804:	00f42400 	.word	0x00f42400
 8004808:	017d7840 	.word	0x017d7840

0800480c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004810:	4b03      	ldr	r3, [pc, #12]	@ (8004820 <HAL_RCC_GetHCLKFreq+0x14>)
 8004812:	681b      	ldr	r3, [r3, #0]
}
 8004814:	4618      	mov	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	2000023c 	.word	0x2000023c

08004824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004828:	f7ff fff0 	bl	800480c <HAL_RCC_GetHCLKFreq>
 800482c:	4602      	mov	r2, r0
 800482e:	4b05      	ldr	r3, [pc, #20]	@ (8004844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	0a9b      	lsrs	r3, r3, #10
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	4903      	ldr	r1, [pc, #12]	@ (8004848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800483a:	5ccb      	ldrb	r3, [r1, r3]
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004840:	4618      	mov	r0, r3
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40023800 	.word	0x40023800
 8004848:	08009da8 	.word	0x08009da8

0800484c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004850:	f7ff ffdc 	bl	800480c <HAL_RCC_GetHCLKFreq>
 8004854:	4602      	mov	r2, r0
 8004856:	4b05      	ldr	r3, [pc, #20]	@ (800486c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	0b5b      	lsrs	r3, r3, #13
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	4903      	ldr	r1, [pc, #12]	@ (8004870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004862:	5ccb      	ldrb	r3, [r1, r3]
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40023800 	.word	0x40023800
 8004870:	08009da8 	.word	0x08009da8

08004874 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e07b      	b.n	800497e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488a:	2b00      	cmp	r3, #0
 800488c:	d108      	bne.n	80048a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004896:	d009      	beq.n	80048ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	61da      	str	r2, [r3, #28]
 800489e:	e005      	b.n	80048ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fd fbe8 	bl	800209c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004930:	ea42 0103 	orr.w	r1, r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004938:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	0c1b      	lsrs	r3, r3, #16
 800494a:	f003 0104 	and.w	r1, r3, #4
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004952:	f003 0210 	and.w	r2, r3, #16
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69da      	ldr	r2, [r3, #28]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800496c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b088      	sub	sp, #32
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	603b      	str	r3, [r7, #0]
 8004992:	4613      	mov	r3, r2
 8004994:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004996:	f7fe f809 	bl	80029ac <HAL_GetTick>
 800499a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d001      	beq.n	80049b0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80049ac:	2302      	movs	r3, #2
 80049ae:	e12a      	b.n	8004c06 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_SPI_Transmit+0x36>
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e122      	b.n	8004c06 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_SPI_Transmit+0x48>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e11b      	b.n	8004c06 <HAL_SPI_Transmit+0x280>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2203      	movs	r2, #3
 80049da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	88fa      	ldrh	r2, [r7, #6]
 80049ee:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	88fa      	ldrh	r2, [r7, #6]
 80049f4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a1c:	d10f      	bne.n	8004a3e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a48:	2b40      	cmp	r3, #64	@ 0x40
 8004a4a:	d007      	beq.n	8004a5c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a64:	d152      	bne.n	8004b0c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_SPI_Transmit+0xee>
 8004a6e:	8b7b      	ldrh	r3, [r7, #26]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d145      	bne.n	8004b00 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a78:	881a      	ldrh	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a84:	1c9a      	adds	r2, r3, #2
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a98:	e032      	b.n	8004b00 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d112      	bne.n	8004ace <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aac:	881a      	ldrh	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab8:	1c9a      	adds	r2, r3, #2
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004acc:	e018      	b.n	8004b00 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ace:	f7fd ff6d 	bl	80029ac <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d803      	bhi.n	8004ae6 <HAL_SPI_Transmit+0x160>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae4:	d102      	bne.n	8004aec <HAL_SPI_Transmit+0x166>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d109      	bne.n	8004b00 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e082      	b.n	8004c06 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1c7      	bne.n	8004a9a <HAL_SPI_Transmit+0x114>
 8004b0a:	e053      	b.n	8004bb4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <HAL_SPI_Transmit+0x194>
 8004b14:	8b7b      	ldrh	r3, [r7, #26]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d147      	bne.n	8004baa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	330c      	adds	r3, #12
 8004b24:	7812      	ldrb	r2, [r2, #0]
 8004b26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b40:	e033      	b.n	8004baa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d113      	bne.n	8004b78 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	330c      	adds	r3, #12
 8004b5a:	7812      	ldrb	r2, [r2, #0]
 8004b5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004b76:	e018      	b.n	8004baa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b78:	f7fd ff18 	bl	80029ac <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d803      	bhi.n	8004b90 <HAL_SPI_Transmit+0x20a>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8e:	d102      	bne.n	8004b96 <HAL_SPI_Transmit+0x210>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d109      	bne.n	8004baa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e02d      	b.n	8004c06 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1c6      	bne.n	8004b42 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	6839      	ldr	r1, [r7, #0]
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 fbd9 	bl	8005370 <SPI_EndRxTxTransaction>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10a      	bne.n	8004be8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e000      	b.n	8004c06 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004c04:	2300      	movs	r3, #0
  }
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3720      	adds	r7, #32
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b088      	sub	sp, #32
 8004c12:	af02      	add	r7, sp, #8
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	603b      	str	r3, [r7, #0]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d001      	beq.n	8004c2e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e104      	b.n	8004e38 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c36:	d112      	bne.n	8004c5e <HAL_SPI_Receive+0x50>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10e      	bne.n	8004c5e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2204      	movs	r2, #4
 8004c44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c48:	88fa      	ldrh	r2, [r7, #6]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f8f3 	bl	8004e40 <HAL_SPI_TransmitReceive>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	e0ec      	b.n	8004e38 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c5e:	f7fd fea5 	bl	80029ac <HAL_GetTick>
 8004c62:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <HAL_SPI_Receive+0x62>
 8004c6a:	88fb      	ldrh	r3, [r7, #6]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0e1      	b.n	8004e38 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_SPI_Receive+0x74>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e0da      	b.n	8004e38 <HAL_SPI_Receive+0x22a>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2204      	movs	r2, #4
 8004c8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	88fa      	ldrh	r2, [r7, #6]
 8004ca2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	88fa      	ldrh	r2, [r7, #6]
 8004ca8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cd0:	d10f      	bne.n	8004cf2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ce0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004cf0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cfc:	2b40      	cmp	r3, #64	@ 0x40
 8004cfe:	d007      	beq.n	8004d10 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d170      	bne.n	8004dfa <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d18:	e035      	b.n	8004d86 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d115      	bne.n	8004d54 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f103 020c 	add.w	r2, r3, #12
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d34:	7812      	ldrb	r2, [r2, #0]
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d52:	e018      	b.n	8004d86 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d54:	f7fd fe2a 	bl	80029ac <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d803      	bhi.n	8004d6c <HAL_SPI_Receive+0x15e>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6a:	d102      	bne.n	8004d72 <HAL_SPI_Receive+0x164>
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d109      	bne.n	8004d86 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e058      	b.n	8004e38 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1c4      	bne.n	8004d1a <HAL_SPI_Receive+0x10c>
 8004d90:	e038      	b.n	8004e04 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d113      	bne.n	8004dc8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004daa:	b292      	uxth	r2, r2
 8004dac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db2:	1c9a      	adds	r2, r3, #2
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004dc6:	e018      	b.n	8004dfa <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dc8:	f7fd fdf0 	bl	80029ac <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d803      	bhi.n	8004de0 <HAL_SPI_Receive+0x1d2>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dde:	d102      	bne.n	8004de6 <HAL_SPI_Receive+0x1d8>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e01e      	b.n	8004e38 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1c6      	bne.n	8004d92 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	6839      	ldr	r1, [r7, #0]
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fa4b 	bl	80052a4 <SPI_EndRxTransaction>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004e36:	2300      	movs	r3, #0
  }
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08a      	sub	sp, #40	@ 0x28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e52:	f7fd fdab 	bl	80029ac <HAL_GetTick>
 8004e56:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e5e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004e66:	887b      	ldrh	r3, [r7, #2]
 8004e68:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e6a:	7ffb      	ldrb	r3, [r7, #31]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d00c      	beq.n	8004e8a <HAL_SPI_TransmitReceive+0x4a>
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e76:	d106      	bne.n	8004e86 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d102      	bne.n	8004e86 <HAL_SPI_TransmitReceive+0x46>
 8004e80:	7ffb      	ldrb	r3, [r7, #31]
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d001      	beq.n	8004e8a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004e86:	2302      	movs	r3, #2
 8004e88:	e17f      	b.n	800518a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_SPI_TransmitReceive+0x5c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <HAL_SPI_TransmitReceive+0x5c>
 8004e96:	887b      	ldrh	r3, [r7, #2]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e174      	b.n	800518a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_SPI_TransmitReceive+0x6e>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e16d      	b.n	800518a <HAL_SPI_TransmitReceive+0x34a>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d003      	beq.n	8004eca <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2205      	movs	r2, #5
 8004ec6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	887a      	ldrh	r2, [r7, #2]
 8004eda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	887a      	ldrh	r2, [r7, #2]
 8004ee0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	887a      	ldrh	r2, [r7, #2]
 8004eec:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	887a      	ldrh	r2, [r7, #2]
 8004ef2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f0a:	2b40      	cmp	r3, #64	@ 0x40
 8004f0c:	d007      	beq.n	8004f1e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f26:	d17e      	bne.n	8005026 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <HAL_SPI_TransmitReceive+0xf6>
 8004f30:	8afb      	ldrh	r3, [r7, #22]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d16c      	bne.n	8005010 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3a:	881a      	ldrh	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f46:	1c9a      	adds	r2, r3, #2
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f5a:	e059      	b.n	8005010 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d11b      	bne.n	8004fa2 <HAL_SPI_TransmitReceive+0x162>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d016      	beq.n	8004fa2 <HAL_SPI_TransmitReceive+0x162>
 8004f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d113      	bne.n	8004fa2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7e:	881a      	ldrh	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8a:	1c9a      	adds	r2, r3, #2
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d119      	bne.n	8004fe4 <HAL_SPI_TransmitReceive+0x1a4>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d014      	beq.n	8004fe4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc4:	b292      	uxth	r2, r2
 8004fc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fcc:	1c9a      	adds	r2, r3, #2
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fe4:	f7fd fce2 	bl	80029ac <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d80d      	bhi.n	8005010 <HAL_SPI_TransmitReceive+0x1d0>
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffa:	d009      	beq.n	8005010 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e0bc      	b.n	800518a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1a0      	bne.n	8004f5c <HAL_SPI_TransmitReceive+0x11c>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800501e:	b29b      	uxth	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d19b      	bne.n	8004f5c <HAL_SPI_TransmitReceive+0x11c>
 8005024:	e082      	b.n	800512c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <HAL_SPI_TransmitReceive+0x1f4>
 800502e:	8afb      	ldrh	r3, [r7, #22]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d171      	bne.n	8005118 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	330c      	adds	r3, #12
 800503e:	7812      	ldrb	r2, [r2, #0]
 8005040:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005050:	b29b      	uxth	r3, r3
 8005052:	3b01      	subs	r3, #1
 8005054:	b29a      	uxth	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800505a:	e05d      	b.n	8005118 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b02      	cmp	r3, #2
 8005068:	d11c      	bne.n	80050a4 <HAL_SPI_TransmitReceive+0x264>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d017      	beq.n	80050a4 <HAL_SPI_TransmitReceive+0x264>
 8005074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005076:	2b01      	cmp	r3, #1
 8005078:	d114      	bne.n	80050a4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	330c      	adds	r3, #12
 8005084:	7812      	ldrb	r2, [r2, #0]
 8005086:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005096:	b29b      	uxth	r3, r3
 8005098:	3b01      	subs	r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d119      	bne.n	80050e6 <HAL_SPI_TransmitReceive+0x2a6>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d014      	beq.n	80050e6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3b01      	subs	r3, #1
 80050dc:	b29a      	uxth	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050e2:	2301      	movs	r3, #1
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050e6:	f7fd fc61 	bl	80029ac <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d803      	bhi.n	80050fe <HAL_SPI_TransmitReceive+0x2be>
 80050f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fc:	d102      	bne.n	8005104 <HAL_SPI_TransmitReceive+0x2c4>
 80050fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005100:	2b00      	cmp	r3, #0
 8005102:	d109      	bne.n	8005118 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e038      	b.n	800518a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d19c      	bne.n	800505c <HAL_SPI_TransmitReceive+0x21c>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d197      	bne.n	800505c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800512c:	6a3a      	ldr	r2, [r7, #32]
 800512e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f91d 	bl	8005370 <SPI_EndRxTxTransaction>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e01d      	b.n	800518a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10a      	bne.n	800516c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005156:	2300      	movs	r3, #0
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	613b      	str	r3, [r7, #16]
 800516a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005188:	2300      	movs	r3, #0
  }
}
 800518a:	4618      	mov	r0, r3
 800518c:	3728      	adds	r7, #40	@ 0x28
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b088      	sub	sp, #32
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	603b      	str	r3, [r7, #0]
 80051a0:	4613      	mov	r3, r2
 80051a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051a4:	f7fd fc02 	bl	80029ac <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ac:	1a9b      	subs	r3, r3, r2
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	4413      	add	r3, r2
 80051b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051b4:	f7fd fbfa 	bl	80029ac <HAL_GetTick>
 80051b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051ba:	4b39      	ldr	r3, [pc, #228]	@ (80052a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	015b      	lsls	r3, r3, #5
 80051c0:	0d1b      	lsrs	r3, r3, #20
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	fb02 f303 	mul.w	r3, r2, r3
 80051c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ca:	e054      	b.n	8005276 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d2:	d050      	beq.n	8005276 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051d4:	f7fd fbea 	bl	80029ac <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d902      	bls.n	80051ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d13d      	bne.n	8005266 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80051f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005202:	d111      	bne.n	8005228 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800520c:	d004      	beq.n	8005218 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005216:	d107      	bne.n	8005228 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005230:	d10f      	bne.n	8005252 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e017      	b.n	8005296 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	3b01      	subs	r3, #1
 8005274:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4013      	ands	r3, r2
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	429a      	cmp	r2, r3
 8005284:	bf0c      	ite	eq
 8005286:	2301      	moveq	r3, #1
 8005288:	2300      	movne	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	461a      	mov	r2, r3
 800528e:	79fb      	ldrb	r3, [r7, #7]
 8005290:	429a      	cmp	r2, r3
 8005292:	d19b      	bne.n	80051cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3720      	adds	r7, #32
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	2000023c 	.word	0x2000023c

080052a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052b8:	d111      	bne.n	80052de <SPI_EndRxTransaction+0x3a>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052c2:	d004      	beq.n	80052ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052cc:	d107      	bne.n	80052de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052dc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052e6:	d12a      	bne.n	800533e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052f0:	d012      	beq.n	8005318 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2200      	movs	r2, #0
 80052fa:	2180      	movs	r1, #128	@ 0x80
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f7ff ff49 	bl	8005194 <SPI_WaitFlagStateUntilTimeout>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d02d      	beq.n	8005364 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800530c:	f043 0220 	orr.w	r2, r3, #32
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e026      	b.n	8005366 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2200      	movs	r2, #0
 8005320:	2101      	movs	r1, #1
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f7ff ff36 	bl	8005194 <SPI_WaitFlagStateUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d01a      	beq.n	8005364 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005332:	f043 0220 	orr.w	r2, r3, #32
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e013      	b.n	8005366 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2200      	movs	r2, #0
 8005346:	2101      	movs	r1, #1
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f7ff ff23 	bl	8005194 <SPI_WaitFlagStateUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d007      	beq.n	8005364 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005358:	f043 0220 	orr.w	r2, r3, #32
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e000      	b.n	8005366 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2201      	movs	r2, #1
 8005384:	2102      	movs	r1, #2
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f7ff ff04 	bl	8005194 <SPI_WaitFlagStateUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d007      	beq.n	80053a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005396:	f043 0220 	orr.w	r2, r3, #32
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e032      	b.n	8005408 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005410 <SPI_EndRxTxTransaction+0xa0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005414 <SPI_EndRxTxTransaction+0xa4>)
 80053a8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ac:	0d5b      	lsrs	r3, r3, #21
 80053ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053c0:	d112      	bne.n	80053e8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2200      	movs	r2, #0
 80053ca:	2180      	movs	r1, #128	@ 0x80
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f7ff fee1 	bl	8005194 <SPI_WaitFlagStateUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d016      	beq.n	8005406 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053dc:	f043 0220 	orr.w	r2, r3, #32
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e00f      	b.n	8005408 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053fe:	2b80      	cmp	r3, #128	@ 0x80
 8005400:	d0f2      	beq.n	80053e8 <SPI_EndRxTxTransaction+0x78>
 8005402:	e000      	b.n	8005406 <SPI_EndRxTxTransaction+0x96>
        break;
 8005404:	bf00      	nop
  }

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	2000023c 	.word	0x2000023c
 8005414:	165e9f81 	.word	0x165e9f81

08005418 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e038      	b.n	80054a0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7fb fb90 	bl	8000b68 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3308      	adds	r3, #8
 8005450:	4619      	mov	r1, r3
 8005452:	4610      	mov	r0, r2
 8005454:	f001 fbb0 	bl	8006bb8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6818      	ldr	r0, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	461a      	mov	r2, r3
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	f001 fc12 	bl	8006c8c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6858      	ldr	r0, [r3, #4]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005474:	6879      	ldr	r1, [r7, #4]
 8005476:	f001 fc3f 	bl	8006cf8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	6892      	ldr	r2, [r2, #8]
 8005482:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	6892      	ldr	r2, [r2, #8]
 800548e:	f041 0101 	orr.w	r1, r1, #1
 8005492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e041      	b.n	800553e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d106      	bne.n	80054d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fc ff02 	bl	80022d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3304      	adds	r3, #4
 80054e4:	4619      	mov	r1, r3
 80054e6:	4610      	mov	r0, r2
 80054e8:	f000 fa7e 	bl	80059e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b01      	cmp	r3, #1
 800555a:	d001      	beq.n	8005560 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e04e      	b.n	80055fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0201 	orr.w	r2, r2, #1
 8005576:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a23      	ldr	r2, [pc, #140]	@ (800560c <HAL_TIM_Base_Start_IT+0xc4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d022      	beq.n	80055c8 <HAL_TIM_Base_Start_IT+0x80>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800558a:	d01d      	beq.n	80055c8 <HAL_TIM_Base_Start_IT+0x80>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a1f      	ldr	r2, [pc, #124]	@ (8005610 <HAL_TIM_Base_Start_IT+0xc8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d018      	beq.n	80055c8 <HAL_TIM_Base_Start_IT+0x80>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a1e      	ldr	r2, [pc, #120]	@ (8005614 <HAL_TIM_Base_Start_IT+0xcc>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d013      	beq.n	80055c8 <HAL_TIM_Base_Start_IT+0x80>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005618 <HAL_TIM_Base_Start_IT+0xd0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00e      	beq.n	80055c8 <HAL_TIM_Base_Start_IT+0x80>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a1b      	ldr	r2, [pc, #108]	@ (800561c <HAL_TIM_Base_Start_IT+0xd4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d009      	beq.n	80055c8 <HAL_TIM_Base_Start_IT+0x80>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a19      	ldr	r2, [pc, #100]	@ (8005620 <HAL_TIM_Base_Start_IT+0xd8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d004      	beq.n	80055c8 <HAL_TIM_Base_Start_IT+0x80>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a18      	ldr	r2, [pc, #96]	@ (8005624 <HAL_TIM_Base_Start_IT+0xdc>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d111      	bne.n	80055ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b06      	cmp	r3, #6
 80055d8:	d010      	beq.n	80055fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0201 	orr.w	r2, r2, #1
 80055e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ea:	e007      	b.n	80055fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	40010000 	.word	0x40010000
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800
 8005618:	40000c00 	.word	0x40000c00
 800561c:	40010400 	.word	0x40010400
 8005620:	40014000 	.word	0x40014000
 8005624:	40001800 	.word	0x40001800

08005628 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d020      	beq.n	800568c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d01b      	beq.n	800568c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0202 	mvn.w	r2, #2
 800565c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f999 	bl	80059aa <HAL_TIM_IC_CaptureCallback>
 8005678:	e005      	b.n	8005686 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f98b 	bl	8005996 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f99c 	bl	80059be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b00      	cmp	r3, #0
 8005694:	d020      	beq.n	80056d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01b      	beq.n	80056d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0204 	mvn.w	r2, #4
 80056a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2202      	movs	r2, #2
 80056ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f973 	bl	80059aa <HAL_TIM_IC_CaptureCallback>
 80056c4:	e005      	b.n	80056d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f965 	bl	8005996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f976 	bl	80059be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d020      	beq.n	8005724 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01b      	beq.n	8005724 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0208 	mvn.w	r2, #8
 80056f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2204      	movs	r2, #4
 80056fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f94d 	bl	80059aa <HAL_TIM_IC_CaptureCallback>
 8005710:	e005      	b.n	800571e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f93f 	bl	8005996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f950 	bl	80059be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f003 0310 	and.w	r3, r3, #16
 800572a:	2b00      	cmp	r3, #0
 800572c:	d020      	beq.n	8005770 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01b      	beq.n	8005770 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0210 	mvn.w	r2, #16
 8005740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2208      	movs	r2, #8
 8005746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f927 	bl	80059aa <HAL_TIM_IC_CaptureCallback>
 800575c:	e005      	b.n	800576a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f919 	bl	8005996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f92a 	bl	80059be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00c      	beq.n	8005794 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0201 	mvn.w	r2, #1
 800578c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fc f876 	bl	8001880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00c      	beq.n	80057b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d007      	beq.n	80057b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80057b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fae4 	bl	8005d80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00c      	beq.n	80057dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d007      	beq.n	80057dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f8fb 	bl	80059d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00c      	beq.n	8005800 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f003 0320 	and.w	r3, r3, #32
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d007      	beq.n	8005800 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f06f 0220 	mvn.w	r2, #32
 80057f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fab6 	bl	8005d6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005800:	bf00      	nop
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_TIM_ConfigClockSource+0x1c>
 8005820:	2302      	movs	r3, #2
 8005822:	e0b4      	b.n	800598e <HAL_TIM_ConfigClockSource+0x186>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800584a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800585c:	d03e      	beq.n	80058dc <HAL_TIM_ConfigClockSource+0xd4>
 800585e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005862:	f200 8087 	bhi.w	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 8005866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800586a:	f000 8086 	beq.w	800597a <HAL_TIM_ConfigClockSource+0x172>
 800586e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005872:	d87f      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 8005874:	2b70      	cmp	r3, #112	@ 0x70
 8005876:	d01a      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0xa6>
 8005878:	2b70      	cmp	r3, #112	@ 0x70
 800587a:	d87b      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 800587c:	2b60      	cmp	r3, #96	@ 0x60
 800587e:	d050      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x11a>
 8005880:	2b60      	cmp	r3, #96	@ 0x60
 8005882:	d877      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 8005884:	2b50      	cmp	r3, #80	@ 0x50
 8005886:	d03c      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0xfa>
 8005888:	2b50      	cmp	r3, #80	@ 0x50
 800588a:	d873      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 800588c:	2b40      	cmp	r3, #64	@ 0x40
 800588e:	d058      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x13a>
 8005890:	2b40      	cmp	r3, #64	@ 0x40
 8005892:	d86f      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 8005894:	2b30      	cmp	r3, #48	@ 0x30
 8005896:	d064      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x15a>
 8005898:	2b30      	cmp	r3, #48	@ 0x30
 800589a:	d86b      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 800589c:	2b20      	cmp	r3, #32
 800589e:	d060      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x15a>
 80058a0:	2b20      	cmp	r3, #32
 80058a2:	d867      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d05c      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x15a>
 80058a8:	2b10      	cmp	r3, #16
 80058aa:	d05a      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x15a>
 80058ac:	e062      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058be:	f000 f9b9 	bl	8005c34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	609a      	str	r2, [r3, #8]
      break;
 80058da:	e04f      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058ec:	f000 f9a2 	bl	8005c34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058fe:	609a      	str	r2, [r3, #8]
      break;
 8005900:	e03c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800590e:	461a      	mov	r2, r3
 8005910:	f000 f916 	bl	8005b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2150      	movs	r1, #80	@ 0x50
 800591a:	4618      	mov	r0, r3
 800591c:	f000 f96f 	bl	8005bfe <TIM_ITRx_SetConfig>
      break;
 8005920:	e02c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800592e:	461a      	mov	r2, r3
 8005930:	f000 f935 	bl	8005b9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2160      	movs	r1, #96	@ 0x60
 800593a:	4618      	mov	r0, r3
 800593c:	f000 f95f 	bl	8005bfe <TIM_ITRx_SetConfig>
      break;
 8005940:	e01c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800594e:	461a      	mov	r2, r3
 8005950:	f000 f8f6 	bl	8005b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2140      	movs	r1, #64	@ 0x40
 800595a:	4618      	mov	r0, r3
 800595c:	f000 f94f 	bl	8005bfe <TIM_ITRx_SetConfig>
      break;
 8005960:	e00c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4619      	mov	r1, r3
 800596c:	4610      	mov	r0, r2
 800596e:	f000 f946 	bl	8005bfe <TIM_ITRx_SetConfig>
      break;
 8005972:	e003      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	73fb      	strb	r3, [r7, #15]
      break;
 8005978:	e000      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800597a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800598c:	7bfb      	ldrb	r3, [r7, #15]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
	...

080059e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a46      	ldr	r2, [pc, #280]	@ (8005b14 <TIM_Base_SetConfig+0x12c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d013      	beq.n	8005a28 <TIM_Base_SetConfig+0x40>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a06:	d00f      	beq.n	8005a28 <TIM_Base_SetConfig+0x40>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a43      	ldr	r2, [pc, #268]	@ (8005b18 <TIM_Base_SetConfig+0x130>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00b      	beq.n	8005a28 <TIM_Base_SetConfig+0x40>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a42      	ldr	r2, [pc, #264]	@ (8005b1c <TIM_Base_SetConfig+0x134>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d007      	beq.n	8005a28 <TIM_Base_SetConfig+0x40>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a41      	ldr	r2, [pc, #260]	@ (8005b20 <TIM_Base_SetConfig+0x138>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d003      	beq.n	8005a28 <TIM_Base_SetConfig+0x40>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a40      	ldr	r2, [pc, #256]	@ (8005b24 <TIM_Base_SetConfig+0x13c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d108      	bne.n	8005a3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a35      	ldr	r2, [pc, #212]	@ (8005b14 <TIM_Base_SetConfig+0x12c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d02b      	beq.n	8005a9a <TIM_Base_SetConfig+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a48:	d027      	beq.n	8005a9a <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a32      	ldr	r2, [pc, #200]	@ (8005b18 <TIM_Base_SetConfig+0x130>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d023      	beq.n	8005a9a <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a31      	ldr	r2, [pc, #196]	@ (8005b1c <TIM_Base_SetConfig+0x134>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d01f      	beq.n	8005a9a <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a30      	ldr	r2, [pc, #192]	@ (8005b20 <TIM_Base_SetConfig+0x138>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d01b      	beq.n	8005a9a <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a2f      	ldr	r2, [pc, #188]	@ (8005b24 <TIM_Base_SetConfig+0x13c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d017      	beq.n	8005a9a <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a2e      	ldr	r2, [pc, #184]	@ (8005b28 <TIM_Base_SetConfig+0x140>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d013      	beq.n	8005a9a <TIM_Base_SetConfig+0xb2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a2d      	ldr	r2, [pc, #180]	@ (8005b2c <TIM_Base_SetConfig+0x144>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00f      	beq.n	8005a9a <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a2c      	ldr	r2, [pc, #176]	@ (8005b30 <TIM_Base_SetConfig+0x148>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00b      	beq.n	8005a9a <TIM_Base_SetConfig+0xb2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a2b      	ldr	r2, [pc, #172]	@ (8005b34 <TIM_Base_SetConfig+0x14c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d007      	beq.n	8005a9a <TIM_Base_SetConfig+0xb2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a2a      	ldr	r2, [pc, #168]	@ (8005b38 <TIM_Base_SetConfig+0x150>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d003      	beq.n	8005a9a <TIM_Base_SetConfig+0xb2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a29      	ldr	r2, [pc, #164]	@ (8005b3c <TIM_Base_SetConfig+0x154>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d108      	bne.n	8005aac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a10      	ldr	r2, [pc, #64]	@ (8005b14 <TIM_Base_SetConfig+0x12c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_Base_SetConfig+0xf8>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a12      	ldr	r2, [pc, #72]	@ (8005b24 <TIM_Base_SetConfig+0x13c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d103      	bne.n	8005ae8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d105      	bne.n	8005b06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f023 0201 	bic.w	r2, r3, #1
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	611a      	str	r2, [r3, #16]
  }
}
 8005b06:	bf00      	nop
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	40010000 	.word	0x40010000
 8005b18:	40000400 	.word	0x40000400
 8005b1c:	40000800 	.word	0x40000800
 8005b20:	40000c00 	.word	0x40000c00
 8005b24:	40010400 	.word	0x40010400
 8005b28:	40014000 	.word	0x40014000
 8005b2c:	40014400 	.word	0x40014400
 8005b30:	40014800 	.word	0x40014800
 8005b34:	40001800 	.word	0x40001800
 8005b38:	40001c00 	.word	0x40001c00
 8005b3c:	40002000 	.word	0x40002000

08005b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	f023 0201 	bic.w	r2, r3, #1
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f023 030a 	bic.w	r3, r3, #10
 8005b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	621a      	str	r2, [r3, #32]
}
 8005b92:	bf00      	nop
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b087      	sub	sp, #28
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	60f8      	str	r0, [r7, #12]
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	f023 0210 	bic.w	r2, r3, #16
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	031b      	lsls	r3, r3, #12
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	621a      	str	r2, [r3, #32]
}
 8005bf2:	bf00      	nop
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b085      	sub	sp, #20
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f043 0307 	orr.w	r3, r3, #7
 8005c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	609a      	str	r2, [r3, #8]
}
 8005c28:	bf00      	nop
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	021a      	lsls	r2, r3, #8
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	431a      	orrs	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	609a      	str	r2, [r3, #8]
}
 8005c68:	bf00      	nop
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e05a      	b.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a21      	ldr	r2, [pc, #132]	@ (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d022      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cd8:	d01d      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1d      	ldr	r2, [pc, #116]	@ (8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d018      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d013      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8005d5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00e      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a18      	ldr	r2, [pc, #96]	@ (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d009      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a17      	ldr	r2, [pc, #92]	@ (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d004      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a15      	ldr	r2, [pc, #84]	@ (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d10c      	bne.n	8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40010000 	.word	0x40010000
 8005d54:	40000400 	.word	0x40000400
 8005d58:	40000800 	.word	0x40000800
 8005d5c:	40000c00 	.word	0x40000c00
 8005d60:	40010400 	.word	0x40010400
 8005d64:	40014000 	.word	0x40014000
 8005d68:	40001800 	.word	0x40001800

08005d6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e042      	b.n	8005e2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7fc fb90 	bl	80024e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2224      	movs	r2, #36	@ 0x24
 8005dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005dd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fc79 	bl	80066d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005dec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695a      	ldr	r2, [r3, #20]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005dfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3708      	adds	r7, #8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b0ba      	sub	sp, #232	@ 0xe8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005e60:	2300      	movs	r3, #0
 8005e62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10f      	bne.n	8005e9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e7e:	f003 0320 	and.w	r3, r3, #32
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <HAL_UART_IRQHandler+0x66>
 8005e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e8a:	f003 0320 	and.w	r3, r3, #32
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fb5d 	bl	8006552 <UART_Receive_IT>
      return;
 8005e98:	e25b      	b.n	8006352 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 80de 	beq.w	8006060 <HAL_UART_IRQHandler+0x22c>
 8005ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d106      	bne.n	8005ebe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eb4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 80d1 	beq.w	8006060 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00b      	beq.n	8005ee2 <HAL_UART_IRQHandler+0xae>
 8005eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eda:	f043 0201 	orr.w	r2, r3, #1
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ee6:	f003 0304 	and.w	r3, r3, #4
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00b      	beq.n	8005f06 <HAL_UART_IRQHandler+0xd2>
 8005eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005efe:	f043 0202 	orr.w	r2, r3, #2
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00b      	beq.n	8005f2a <HAL_UART_IRQHandler+0xf6>
 8005f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d005      	beq.n	8005f2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f22:	f043 0204 	orr.w	r2, r3, #4
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d011      	beq.n	8005f5a <HAL_UART_IRQHandler+0x126>
 8005f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d105      	bne.n	8005f4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d005      	beq.n	8005f5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f52:	f043 0208 	orr.w	r2, r3, #8
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 81f2 	beq.w	8006348 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f68:	f003 0320 	and.w	r3, r3, #32
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d008      	beq.n	8005f82 <HAL_UART_IRQHandler+0x14e>
 8005f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f74:	f003 0320 	and.w	r3, r3, #32
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fae8 	bl	8006552 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f8c:	2b40      	cmp	r3, #64	@ 0x40
 8005f8e:	bf0c      	ite	eq
 8005f90:	2301      	moveq	r3, #1
 8005f92:	2300      	movne	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f9e:	f003 0308 	and.w	r3, r3, #8
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d103      	bne.n	8005fae <HAL_UART_IRQHandler+0x17a>
 8005fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d04f      	beq.n	800604e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f9f0 	bl	8006394 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fbe:	2b40      	cmp	r3, #64	@ 0x40
 8005fc0:	d141      	bne.n	8006046 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3314      	adds	r3, #20
 8005fc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3314      	adds	r3, #20
 8005fea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005fee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005ffa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1d9      	bne.n	8005fc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d013      	beq.n	800603e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800601a:	4a7e      	ldr	r2, [pc, #504]	@ (8006214 <HAL_UART_IRQHandler+0x3e0>)
 800601c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006022:	4618      	mov	r0, r3
 8006024:	f7fd fb8c 	bl	8003740 <HAL_DMA_Abort_IT>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d016      	beq.n	800605c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006038:	4610      	mov	r0, r2
 800603a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800603c:	e00e      	b.n	800605c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f99e 	bl	8006380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006044:	e00a      	b.n	800605c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f99a 	bl	8006380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800604c:	e006      	b.n	800605c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f996 	bl	8006380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800605a:	e175      	b.n	8006348 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800605c:	bf00      	nop
    return;
 800605e:	e173      	b.n	8006348 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006064:	2b01      	cmp	r3, #1
 8006066:	f040 814f 	bne.w	8006308 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800606a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800606e:	f003 0310 	and.w	r3, r3, #16
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 8148 	beq.w	8006308 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800607c:	f003 0310 	and.w	r3, r3, #16
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 8141 	beq.w	8006308 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006086:	2300      	movs	r3, #0
 8006088:	60bb      	str	r3, [r7, #8]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60bb      	str	r3, [r7, #8]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	60bb      	str	r3, [r7, #8]
 800609a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a6:	2b40      	cmp	r3, #64	@ 0x40
 80060a8:	f040 80b6 	bne.w	8006218 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 8145 	beq.w	800634c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060ca:	429a      	cmp	r2, r3
 80060cc:	f080 813e 	bcs.w	800634c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060e2:	f000 8088 	beq.w	80061f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	330c      	adds	r3, #12
 80060ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80060fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006104:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	330c      	adds	r3, #12
 800610e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006112:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006116:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800611e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006122:	e841 2300 	strex	r3, r2, [r1]
 8006126:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800612a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1d9      	bne.n	80060e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3314      	adds	r3, #20
 8006138:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006142:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006144:	f023 0301 	bic.w	r3, r3, #1
 8006148:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3314      	adds	r3, #20
 8006152:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006156:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800615a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800615e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006168:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e1      	bne.n	8006132 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3314      	adds	r3, #20
 8006174:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006178:	e853 3f00 	ldrex	r3, [r3]
 800617c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800617e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006184:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3314      	adds	r3, #20
 800618e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006192:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006194:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006198:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80061a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e3      	bne.n	800616e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	330c      	adds	r3, #12
 80061ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061be:	e853 3f00 	ldrex	r3, [r3]
 80061c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80061c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061c6:	f023 0310 	bic.w	r3, r3, #16
 80061ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	330c      	adds	r3, #12
 80061d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80061d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80061da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e3      	bne.n	80061b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fd fa35 	bl	8003660 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2202      	movs	r2, #2
 80061fa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006204:	b29b      	uxth	r3, r3
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	b29b      	uxth	r3, r3
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7fb fef5 	bl	8001ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006212:	e09b      	b.n	800634c <HAL_UART_IRQHandler+0x518>
 8006214:	0800645b 	.word	0x0800645b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006220:	b29b      	uxth	r3, r3
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800622c:	b29b      	uxth	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 808e 	beq.w	8006350 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006234:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 8089 	beq.w	8006350 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	330c      	adds	r3, #12
 8006244:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800624e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006250:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006254:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	330c      	adds	r3, #12
 800625e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006262:	647a      	str	r2, [r7, #68]	@ 0x44
 8006264:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006268:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e3      	bne.n	800623e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3314      	adds	r3, #20
 800627c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	e853 3f00 	ldrex	r3, [r3]
 8006284:	623b      	str	r3, [r7, #32]
   return(result);
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	f023 0301 	bic.w	r3, r3, #1
 800628c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3314      	adds	r3, #20
 8006296:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800629a:	633a      	str	r2, [r7, #48]	@ 0x30
 800629c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062a2:	e841 2300 	strex	r3, r2, [r1]
 80062a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1e3      	bne.n	8006276 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	330c      	adds	r3, #12
 80062c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	e853 3f00 	ldrex	r3, [r3]
 80062ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0310 	bic.w	r3, r3, #16
 80062d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	330c      	adds	r3, #12
 80062dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80062e0:	61fa      	str	r2, [r7, #28]
 80062e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e4:	69b9      	ldr	r1, [r7, #24]
 80062e6:	69fa      	ldr	r2, [r7, #28]
 80062e8:	e841 2300 	strex	r3, r2, [r1]
 80062ec:	617b      	str	r3, [r7, #20]
   return(result);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1e3      	bne.n	80062bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7fb fe7b 	bl	8001ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006306:	e023      	b.n	8006350 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800630c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006310:	2b00      	cmp	r3, #0
 8006312:	d009      	beq.n	8006328 <HAL_UART_IRQHandler+0x4f4>
 8006314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f8ae 	bl	8006482 <UART_Transmit_IT>
    return;
 8006326:	e014      	b.n	8006352 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800632c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00e      	beq.n	8006352 <HAL_UART_IRQHandler+0x51e>
 8006334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800633c:	2b00      	cmp	r3, #0
 800633e:	d008      	beq.n	8006352 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f8ee 	bl	8006522 <UART_EndTransmit_IT>
    return;
 8006346:	e004      	b.n	8006352 <HAL_UART_IRQHandler+0x51e>
    return;
 8006348:	bf00      	nop
 800634a:	e002      	b.n	8006352 <HAL_UART_IRQHandler+0x51e>
      return;
 800634c:	bf00      	nop
 800634e:	e000      	b.n	8006352 <HAL_UART_IRQHandler+0x51e>
      return;
 8006350:	bf00      	nop
  }
}
 8006352:	37e8      	adds	r7, #232	@ 0xe8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006394:	b480      	push	{r7}
 8006396:	b095      	sub	sp, #84	@ 0x54
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	330c      	adds	r3, #12
 80063a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063a6:	e853 3f00 	ldrex	r3, [r3]
 80063aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	330c      	adds	r3, #12
 80063ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80063be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063c4:	e841 2300 	strex	r3, r2, [r1]
 80063c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e5      	bne.n	800639c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3314      	adds	r3, #20
 80063d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	61fb      	str	r3, [r7, #28]
   return(result);
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f023 0301 	bic.w	r3, r3, #1
 80063e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3314      	adds	r3, #20
 80063ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063f8:	e841 2300 	strex	r3, r2, [r1]
 80063fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1e5      	bne.n	80063d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006408:	2b01      	cmp	r3, #1
 800640a:	d119      	bne.n	8006440 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	60bb      	str	r3, [r7, #8]
   return(result);
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f023 0310 	bic.w	r3, r3, #16
 8006422:	647b      	str	r3, [r7, #68]	@ 0x44
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	330c      	adds	r3, #12
 800642a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800642c:	61ba      	str	r2, [r7, #24]
 800642e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6979      	ldr	r1, [r7, #20]
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	613b      	str	r3, [r7, #16]
   return(result);
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e5      	bne.n	800640c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2220      	movs	r2, #32
 8006444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800644e:	bf00      	nop
 8006450:	3754      	adds	r7, #84	@ 0x54
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006466:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f7ff ff83 	bl	8006380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800647a:	bf00      	nop
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006482:	b480      	push	{r7}
 8006484:	b085      	sub	sp, #20
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b21      	cmp	r3, #33	@ 0x21
 8006494:	d13e      	bne.n	8006514 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800649e:	d114      	bne.n	80064ca <UART_Transmit_IT+0x48>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d110      	bne.n	80064ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	1c9a      	adds	r2, r3, #2
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	621a      	str	r2, [r3, #32]
 80064c8:	e008      	b.n	80064dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	1c59      	adds	r1, r3, #1
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	6211      	str	r1, [r2, #32]
 80064d4:	781a      	ldrb	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	3b01      	subs	r3, #1
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	4619      	mov	r1, r3
 80064ea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10f      	bne.n	8006510 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68da      	ldr	r2, [r3, #12]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800650e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	e000      	b.n	8006516 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006514:	2302      	movs	r3, #2
  }
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006538:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2220      	movs	r2, #32
 800653e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7ff ff08 	bl	8006358 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b08c      	sub	sp, #48	@ 0x30
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b22      	cmp	r3, #34	@ 0x22
 8006564:	f040 80ae 	bne.w	80066c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006570:	d117      	bne.n	80065a2 <UART_Receive_IT+0x50>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d113      	bne.n	80065a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800657a:	2300      	movs	r3, #0
 800657c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006582:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	b29b      	uxth	r3, r3
 800658c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006590:	b29a      	uxth	r2, r3
 8006592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006594:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659a:	1c9a      	adds	r2, r3, #2
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	629a      	str	r2, [r3, #40]	@ 0x28
 80065a0:	e026      	b.n	80065f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80065a8:	2300      	movs	r3, #0
 80065aa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065b4:	d007      	beq.n	80065c6 <UART_Receive_IT+0x74>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10a      	bne.n	80065d4 <UART_Receive_IT+0x82>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d106      	bne.n	80065d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	e008      	b.n	80065e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	4619      	mov	r1, r3
 80065fe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006600:	2b00      	cmp	r3, #0
 8006602:	d15d      	bne.n	80066c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f022 0220 	bic.w	r2, r2, #32
 8006612:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006622:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695a      	ldr	r2, [r3, #20]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0201 	bic.w	r2, r2, #1
 8006632:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2220      	movs	r2, #32
 8006638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006646:	2b01      	cmp	r3, #1
 8006648:	d135      	bne.n	80066b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	330c      	adds	r3, #12
 8006656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	e853 3f00 	ldrex	r3, [r3]
 800665e:	613b      	str	r3, [r7, #16]
   return(result);
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f023 0310 	bic.w	r3, r3, #16
 8006666:	627b      	str	r3, [r7, #36]	@ 0x24
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	330c      	adds	r3, #12
 800666e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006670:	623a      	str	r2, [r7, #32]
 8006672:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006674:	69f9      	ldr	r1, [r7, #28]
 8006676:	6a3a      	ldr	r2, [r7, #32]
 8006678:	e841 2300 	strex	r3, r2, [r1]
 800667c:	61bb      	str	r3, [r7, #24]
   return(result);
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e5      	bne.n	8006650 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0310 	and.w	r3, r3, #16
 800668e:	2b10      	cmp	r3, #16
 8006690:	d10a      	bne.n	80066a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066ac:	4619      	mov	r1, r3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7fb fca4 	bl	8001ffc <HAL_UARTEx_RxEventCallback>
 80066b4:	e002      	b.n	80066bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7ff fe58 	bl	800636c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	e002      	b.n	80066c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	e000      	b.n	80066c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80066c4:	2302      	movs	r3, #2
  }
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3730      	adds	r7, #48	@ 0x30
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066d4:	b0c0      	sub	sp, #256	@ 0x100
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80066e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ec:	68d9      	ldr	r1, [r3, #12]
 80066ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	ea40 0301 	orr.w	r3, r0, r1
 80066f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	431a      	orrs	r2, r3
 8006708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	431a      	orrs	r2, r3
 8006710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	4313      	orrs	r3, r2
 8006718:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800671c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006728:	f021 010c 	bic.w	r1, r1, #12
 800672c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006736:	430b      	orrs	r3, r1
 8006738:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800673a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800674a:	6999      	ldr	r1, [r3, #24]
 800674c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	ea40 0301 	orr.w	r3, r0, r1
 8006756:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	4b8f      	ldr	r3, [pc, #572]	@ (800699c <UART_SetConfig+0x2cc>)
 8006760:	429a      	cmp	r2, r3
 8006762:	d005      	beq.n	8006770 <UART_SetConfig+0xa0>
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	4b8d      	ldr	r3, [pc, #564]	@ (80069a0 <UART_SetConfig+0x2d0>)
 800676c:	429a      	cmp	r2, r3
 800676e:	d104      	bne.n	800677a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006770:	f7fe f86c 	bl	800484c <HAL_RCC_GetPCLK2Freq>
 8006774:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006778:	e003      	b.n	8006782 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800677a:	f7fe f853 	bl	8004824 <HAL_RCC_GetPCLK1Freq>
 800677e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800678c:	f040 810c 	bne.w	80069a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006794:	2200      	movs	r2, #0
 8006796:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800679a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800679e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80067a2:	4622      	mov	r2, r4
 80067a4:	462b      	mov	r3, r5
 80067a6:	1891      	adds	r1, r2, r2
 80067a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80067aa:	415b      	adcs	r3, r3
 80067ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80067b2:	4621      	mov	r1, r4
 80067b4:	eb12 0801 	adds.w	r8, r2, r1
 80067b8:	4629      	mov	r1, r5
 80067ba:	eb43 0901 	adc.w	r9, r3, r1
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	f04f 0300 	mov.w	r3, #0
 80067c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067d2:	4690      	mov	r8, r2
 80067d4:	4699      	mov	r9, r3
 80067d6:	4623      	mov	r3, r4
 80067d8:	eb18 0303 	adds.w	r3, r8, r3
 80067dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067e0:	462b      	mov	r3, r5
 80067e2:	eb49 0303 	adc.w	r3, r9, r3
 80067e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80067fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80067fe:	460b      	mov	r3, r1
 8006800:	18db      	adds	r3, r3, r3
 8006802:	653b      	str	r3, [r7, #80]	@ 0x50
 8006804:	4613      	mov	r3, r2
 8006806:	eb42 0303 	adc.w	r3, r2, r3
 800680a:	657b      	str	r3, [r7, #84]	@ 0x54
 800680c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006810:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006814:	f7f9 fcd8 	bl	80001c8 <__aeabi_uldivmod>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	4b61      	ldr	r3, [pc, #388]	@ (80069a4 <UART_SetConfig+0x2d4>)
 800681e:	fba3 2302 	umull	r2, r3, r3, r2
 8006822:	095b      	lsrs	r3, r3, #5
 8006824:	011c      	lsls	r4, r3, #4
 8006826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800682a:	2200      	movs	r2, #0
 800682c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006830:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006834:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006838:	4642      	mov	r2, r8
 800683a:	464b      	mov	r3, r9
 800683c:	1891      	adds	r1, r2, r2
 800683e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006840:	415b      	adcs	r3, r3
 8006842:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006844:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006848:	4641      	mov	r1, r8
 800684a:	eb12 0a01 	adds.w	sl, r2, r1
 800684e:	4649      	mov	r1, r9
 8006850:	eb43 0b01 	adc.w	fp, r3, r1
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006860:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006864:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006868:	4692      	mov	sl, r2
 800686a:	469b      	mov	fp, r3
 800686c:	4643      	mov	r3, r8
 800686e:	eb1a 0303 	adds.w	r3, sl, r3
 8006872:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006876:	464b      	mov	r3, r9
 8006878:	eb4b 0303 	adc.w	r3, fp, r3
 800687c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800688c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006890:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006894:	460b      	mov	r3, r1
 8006896:	18db      	adds	r3, r3, r3
 8006898:	643b      	str	r3, [r7, #64]	@ 0x40
 800689a:	4613      	mov	r3, r2
 800689c:	eb42 0303 	adc.w	r3, r2, r3
 80068a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80068a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80068a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80068aa:	f7f9 fc8d 	bl	80001c8 <__aeabi_uldivmod>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	4611      	mov	r1, r2
 80068b4:	4b3b      	ldr	r3, [pc, #236]	@ (80069a4 <UART_SetConfig+0x2d4>)
 80068b6:	fba3 2301 	umull	r2, r3, r3, r1
 80068ba:	095b      	lsrs	r3, r3, #5
 80068bc:	2264      	movs	r2, #100	@ 0x64
 80068be:	fb02 f303 	mul.w	r3, r2, r3
 80068c2:	1acb      	subs	r3, r1, r3
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80068ca:	4b36      	ldr	r3, [pc, #216]	@ (80069a4 <UART_SetConfig+0x2d4>)
 80068cc:	fba3 2302 	umull	r2, r3, r3, r2
 80068d0:	095b      	lsrs	r3, r3, #5
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80068d8:	441c      	add	r4, r3
 80068da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068de:	2200      	movs	r2, #0
 80068e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80068e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80068ec:	4642      	mov	r2, r8
 80068ee:	464b      	mov	r3, r9
 80068f0:	1891      	adds	r1, r2, r2
 80068f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80068f4:	415b      	adcs	r3, r3
 80068f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80068fc:	4641      	mov	r1, r8
 80068fe:	1851      	adds	r1, r2, r1
 8006900:	6339      	str	r1, [r7, #48]	@ 0x30
 8006902:	4649      	mov	r1, r9
 8006904:	414b      	adcs	r3, r1
 8006906:	637b      	str	r3, [r7, #52]	@ 0x34
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006914:	4659      	mov	r1, fp
 8006916:	00cb      	lsls	r3, r1, #3
 8006918:	4651      	mov	r1, sl
 800691a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800691e:	4651      	mov	r1, sl
 8006920:	00ca      	lsls	r2, r1, #3
 8006922:	4610      	mov	r0, r2
 8006924:	4619      	mov	r1, r3
 8006926:	4603      	mov	r3, r0
 8006928:	4642      	mov	r2, r8
 800692a:	189b      	adds	r3, r3, r2
 800692c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006930:	464b      	mov	r3, r9
 8006932:	460a      	mov	r2, r1
 8006934:	eb42 0303 	adc.w	r3, r2, r3
 8006938:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006948:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800694c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006950:	460b      	mov	r3, r1
 8006952:	18db      	adds	r3, r3, r3
 8006954:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006956:	4613      	mov	r3, r2
 8006958:	eb42 0303 	adc.w	r3, r2, r3
 800695c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800695e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006962:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006966:	f7f9 fc2f 	bl	80001c8 <__aeabi_uldivmod>
 800696a:	4602      	mov	r2, r0
 800696c:	460b      	mov	r3, r1
 800696e:	4b0d      	ldr	r3, [pc, #52]	@ (80069a4 <UART_SetConfig+0x2d4>)
 8006970:	fba3 1302 	umull	r1, r3, r3, r2
 8006974:	095b      	lsrs	r3, r3, #5
 8006976:	2164      	movs	r1, #100	@ 0x64
 8006978:	fb01 f303 	mul.w	r3, r1, r3
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	3332      	adds	r3, #50	@ 0x32
 8006982:	4a08      	ldr	r2, [pc, #32]	@ (80069a4 <UART_SetConfig+0x2d4>)
 8006984:	fba2 2303 	umull	r2, r3, r2, r3
 8006988:	095b      	lsrs	r3, r3, #5
 800698a:	f003 0207 	and.w	r2, r3, #7
 800698e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4422      	add	r2, r4
 8006996:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006998:	e106      	b.n	8006ba8 <UART_SetConfig+0x4d8>
 800699a:	bf00      	nop
 800699c:	40011000 	.word	0x40011000
 80069a0:	40011400 	.word	0x40011400
 80069a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ac:	2200      	movs	r2, #0
 80069ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80069b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80069b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80069ba:	4642      	mov	r2, r8
 80069bc:	464b      	mov	r3, r9
 80069be:	1891      	adds	r1, r2, r2
 80069c0:	6239      	str	r1, [r7, #32]
 80069c2:	415b      	adcs	r3, r3
 80069c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80069c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069ca:	4641      	mov	r1, r8
 80069cc:	1854      	adds	r4, r2, r1
 80069ce:	4649      	mov	r1, r9
 80069d0:	eb43 0501 	adc.w	r5, r3, r1
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	00eb      	lsls	r3, r5, #3
 80069de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069e2:	00e2      	lsls	r2, r4, #3
 80069e4:	4614      	mov	r4, r2
 80069e6:	461d      	mov	r5, r3
 80069e8:	4643      	mov	r3, r8
 80069ea:	18e3      	adds	r3, r4, r3
 80069ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069f0:	464b      	mov	r3, r9
 80069f2:	eb45 0303 	adc.w	r3, r5, r3
 80069f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80069fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a0a:	f04f 0200 	mov.w	r2, #0
 8006a0e:	f04f 0300 	mov.w	r3, #0
 8006a12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006a16:	4629      	mov	r1, r5
 8006a18:	008b      	lsls	r3, r1, #2
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a20:	4621      	mov	r1, r4
 8006a22:	008a      	lsls	r2, r1, #2
 8006a24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006a28:	f7f9 fbce 	bl	80001c8 <__aeabi_uldivmod>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4b60      	ldr	r3, [pc, #384]	@ (8006bb4 <UART_SetConfig+0x4e4>)
 8006a32:	fba3 2302 	umull	r2, r3, r3, r2
 8006a36:	095b      	lsrs	r3, r3, #5
 8006a38:	011c      	lsls	r4, r3, #4
 8006a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006a48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006a4c:	4642      	mov	r2, r8
 8006a4e:	464b      	mov	r3, r9
 8006a50:	1891      	adds	r1, r2, r2
 8006a52:	61b9      	str	r1, [r7, #24]
 8006a54:	415b      	adcs	r3, r3
 8006a56:	61fb      	str	r3, [r7, #28]
 8006a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a5c:	4641      	mov	r1, r8
 8006a5e:	1851      	adds	r1, r2, r1
 8006a60:	6139      	str	r1, [r7, #16]
 8006a62:	4649      	mov	r1, r9
 8006a64:	414b      	adcs	r3, r1
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	f04f 0200 	mov.w	r2, #0
 8006a6c:	f04f 0300 	mov.w	r3, #0
 8006a70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a74:	4659      	mov	r1, fp
 8006a76:	00cb      	lsls	r3, r1, #3
 8006a78:	4651      	mov	r1, sl
 8006a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a7e:	4651      	mov	r1, sl
 8006a80:	00ca      	lsls	r2, r1, #3
 8006a82:	4610      	mov	r0, r2
 8006a84:	4619      	mov	r1, r3
 8006a86:	4603      	mov	r3, r0
 8006a88:	4642      	mov	r2, r8
 8006a8a:	189b      	adds	r3, r3, r2
 8006a8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a90:	464b      	mov	r3, r9
 8006a92:	460a      	mov	r2, r1
 8006a94:	eb42 0303 	adc.w	r3, r2, r3
 8006a98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006aa6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006aa8:	f04f 0200 	mov.w	r2, #0
 8006aac:	f04f 0300 	mov.w	r3, #0
 8006ab0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006ab4:	4649      	mov	r1, r9
 8006ab6:	008b      	lsls	r3, r1, #2
 8006ab8:	4641      	mov	r1, r8
 8006aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006abe:	4641      	mov	r1, r8
 8006ac0:	008a      	lsls	r2, r1, #2
 8006ac2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ac6:	f7f9 fb7f 	bl	80001c8 <__aeabi_uldivmod>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4611      	mov	r1, r2
 8006ad0:	4b38      	ldr	r3, [pc, #224]	@ (8006bb4 <UART_SetConfig+0x4e4>)
 8006ad2:	fba3 2301 	umull	r2, r3, r3, r1
 8006ad6:	095b      	lsrs	r3, r3, #5
 8006ad8:	2264      	movs	r2, #100	@ 0x64
 8006ada:	fb02 f303 	mul.w	r3, r2, r3
 8006ade:	1acb      	subs	r3, r1, r3
 8006ae0:	011b      	lsls	r3, r3, #4
 8006ae2:	3332      	adds	r3, #50	@ 0x32
 8006ae4:	4a33      	ldr	r2, [pc, #204]	@ (8006bb4 <UART_SetConfig+0x4e4>)
 8006ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aea:	095b      	lsrs	r3, r3, #5
 8006aec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006af0:	441c      	add	r4, r3
 8006af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006af6:	2200      	movs	r2, #0
 8006af8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006afa:	677a      	str	r2, [r7, #116]	@ 0x74
 8006afc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006b00:	4642      	mov	r2, r8
 8006b02:	464b      	mov	r3, r9
 8006b04:	1891      	adds	r1, r2, r2
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	415b      	adcs	r3, r3
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b10:	4641      	mov	r1, r8
 8006b12:	1851      	adds	r1, r2, r1
 8006b14:	6039      	str	r1, [r7, #0]
 8006b16:	4649      	mov	r1, r9
 8006b18:	414b      	adcs	r3, r1
 8006b1a:	607b      	str	r3, [r7, #4]
 8006b1c:	f04f 0200 	mov.w	r2, #0
 8006b20:	f04f 0300 	mov.w	r3, #0
 8006b24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b28:	4659      	mov	r1, fp
 8006b2a:	00cb      	lsls	r3, r1, #3
 8006b2c:	4651      	mov	r1, sl
 8006b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b32:	4651      	mov	r1, sl
 8006b34:	00ca      	lsls	r2, r1, #3
 8006b36:	4610      	mov	r0, r2
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	4642      	mov	r2, r8
 8006b3e:	189b      	adds	r3, r3, r2
 8006b40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b42:	464b      	mov	r3, r9
 8006b44:	460a      	mov	r2, r1
 8006b46:	eb42 0303 	adc.w	r3, r2, r3
 8006b4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b56:	667a      	str	r2, [r7, #100]	@ 0x64
 8006b58:	f04f 0200 	mov.w	r2, #0
 8006b5c:	f04f 0300 	mov.w	r3, #0
 8006b60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006b64:	4649      	mov	r1, r9
 8006b66:	008b      	lsls	r3, r1, #2
 8006b68:	4641      	mov	r1, r8
 8006b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b6e:	4641      	mov	r1, r8
 8006b70:	008a      	lsls	r2, r1, #2
 8006b72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006b76:	f7f9 fb27 	bl	80001c8 <__aeabi_uldivmod>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006bb4 <UART_SetConfig+0x4e4>)
 8006b80:	fba3 1302 	umull	r1, r3, r3, r2
 8006b84:	095b      	lsrs	r3, r3, #5
 8006b86:	2164      	movs	r1, #100	@ 0x64
 8006b88:	fb01 f303 	mul.w	r3, r1, r3
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	011b      	lsls	r3, r3, #4
 8006b90:	3332      	adds	r3, #50	@ 0x32
 8006b92:	4a08      	ldr	r2, [pc, #32]	@ (8006bb4 <UART_SetConfig+0x4e4>)
 8006b94:	fba2 2303 	umull	r2, r3, r2, r3
 8006b98:	095b      	lsrs	r3, r3, #5
 8006b9a:	f003 020f 	and.w	r2, r3, #15
 8006b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4422      	add	r2, r4
 8006ba6:	609a      	str	r2, [r3, #8]
}
 8006ba8:	bf00      	nop
 8006baa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bb4:	51eb851f 	.word	0x51eb851f

08006bb8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	6812      	ldr	r2, [r2, #0]
 8006bd0:	f023 0101 	bic.w	r1, r3, #1
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	2b08      	cmp	r3, #8
 8006be0:	d102      	bne.n	8006be8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006be2:	2340      	movs	r3, #64	@ 0x40
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	e001      	b.n	8006bec <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006be8:	2300      	movs	r3, #0
 8006bea:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006bf8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006bfe:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006c04:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006c0a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006c10:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006c16:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8006c1c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8006c22:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8006c28:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8006c46:	4b10      	ldr	r3, [pc, #64]	@ (8006c88 <FSMC_NORSRAM_Init+0xd0>)
 8006c48:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006c50:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006c58:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	43db      	mvns	r3, r3
 8006c68:	ea02 0103 	and.w	r1, r2, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	4319      	orrs	r1, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	0008fb7f 	.word	0x0008fb7f

08006c8c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	1c5a      	adds	r2, r3, #1
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca2:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	021b      	lsls	r3, r3, #8
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	041b      	lsls	r3, r3, #16
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	051b      	lsls	r3, r3, #20
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	3b02      	subs	r3, #2
 8006cd2:	061b      	lsls	r3, r3, #24
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	3201      	adds	r2, #1
 8006ce0:	4319      	orrs	r1, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
	...

08006cf8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
 8006d04:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d0c:	d11d      	bne.n	8006d4a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d16:	4b13      	ldr	r3, [pc, #76]	@ (8006d64 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006d18:	4013      	ands	r3, r2
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	6811      	ldr	r1, [r2, #0]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	6852      	ldr	r2, [r2, #4]
 8006d22:	0112      	lsls	r2, r2, #4
 8006d24:	4311      	orrs	r1, r2
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	6892      	ldr	r2, [r2, #8]
 8006d2a:	0212      	lsls	r2, r2, #8
 8006d2c:	4311      	orrs	r1, r2
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	6992      	ldr	r2, [r2, #24]
 8006d32:	4311      	orrs	r1, r2
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	68d2      	ldr	r2, [r2, #12]
 8006d38:	0412      	lsls	r2, r2, #16
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	ea43 0102 	orr.w	r1, r3, r2
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006d48:	e005      	b.n	8006d56 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8006d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	cff00000 	.word	0xcff00000

08006d68 <memset>:
 8006d68:	4402      	add	r2, r0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d100      	bne.n	8006d72 <memset+0xa>
 8006d70:	4770      	bx	lr
 8006d72:	f803 1b01 	strb.w	r1, [r3], #1
 8006d76:	e7f9      	b.n	8006d6c <memset+0x4>

08006d78 <__libc_init_array>:
 8006d78:	b570      	push	{r4, r5, r6, lr}
 8006d7a:	4d0d      	ldr	r5, [pc, #52]	@ (8006db0 <__libc_init_array+0x38>)
 8006d7c:	4c0d      	ldr	r4, [pc, #52]	@ (8006db4 <__libc_init_array+0x3c>)
 8006d7e:	1b64      	subs	r4, r4, r5
 8006d80:	10a4      	asrs	r4, r4, #2
 8006d82:	2600      	movs	r6, #0
 8006d84:	42a6      	cmp	r6, r4
 8006d86:	d109      	bne.n	8006d9c <__libc_init_array+0x24>
 8006d88:	4d0b      	ldr	r5, [pc, #44]	@ (8006db8 <__libc_init_array+0x40>)
 8006d8a:	4c0c      	ldr	r4, [pc, #48]	@ (8006dbc <__libc_init_array+0x44>)
 8006d8c:	f000 f818 	bl	8006dc0 <_init>
 8006d90:	1b64      	subs	r4, r4, r5
 8006d92:	10a4      	asrs	r4, r4, #2
 8006d94:	2600      	movs	r6, #0
 8006d96:	42a6      	cmp	r6, r4
 8006d98:	d105      	bne.n	8006da6 <__libc_init_array+0x2e>
 8006d9a:	bd70      	pop	{r4, r5, r6, pc}
 8006d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006da0:	4798      	blx	r3
 8006da2:	3601      	adds	r6, #1
 8006da4:	e7ee      	b.n	8006d84 <__libc_init_array+0xc>
 8006da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006daa:	4798      	blx	r3
 8006dac:	3601      	adds	r6, #1
 8006dae:	e7f2      	b.n	8006d96 <__libc_init_array+0x1e>
 8006db0:	08009dc0 	.word	0x08009dc0
 8006db4:	08009dc0 	.word	0x08009dc0
 8006db8:	08009dc0 	.word	0x08009dc0
 8006dbc:	08009dc4 	.word	0x08009dc4

08006dc0 <_init>:
 8006dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc2:	bf00      	nop
 8006dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc6:	bc08      	pop	{r3}
 8006dc8:	469e      	mov	lr, r3
 8006dca:	4770      	bx	lr

08006dcc <_fini>:
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	bf00      	nop
 8006dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd2:	bc08      	pop	{r3}
 8006dd4:	469e      	mov	lr, r3
 8006dd6:	4770      	bx	lr
