
ModBus_RTU_Implement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008028  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030b0  080081b8  080081b8  000181b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b268  0800b268  00020280  2**0
                  CONTENTS
  4 .ARM          00000008  0800b268  0800b268  0001b268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b270  0800b270  00020280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b270  0800b270  0001b270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b274  0800b274  0001b274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000280  20000000  0800b278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020280  2**0
                  CONTENTS
 10 .bss          000009ac  20000280  20000280  00020280  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c2c  20000c2c  00020280  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016864  00000000  00000000  000202f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ecb  00000000  00000000  00036b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001478  00000000  00000000  0003aa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fb4  00000000  00000000  0003bea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025cb3  00000000  00000000  0003ce54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b0dc  00000000  00000000  00062b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000de423  00000000  00000000  0007dbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000058e0  00000000  00000000  0015c008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  001618e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000280 	.word	0x20000280
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081a0 	.word	0x080081a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000284 	.word	0x20000284
 80001cc:	080081a0 	.word	0x080081a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <_f_splitfloat_def>:
uint16_t rx_size;
uint8_t tx_size; // for dummy

/*PRIVATE FUNCTION START DEFINE-----------------------------------------------------------------------------------------------------------*/
static void _f_splitfloat_def(float _input, uint8_t *data)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	ed87 0a01 	vstr	s0, [r7, #4]
 8000db2:	6038      	str	r0, [r7, #0]
	data[0] = *(((uint8_t*)&_input) + 0);
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	781a      	ldrb	r2, [r3, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	701a      	strb	r2, [r3, #0]
	data[1] = *(((uint8_t*)&_input) + 1);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	797a      	ldrb	r2, [r7, #5]
 8000dc2:	701a      	strb	r2, [r3, #0]
	data[2] = *(((uint8_t*)&_input) + 2);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	79ba      	ldrb	r2, [r7, #6]
 8000dca:	701a      	strb	r2, [r3, #0]
	data[3] = *(((uint8_t*)&_input) + 3);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	3303      	adds	r3, #3
 8000dd0:	79fa      	ldrb	r2, [r7, #7]
 8000dd2:	701a      	strb	r2, [r3, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_f_splituint16_def>:

static void _f_splituint16_def(uint16_t input, uint8_t *higherByte, uint8_t *lowerByte)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	81fb      	strh	r3, [r7, #14]
    *higherByte = (input >> 8) & 0xFF; // Lấy 8 bit cao
 8000dee:	89fb      	ldrh	r3, [r7, #14]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	701a      	strb	r2, [r3, #0]
    *lowerByte = input & 0xFF;        // Lấy 8 bit thấp
 8000dfa:	89fb      	ldrh	r3, [r7, #14]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	701a      	strb	r2, [r3, #0]
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <_f_slave_read_multiple_holding_register_handler_def>:

static void _f_slave_read_multiple_holding_register_handler_def(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
	uint16_t startReg = (uint16_t)(rx_buf[2]) << 8 | (uint16_t)(rx_buf[3]);
 8000e16:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <_f_slave_read_multiple_holding_register_handler_def+0xa0>)
 8000e18:	789b      	ldrb	r3, [r3, #2]
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <_f_slave_read_multiple_holding_register_handler_def+0xa0>)
 8000e20:	78db      	ldrb	r3, [r3, #3]
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	4313      	orrs	r3, r2
 8000e26:	b21b      	sxth	r3, r3
 8000e28:	807b      	strh	r3, [r7, #2]
	uint16_t numberOfReg = (uint16_t)(rx_buf[4]) << 8 | (uint16_t)(rx_buf[5]);
 8000e2a:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <_f_slave_read_multiple_holding_register_handler_def+0xa0>)
 8000e2c:	791b      	ldrb	r3, [r3, #4]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <_f_slave_read_multiple_holding_register_handler_def+0xa0>)
 8000e34:	795b      	ldrb	r3, [r3, #5]
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	803b      	strh	r3, [r7, #0]
	tx_buf[0] = _address_def;
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <_f_slave_read_multiple_holding_register_handler_def+0xa4>)
 8000e40:	781a      	ldrb	r2, [r3, #0]
 8000e42:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <_f_slave_read_multiple_holding_register_handler_def+0xa8>)
 8000e44:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = rx_buf[1];
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <_f_slave_read_multiple_holding_register_handler_def+0xa0>)
 8000e48:	785a      	ldrb	r2, [r3, #1]
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <_f_slave_read_multiple_holding_register_handler_def+0xa8>)
 8000e4c:	705a      	strb	r2, [r3, #1]
	tx_buf[2] = numberOfReg * 2;
 8000e4e:	883b      	ldrh	r3, [r7, #0]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <_f_slave_read_multiple_holding_register_handler_def+0xa8>)
 8000e58:	709a      	strb	r2, [r3, #2]
	int i;
	for(i = 0; i < numberOfReg * 2; i++){
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	e009      	b.n	8000e74 <_f_slave_read_multiple_holding_register_handler_def+0x64>
		tx_buf[i + 3] = _register_def[startReg];
 8000e60:	887a      	ldrh	r2, [r7, #2]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3303      	adds	r3, #3
 8000e66:	4915      	ldr	r1, [pc, #84]	; (8000ebc <_f_slave_read_multiple_holding_register_handler_def+0xac>)
 8000e68:	5c89      	ldrb	r1, [r1, r2]
 8000e6a:	4a13      	ldr	r2, [pc, #76]	; (8000eb8 <_f_slave_read_multiple_holding_register_handler_def+0xa8>)
 8000e6c:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < numberOfReg * 2; i++){
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3301      	adds	r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	883b      	ldrh	r3, [r7, #0]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	dbf0      	blt.n	8000e60 <_f_slave_read_multiple_holding_register_handler_def+0x50>
	}
	tx_size = i + 3;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	3303      	adds	r3, #3
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <_f_slave_read_multiple_holding_register_handler_def+0xb0>)
 8000e88:	701a      	strb	r2, [r3, #0]
	f_rs485_send_cmd(tx_buf, tx_size);
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <_f_slave_read_multiple_holding_register_handler_def+0xb0>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <_f_slave_read_multiple_holding_register_handler_def+0xa8>)
 8000e92:	f001 fc1b 	bl	80026cc <f_rs485_send_cmd>
	HAL_UART_Transmit(&huart1, tx_buf, tx_size, 100);
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <_f_slave_read_multiple_holding_register_handler_def+0xb0>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	2364      	movs	r3, #100	; 0x64
 8000e9e:	4906      	ldr	r1, [pc, #24]	; (8000eb8 <_f_slave_read_multiple_holding_register_handler_def+0xa8>)
 8000ea0:	4808      	ldr	r0, [pc, #32]	; (8000ec4 <_f_slave_read_multiple_holding_register_handler_def+0xb4>)
 8000ea2:	f005 fbfb 	bl	800669c <HAL_UART_Transmit>

	//	Modbus_Transmit_Slave(&slave, hDev->Address, slave.Rx_buf[1], &hDev->Register[startReg], numberOfReg * 2, 100);

	return;
 8000ea6:	bf00      	nop

}
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200003b4 	.word	0x200003b4
 8000eb4:	200002b0 	.word	0x200002b0
 8000eb8:	200002b4 	.word	0x200002b4
 8000ebc:	2000029c 	.word	0x2000029c
 8000ec0:	200004b8 	.word	0x200004b8
 8000ec4:	20000a08 	.word	0x20000a08

08000ec8 <_f_slave_read_holding_register_handler_def>:

static void _f_slave_read_holding_register_handler_def(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
	return;
 8000ecc:	bf00      	nop
}
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <_f_slave_write_holding_register_handler_def>:

static void _f_slave_write_holding_register_handler_def(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	f_rs485_send_cmd(rx_buf, rx_size);
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <_f_slave_write_holding_register_handler_def+0x28>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <_f_slave_write_holding_register_handler_def+0x2c>)
 8000ee6:	f001 fbf1 	bl	80026cc <f_rs485_send_cmd>
	_register_def[LED_REGISTER_ADDRESS] = rx_buf[4];
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <_f_slave_write_holding_register_handler_def+0x2c>)
 8000eec:	791a      	ldrb	r2, [r3, #4]
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <_f_slave_write_holding_register_handler_def+0x30>)
 8000ef0:	709a      	strb	r2, [r3, #2]
	_register_def[LED_REGISTER_ADDRESS + 1] = rx_buf[5];
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <_f_slave_write_holding_register_handler_def+0x2c>)
 8000ef4:	795a      	ldrb	r2, [r3, #5]
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <_f_slave_write_holding_register_handler_def+0x30>)
 8000ef8:	70da      	strb	r2, [r3, #3]
//	uint8_t CoilState = _register_def[LED_REGISTER_ADDRESS + 1];
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200004b6 	.word	0x200004b6
 8000f04:	200003b4 	.word	0x200003b4
 8000f08:	2000029c 	.word	0x2000029c

08000f0c <_f_slave_commandparser_handler_def>:

static void _f_slave_commandparser_handler_def(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
	switch(rx_buf[1]){
 8000f10:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <_f_slave_commandparser_handler_def+0x78>)
 8000f12:	785b      	ldrb	r3, [r3, #1]
 8000f14:	3b01      	subs	r3, #1
 8000f16:	2b0f      	cmp	r3, #15
 8000f18:	d82e      	bhi.n	8000f78 <_f_slave_commandparser_handler_def+0x6c>
 8000f1a:	a201      	add	r2, pc, #4	; (adr r2, 8000f20 <_f_slave_commandparser_handler_def+0x14>)
 8000f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f20:	08000f79 	.word	0x08000f79
 8000f24:	08000f79 	.word	0x08000f79
 8000f28:	08000f61 	.word	0x08000f61
 8000f2c:	08000f79 	.word	0x08000f79
 8000f30:	08000f79 	.word	0x08000f79
 8000f34:	08000f71 	.word	0x08000f71
 8000f38:	08000f79 	.word	0x08000f79
 8000f3c:	08000f79 	.word	0x08000f79
 8000f40:	08000f79 	.word	0x08000f79
 8000f44:	08000f79 	.word	0x08000f79
 8000f48:	08000f79 	.word	0x08000f79
 8000f4c:	08000f79 	.word	0x08000f79
 8000f50:	08000f79 	.word	0x08000f79
 8000f54:	08000f79 	.word	0x08000f79
 8000f58:	08000f79 	.word	0x08000f79
 8000f5c:	08000f69 	.word	0x08000f69
	{
		break;
	}
	case SIGNAL_READ_HOLDING_REGISTER:
	{
		_slave_state_def = STATE_READ_MULTIPLE_HOLDING_REGISTER_HANDLER;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <_f_slave_commandparser_handler_def+0x7c>)
 8000f62:	2203      	movs	r2, #3
 8000f64:	701a      	strb	r2, [r3, #0]
		break;
 8000f66:	e008      	b.n	8000f7a <_f_slave_commandparser_handler_def+0x6e>
	{
		break;
	}
	case SIGNAL_WRITE_MULTIPLE_HOLDING_REGISTER:
	{
		_slave_state_def = STATE_READ_MULTIPLE_HOLDING_REGISTER_HANDLER;
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <_f_slave_commandparser_handler_def+0x7c>)
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	701a      	strb	r2, [r3, #0]
		break;
 8000f6e:	e004      	b.n	8000f7a <_f_slave_commandparser_handler_def+0x6e>
	{
		break;
	}
	case SIGNAL_WRITE_SINGLE_HOLDING_REGISTER:
	{
		_slave_state_def = STATE_WRITE_HOLDING_REGISTER_HANDLER;
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <_f_slave_commandparser_handler_def+0x7c>)
 8000f72:	2205      	movs	r2, #5
 8000f74:	701a      	strb	r2, [r3, #0]
		break;
 8000f76:	e000      	b.n	8000f7a <_f_slave_commandparser_handler_def+0x6e>
	}
	default:
		break;
 8000f78:	bf00      	nop
	}
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	200003b4 	.word	0x200003b4
 8000f88:	200002b2 	.word	0x200002b2

08000f8c <_f_read_data_def>:

static void _f_read_data_def(void){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
	float tempCur = sensor_get_current();
 8000f92:	f001 fe35 	bl	8002c00 <sensor_get_current>
 8000f96:	ed87 0a03 	vstr	s0, [r7, #12]
	uint16_t tempLt = sensor_get_light();
 8000f9a:	f001 fddb 	bl	8002b54 <sensor_get_light>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	817b      	strh	r3, [r7, #10]
	uint16_t tempPt =sensor_get_potentiometer();
 8000fa2:	f001 fde3 	bl	8002b6c <sensor_get_potentiometer>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	813b      	strh	r3, [r7, #8]
	float tempT = sensor_get_temperature();
 8000faa:	f001 fe85 	bl	8002cb8 <sensor_get_temperature>
 8000fae:	ed87 0a01 	vstr	s0, [r7, #4]
	float tempVol = sensor_get_voltage();
 8000fb2:	f001 fde9 	bl	8002b88 <sensor_get_voltage>
 8000fb6:	ed87 0a00 	vstr	s0, [r7]

	// Current
	_f_splitfloat_def(tempCur, &_register_def[CURRENT_REGISTER_ADDRESS]);
 8000fba:	480f      	ldr	r0, [pc, #60]	; (8000ff8 <_f_read_data_def+0x6c>)
 8000fbc:	ed97 0a03 	vldr	s0, [r7, #12]
 8000fc0:	f7ff fef2 	bl	8000da8 <_f_splitfloat_def>
	// Temperature
	_f_splitfloat_def(tempT, &_register_def[TEMPERATURE_REGISTER_ADDRESS]);
 8000fc4:	480d      	ldr	r0, [pc, #52]	; (8000ffc <_f_read_data_def+0x70>)
 8000fc6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fca:	f7ff feed 	bl	8000da8 <_f_splitfloat_def>
	// Voltage
	_f_splitfloat_def(tempVol, &_register_def[VOLTAGE_REGISTER_ADDRESS]);
 8000fce:	480c      	ldr	r0, [pc, #48]	; (8001000 <_f_read_data_def+0x74>)
 8000fd0:	ed97 0a00 	vldr	s0, [r7]
 8000fd4:	f7ff fee8 	bl	8000da8 <_f_splitfloat_def>
	// Light
	_f_splituint16_def(tempLt, &_register_def[LIGHT_REGISTER_ADDRESS], &_register_def[LIGHT_REGISTER_ADDRESS + 1]);
 8000fd8:	897b      	ldrh	r3, [r7, #10]
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <_f_read_data_def+0x78>)
 8000fdc:	490a      	ldr	r1, [pc, #40]	; (8001008 <_f_read_data_def+0x7c>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fefe 	bl	8000de0 <_f_splituint16_def>
	// Potentiometer
	_f_splituint16_def(tempPt, &_register_def[POTENTIOMETER_REGISTER_ADDRESS], &_register_def[POTENTIOMETER_REGISTER_ADDRESS + 1]);
 8000fe4:	893b      	ldrh	r3, [r7, #8]
 8000fe6:	4a09      	ldr	r2, [pc, #36]	; (800100c <_f_read_data_def+0x80>)
 8000fe8:	4909      	ldr	r1, [pc, #36]	; (8001010 <_f_read_data_def+0x84>)
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fef8 	bl	8000de0 <_f_splituint16_def>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200002a6 	.word	0x200002a6
 8000ffc:	200002a2 	.word	0x200002a2
 8001000:	200002aa 	.word	0x200002aa
 8001004:	200002a1 	.word	0x200002a1
 8001008:	200002a0 	.word	0x200002a0
 800100c:	2000029d 	.word	0x2000029d
 8001010:	2000029c 	.word	0x2000029c

08001014 <_f_is_flag_def>:

static uint8_t _f_is_flag_def(void){
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
	if(flag_rx){
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <_f_is_flag_def+0x24>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d004      	beq.n	800102a <_f_is_flag_def+0x16>
		flag_rx = 0;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <_f_is_flag_def+0x24>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
		return 1;
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <_f_is_flag_def+0x18>
	}
	return 0;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	200004b4 	.word	0x200004b4

0800103c <f_slave_init_def>:
/*PRIVATE FUNCTION END DEFINE-----------------------------------------------------------------------------------------------------------*/


/*PUBLIC FUNCTION START DEFINE-----------------------------------------------------------------------------------------------------------*/
void f_slave_init_def(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	_slave_signal_def = 0;
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <f_slave_init_def+0x30>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
	_slave_state_def = STATE_IDLE;
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <f_slave_init_def+0x34>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
	_address_def = SLAVE_ADDRESS;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <f_slave_init_def+0x38>)
 800104e:	2202      	movs	r2, #2
 8001050:	701a      	strb	r2, [r3, #0]
	memset(_register_def, 0, sizeof(_register_def));
 8001052:	2214      	movs	r2, #20
 8001054:	2100      	movs	r1, #0
 8001056:	4808      	ldr	r0, [pc, #32]	; (8001078 <f_slave_init_def+0x3c>)
 8001058:	f006 fc1e 	bl	8007898 <memset>
	f_rs485_init(&huart3, rx_buf, &flag_rx, &rx_size);
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <f_slave_init_def+0x40>)
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <f_slave_init_def+0x44>)
 8001060:	4908      	ldr	r1, [pc, #32]	; (8001084 <f_slave_init_def+0x48>)
 8001062:	4809      	ldr	r0, [pc, #36]	; (8001088 <f_slave_init_def+0x4c>)
 8001064:	f001 fb10 	bl	8002688 <f_rs485_init>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200002b1 	.word	0x200002b1
 8001070:	200002b2 	.word	0x200002b2
 8001074:	200002b0 	.word	0x200002b0
 8001078:	2000029c 	.word	0x2000029c
 800107c:	200004b6 	.word	0x200004b6
 8001080:	200004b4 	.word	0x200004b4
 8001084:	200003b4 	.word	0x200003b4
 8001088:	20000a98 	.word	0x20000a98

0800108c <f_slave_behavior_def>:

void f_slave_behavior_def(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	switch(_slave_state_def)
 8001090:	4b22      	ldr	r3, [pc, #136]	; (800111c <f_slave_behavior_def+0x90>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b05      	cmp	r3, #5
 8001096:	d83c      	bhi.n	8001112 <f_slave_behavior_def+0x86>
 8001098:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <f_slave_behavior_def+0x14>)
 800109a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109e:	bf00      	nop
 80010a0:	080010b9 	.word	0x080010b9
 80010a4:	080010c1 	.word	0x080010c1
 80010a8:	080010dd 	.word	0x080010dd
 80010ac:	080010e9 	.word	0x080010e9
 80010b0:	080010fb 	.word	0x080010fb
 80010b4:	08001107 	.word	0x08001107
	{
	case STATE_IDLE:
	{
		if(1){
			_slave_state_def = STATE_WAITTING_FOR_CMD;
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <f_slave_behavior_def+0x90>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80010be:	e02b      	b.n	8001118 <f_slave_behavior_def+0x8c>
	}
	case STATE_WAITTING_FOR_CMD:
	{
		_f_read_data_def();
 80010c0:	f7ff ff64 	bl	8000f8c <_f_read_data_def>
		if(_f_is_flag_def()){
 80010c4:	f7ff ffa6 	bl	8001014 <_f_is_flag_def>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d023      	beq.n	8001116 <f_slave_behavior_def+0x8a>
			uart_Rs232SendString((uint8_t*)"FLAG_ON\n\r");
 80010ce:	4814      	ldr	r0, [pc, #80]	; (8001120 <f_slave_behavior_def+0x94>)
 80010d0:	f001 fa62 	bl	8002598 <uart_Rs232SendString>
			_slave_state_def = STATE_COMMAND_PARSER;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <f_slave_behavior_def+0x90>)
 80010d6:	2202      	movs	r2, #2
 80010d8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80010da:	e01c      	b.n	8001116 <f_slave_behavior_def+0x8a>
	}
	case STATE_COMMAND_PARSER:
	{
		uart_Rs232SendString((uint8_t*)"COMMAND_PARSER\n\r");
 80010dc:	4811      	ldr	r0, [pc, #68]	; (8001124 <f_slave_behavior_def+0x98>)
 80010de:	f001 fa5b 	bl	8002598 <uart_Rs232SendString>
		_f_slave_commandparser_handler_def();
 80010e2:	f7ff ff13 	bl	8000f0c <_f_slave_commandparser_handler_def>
		break;
 80010e6:	e017      	b.n	8001118 <f_slave_behavior_def+0x8c>
	}
	case STATE_READ_MULTIPLE_HOLDING_REGISTER_HANDLER:
	{
		uart_Rs232SendString((uint8_t*)"READ_MULTIPLE\n\r");
 80010e8:	480f      	ldr	r0, [pc, #60]	; (8001128 <f_slave_behavior_def+0x9c>)
 80010ea:	f001 fa55 	bl	8002598 <uart_Rs232SendString>
		_f_slave_read_multiple_holding_register_handler_def();
 80010ee:	f7ff fe8f 	bl	8000e10 <_f_slave_read_multiple_holding_register_handler_def>
		if(1){
			_slave_state_def = STATE_IDLE;
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <f_slave_behavior_def+0x90>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80010f8:	e00e      	b.n	8001118 <f_slave_behavior_def+0x8c>
	}
	case STATE_READ_HOLDING_REGISTER_HANDLER:
	{
		_f_slave_read_holding_register_handler_def();
 80010fa:	f7ff fee5 	bl	8000ec8 <_f_slave_read_holding_register_handler_def>
		if(1){
			_slave_state_def = STATE_IDLE;
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <f_slave_behavior_def+0x90>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001104:	e008      	b.n	8001118 <f_slave_behavior_def+0x8c>
	}
	case STATE_WRITE_HOLDING_REGISTER_HANDLER:
	{
		_f_slave_write_holding_register_handler_def();
 8001106:	f7ff fee7 	bl	8000ed8 <_f_slave_write_holding_register_handler_def>
		if(1){
			_slave_state_def = STATE_IDLE;
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <f_slave_behavior_def+0x90>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001110:	e002      	b.n	8001118 <f_slave_behavior_def+0x8c>
	}
	default:
		break;
 8001112:	bf00      	nop
 8001114:	e000      	b.n	8001118 <f_slave_behavior_def+0x8c>
		break;
 8001116:	bf00      	nop
	}
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200002b2 	.word	0x200002b2
 8001120:	080081b8 	.word	0x080081b8
 8001124:	080081c4 	.word	0x080081c4
 8001128:	080081d8 	.word	0x080081d8

0800112c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800113e:	4b39      	ldr	r3, [pc, #228]	; (8001224 <MX_ADC1_Init+0xf8>)
 8001140:	4a39      	ldr	r2, [pc, #228]	; (8001228 <MX_ADC1_Init+0xfc>)
 8001142:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001144:	4b37      	ldr	r3, [pc, #220]	; (8001224 <MX_ADC1_Init+0xf8>)
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800114a:	4b36      	ldr	r3, [pc, #216]	; (8001224 <MX_ADC1_Init+0xf8>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001150:	4b34      	ldr	r3, [pc, #208]	; (8001224 <MX_ADC1_Init+0xf8>)
 8001152:	2201      	movs	r2, #1
 8001154:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001156:	4b33      	ldr	r3, [pc, #204]	; (8001224 <MX_ADC1_Init+0xf8>)
 8001158:	2200      	movs	r2, #0
 800115a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800115c:	4b31      	ldr	r3, [pc, #196]	; (8001224 <MX_ADC1_Init+0xf8>)
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001164:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <MX_ADC1_Init+0xf8>)
 8001166:	2200      	movs	r2, #0
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800116a:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <MX_ADC1_Init+0xf8>)
 800116c:	4a2f      	ldr	r2, [pc, #188]	; (800122c <MX_ADC1_Init+0x100>)
 800116e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001170:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <MX_ADC1_Init+0xf8>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001176:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <MX_ADC1_Init+0xf8>)
 8001178:	2205      	movs	r2, #5
 800117a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800117c:	4b29      	ldr	r3, [pc, #164]	; (8001224 <MX_ADC1_Init+0xf8>)
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <MX_ADC1_Init+0xf8>)
 8001186:	2201      	movs	r2, #1
 8001188:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800118a:	4826      	ldr	r0, [pc, #152]	; (8001224 <MX_ADC1_Init+0xf8>)
 800118c:	f002 f9b6 	bl	80034fc <HAL_ADC_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001196:	f001 f9f9 	bl	800258c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800119a:	2308      	movs	r3, #8
 800119c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80011a2:	2301      	movs	r3, #1
 80011a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a6:	463b      	mov	r3, r7
 80011a8:	4619      	mov	r1, r3
 80011aa:	481e      	ldr	r0, [pc, #120]	; (8001224 <MX_ADC1_Init+0xf8>)
 80011ac:	f002 fb18 	bl	80037e0 <HAL_ADC_ConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011b6:	f001 f9e9 	bl	800258c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011be:	463b      	mov	r3, r7
 80011c0:	4619      	mov	r1, r3
 80011c2:	4818      	ldr	r0, [pc, #96]	; (8001224 <MX_ADC1_Init+0xf8>)
 80011c4:	f002 fb0c 	bl	80037e0 <HAL_ADC_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80011ce:	f001 f9dd 	bl	800258c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 80011d2:	2303      	movs	r3, #3
 80011d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d6:	463b      	mov	r3, r7
 80011d8:	4619      	mov	r1, r3
 80011da:	4812      	ldr	r0, [pc, #72]	; (8001224 <MX_ADC1_Init+0xf8>)
 80011dc:	f002 fb00 	bl	80037e0 <HAL_ADC_ConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80011e6:	f001 f9d1 	bl	800258c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 80011ea:	2304      	movs	r3, #4
 80011ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ee:	463b      	mov	r3, r7
 80011f0:	4619      	mov	r1, r3
 80011f2:	480c      	ldr	r0, [pc, #48]	; (8001224 <MX_ADC1_Init+0xf8>)
 80011f4:	f002 faf4 	bl	80037e0 <HAL_ADC_ConfigChannel>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80011fe:	f001 f9c5 	bl	800258c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 8001202:	2305      	movs	r3, #5
 8001204:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001206:	463b      	mov	r3, r7
 8001208:	4619      	mov	r1, r3
 800120a:	4806      	ldr	r0, [pc, #24]	; (8001224 <MX_ADC1_Init+0xf8>)
 800120c:	f002 fae8 	bl	80037e0 <HAL_ADC_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8001216:	f001 f9b9 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200004bc 	.word	0x200004bc
 8001228:	40012000 	.word	0x40012000
 800122c:	0f000001 	.word	0x0f000001

08001230 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a3c      	ldr	r2, [pc, #240]	; (8001340 <HAL_ADC_MspInit+0x110>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d171      	bne.n	8001336 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <HAL_ADC_MspInit+0x114>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a3a      	ldr	r2, [pc, #232]	; (8001344 <HAL_ADC_MspInit+0x114>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b38      	ldr	r3, [pc, #224]	; (8001344 <HAL_ADC_MspInit+0x114>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b34      	ldr	r3, [pc, #208]	; (8001344 <HAL_ADC_MspInit+0x114>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a33      	ldr	r2, [pc, #204]	; (8001344 <HAL_ADC_MspInit+0x114>)
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b31      	ldr	r3, [pc, #196]	; (8001344 <HAL_ADC_MspInit+0x114>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <HAL_ADC_MspInit+0x114>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a2c      	ldr	r2, [pc, #176]	; (8001344 <HAL_ADC_MspInit+0x114>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <HAL_ADC_MspInit+0x114>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80012a6:	2307      	movs	r3, #7
 80012a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012aa:	2303      	movs	r3, #3
 80012ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	4823      	ldr	r0, [pc, #140]	; (8001348 <HAL_ADC_MspInit+0x118>)
 80012ba:	f003 fa45 	bl	8004748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012be:	2303      	movs	r3, #3
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c2:	2303      	movs	r3, #3
 80012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	481e      	ldr	r0, [pc, #120]	; (800134c <HAL_ADC_MspInit+0x11c>)
 80012d2:	f003 fa39 	bl	8004748 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012d6:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <HAL_ADC_MspInit+0x120>)
 80012d8:	4a1e      	ldr	r2, [pc, #120]	; (8001354 <HAL_ADC_MspInit+0x124>)
 80012da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012dc:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <HAL_ADC_MspInit+0x120>)
 80012de:	2200      	movs	r2, #0
 80012e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <HAL_ADC_MspInit+0x120>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <HAL_ADC_MspInit+0x120>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_ADC_MspInit+0x120>)
 80012f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_ADC_MspInit+0x120>)
 80012f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <HAL_ADC_MspInit+0x120>)
 8001300:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001304:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_ADC_MspInit+0x120>)
 8001308:	f44f 7280 	mov.w	r2, #256	; 0x100
 800130c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <HAL_ADC_MspInit+0x120>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_ADC_MspInit+0x120>)
 8001316:	2200      	movs	r2, #0
 8001318:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800131a:	480d      	ldr	r0, [pc, #52]	; (8001350 <HAL_ADC_MspInit+0x120>)
 800131c:	f002 fe12 	bl	8003f44 <HAL_DMA_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001326:	f001 f931 	bl	800258c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a08      	ldr	r2, [pc, #32]	; (8001350 <HAL_ADC_MspInit+0x120>)
 800132e:	639a      	str	r2, [r3, #56]	; 0x38
 8001330:	4a07      	ldr	r2, [pc, #28]	; (8001350 <HAL_ADC_MspInit+0x120>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	; 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40012000 	.word	0x40012000
 8001344:	40023800 	.word	0x40023800
 8001348:	40020800 	.word	0x40020800
 800134c:	40020400 	.word	0x40020400
 8001350:	20000504 	.word	0x20000504
 8001354:	40026410 	.word	0x40026410

08001358 <button_scan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void button_scan() {
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
	// Shift button input
	for (int i = 0; i < 16; i++)
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	e012      	b.n	800138a <button_scan+0x32>
	{
		button_count2[i] = button_count1[i];
 8001364:	4a68      	ldr	r2, [pc, #416]	; (8001508 <button_scan+0x1b0>)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800136c:	4a67      	ldr	r2, [pc, #412]	; (800150c <button_scan+0x1b4>)
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		button_count1[i] = button_count[i];
 8001374:	4a66      	ldr	r2, [pc, #408]	; (8001510 <button_scan+0x1b8>)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800137c:	4a62      	ldr	r2, [pc, #392]	; (8001508 <button_scan+0x1b0>)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 16; i++)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2b0f      	cmp	r3, #15
 800138e:	dde9      	ble.n	8001364 <button_scan+0xc>
	}

	// Get new key input to button_count
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8001390:	2200      	movs	r2, #0
 8001392:	2108      	movs	r1, #8
 8001394:	485f      	ldr	r0, [pc, #380]	; (8001514 <button_scan+0x1bc>)
 8001396:	f003 fb73 	bl	8004a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800139a:	2201      	movs	r2, #1
 800139c:	2108      	movs	r1, #8
 800139e:	485d      	ldr	r0, [pc, #372]	; (8001514 <button_scan+0x1bc>)
 80013a0:	f003 fb6e 	bl	8004a80 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 80013a4:	230a      	movs	r3, #10
 80013a6:	2202      	movs	r2, #2
 80013a8:	495b      	ldr	r1, [pc, #364]	; (8001518 <button_scan+0x1c0>)
 80013aa:	485c      	ldr	r0, [pc, #368]	; (800151c <button_scan+0x1c4>)
 80013ac:	f004 f863 	bl	8005476 <HAL_SPI_Receive>

	int button_index = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
	uint16_t mask = 0x8000;
 80013b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013b8:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++) {
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	e03a      	b.n	8001436 <button_scan+0xde>
		if (i >= 0 && i <= 3) {
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	db06      	blt.n	80013d4 <button_scan+0x7c>
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	dc03      	bgt.n	80013d4 <button_scan+0x7c>
			button_index = i + 4;
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	3304      	adds	r3, #4
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	e018      	b.n	8001406 <button_scan+0xae>
		} else if (i >= 4 && i <= 7) {
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	dd07      	ble.n	80013ea <button_scan+0x92>
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	2b07      	cmp	r3, #7
 80013de:	dc04      	bgt.n	80013ea <button_scan+0x92>
			button_index = 7 - i;
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	e00d      	b.n	8001406 <button_scan+0xae>
		} else if (i >= 8 && i <= 11) {
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	2b07      	cmp	r3, #7
 80013ee:	dd06      	ble.n	80013fe <button_scan+0xa6>
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	2b0b      	cmp	r3, #11
 80013f4:	dc03      	bgt.n	80013fe <button_scan+0xa6>
			button_index = i + 4;
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	3304      	adds	r3, #4
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	e003      	b.n	8001406 <button_scan+0xae>
		} else {
			button_index = 23 - i;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f1c3 0317 	rsb	r3, r3, #23
 8001404:	613b      	str	r3, [r7, #16]
		}
		if (button_spi_buffer & mask)
 8001406:	4b44      	ldr	r3, [pc, #272]	; (8001518 <button_scan+0x1c0>)
 8001408:	881a      	ldrh	r2, [r3, #0]
 800140a:	89fb      	ldrh	r3, [r7, #14]
 800140c:	4013      	ands	r3, r2
 800140e:	b29b      	uxth	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <button_scan+0xc8>
			button_count[button_index] = 0;
 8001414:	4a3e      	ldr	r2, [pc, #248]	; (8001510 <button_scan+0x1b8>)
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	2100      	movs	r1, #0
 800141a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800141e:	e004      	b.n	800142a <button_scan+0xd2>
		else
			button_count[button_index] = 1;
 8001420:	4a3b      	ldr	r2, [pc, #236]	; (8001510 <button_scan+0x1b8>)
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	2101      	movs	r1, #1
 8001426:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 800142a:	89fb      	ldrh	r3, [r7, #14]
 800142c:	085b      	lsrs	r3, r3, #1
 800142e:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++) {
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	3301      	adds	r3, #1
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	ddc1      	ble.n	80013c0 <button_scan+0x68>
	}

	for (int i = 0; i < 16; i++)
 800143c:	2300      	movs	r3, #0
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	e059      	b.n	80014f6 <button_scan+0x19e>
	{
		if ((button_count[i] == button_count1[i]) && (button_count1[i] == button_count2[i]))
 8001442:	4a33      	ldr	r2, [pc, #204]	; (8001510 <button_scan+0x1b8>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800144a:	492f      	ldr	r1, [pc, #188]	; (8001508 <button_scan+0x1b0>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001452:	429a      	cmp	r2, r3
 8001454:	d14c      	bne.n	80014f0 <button_scan+0x198>
 8001456:	4a2c      	ldr	r2, [pc, #176]	; (8001508 <button_scan+0x1b0>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800145e:	492b      	ldr	r1, [pc, #172]	; (800150c <button_scan+0x1b4>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001466:	429a      	cmp	r2, r3
 8001468:	d142      	bne.n	80014f0 <button_scan+0x198>
		{
			if (button_count2[i] != button_count3[i])
 800146a:	4a28      	ldr	r2, [pc, #160]	; (800150c <button_scan+0x1b4>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001472:	492b      	ldr	r1, [pc, #172]	; (8001520 <button_scan+0x1c8>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800147a:	429a      	cmp	r2, r3
 800147c:	d018      	beq.n	80014b0 <button_scan+0x158>
			{
				button_count3[i] = button_count2[i];
 800147e:	4a23      	ldr	r2, [pc, #140]	; (800150c <button_scan+0x1b4>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001486:	4a26      	ldr	r2, [pc, #152]	; (8001520 <button_scan+0x1c8>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				if (button_count3[i] == 1) // PRESSED
 800148e:	4a24      	ldr	r2, [pc, #144]	; (8001520 <button_scan+0x1c8>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d12a      	bne.n	80014f0 <button_scan+0x198>
				{
					timeOutForPress[i] = TIME_OUT_FOR_LONG_PRESS / TI_BUTTON_SCAN_TIME;
 800149a:	4a22      	ldr	r2, [pc, #136]	; (8001524 <button_scan+0x1cc>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2119      	movs	r1, #25
 80014a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					isPressed[i] = 1;
 80014a4:	4a20      	ldr	r2, [pc, #128]	; (8001528 <button_scan+0x1d0>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2101      	movs	r1, #1
 80014aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80014ae:	e01f      	b.n	80014f0 <button_scan+0x198>
				}
			}
			else
			{
				timeOutForPress[i]--;
 80014b0:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <button_scan+0x1cc>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	b299      	uxth	r1, r3
 80014bc:	4a19      	ldr	r2, [pc, #100]	; (8001524 <button_scan+0x1cc>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if (timeOutForPress[i] <= 0)
 80014c4:	4a17      	ldr	r2, [pc, #92]	; (8001524 <button_scan+0x1cc>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10f      	bne.n	80014f0 <button_scan+0x198>
				{
					timeOutForPress[i] = TIME_OUT_FOR_LONG_PRESS / TI_BUTTON_SCAN_TIME;
 80014d0:	4a14      	ldr	r2, [pc, #80]	; (8001524 <button_scan+0x1cc>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2119      	movs	r1, #25
 80014d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (button_count3[i] == 1) // PRESSED
 80014da:	4a11      	ldr	r2, [pc, #68]	; (8001520 <button_scan+0x1c8>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d104      	bne.n	80014f0 <button_scan+0x198>
					{
						isLongPressed[i] = 1;
 80014e6:	4a11      	ldr	r2, [pc, #68]	; (800152c <button_scan+0x1d4>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2101      	movs	r1, #1
 80014ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 16; i++)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3301      	adds	r3, #1
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	dda2      	ble.n	8001442 <button_scan+0xea>
					}
				}
			}
		}
	}
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200005e4 	.word	0x200005e4
 800150c:	200005c4 	.word	0x200005c4
 8001510:	20000604 	.word	0x20000604
 8001514:	40020c00 	.word	0x40020c00
 8001518:	20000624 	.word	0x20000624
 800151c:	20000914 	.word	0x20000914
 8001520:	200005a4 	.word	0x200005a4
 8001524:	20000000 	.word	0x20000000
 8001528:	20000564 	.word	0x20000564
 800152c:	20000584 	.word	0x20000584

08001530 <crc16>:
    0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641,
    0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040
};

uint16_t crc16(const uint8_t *data, uint16_t num_bytes)
{
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]

    uint16_t crc = 0xFFFF;
 800153c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001540:	82fb      	strh	r3, [r7, #22]
    const uint8_t *ptr = data;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	613b      	str	r3, [r7, #16]

    if (ptr != NULL)
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d018      	beq.n	800157e <crc16+0x4e>
    {
        for (uint16_t i = 0; i < num_bytes; i++)
 800154c:	2300      	movs	r3, #0
 800154e:	81fb      	strh	r3, [r7, #14]
 8001550:	e011      	b.n	8001576 <crc16+0x46>
        {
            crc = (crc >> 8) ^ crc16_lookup_table[(crc ^ (uint16_t)*ptr++) & 0x00FF];
 8001552:	8afb      	ldrh	r3, [r7, #22]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	b29a      	uxth	r2, r3
 8001558:	8af9      	ldrh	r1, [r7, #22]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1c58      	adds	r0, r3, #1
 800155e:	6138      	str	r0, [r7, #16]
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	404b      	eors	r3, r1
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4909      	ldr	r1, [pc, #36]	; (800158c <crc16+0x5c>)
 8001568:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800156c:	4053      	eors	r3, r2
 800156e:	82fb      	strh	r3, [r7, #22]
        for (uint16_t i = 0; i < num_bytes; i++)
 8001570:	89fb      	ldrh	r3, [r7, #14]
 8001572:	3301      	adds	r3, #1
 8001574:	81fb      	strh	r3, [r7, #14]
 8001576:	89fa      	ldrh	r2, [r7, #14]
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	429a      	cmp	r2, r3
 800157c:	d3e9      	bcc.n	8001552 <crc16+0x22>
        }
    }

    return crc;
 800157e:	8afb      	ldrh	r3, [r7, #22]
}
 8001580:	4618      	mov	r0, r3
 8001582:	371c      	adds	r7, #28
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	20000020 	.word	0x20000020

08001590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_DMA_Init+0x3c>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <MX_DMA_Init+0x3c>)
 80015a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_DMA_Init+0x3c>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2038      	movs	r0, #56	; 0x38
 80015b8:	f002 fc8d 	bl	8003ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015bc:	2038      	movs	r0, #56	; 0x38
 80015be:	f002 fca6 	bl	8003f0e <HAL_NVIC_EnableIRQ>

}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08e      	sub	sp, #56	; 0x38
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]
 80015e6:	615a      	str	r2, [r3, #20]
 80015e8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80015ea:	463b      	mov	r3, r7
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
 80015f8:	615a      	str	r2, [r3, #20]
 80015fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80015fc:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <MX_FSMC_Init+0xec>)
 80015fe:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001602:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001604:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <MX_FSMC_Init+0xec>)
 8001606:	4a2e      	ldr	r2, [pc, #184]	; (80016c0 <MX_FSMC_Init+0xf0>)
 8001608:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800160a:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <MX_FSMC_Init+0xec>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001610:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <MX_FSMC_Init+0xec>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001616:	4b29      	ldr	r3, [pc, #164]	; (80016bc <MX_FSMC_Init+0xec>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800161c:	4b27      	ldr	r3, [pc, #156]	; (80016bc <MX_FSMC_Init+0xec>)
 800161e:	2210      	movs	r2, #16
 8001620:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001622:	4b26      	ldr	r3, [pc, #152]	; (80016bc <MX_FSMC_Init+0xec>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001628:	4b24      	ldr	r3, [pc, #144]	; (80016bc <MX_FSMC_Init+0xec>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <MX_FSMC_Init+0xec>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001634:	4b21      	ldr	r3, [pc, #132]	; (80016bc <MX_FSMC_Init+0xec>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800163a:	4b20      	ldr	r3, [pc, #128]	; (80016bc <MX_FSMC_Init+0xec>)
 800163c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001642:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <MX_FSMC_Init+0xec>)
 8001644:	2200      	movs	r2, #0
 8001646:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001648:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <MX_FSMC_Init+0xec>)
 800164a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800164e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <MX_FSMC_Init+0xec>)
 8001652:	2200      	movs	r2, #0
 8001654:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <MX_FSMC_Init+0xec>)
 8001658:	2200      	movs	r2, #0
 800165a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <MX_FSMC_Init+0xec>)
 800165e:	2200      	movs	r2, #0
 8001660:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001662:	230f      	movs	r3, #15
 8001664:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001666:	230f      	movs	r3, #15
 8001668:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800166a:	233c      	movs	r3, #60	; 0x3c
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001672:	2310      	movs	r3, #16
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001676:	2311      	movs	r3, #17
 8001678:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800167a:	2300      	movs	r3, #0
 800167c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800167e:	2308      	movs	r3, #8
 8001680:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001682:	230f      	movs	r3, #15
 8001684:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001686:	2309      	movs	r3, #9
 8001688:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800168e:	2310      	movs	r3, #16
 8001690:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001692:	2311      	movs	r3, #17
 8001694:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800169a:	463a      	mov	r2, r7
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	4619      	mov	r1, r3
 80016a2:	4806      	ldr	r0, [pc, #24]	; (80016bc <MX_FSMC_Init+0xec>)
 80016a4:	f004 faec 	bl	8005c80 <HAL_SRAM_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80016ae:	f000 ff6d 	bl	800258c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80016b2:	bf00      	nop
 80016b4:	3738      	adds	r7, #56	; 0x38
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000628 	.word	0x20000628
 80016c0:	a0000104 	.word	0xa0000104

080016c4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80016d8:	4b1c      	ldr	r3, [pc, #112]	; (800174c <HAL_FSMC_MspInit+0x88>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d131      	bne.n	8001744 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <HAL_FSMC_MspInit+0x88>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_FSMC_MspInit+0x8c>)
 80016ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ee:	4a18      	ldr	r2, [pc, #96]	; (8001750 <HAL_FSMC_MspInit+0x8c>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6393      	str	r3, [r2, #56]	; 0x38
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <HAL_FSMC_MspInit+0x8c>)
 80016f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001702:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001706:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001714:	230c      	movs	r3, #12
 8001716:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4619      	mov	r1, r3
 800171c:	480d      	ldr	r0, [pc, #52]	; (8001754 <HAL_FSMC_MspInit+0x90>)
 800171e:	f003 f813 	bl	8004748 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001722:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001726:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001734:	230c      	movs	r3, #12
 8001736:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4619      	mov	r1, r3
 800173c:	4806      	ldr	r0, [pc, #24]	; (8001758 <HAL_FSMC_MspInit+0x94>)
 800173e:	f003 f803 	bl	8004748 <HAL_GPIO_Init>
 8001742:	e000      	b.n	8001746 <HAL_FSMC_MspInit+0x82>
    return;
 8001744:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000678 	.word	0x20000678
 8001750:	40023800 	.word	0x40023800
 8001754:	40021000 	.word	0x40021000
 8001758:	40020c00 	.word	0x40020c00

0800175c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001764:	f7ff ffae 	bl	80016c4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	; 0x30
 8001774:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
 800178a:	4b63      	ldr	r3, [pc, #396]	; (8001918 <MX_GPIO_Init+0x1a8>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a62      	ldr	r2, [pc, #392]	; (8001918 <MX_GPIO_Init+0x1a8>)
 8001790:	f043 0310 	orr.w	r3, r3, #16
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b60      	ldr	r3, [pc, #384]	; (8001918 <MX_GPIO_Init+0x1a8>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	4b5c      	ldr	r3, [pc, #368]	; (8001918 <MX_GPIO_Init+0x1a8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a5b      	ldr	r2, [pc, #364]	; (8001918 <MX_GPIO_Init+0x1a8>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b59      	ldr	r3, [pc, #356]	; (8001918 <MX_GPIO_Init+0x1a8>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b55      	ldr	r3, [pc, #340]	; (8001918 <MX_GPIO_Init+0x1a8>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a54      	ldr	r2, [pc, #336]	; (8001918 <MX_GPIO_Init+0x1a8>)
 80017c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b52      	ldr	r3, [pc, #328]	; (8001918 <MX_GPIO_Init+0x1a8>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b4e      	ldr	r3, [pc, #312]	; (8001918 <MX_GPIO_Init+0x1a8>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a4d      	ldr	r2, [pc, #308]	; (8001918 <MX_GPIO_Init+0x1a8>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b4b      	ldr	r3, [pc, #300]	; (8001918 <MX_GPIO_Init+0x1a8>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b47      	ldr	r3, [pc, #284]	; (8001918 <MX_GPIO_Init+0x1a8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a46      	ldr	r2, [pc, #280]	; (8001918 <MX_GPIO_Init+0x1a8>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b44      	ldr	r3, [pc, #272]	; (8001918 <MX_GPIO_Init+0x1a8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b40      	ldr	r3, [pc, #256]	; (8001918 <MX_GPIO_Init+0x1a8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a3f      	ldr	r2, [pc, #252]	; (8001918 <MX_GPIO_Init+0x1a8>)
 800181c:	f043 0308 	orr.w	r3, r3, #8
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b3d      	ldr	r3, [pc, #244]	; (8001918 <MX_GPIO_Init+0x1a8>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4b39      	ldr	r3, [pc, #228]	; (8001918 <MX_GPIO_Init+0x1a8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a38      	ldr	r2, [pc, #224]	; (8001918 <MX_GPIO_Init+0x1a8>)
 8001838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b36      	ldr	r3, [pc, #216]	; (8001918 <MX_GPIO_Init+0x1a8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2110      	movs	r1, #16
 800184e:	4833      	ldr	r0, [pc, #204]	; (800191c <MX_GPIO_Init+0x1ac>)
 8001850:	f003 f916 	bl	8004a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185a:	4831      	ldr	r0, [pc, #196]	; (8001920 <MX_GPIO_Init+0x1b0>)
 800185c:	f003 f910 	bl	8004a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	2140      	movs	r1, #64	; 0x40
 8001864:	482f      	ldr	r0, [pc, #188]	; (8001924 <MX_GPIO_Init+0x1b4>)
 8001866:	f003 f90b 	bl	8004a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FSMC_BLK_Pin|EN_RS485_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8001870:	482d      	ldr	r0, [pc, #180]	; (8001928 <MX_GPIO_Init+0x1b8>)
 8001872:	f003 f905 	bl	8004a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	2108      	movs	r1, #8
 800187a:	482c      	ldr	r0, [pc, #176]	; (800192c <MX_GPIO_Init+0x1bc>)
 800187c:	f003 f900 	bl	8004a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001880:	2310      	movs	r3, #16
 8001882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	4619      	mov	r1, r3
 8001896:	4821      	ldr	r0, [pc, #132]	; (800191c <MX_GPIO_Init+0x1ac>)
 8001898:	f002 ff56 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800189c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	481a      	ldr	r0, [pc, #104]	; (8001920 <MX_GPIO_Init+0x1b0>)
 80018b6:	f002 ff47 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80018ba:	2340      	movs	r3, #64	; 0x40
 80018bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	4619      	mov	r1, r3
 80018d0:	4814      	ldr	r0, [pc, #80]	; (8001924 <MX_GPIO_Init+0x1b4>)
 80018d2:	f002 ff39 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin|EN_RS485_Pin;
 80018d6:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80018da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018dc:	2301      	movs	r3, #1
 80018de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	4619      	mov	r1, r3
 80018ee:	480e      	ldr	r0, [pc, #56]	; (8001928 <MX_GPIO_Init+0x1b8>)
 80018f0:	f002 ff2a 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80018f4:	2308      	movs	r3, #8
 80018f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	4619      	mov	r1, r3
 800190a:	4808      	ldr	r0, [pc, #32]	; (800192c <MX_GPIO_Init+0x1bc>)
 800190c:	f002 ff1c 	bl	8004748 <HAL_GPIO_Init>

}
 8001910:	bf00      	nop
 8001912:	3730      	adds	r7, #48	; 0x30
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40023800 	.word	0x40023800
 800191c:	40021000 	.word	0x40021000
 8001920:	40020800 	.word	0x40020800
 8001924:	40021800 	.word	0x40021800
 8001928:	40020000 	.word	0x40020000
 800192c:	40020c00 	.word	0x40020c00

08001930 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 800193a:	4a04      	ldr	r2, [pc, #16]	; (800194c <LCD_WR_REG+0x1c>)
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	8013      	strh	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	600ffffe 	.word	0x600ffffe

08001950 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 800195a:	4a04      	ldr	r2, [pc, #16]	; (800196c <LCD_WR_DATA+0x1c>)
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	8053      	strh	r3, [r2, #2]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	600ffffe 	.word	0x600ffffe

08001970 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <LCD_RD_DATA+0x20>)
 8001978:	885b      	ldrh	r3, [r3, #2]
 800197a:	b29b      	uxth	r3, r3
 800197c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	b29b      	uxth	r3, r3
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	600ffffe 	.word	0x600ffffe

08001994 <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4604      	mov	r4, r0
 800199c:	4608      	mov	r0, r1
 800199e:	4611      	mov	r1, r2
 80019a0:	461a      	mov	r2, r3
 80019a2:	4623      	mov	r3, r4
 80019a4:	80fb      	strh	r3, [r7, #6]
 80019a6:	4603      	mov	r3, r0
 80019a8:	80bb      	strh	r3, [r7, #4]
 80019aa:	460b      	mov	r3, r1
 80019ac:	807b      	strh	r3, [r7, #2]
 80019ae:	4613      	mov	r3, r2
 80019b0:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 80019b2:	202a      	movs	r0, #42	; 0x2a
 80019b4:	f7ff ffbc 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	b29b      	uxth	r3, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ffc6 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ffc0 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 80019d0:	887b      	ldrh	r3, [r7, #2]
 80019d2:	0a1b      	lsrs	r3, r3, #8
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ffba 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 80019dc:	887b      	ldrh	r3, [r7, #2]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ffb4 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 80019e8:	202b      	movs	r0, #43	; 0x2b
 80019ea:	f7ff ffa1 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 80019ee:	88bb      	ldrh	r3, [r7, #4]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ffab 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 80019fa:	88bb      	ldrh	r3, [r7, #4]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ffa5 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 8001a06:	883b      	ldrh	r3, [r7, #0]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff9f 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 8001a12:	883b      	ldrh	r3, [r7, #0]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff99 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 8001a1e:	202c      	movs	r0, #44	; 0x2c
 8001a20:	f7ff ff86 	bl	8001930 <LCD_WR_REG>
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd90      	pop	{r4, r7, pc}

08001a2c <lcd_clear>:
/**
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <lcd_clear+0x60>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <lcd_clear+0x60>)
 8001a40:	885b      	ldrh	r3, [r3, #2]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	2100      	movs	r1, #0
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff ffa3 	bl	8001994 <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 8001a4e:	2300      	movs	r3, #0
 8001a50:	81fb      	strh	r3, [r7, #14]
 8001a52:	e011      	b.n	8001a78 <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 8001a54:	2300      	movs	r3, #0
 8001a56:	81bb      	strh	r3, [r7, #12]
 8001a58:	e006      	b.n	8001a68 <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff77 	bl	8001950 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 8001a62:	89bb      	ldrh	r3, [r7, #12]
 8001a64:	3301      	adds	r3, #1
 8001a66:	81bb      	strh	r3, [r7, #12]
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <lcd_clear+0x60>)
 8001a6a:	885b      	ldrh	r3, [r3, #2]
 8001a6c:	89ba      	ldrh	r2, [r7, #12]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d3f3      	bcc.n	8001a5a <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 8001a72:	89fb      	ldrh	r3, [r7, #14]
 8001a74:	3301      	adds	r3, #1
 8001a76:	81fb      	strh	r3, [r7, #14]
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <lcd_clear+0x60>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	89fa      	ldrh	r2, [r7, #14]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d3e8      	bcc.n	8001a54 <lcd_clear+0x28>
		}
	}
}
 8001a82:	bf00      	nop
 8001a84:	bf00      	nop
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	2000067c 	.word	0x2000067c

08001a90 <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	80fb      	strh	r3, [r7, #6]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	80bb      	strh	r3, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 8001aa2:	88bb      	ldrh	r3, [r7, #4]
 8001aa4:	88fa      	ldrh	r2, [r7, #6]
 8001aa6:	88b9      	ldrh	r1, [r7, #4]
 8001aa8:	88f8      	ldrh	r0, [r7, #6]
 8001aaa:	f7ff ff73 	bl	8001994 <lcd_set_address>
	LCD_WR_DATA(color);
 8001aae:	887b      	ldrh	r3, [r7, #2]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff4d 	bl	8001950 <LCD_WR_DATA>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <lcd_show_char>:
	lcd_draw_line(x1, y2, x2, y2, color);
	lcd_draw_line(x2, y1, x2, y2, color);
}

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4604      	mov	r4, r0
 8001ac8:	4608      	mov	r0, r1
 8001aca:	4611      	mov	r1, r2
 8001acc:	461a      	mov	r2, r3
 8001ace:	4623      	mov	r3, r4
 8001ad0:	80fb      	strh	r3, [r7, #6]
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	80bb      	strh	r3, [r7, #4]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	70fb      	strb	r3, [r7, #3]
 8001ada:	4613      	mov	r3, r2
 8001adc:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 8001ae6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001aea:	085b      	lsrs	r3, r3, #1
 8001aec:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	08db      	lsrs	r3, r3, #3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf14      	ite	ne
 8001b02:	2301      	movne	r3, #1
 8001b04:	2300      	moveq	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	fb12 f303 	smulbb	r3, r2, r3
 8001b16:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	3b20      	subs	r3, #32
 8001b1c:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	4413      	add	r3, r2
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29c      	uxth	r4, r3
 8001b2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	88bb      	ldrh	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	88b9      	ldrh	r1, [r7, #4]
 8001b3e:	88f8      	ldrh	r0, [r7, #6]
 8001b40:	4622      	mov	r2, r4
 8001b42:	f7ff ff27 	bl	8001994 <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 8001b46:	2300      	movs	r3, #0
 8001b48:	827b      	strh	r3, [r7, #18]
 8001b4a:	e07a      	b.n	8001c42 <lcd_show_char+0x182>
		if (sizey == 12)
 8001b4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b50:	2b0c      	cmp	r3, #12
 8001b52:	d028      	beq.n	8001ba6 <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 8001b54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b58:	2b10      	cmp	r3, #16
 8001b5a:	d108      	bne.n	8001b6e <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 8001b5c:	78fa      	ldrb	r2, [r7, #3]
 8001b5e:	8a7b      	ldrh	r3, [r7, #18]
 8001b60:	493c      	ldr	r1, [pc, #240]	; (8001c54 <lcd_show_char+0x194>)
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	440a      	add	r2, r1
 8001b66:	4413      	add	r3, r2
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	75fb      	strb	r3, [r7, #23]
 8001b6c:	e01b      	b.n	8001ba6 <lcd_show_char+0xe6>
		else if (sizey == 24)
 8001b6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b72:	2b18      	cmp	r3, #24
 8001b74:	d10b      	bne.n	8001b8e <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 8001b76:	78fa      	ldrb	r2, [r7, #3]
 8001b78:	8a79      	ldrh	r1, [r7, #18]
 8001b7a:	4837      	ldr	r0, [pc, #220]	; (8001c58 <lcd_show_char+0x198>)
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	4403      	add	r3, r0
 8001b86:	440b      	add	r3, r1
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	75fb      	strb	r3, [r7, #23]
 8001b8c:	e00b      	b.n	8001ba6 <lcd_show_char+0xe6>
		else if (sizey == 32)
 8001b8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	d15a      	bne.n	8001c4c <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 8001b96:	78fa      	ldrb	r2, [r7, #3]
 8001b98:	8a7b      	ldrh	r3, [r7, #18]
 8001b9a:	4930      	ldr	r1, [pc, #192]	; (8001c5c <lcd_show_char+0x19c>)
 8001b9c:	0192      	lsls	r2, r2, #6
 8001b9e:	440a      	add	r2, r1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75bb      	strb	r3, [r7, #22]
 8001baa:	e044      	b.n	8001c36 <lcd_show_char+0x176>
			if (!mode) {
 8001bac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d120      	bne.n	8001bf6 <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 8001bb4:	7dfa      	ldrb	r2, [r7, #23]
 8001bb6:	7dbb      	ldrb	r3, [r7, #22]
 8001bb8:	fa42 f303 	asr.w	r3, r2, r3
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d004      	beq.n	8001bce <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 8001bc4:	883b      	ldrh	r3, [r7, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fec2 	bl	8001950 <LCD_WR_DATA>
 8001bcc:	e003      	b.n	8001bd6 <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 8001bce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff febd 	bl	8001950 <LCD_WR_DATA>
				m++;
 8001bd6:	7d7b      	ldrb	r3, [r7, #21]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 8001bdc:	7d7b      	ldrb	r3, [r7, #21]
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001be4:	fb01 f202 	mul.w	r2, r1, r2
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d11f      	bne.n	8001c30 <lcd_show_char+0x170>
					m = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	757b      	strb	r3, [r7, #21]
					break;
 8001bf4:	e022      	b.n	8001c3c <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 8001bf6:	7dfa      	ldrb	r2, [r7, #23]
 8001bf8:	7dbb      	ldrb	r3, [r7, #22]
 8001bfa:	fa42 f303 	asr.w	r3, r2, r3
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 8001c06:	883a      	ldrh	r2, [r7, #0]
 8001c08:	88b9      	ldrh	r1, [r7, #4]
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff3f 	bl	8001a90 <lcd_draw_point>
				x++;
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	3301      	adds	r3, #1
 8001c16:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 8001c18:	88fa      	ldrh	r2, [r7, #6]
 8001c1a:	8a3b      	ldrh	r3, [r7, #16]
 8001c1c:	1ad2      	subs	r2, r2, r3
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d105      	bne.n	8001c30 <lcd_show_char+0x170>
					x = x0;
 8001c24:	8a3b      	ldrh	r3, [r7, #16]
 8001c26:	80fb      	strh	r3, [r7, #6]
					y++;
 8001c28:	88bb      	ldrh	r3, [r7, #4]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	80bb      	strh	r3, [r7, #4]
					break;
 8001c2e:	e005      	b.n	8001c3c <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 8001c30:	7dbb      	ldrb	r3, [r7, #22]
 8001c32:	3301      	adds	r3, #1
 8001c34:	75bb      	strb	r3, [r7, #22]
 8001c36:	7dbb      	ldrb	r3, [r7, #22]
 8001c38:	2b07      	cmp	r3, #7
 8001c3a:	d9b7      	bls.n	8001bac <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 8001c3c:	8a7b      	ldrh	r3, [r7, #18]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	827b      	strh	r3, [r7, #18]
 8001c42:	8a7a      	ldrh	r2, [r7, #18]
 8001c44:	89bb      	ldrh	r3, [r7, #12]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d380      	bcc.n	8001b4c <lcd_show_char+0x8c>
 8001c4a:	e000      	b.n	8001c4e <lcd_show_char+0x18e>
			return;
 8001c4c:	bf00      	nop
				}
			}
		}
	}
}
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}
 8001c54:	08008294 	.word	0x08008294
 8001c58:	08008884 	.word	0x08008884
 8001c5c:	08009a54 	.word	0x08009a54

08001c60 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n) {
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	460a      	mov	r2, r1
 8001c6a:	71fb      	strb	r3, [r7, #7]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8001c70:	2301      	movs	r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001c74:	e004      	b.n	8001c80 <mypow+0x20>
		result *= m;
 8001c76:	79fa      	ldrb	r2, [r7, #7]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	fb02 f303 	mul.w	r3, r2, r3
 8001c7e:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001c80:	79bb      	ldrb	r3, [r7, #6]
 8001c82:	1e5a      	subs	r2, r3, #1
 8001c84:	71ba      	strb	r2, [r7, #6]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f5      	bne.n	8001c76 <mypow+0x16>
	return result;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <lcd_show_int_num>:

void lcd_show_int_num(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af04      	add	r7, sp, #16
 8001c9e:	4604      	mov	r4, r0
 8001ca0:	4608      	mov	r0, r1
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4623      	mov	r3, r4
 8001ca8:	80fb      	strh	r3, [r7, #6]
 8001caa:	4603      	mov	r3, r0
 8001cac:	80bb      	strh	r3, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	807b      	strh	r3, [r7, #2]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	707b      	strb	r3, [r7, #1]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex = sizey / 2;
 8001cba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001cbe:	085b      	lsrs	r3, r3, #1
 8001cc0:	737b      	strb	r3, [r7, #13]
	for (t = 0; t < len; t++) {
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73fb      	strb	r3, [r7, #15]
 8001cc6:	e059      	b.n	8001d7c <lcd_show_int_num+0xe4>
		temp = (num / mypow(10, len - t - 1)) % 10;
 8001cc8:	887c      	ldrh	r4, [r7, #2]
 8001cca:	787a      	ldrb	r2, [r7, #1]
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	200a      	movs	r0, #10
 8001cda:	f7ff ffc1 	bl	8001c60 <mypow>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	fbb4 f1f3 	udiv	r1, r4, r3
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <lcd_show_int_num+0xf8>)
 8001ce6:	fba3 2301 	umull	r2, r3, r3, r1
 8001cea:	08da      	lsrs	r2, r3, #3
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	1aca      	subs	r2, r1, r3
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	733b      	strb	r3, [r7, #12]
		if (enshow == 0 && t < (len - 1)) {
 8001cfa:	7bbb      	ldrb	r3, [r7, #14]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d121      	bne.n	8001d44 <lcd_show_int_num+0xac>
 8001d00:	7bfa      	ldrb	r2, [r7, #15]
 8001d02:	787b      	ldrb	r3, [r7, #1]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	429a      	cmp	r2, r3
 8001d08:	da1c      	bge.n	8001d44 <lcd_show_int_num+0xac>
			if (temp == 0) {
 8001d0a:	7b3b      	ldrb	r3, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d117      	bne.n	8001d40 <lcd_show_int_num+0xa8>
				lcd_show_char(x + t * sizex, y, ' ', fc, bc, sizey, 0);
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	7b7b      	ldrb	r3, [r7, #13]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	fb12 f303 	smulbb	r3, r2, r3
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	4413      	add	r3, r2
 8001d22:	b298      	uxth	r0, r3
 8001d24:	8c3a      	ldrh	r2, [r7, #32]
 8001d26:	88b9      	ldrh	r1, [r7, #4]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	9302      	str	r3, [sp, #8]
 8001d2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	4613      	mov	r3, r2
 8001d38:	2220      	movs	r2, #32
 8001d3a:	f7ff fec1 	bl	8001ac0 <lcd_show_char>
				continue;
 8001d3e:	e01a      	b.n	8001d76 <lcd_show_int_num+0xde>
			} else
				enshow = 1;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73bb      	strb	r3, [r7, #14]

		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	7b7b      	ldrb	r3, [r7, #13]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	fb12 f303 	smulbb	r3, r2, r3
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	4413      	add	r3, r2
 8001d56:	b298      	uxth	r0, r3
 8001d58:	7b3b      	ldrb	r3, [r7, #12]
 8001d5a:	3330      	adds	r3, #48	; 0x30
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	8c3c      	ldrh	r4, [r7, #32]
 8001d60:	88b9      	ldrh	r1, [r7, #4]
 8001d62:	2300      	movs	r3, #0
 8001d64:	9302      	str	r3, [sp, #8]
 8001d66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	4623      	mov	r3, r4
 8001d72:	f7ff fea5 	bl	8001ac0 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	787b      	ldrb	r3, [r7, #1]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d3a1      	bcc.n	8001cc8 <lcd_show_int_num+0x30>
	}
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd90      	pop	{r4, r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	cccccccd 	.word	0xcccccccd

08001d94 <lcd_show_float_num>:

void lcd_show_float_num(uint16_t x, uint16_t y, float num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b08b      	sub	sp, #44	; 0x2c
 8001d98:	af04      	add	r7, sp, #16
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	4608      	mov	r0, r1
 8001d9e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001da2:	4611      	mov	r1, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	4623      	mov	r3, r4
 8001da8:	81fb      	strh	r3, [r7, #14]
 8001daa:	4603      	mov	r3, r0
 8001dac:	81bb      	strh	r3, [r7, #12]
 8001dae:	460b      	mov	r3, r1
 8001db0:	71fb      	strb	r3, [r7, #7]
 8001db2:	4613      	mov	r3, r2
 8001db4:	80bb      	strh	r3, [r7, #4]
	uint8_t t, temp, sizex;
	uint16_t num1;
	sizex = sizey / 2;
 8001db6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001dba:	085b      	lsrs	r3, r3, #1
 8001dbc:	75bb      	strb	r3, [r7, #22]
	num1 = num * 100;
 8001dbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dc2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001e9c <lcd_show_float_num+0x108>
 8001dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dce:	ee17 3a90 	vmov	r3, s15
 8001dd2:	82bb      	strh	r3, [r7, #20]
	for (t = 0; t < len; t++) {
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	75fb      	strb	r3, [r7, #23]
 8001dd8:	e057      	b.n	8001e8a <lcd_show_float_num+0xf6>
		temp = (num1 / mypow(10, len - t - 1)) % 10;
 8001dda:	8abc      	ldrh	r4, [r7, #20]
 8001ddc:	79fa      	ldrb	r2, [r7, #7]
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	4619      	mov	r1, r3
 8001dea:	200a      	movs	r0, #10
 8001dec:	f7ff ff38 	bl	8001c60 <mypow>
 8001df0:	4603      	mov	r3, r0
 8001df2:	fbb4 f1f3 	udiv	r1, r4, r3
 8001df6:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <lcd_show_float_num+0x10c>)
 8001df8:	fba3 2301 	umull	r2, r3, r3, r1
 8001dfc:	08da      	lsrs	r2, r3, #3
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	1aca      	subs	r2, r1, r3
 8001e08:	4613      	mov	r3, r2
 8001e0a:	74fb      	strb	r3, [r7, #19]
		if (t == (len - 2)) {
 8001e0c:	7dfa      	ldrb	r2, [r7, #23]
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	3b02      	subs	r3, #2
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d11d      	bne.n	8001e52 <lcd_show_float_num+0xbe>
			lcd_show_char(x + (len - 2) * sizex, y, '.', fc, bc, sizey, 0);
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	3b02      	subs	r3, #2
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	7dbb      	ldrb	r3, [r7, #22]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	fb12 f303 	smulbb	r3, r2, r3
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	89fb      	ldrh	r3, [r7, #14]
 8001e28:	4413      	add	r3, r2
 8001e2a:	b298      	uxth	r0, r3
 8001e2c:	88ba      	ldrh	r2, [r7, #4]
 8001e2e:	89b9      	ldrh	r1, [r7, #12]
 8001e30:	2300      	movs	r3, #0
 8001e32:	9302      	str	r3, [sp, #8]
 8001e34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	222e      	movs	r2, #46	; 0x2e
 8001e42:	f7ff fe3d 	bl	8001ac0 <lcd_show_char>
			t++;
 8001e46:	7dfb      	ldrb	r3, [r7, #23]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	75fb      	strb	r3, [r7, #23]
			len += 1;
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	71fb      	strb	r3, [r7, #7]
		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	7dbb      	ldrb	r3, [r7, #22]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	fb12 f303 	smulbb	r3, r2, r3
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	89fb      	ldrh	r3, [r7, #14]
 8001e62:	4413      	add	r3, r2
 8001e64:	b298      	uxth	r0, r3
 8001e66:	7cfb      	ldrb	r3, [r7, #19]
 8001e68:	3330      	adds	r3, #48	; 0x30
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	88bc      	ldrh	r4, [r7, #4]
 8001e6e:	89b9      	ldrh	r1, [r7, #12]
 8001e70:	2300      	movs	r3, #0
 8001e72:	9302      	str	r3, [sp, #8]
 8001e74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	4623      	mov	r3, r4
 8001e80:	f7ff fe1e 	bl	8001ac0 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
 8001e86:	3301      	adds	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
 8001e8a:	7dfa      	ldrb	r2, [r7, #23]
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d3a3      	bcc.n	8001dda <lcd_show_float_num+0x46>
	}
}
 8001e92:	bf00      	nop
 8001e94:	bf00      	nop
 8001e96:	371c      	adds	r7, #28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd90      	pop	{r4, r7, pc}
 8001e9c:	42c80000 	.word	0x42c80000
 8001ea0:	cccccccd 	.word	0xcccccccd

08001ea4 <lcd_set_direction>:
			k++;
		}
	}
}

void lcd_set_direction(uint8_t dir) {
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d007      	beq.n	8001ece <lcd_set_direction+0x2a>
		lcddev.width = 320;
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <lcd_set_direction+0x44>)
 8001ec0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ec4:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <lcd_set_direction+0x44>)
 8001ec8:	22f0      	movs	r2, #240	; 0xf0
 8001eca:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8001ecc:	e006      	b.n	8001edc <lcd_set_direction+0x38>
		lcddev.width = 240;
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <lcd_set_direction+0x44>)
 8001ed0:	22f0      	movs	r2, #240	; 0xf0
 8001ed2:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <lcd_set_direction+0x44>)
 8001ed6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001eda:	805a      	strh	r2, [r3, #2]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	2000067c 	.word	0x2000067c

08001eec <lcd_init>:

void lcd_init(void) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef6:	48aa      	ldr	r0, [pc, #680]	; (80021a0 <lcd_init+0x2b4>)
 8001ef8:	f002 fdc2 	bl	8004a80 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001efc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f00:	f001 fad8 	bl	80034b4 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001f04:	2201      	movs	r2, #1
 8001f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f0a:	48a5      	ldr	r0, [pc, #660]	; (80021a0 <lcd_init+0x2b4>)
 8001f0c:	f002 fdb8 	bl	8004a80 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001f10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f14:	f001 face 	bl	80034b4 <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f7ff ffc3 	bl	8001ea4 <lcd_set_direction>
	LCD_WR_REG(0XD3);
 8001f1e:	20d3      	movs	r0, #211	; 0xd3
 8001f20:	f7ff fd06 	bl	8001930 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8001f24:	f7ff fd24 	bl	8001970 <LCD_RD_DATA>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b9d      	ldr	r3, [pc, #628]	; (80021a4 <lcd_init+0x2b8>)
 8001f2e:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001f30:	f7ff fd1e 	bl	8001970 <LCD_RD_DATA>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b9a      	ldr	r3, [pc, #616]	; (80021a4 <lcd_init+0x2b8>)
 8001f3a:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001f3c:	f7ff fd18 	bl	8001970 <LCD_RD_DATA>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b97      	ldr	r3, [pc, #604]	; (80021a4 <lcd_init+0x2b8>)
 8001f46:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8001f48:	4b96      	ldr	r3, [pc, #600]	; (80021a4 <lcd_init+0x2b8>)
 8001f4a:	889b      	ldrh	r3, [r3, #4]
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	4b94      	ldr	r3, [pc, #592]	; (80021a4 <lcd_init+0x2b8>)
 8001f52:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8001f54:	f7ff fd0c 	bl	8001970 <LCD_RD_DATA>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4b91      	ldr	r3, [pc, #580]	; (80021a4 <lcd_init+0x2b8>)
 8001f5e:	889b      	ldrh	r3, [r3, #4]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	4b8f      	ldr	r3, [pc, #572]	; (80021a4 <lcd_init+0x2b8>)
 8001f66:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001f68:	20cf      	movs	r0, #207	; 0xcf
 8001f6a:	f7ff fce1 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7ff fcee 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001f74:	20c1      	movs	r0, #193	; 0xc1
 8001f76:	f7ff fceb 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001f7a:	2030      	movs	r0, #48	; 0x30
 8001f7c:	f7ff fce8 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001f80:	20ed      	movs	r0, #237	; 0xed
 8001f82:	f7ff fcd5 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001f86:	2064      	movs	r0, #100	; 0x64
 8001f88:	f7ff fce2 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f7ff fcdf 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001f92:	2012      	movs	r0, #18
 8001f94:	f7ff fcdc 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001f98:	2081      	movs	r0, #129	; 0x81
 8001f9a:	f7ff fcd9 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001f9e:	20e8      	movs	r0, #232	; 0xe8
 8001fa0:	f7ff fcc6 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001fa4:	2085      	movs	r0, #133	; 0x85
 8001fa6:	f7ff fcd3 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001faa:	2010      	movs	r0, #16
 8001fac:	f7ff fcd0 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001fb0:	207a      	movs	r0, #122	; 0x7a
 8001fb2:	f7ff fccd 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001fb6:	20cb      	movs	r0, #203	; 0xcb
 8001fb8:	f7ff fcba 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001fbc:	2039      	movs	r0, #57	; 0x39
 8001fbe:	f7ff fcc7 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001fc2:	202c      	movs	r0, #44	; 0x2c
 8001fc4:	f7ff fcc4 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f7ff fcc1 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001fce:	2034      	movs	r0, #52	; 0x34
 8001fd0:	f7ff fcbe 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001fd4:	2002      	movs	r0, #2
 8001fd6:	f7ff fcbb 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001fda:	20f7      	movs	r0, #247	; 0xf7
 8001fdc:	f7ff fca8 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001fe0:	2020      	movs	r0, #32
 8001fe2:	f7ff fcb5 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001fe6:	20ea      	movs	r0, #234	; 0xea
 8001fe8:	f7ff fca2 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7ff fcaf 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f7ff fcac 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001ff8:	20c0      	movs	r0, #192	; 0xc0
 8001ffa:	f7ff fc99 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001ffe:	201b      	movs	r0, #27
 8002000:	f7ff fca6 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002004:	20c1      	movs	r0, #193	; 0xc1
 8002006:	f7ff fc93 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800200a:	2001      	movs	r0, #1
 800200c:	f7ff fca0 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002010:	20c5      	movs	r0, #197	; 0xc5
 8002012:	f7ff fc8d 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8002016:	2030      	movs	r0, #48	; 0x30
 8002018:	f7ff fc9a 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 800201c:	2030      	movs	r0, #48	; 0x30
 800201e:	f7ff fc97 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8002022:	20c7      	movs	r0, #199	; 0xc7
 8002024:	f7ff fc84 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002028:	20b7      	movs	r0, #183	; 0xb7
 800202a:	f7ff fc91 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800202e:	2036      	movs	r0, #54	; 0x36
 8002030:	f7ff fc7e 	bl	8001930 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8002034:	2008      	movs	r0, #8
 8002036:	f7ff fc8b 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800203a:	203a      	movs	r0, #58	; 0x3a
 800203c:	f7ff fc78 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002040:	2055      	movs	r0, #85	; 0x55
 8002042:	f7ff fc85 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002046:	20b1      	movs	r0, #177	; 0xb1
 8002048:	f7ff fc72 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800204c:	2000      	movs	r0, #0
 800204e:	f7ff fc7f 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8002052:	201a      	movs	r0, #26
 8002054:	f7ff fc7c 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002058:	20b6      	movs	r0, #182	; 0xb6
 800205a:	f7ff fc69 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800205e:	200a      	movs	r0, #10
 8002060:	f7ff fc76 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002064:	20a2      	movs	r0, #162	; 0xa2
 8002066:	f7ff fc73 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800206a:	20f2      	movs	r0, #242	; 0xf2
 800206c:	f7ff fc60 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002070:	2000      	movs	r0, #0
 8002072:	f7ff fc6d 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002076:	2026      	movs	r0, #38	; 0x26
 8002078:	f7ff fc5a 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800207c:	2001      	movs	r0, #1
 800207e:	f7ff fc67 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8002082:	20e0      	movs	r0, #224	; 0xe0
 8002084:	f7ff fc54 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002088:	200f      	movs	r0, #15
 800208a:	f7ff fc61 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800208e:	202a      	movs	r0, #42	; 0x2a
 8002090:	f7ff fc5e 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002094:	2028      	movs	r0, #40	; 0x28
 8002096:	f7ff fc5b 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800209a:	2008      	movs	r0, #8
 800209c:	f7ff fc58 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80020a0:	200e      	movs	r0, #14
 80020a2:	f7ff fc55 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80020a6:	2008      	movs	r0, #8
 80020a8:	f7ff fc52 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80020ac:	2054      	movs	r0, #84	; 0x54
 80020ae:	f7ff fc4f 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80020b2:	20a9      	movs	r0, #169	; 0xa9
 80020b4:	f7ff fc4c 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80020b8:	2043      	movs	r0, #67	; 0x43
 80020ba:	f7ff fc49 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80020be:	200a      	movs	r0, #10
 80020c0:	f7ff fc46 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020c4:	200f      	movs	r0, #15
 80020c6:	f7ff fc43 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f7ff fc40 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020d0:	2000      	movs	r0, #0
 80020d2:	f7ff fc3d 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020d6:	2000      	movs	r0, #0
 80020d8:	f7ff fc3a 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020dc:	2000      	movs	r0, #0
 80020de:	f7ff fc37 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80020e2:	20e1      	movs	r0, #225	; 0xe1
 80020e4:	f7ff fc24 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020e8:	2000      	movs	r0, #0
 80020ea:	f7ff fc31 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80020ee:	2015      	movs	r0, #21
 80020f0:	f7ff fc2e 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80020f4:	2017      	movs	r0, #23
 80020f6:	f7ff fc2b 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80020fa:	2007      	movs	r0, #7
 80020fc:	f7ff fc28 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002100:	2011      	movs	r0, #17
 8002102:	f7ff fc25 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002106:	2006      	movs	r0, #6
 8002108:	f7ff fc22 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800210c:	202b      	movs	r0, #43	; 0x2b
 800210e:	f7ff fc1f 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002112:	2056      	movs	r0, #86	; 0x56
 8002114:	f7ff fc1c 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002118:	203c      	movs	r0, #60	; 0x3c
 800211a:	f7ff fc19 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800211e:	2005      	movs	r0, #5
 8002120:	f7ff fc16 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002124:	2010      	movs	r0, #16
 8002126:	f7ff fc13 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800212a:	200f      	movs	r0, #15
 800212c:	f7ff fc10 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002130:	203f      	movs	r0, #63	; 0x3f
 8002132:	f7ff fc0d 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002136:	203f      	movs	r0, #63	; 0x3f
 8002138:	f7ff fc0a 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800213c:	200f      	movs	r0, #15
 800213e:	f7ff fc07 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002142:	202b      	movs	r0, #43	; 0x2b
 8002144:	f7ff fbf4 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff fc01 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800214e:	2000      	movs	r0, #0
 8002150:	f7ff fbfe 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002154:	2001      	movs	r0, #1
 8002156:	f7ff fbfb 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800215a:	203f      	movs	r0, #63	; 0x3f
 800215c:	f7ff fbf8 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002160:	202a      	movs	r0, #42	; 0x2a
 8002162:	f7ff fbe5 	bl	8001930 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002166:	2000      	movs	r0, #0
 8002168:	f7ff fbf2 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800216c:	2000      	movs	r0, #0
 800216e:	f7ff fbef 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002172:	2000      	movs	r0, #0
 8002174:	f7ff fbec 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002178:	20ef      	movs	r0, #239	; 0xef
 800217a:	f7ff fbe9 	bl	8001950 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 800217e:	2011      	movs	r0, #17
 8002180:	f7ff fbd6 	bl	8001930 <LCD_WR_REG>
	HAL_Delay(120);
 8002184:	2078      	movs	r0, #120	; 0x78
 8002186:	f001 f995 	bl	80034b4 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 800218a:	2029      	movs	r0, #41	; 0x29
 800218c:	f7ff fbd0 	bl	8001930 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002190:	2201      	movs	r2, #1
 8002192:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002196:	4804      	ldr	r0, [pc, #16]	; (80021a8 <lcd_init+0x2bc>)
 8002198:	f002 fc72 	bl	8004a80 <HAL_GPIO_WritePin>
}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40020800 	.word	0x40020800
 80021a4:	2000067c 	.word	0x2000067c
 80021a8:	40020000 	.word	0x40020000

080021ac <lcd_show_string>:
		}
	}
}

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b08b      	sub	sp, #44	; 0x2c
 80021b0:	af04      	add	r7, sp, #16
 80021b2:	60ba      	str	r2, [r7, #8]
 80021b4:	461a      	mov	r2, r3
 80021b6:	4603      	mov	r3, r0
 80021b8:	81fb      	strh	r3, [r7, #14]
 80021ba:	460b      	mov	r3, r1
 80021bc:	81bb      	strh	r3, [r7, #12]
 80021be:	4613      	mov	r3, r2
 80021c0:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 80021c2:	89fb      	ldrh	r3, [r7, #14]
 80021c4:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 80021ca:	e048      	b.n	800225e <lcd_show_string+0xb2>
		if (!bHz) {
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d145      	bne.n	800225e <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 80021d2:	89fa      	ldrh	r2, [r7, #14]
 80021d4:	4b26      	ldr	r3, [pc, #152]	; (8002270 <lcd_show_string+0xc4>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	4619      	mov	r1, r3
 80021da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021de:	085b      	lsrs	r3, r3, #1
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	1acb      	subs	r3, r1, r3
 80021e4:	429a      	cmp	r2, r3
 80021e6:	dc3f      	bgt.n	8002268 <lcd_show_string+0xbc>
 80021e8:	89ba      	ldrh	r2, [r7, #12]
 80021ea:	4b21      	ldr	r3, [pc, #132]	; (8002270 <lcd_show_string+0xc4>)
 80021ec:	885b      	ldrh	r3, [r3, #2]
 80021ee:	4619      	mov	r1, r3
 80021f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021f4:	1acb      	subs	r3, r1, r3
 80021f6:	429a      	cmp	r2, r3
 80021f8:	dc36      	bgt.n	8002268 <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b80      	cmp	r3, #128	; 0x80
 8002200:	d902      	bls.n	8002208 <lcd_show_string+0x5c>
				bHz = 1;
 8002202:	2301      	movs	r3, #1
 8002204:	75fb      	strb	r3, [r7, #23]
 8002206:	e02a      	b.n	800225e <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b0d      	cmp	r3, #13
 800220e:	d10b      	bne.n	8002228 <lcd_show_string+0x7c>
					y += sizey;
 8002210:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002214:	b29a      	uxth	r2, r3
 8002216:	89bb      	ldrh	r3, [r7, #12]
 8002218:	4413      	add	r3, r2
 800221a:	81bb      	strh	r3, [r7, #12]
					x = x0;
 800221c:	8abb      	ldrh	r3, [r7, #20]
 800221e:	81fb      	strh	r3, [r7, #14]
					str++;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	3301      	adds	r3, #1
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	e017      	b.n	8002258 <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	781a      	ldrb	r2, [r3, #0]
 800222c:	88fc      	ldrh	r4, [r7, #6]
 800222e:	89b9      	ldrh	r1, [r7, #12]
 8002230:	89f8      	ldrh	r0, [r7, #14]
 8002232:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002236:	9302      	str	r3, [sp, #8]
 8002238:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	4623      	mov	r3, r4
 8002244:	f7ff fc3c 	bl	8001ac0 <lcd_show_char>
					x += sizey / 2;
 8002248:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800224c:	085b      	lsrs	r3, r3, #1
 800224e:	b2db      	uxtb	r3, r3
 8002250:	b29a      	uxth	r2, r3
 8002252:	89fb      	ldrh	r3, [r7, #14]
 8002254:	4413      	add	r3, r2
 8002256:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	3301      	adds	r3, #1
 800225c:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1b2      	bne.n	80021cc <lcd_show_string+0x20>
 8002266:	e000      	b.n	800226a <lcd_show_string+0xbe>
				return;
 8002268:	bf00      	nop
			}
		}
	}
}
 800226a:	371c      	adds	r7, #28
 800226c:	46bd      	mov	sp, r7
 800226e:	bd90      	pop	{r4, r7, pc}
 8002270:	2000067c 	.word	0x2000067c

08002274 <HAL_TIM_PeriodElapsedCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a04      	ldr	r2, [pc, #16]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d101      	bne.n	800228a <HAL_TIM_PeriodElapsedCallback+0x16>
		timerRun();
 8002286:	f000 fef9 	bl	800307c <timerRun>
	}
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40000400 	.word	0x40000400

08002298 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	RS485_UART_Callback(huart);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 fc05 	bl	8002ab0 <RS485_UART_Callback>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022b4:	f001 f88c 	bl	80033d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022b8:	f000 f83e 	bl	8002338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022bc:	f7ff fa58 	bl	8001770 <MX_GPIO_Init>
  MX_DMA_Init();
 80022c0:	f7ff f966 	bl	8001590 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80022c4:	f000 ff74 	bl	80031b0 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80022c8:	f000 ff48 	bl	800315c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80022cc:	f000 ff1c 	bl	8003108 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80022d0:	f7fe ff2c 	bl	800112c <MX_ADC1_Init>
  MX_FSMC_Init();
 80022d4:	f7ff f97c 	bl	80015d0 <MX_FSMC_Init>
  MX_SPI1_Init();
 80022d8:	f000 fd0c 	bl	8002cf4 <MX_SPI1_Init>
  MX_TIM3_Init();
 80022dc:	f000 fe40 	bl	8002f60 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80022e0:	f7ff fe04 	bl	8001eec <lcd_init>
  sensor_init();
 80022e4:	f000 fc1a 	bl	8002b1c <sensor_init>
  lcd_clear(BLACK);
 80022e8:	2000      	movs	r0, #0
 80022ea:	f7ff fb9f 	bl	8001a2c <lcd_clear>
  HAL_TIM_Base_Start_IT(&htim3);
 80022ee:	4811      	ldr	r0, [pc, #68]	; (8002334 <main+0x84>)
 80022f0:	f003 fd5e 	bl	8005db0 <HAL_TIM_Base_Start_IT>
  setTimer(TI_BUTTON_SCAN_TIMER, TI_BUTTON_SCAN_TIME);
 80022f4:	2114      	movs	r1, #20
 80022f6:	2000      	movs	r0, #0
 80022f8:	f000 fea8 	bl	800304c <setTimer>
  setTimer(TI_7SEG_SCAN_TIMER, TI_7SEG_SCAN_TIME);
 80022fc:	2102      	movs	r1, #2
 80022fe:	2001      	movs	r0, #1
 8002300:	f000 fea4 	bl	800304c <setTimer>
  f_rs485_fsm_init();
 8002304:	f000 fa2e 	bl	8002764 <f_rs485_fsm_init>
  f_slave_init_def();
 8002308:	f7fe fe98 	bl	800103c <f_slave_init_def>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifdef SLAVE
	  if(isFlag(TI_BUTTON_SCAN_TIMER)){
 800230c:	2000      	movs	r0, #0
 800230e:	f000 fee5 	bl	80030dc <isFlag>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d007      	beq.n	8002328 <main+0x78>
		  TestADC();
 8002318:	f000 f878 	bl	800240c <TestADC>
		  button_scan();
 800231c:	f7ff f81c 	bl	8001358 <button_scan>
		  setTimer(TI_BUTTON_SCAN_TIMER, TI_BUTTON_SCAN_TIME);
 8002320:	2114      	movs	r1, #20
 8002322:	2000      	movs	r0, #0
 8002324:	f000 fe92 	bl	800304c <setTimer>
	  }
	  f_slave_behavior_def();
 8002328:	f7fe feb0 	bl	800108c <f_slave_behavior_def>
	  f_rs485_fsm();
 800232c:	f000 fa34 	bl	8002798 <f_rs485_fsm>
	  if(isFlag(TI_BUTTON_SCAN_TIMER)){
 8002330:	e7ec      	b.n	800230c <main+0x5c>
 8002332:	bf00      	nop
 8002334:	20000970 	.word	0x20000970

08002338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b094      	sub	sp, #80	; 0x50
 800233c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800233e:	f107 0320 	add.w	r3, r7, #32
 8002342:	2230      	movs	r2, #48	; 0x30
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f005 faa6 	bl	8007898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	4b28      	ldr	r3, [pc, #160]	; (8002404 <SystemClock_Config+0xcc>)
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	4a27      	ldr	r2, [pc, #156]	; (8002404 <SystemClock_Config+0xcc>)
 8002366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236a:	6413      	str	r3, [r2, #64]	; 0x40
 800236c:	4b25      	ldr	r3, [pc, #148]	; (8002404 <SystemClock_Config+0xcc>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002378:	2300      	movs	r3, #0
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	4b22      	ldr	r3, [pc, #136]	; (8002408 <SystemClock_Config+0xd0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a21      	ldr	r2, [pc, #132]	; (8002408 <SystemClock_Config+0xd0>)
 8002382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	4b1f      	ldr	r3, [pc, #124]	; (8002408 <SystemClock_Config+0xd0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002394:	2302      	movs	r3, #2
 8002396:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002398:	2301      	movs	r3, #1
 800239a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800239c:	2310      	movs	r3, #16
 800239e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023a0:	2302      	movs	r3, #2
 80023a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023a4:	2300      	movs	r3, #0
 80023a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023a8:	2308      	movs	r3, #8
 80023aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023ac:	23a8      	movs	r3, #168	; 0xa8
 80023ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023b0:	2302      	movs	r3, #2
 80023b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023b4:	2304      	movs	r3, #4
 80023b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023b8:	f107 0320 	add.w	r3, r7, #32
 80023bc:	4618      	mov	r0, r3
 80023be:	f002 fb79 	bl	8004ab4 <HAL_RCC_OscConfig>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023c8:	f000 f8e0 	bl	800258c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023cc:	230f      	movs	r3, #15
 80023ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023d0:	2302      	movs	r3, #2
 80023d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80023de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023e4:	f107 030c 	add.w	r3, r7, #12
 80023e8:	2105      	movs	r1, #5
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 fdda 	bl	8004fa4 <HAL_RCC_ClockConfig>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80023f6:	f000 f8c9 	bl	800258c <Error_Handler>
  }
}
 80023fa:	bf00      	nop
 80023fc:	3750      	adds	r7, #80	; 0x50
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800
 8002408:	40007000 	.word	0x40007000

0800240c <TestADC>:

/* USER CODE BEGIN 4 */
uint8_t count_adc = 0;
void TestADC() {
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1) % 20;
 8002412:	4b57      	ldr	r3, [pc, #348]	; (8002570 <TestADC+0x164>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	4b56      	ldr	r3, [pc, #344]	; (8002574 <TestADC+0x168>)
 800241a:	fb83 1302 	smull	r1, r3, r3, r2
 800241e:	10d9      	asrs	r1, r3, #3
 8002420:	17d3      	asrs	r3, r2, #31
 8002422:	1ac9      	subs	r1, r1, r3
 8002424:	460b      	mov	r3, r1
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	1ad1      	subs	r1, r2, r3
 800242e:	b2ca      	uxtb	r2, r1
 8002430:	4b4f      	ldr	r3, [pc, #316]	; (8002570 <TestADC+0x164>)
 8002432:	701a      	strb	r2, [r3, #0]
	if (count_adc == 0) {
 8002434:	4b4e      	ldr	r3, [pc, #312]	; (8002570 <TestADC+0x164>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	f040 8096 	bne.w	800256a <TestADC+0x15e>
		sensor_read();
 800243e:	f000 fb7b 	bl	8002b38 <sensor_read>
		lcd_show_string(10, 100, "Voltage:", RED, BLACK, 16, 0);
 8002442:	2300      	movs	r3, #0
 8002444:	9302      	str	r3, [sp, #8]
 8002446:	2310      	movs	r3, #16
 8002448:	9301      	str	r3, [sp, #4]
 800244a:	2300      	movs	r3, #0
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002452:	4a49      	ldr	r2, [pc, #292]	; (8002578 <TestADC+0x16c>)
 8002454:	2164      	movs	r1, #100	; 0x64
 8002456:	200a      	movs	r0, #10
 8002458:	f7ff fea8 	bl	80021ac <lcd_show_string>
		lcd_show_float_num(130, 100, sensor_get_voltage(), 4, RED, BLACK, 16);
 800245c:	f000 fb94 	bl	8002b88 <sensor_get_voltage>
 8002460:	eef0 7a40 	vmov.f32	s15, s0
 8002464:	2310      	movs	r3, #16
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	2300      	movs	r3, #0
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002470:	2204      	movs	r2, #4
 8002472:	eeb0 0a67 	vmov.f32	s0, s15
 8002476:	2164      	movs	r1, #100	; 0x64
 8002478:	2082      	movs	r0, #130	; 0x82
 800247a:	f7ff fc8b 	bl	8001d94 <lcd_show_float_num>
		lcd_show_string(10, 120, "Current:", RED, BLACK, 16, 0);
 800247e:	2300      	movs	r3, #0
 8002480:	9302      	str	r3, [sp, #8]
 8002482:	2310      	movs	r3, #16
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	2300      	movs	r3, #0
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800248e:	4a3b      	ldr	r2, [pc, #236]	; (800257c <TestADC+0x170>)
 8002490:	2178      	movs	r1, #120	; 0x78
 8002492:	200a      	movs	r0, #10
 8002494:	f7ff fe8a 	bl	80021ac <lcd_show_string>
		lcd_show_float_num(130, 120, sensor_get_current(), 4, RED, BLACK, 16);
 8002498:	f000 fbb2 	bl	8002c00 <sensor_get_current>
 800249c:	eef0 7a40 	vmov.f32	s15, s0
 80024a0:	2310      	movs	r3, #16
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	2300      	movs	r3, #0
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024ac:	2204      	movs	r2, #4
 80024ae:	eeb0 0a67 	vmov.f32	s0, s15
 80024b2:	2178      	movs	r1, #120	; 0x78
 80024b4:	2082      	movs	r0, #130	; 0x82
 80024b6:	f7ff fc6d 	bl	8001d94 <lcd_show_float_num>
		lcd_show_string(10, 140, "Light:", RED, BLACK, 16, 0);
 80024ba:	2300      	movs	r3, #0
 80024bc:	9302      	str	r3, [sp, #8]
 80024be:	2310      	movs	r3, #16
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	2300      	movs	r3, #0
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024ca:	4a2d      	ldr	r2, [pc, #180]	; (8002580 <TestADC+0x174>)
 80024cc:	218c      	movs	r1, #140	; 0x8c
 80024ce:	200a      	movs	r0, #10
 80024d0:	f7ff fe6c 	bl	80021ac <lcd_show_string>
		lcd_show_int_num(130, 140, sensor_get_light(), 4, RED, BLACK, 16);
 80024d4:	f000 fb3e 	bl	8002b54 <sensor_get_light>
 80024d8:	4603      	mov	r3, r0
 80024da:	461a      	mov	r2, r3
 80024dc:	2310      	movs	r3, #16
 80024de:	9302      	str	r3, [sp, #8]
 80024e0:	2300      	movs	r3, #0
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	2304      	movs	r3, #4
 80024ec:	218c      	movs	r1, #140	; 0x8c
 80024ee:	2082      	movs	r0, #130	; 0x82
 80024f0:	f7ff fbd2 	bl	8001c98 <lcd_show_int_num>
		lcd_show_string(10, 160, "Potentiometer:", RED, BLACK, 16, 0);
 80024f4:	2300      	movs	r3, #0
 80024f6:	9302      	str	r3, [sp, #8]
 80024f8:	2310      	movs	r3, #16
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	2300      	movs	r3, #0
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002504:	4a1f      	ldr	r2, [pc, #124]	; (8002584 <TestADC+0x178>)
 8002506:	21a0      	movs	r1, #160	; 0xa0
 8002508:	200a      	movs	r0, #10
 800250a:	f7ff fe4f 	bl	80021ac <lcd_show_string>
		lcd_show_int_num(130, 160, sensor_get_potentiometer(), 4, RED, BLACK,
 800250e:	f000 fb2d 	bl	8002b6c <sensor_get_potentiometer>
 8002512:	4603      	mov	r3, r0
 8002514:	461a      	mov	r2, r3
 8002516:	2310      	movs	r3, #16
 8002518:	9302      	str	r3, [sp, #8]
 800251a:	2300      	movs	r3, #0
 800251c:	9301      	str	r3, [sp, #4]
 800251e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2304      	movs	r3, #4
 8002526:	21a0      	movs	r1, #160	; 0xa0
 8002528:	2082      	movs	r0, #130	; 0x82
 800252a:	f7ff fbb5 	bl	8001c98 <lcd_show_int_num>
				16);
		lcd_show_string(10, 180, "Temperature:", RED, BLACK, 16, 0);
 800252e:	2300      	movs	r3, #0
 8002530:	9302      	str	r3, [sp, #8]
 8002532:	2310      	movs	r3, #16
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	2300      	movs	r3, #0
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800253e:	4a12      	ldr	r2, [pc, #72]	; (8002588 <TestADC+0x17c>)
 8002540:	21b4      	movs	r1, #180	; 0xb4
 8002542:	200a      	movs	r0, #10
 8002544:	f7ff fe32 	bl	80021ac <lcd_show_string>
		lcd_show_float_num(130, 180, sensor_get_temperature(), 4, RED, BLACK,
 8002548:	f000 fbb6 	bl	8002cb8 <sensor_get_temperature>
 800254c:	eef0 7a40 	vmov.f32	s15, s0
 8002550:	2310      	movs	r3, #16
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	2300      	movs	r3, #0
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800255c:	2204      	movs	r2, #4
 800255e:	eeb0 0a67 	vmov.f32	s0, s15
 8002562:	21b4      	movs	r1, #180	; 0xb4
 8002564:	2082      	movs	r0, #130	; 0x82
 8002566:	f7ff fc15 	bl	8001d94 <lcd_show_float_num>
				16);
	}
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000682 	.word	0x20000682
 8002574:	66666667 	.word	0x66666667
 8002578:	080081e8 	.word	0x080081e8
 800257c:	080081f4 	.word	0x080081f4
 8002580:	08008200 	.word	0x08008200
 8002584:	08008208 	.word	0x08008208
 8002588:	08008218 	.word	0x08008218

0800258c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002590:	b672      	cpsid	i
}
 8002592:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002594:	e7fe      	b.n	8002594 <Error_Handler+0x8>
	...

08002598 <uart_Rs232SendString>:
};

// FOR DEBUG
#define DEBUG 1
uint8_t msg[100];
void uart_Rs232SendString(uint8_t* str){
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), HAL_MAX_DELAY);
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	4908      	ldr	r1, [pc, #32]	; (80025c4 <uart_Rs232SendString+0x2c>)
 80025a4:	4808      	ldr	r0, [pc, #32]	; (80025c8 <uart_Rs232SendString+0x30>)
 80025a6:	f005 f957 	bl	8007858 <siprintf>
 80025aa:	4603      	mov	r3, r0
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295
 80025b2:	4905      	ldr	r1, [pc, #20]	; (80025c8 <uart_Rs232SendString+0x30>)
 80025b4:	4805      	ldr	r0, [pc, #20]	; (80025cc <uart_Rs232SendString+0x34>)
 80025b6:	f004 f871 	bl	800669c <HAL_UART_Transmit>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	08008228 	.word	0x08008228
 80025c8:	20000684 	.word	0x20000684
 80025cc:	20000a08 	.word	0x20000a08

080025d0 <_is_character_received>:
	}
	return 0;
}

uint8_t _is_character_received()
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
	if (_character_received_flag == 1)
 80025d4:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <_is_character_received+0x24>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d104      	bne.n	80025e6 <_is_character_received+0x16>
	{
		_character_received_flag = 0;
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <_is_character_received+0x24>)
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
		return 1;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <_is_character_received+0x18>
	}
	return 0;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000904 	.word	0x20000904

080025f8 <_is_transmit>:

uint8_t _is_transmit()
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
	if (_transmit_flag == 1)
 80025fc:	4b07      	ldr	r3, [pc, #28]	; (800261c <_is_transmit+0x24>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d104      	bne.n	800260e <_is_transmit+0x16>
	{
		_transmit_flag = 0;
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <_is_transmit+0x24>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
		return 1;
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <_is_transmit+0x18>
	}
	return 0;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000905 	.word	0x20000905

08002620 <_crc_checking>:

uint8_t _crc_checking()
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
	if (_receive_index - 2 >= 0)
 8002626:	4b16      	ldr	r3, [pc, #88]	; (8002680 <_crc_checking+0x60>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d922      	bls.n	8002674 <_crc_checking+0x54>
	{
		uint16_t crc = crc16(_receive_buffer, _receive_index - 2);
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <_crc_checking+0x60>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b02      	subs	r3, #2
 8002636:	b29b      	uxth	r3, r3
 8002638:	4619      	mov	r1, r3
 800263a:	4812      	ldr	r0, [pc, #72]	; (8002684 <_crc_checking+0x64>)
 800263c:	f7fe ff78 	bl	8001530 <crc16>
 8002640:	4603      	mov	r3, r0
 8002642:	80fb      	strh	r3, [r7, #6]
		uint8_t crc_high = (crc >> 8) & 0xFF;
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	b29b      	uxth	r3, r3
 800264a:	717b      	strb	r3, [r7, #5]
		uint8_t crc_low = crc & 0xFF;
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	713b      	strb	r3, [r7, #4]
		if (crc_low == _receive_buffer[_receive_index - 2] && crc_high == _receive_buffer[_receive_index - 1])
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <_crc_checking+0x60>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	3b02      	subs	r3, #2
 8002656:	4a0b      	ldr	r2, [pc, #44]	; (8002684 <_crc_checking+0x64>)
 8002658:	5cd3      	ldrb	r3, [r2, r3]
 800265a:	793a      	ldrb	r2, [r7, #4]
 800265c:	429a      	cmp	r2, r3
 800265e:	d109      	bne.n	8002674 <_crc_checking+0x54>
 8002660:	4b07      	ldr	r3, [pc, #28]	; (8002680 <_crc_checking+0x60>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	3b01      	subs	r3, #1
 8002666:	4a07      	ldr	r2, [pc, #28]	; (8002684 <_crc_checking+0x64>)
 8002668:	5cd3      	ldrb	r3, [r2, r3]
 800266a:	797a      	ldrb	r2, [r7, #5]
 800266c:	429a      	cmp	r2, r3
 800266e:	d101      	bne.n	8002674 <_crc_checking+0x54>
		{
			return 1;
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <_crc_checking+0x56>
		}
	}

	return 0;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200007fc 	.word	0x200007fc
 8002684:	200006fc 	.word	0x200006fc

08002688 <f_rs485_init>:
 * @param flag_rx: flag for receive callback fsm
 * @param rx_size: the size of receive command for callback fsm
 * @retval: None
 */
void f_rs485_init(UART_HandleTypeDef *huart, uint8_t *receive_buffer, uint8_t *flag_rx, uint16_t *rx_size)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
	_huart_callback = huart;
 8002696:	4a09      	ldr	r2, [pc, #36]	; (80026bc <f_rs485_init+0x34>)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6013      	str	r3, [r2, #0]
	_receive_buffer_callback = receive_buffer;
 800269c:	4a08      	ldr	r2, [pc, #32]	; (80026c0 <f_rs485_init+0x38>)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	6013      	str	r3, [r2, #0]
	_flag_rx_callback = flag_rx;
 80026a2:	4a08      	ldr	r2, [pc, #32]	; (80026c4 <f_rs485_init+0x3c>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6013      	str	r3, [r2, #0]
	_rx_size_callback = rx_size;
 80026a8:	4a07      	ldr	r2, [pc, #28]	; (80026c8 <f_rs485_init+0x40>)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6013      	str	r3, [r2, #0]
}
 80026ae:	bf00      	nop
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	200006e8 	.word	0x200006e8
 80026c0:	200006ec 	.word	0x200006ec
 80026c4:	200006f0 	.word	0x200006f0
 80026c8:	200006f4 	.word	0x200006f4

080026cc <f_rs485_send_cmd>:
 * @param tx_buffer_without_crc: transmit buffer address, maxsize is 254
 * @param tx_size_without_crc: number of bytes transmit, max is 254
 * @retval: None
 */
void f_rs485_send_cmd(uint8_t *tx_buffer_without_crc, uint8_t tx_size_without_crc)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	70fb      	strb	r3, [r7, #3]
	if (tx_size_without_crc > 254) return;
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	2bff      	cmp	r3, #255	; 0xff
 80026dc:	d038      	beq.n	8002750 <f_rs485_send_cmd+0x84>

	for (int i = 0; i < tx_size_without_crc; i++)
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	e00b      	b.n	80026fc <f_rs485_send_cmd+0x30>
	{
		_transmit_buffer[i] = tx_buffer_without_crc[i];
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	7819      	ldrb	r1, [r3, #0]
 80026ec:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <f_rs485_send_cmd+0x8c>)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4413      	add	r3, r2
 80026f2:	460a      	mov	r2, r1
 80026f4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < tx_size_without_crc; i++)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3301      	adds	r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	429a      	cmp	r2, r3
 8002702:	dbef      	blt.n	80026e4 <f_rs485_send_cmd+0x18>
	}
	//	sprintf((void*)transmit_buffer,"%s",cmd_without_crc);
	_transmit_size = tx_size_without_crc;
 8002704:	4a15      	ldr	r2, [pc, #84]	; (800275c <f_rs485_send_cmd+0x90>)
 8002706:	78fb      	ldrb	r3, [r7, #3]
 8002708:	7013      	strb	r3, [r2, #0]

	uint16_t crc = crc16(_transmit_buffer, _transmit_size);
 800270a:	4b14      	ldr	r3, [pc, #80]	; (800275c <f_rs485_send_cmd+0x90>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	4619      	mov	r1, r3
 8002712:	4811      	ldr	r0, [pc, #68]	; (8002758 <f_rs485_send_cmd+0x8c>)
 8002714:	f7fe ff0c 	bl	8001530 <crc16>
 8002718:	4603      	mov	r3, r0
 800271a:	817b      	strh	r3, [r7, #10]
	_transmit_buffer[_transmit_size] = (uint8_t)(crc & 0x00FF); // CRC low
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <f_rs485_send_cmd+0x90>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	897b      	ldrh	r3, [r7, #10]
 8002724:	b2d9      	uxtb	r1, r3
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <f_rs485_send_cmd+0x8c>)
 8002728:	5499      	strb	r1, [r3, r2]
	_transmit_buffer[_transmit_size + 1] = (uint8_t)((crc >> 8) & 0x00FF); // CRC high
 800272a:	897b      	ldrh	r3, [r7, #10]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	b29a      	uxth	r2, r3
 8002730:	4b0a      	ldr	r3, [pc, #40]	; (800275c <f_rs485_send_cmd+0x90>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	3301      	adds	r3, #1
 8002736:	b2d1      	uxtb	r1, r2
 8002738:	4a07      	ldr	r2, [pc, #28]	; (8002758 <f_rs485_send_cmd+0x8c>)
 800273a:	54d1      	strb	r1, [r2, r3]

	_transmit_size += 2;
 800273c:	4b07      	ldr	r3, [pc, #28]	; (800275c <f_rs485_send_cmd+0x90>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	3302      	adds	r3, #2
 8002742:	b2da      	uxtb	r2, r3
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <f_rs485_send_cmd+0x90>)
 8002746:	701a      	strb	r2, [r3, #0]
	_transmit_flag = 1;
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <f_rs485_send_cmd+0x94>)
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	e000      	b.n	8002752 <f_rs485_send_cmd+0x86>
	if (tx_size_without_crc > 254) return;
 8002750:	bf00      	nop
}
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000800 	.word	0x20000800
 800275c:	20000900 	.word	0x20000900
 8002760:	20000905 	.word	0x20000905

08002764 <f_rs485_fsm_init>:

void f_rs485_fsm_init()
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	// DEBUG
	if (DEBUG) uart_Rs232SendString((uint8_t*)"FSM_INIT\n\r");
 8002768:	4807      	ldr	r0, [pc, #28]	; (8002788 <f_rs485_fsm_init+0x24>)
 800276a:	f7ff ff15 	bl	8002598 <uart_Rs232SendString>
	// END DEBUG
	HAL_GPIO_WritePin(EN_RS485_GPIO_Port, EN_RS485_Pin, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002774:	4805      	ldr	r0, [pc, #20]	; (800278c <f_rs485_fsm_init+0x28>)
 8002776:	f002 f983 	bl	8004a80 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart3, &_receive_byte_buffer, 1);
 800277a:	2201      	movs	r2, #1
 800277c:	4904      	ldr	r1, [pc, #16]	; (8002790 <f_rs485_fsm_init+0x2c>)
 800277e:	4805      	ldr	r0, [pc, #20]	; (8002794 <f_rs485_fsm_init+0x30>)
 8002780:	f004 f817 	bl	80067b2 <HAL_UART_Receive_IT>
}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	0800822c 	.word	0x0800822c
 800278c:	40020000 	.word	0x40020000
 8002790:	200006f8 	.word	0x200006f8
 8002794:	20000a98 	.word	0x20000a98

08002798 <f_rs485_fsm>:
/*
 * @brief: RS485 Finite State Machine, this must be put in while loop
 * @retval: None
 */
void f_rs485_fsm()
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
	switch (MODBUS485_STATE) {
 800279e:	4b66      	ldr	r3, [pc, #408]	; (8002938 <f_rs485_fsm+0x1a0>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b05      	cmp	r3, #5
 80027a4:	f200 80b8 	bhi.w	8002918 <f_rs485_fsm+0x180>
 80027a8:	a201      	add	r2, pc, #4	; (adr r2, 80027b0 <f_rs485_fsm+0x18>)
 80027aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ae:	bf00      	nop
 80027b0:	080027c9 	.word	0x080027c9
 80027b4:	080027d9 	.word	0x080027d9
 80027b8:	0800280b 	.word	0x0800280b
 80027bc:	08002865 	.word	0x08002865
 80027c0:	08002881 	.word	0x08002881
 80027c4:	080028b1 	.word	0x080028b1
		case RS485_SUPER_INIT:
			_f_rs485_super_init();
 80027c8:	f000 f8ce 	bl	8002968 <_f_rs485_super_init>

			if (1) // CHANGE STATE -> RS485_INIT
			{
				_f_init_rs485_init();
 80027cc:	f000 f8d4 	bl	8002978 <_f_init_rs485_init>
				MODBUS485_STATE = RS485_INIT;
 80027d0:	4b59      	ldr	r3, [pc, #356]	; (8002938 <f_rs485_fsm+0x1a0>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80027d6:	e0aa      	b.n	800292e <f_rs485_fsm+0x196>
		case RS485_INIT:
			_f_rs485_init();
 80027d8:	f000 f8dc 	bl	8002994 <_f_rs485_init>

			if (isFlag(TI_RS485_T35_TIMER)) // CHANGE STATE -> RS485_IDLE
 80027dc:	2008      	movs	r0, #8
 80027de:	f000 fc7d 	bl	80030dc <isFlag>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d004      	beq.n	80027f2 <f_rs485_fsm+0x5a>
			{
				_f_init_rs485_idle();
 80027e8:	f000 f8dc 	bl	80029a4 <_f_init_rs485_idle>
				MODBUS485_STATE = RS485_IDLE;
 80027ec:	4b52      	ldr	r3, [pc, #328]	; (8002938 <f_rs485_fsm+0x1a0>)
 80027ee:	2202      	movs	r2, #2
 80027f0:	701a      	strb	r2, [r3, #0]
			}
			if (_is_character_received()) // CHANGE STATE -> RS485_INIT
 80027f2:	f7ff feed 	bl	80025d0 <_is_character_received>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 808f 	beq.w	800291c <f_rs485_fsm+0x184>
			{
				_f_init_rs485_init();
 80027fe:	f000 f8bb 	bl	8002978 <_f_init_rs485_init>
				MODBUS485_STATE = RS485_INIT;
 8002802:	4b4d      	ldr	r3, [pc, #308]	; (8002938 <f_rs485_fsm+0x1a0>)
 8002804:	2201      	movs	r2, #1
 8002806:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002808:	e088      	b.n	800291c <f_rs485_fsm+0x184>
		case RS485_IDLE:
			_f_rs485_idle();
 800280a:	f000 f8df 	bl	80029cc <_f_rs485_idle>

			if (_is_transmit()) // CHANGE STATE -> RS485_TRANSMIT
 800280e:	f7ff fef3 	bl	80025f8 <_is_transmit>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01a      	beq.n	800284e <f_rs485_fsm+0xb6>
			{
				HAL_GPIO_WritePin(EN_RS485_GPIO_Port, EN_RS485_Pin, 1);
 8002818:	2201      	movs	r2, #1
 800281a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800281e:	4847      	ldr	r0, [pc, #284]	; (800293c <f_rs485_fsm+0x1a4>)
 8002820:	f002 f92e 	bl	8004a80 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(_huart_callback, _transmit_buffer, _transmit_size, HAL_MAX_DELAY);
 8002824:	4b46      	ldr	r3, [pc, #280]	; (8002940 <f_rs485_fsm+0x1a8>)
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	4b46      	ldr	r3, [pc, #280]	; (8002944 <f_rs485_fsm+0x1ac>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b29a      	uxth	r2, r3
 800282e:	f04f 33ff 	mov.w	r3, #4294967295
 8002832:	4945      	ldr	r1, [pc, #276]	; (8002948 <f_rs485_fsm+0x1b0>)
 8002834:	f003 ff32 	bl	800669c <HAL_UART_Transmit>
				HAL_GPIO_WritePin(EN_RS485_GPIO_Port, EN_RS485_Pin, 0);
 8002838:	2200      	movs	r2, #0
 800283a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800283e:	483f      	ldr	r0, [pc, #252]	; (800293c <f_rs485_fsm+0x1a4>)
 8002840:	f002 f91e 	bl	8004a80 <HAL_GPIO_WritePin>
				_f_init_rs485_transmit();
 8002844:	f000 f8ca 	bl	80029dc <_f_init_rs485_transmit>
				MODBUS485_STATE = RS485_TRANSMIT;
 8002848:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <f_rs485_fsm+0x1a0>)
 800284a:	2203      	movs	r2, #3
 800284c:	701a      	strb	r2, [r3, #0]
			}
			if (_is_character_received()) // CHANGE STATE -> RS485_RECEIVE
 800284e:	f7ff febf 	bl	80025d0 <_is_character_received>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d063      	beq.n	8002920 <f_rs485_fsm+0x188>
			{
				_f_init_rs485_receive();
 8002858:	f000 f8d6 	bl	8002a08 <_f_init_rs485_receive>
				MODBUS485_STATE = RS485_RECEIVE;
 800285c:	4b36      	ldr	r3, [pc, #216]	; (8002938 <f_rs485_fsm+0x1a0>)
 800285e:	2204      	movs	r2, #4
 8002860:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002862:	e05d      	b.n	8002920 <f_rs485_fsm+0x188>
		case RS485_TRANSMIT:
			_f_rs485_transmit();
 8002864:	f000 f8c8 	bl	80029f8 <_f_rs485_transmit>

			if (isFlag(TI_RS485_T35_TIMER)) // CHANGE STATE -> IDLE
 8002868:	2008      	movs	r0, #8
 800286a:	f000 fc37 	bl	80030dc <isFlag>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d057      	beq.n	8002924 <f_rs485_fsm+0x18c>
			{
				_f_init_rs485_idle();
 8002874:	f000 f896 	bl	80029a4 <_f_init_rs485_idle>
				MODBUS485_STATE = RS485_IDLE;
 8002878:	4b2f      	ldr	r3, [pc, #188]	; (8002938 <f_rs485_fsm+0x1a0>)
 800287a:	2202      	movs	r2, #2
 800287c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800287e:	e051      	b.n	8002924 <f_rs485_fsm+0x18c>
		case RS485_RECEIVE:
			_f_rs485_receive();
 8002880:	f000 f8d4 	bl	8002a2c <_f_rs485_receive>

			if (_is_character_received()) // CHANGE STATE -> RS485_RECEIVE
 8002884:	f7ff fea4 	bl	80025d0 <_is_character_received>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d004      	beq.n	8002898 <f_rs485_fsm+0x100>
			{
				_f_init_rs485_receive();
 800288e:	f000 f8bb 	bl	8002a08 <_f_init_rs485_receive>
				MODBUS485_STATE = RS485_RECEIVE;
 8002892:	4b29      	ldr	r3, [pc, #164]	; (8002938 <f_rs485_fsm+0x1a0>)
 8002894:	2204      	movs	r2, #4
 8002896:	701a      	strb	r2, [r3, #0]
			}
			if (isFlag(TI_RS485_T15_TIMER)) // CHANGE STATE -> RS485_WAITING_CONTROL
 8002898:	2007      	movs	r0, #7
 800289a:	f000 fc1f 	bl	80030dc <isFlag>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d041      	beq.n	8002928 <f_rs485_fsm+0x190>
			{
				_f_init_rs485_waiting_control();
 80028a4:	f000 f8ca 	bl	8002a3c <_f_init_rs485_waiting_control>
				MODBUS485_STATE = RS485_WAITING_CONTROL;
 80028a8:	4b23      	ldr	r3, [pc, #140]	; (8002938 <f_rs485_fsm+0x1a0>)
 80028aa:	2205      	movs	r2, #5
 80028ac:	701a      	strb	r2, [r3, #0]
			}
			break;
 80028ae:	e03b      	b.n	8002928 <f_rs485_fsm+0x190>
		case RS485_WAITING_CONTROL:
			_f_rs485_waiting_control();
 80028b0:	f000 f8d2 	bl	8002a58 <_f_rs485_waiting_control>

			if (isFlag(TI_RS485_T35_TIMER)) // CHANGE STATE -> RS485_IDLE
 80028b4:	2008      	movs	r0, #8
 80028b6:	f000 fc11 	bl	80030dc <isFlag>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d035      	beq.n	800292c <f_rs485_fsm+0x194>
			{
				if (FRAME_STATUS == FRAME_OK)
 80028c0:	4b22      	ldr	r3, [pc, #136]	; (800294c <f_rs485_fsm+0x1b4>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d121      	bne.n	800290c <f_rs485_fsm+0x174>
				{
					if (DEBUG) uart_Rs232SendString((uint8_t*)"S: FRAME_OK\n\r");
 80028c8:	4821      	ldr	r0, [pc, #132]	; (8002950 <f_rs485_fsm+0x1b8>)
 80028ca:	f7ff fe65 	bl	8002598 <uart_Rs232SendString>

					// COPY content in _receive_buffer to _receive_buffer_callback
					for (int i = 0; i < _receive_index; i++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	e00b      	b.n	80028ec <f_rs485_fsm+0x154>
					{
						_receive_buffer_callback[i] = _receive_buffer[i];
 80028d4:	4b1f      	ldr	r3, [pc, #124]	; (8002954 <f_rs485_fsm+0x1bc>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4413      	add	r3, r2
 80028dc:	491e      	ldr	r1, [pc, #120]	; (8002958 <f_rs485_fsm+0x1c0>)
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	440a      	add	r2, r1
 80028e2:	7812      	ldrb	r2, [r2, #0]
 80028e4:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < _receive_index; i++)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3301      	adds	r3, #1
 80028ea:	607b      	str	r3, [r7, #4]
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <f_rs485_fsm+0x1c4>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4293      	cmp	r3, r2
 80028f6:	dbed      	blt.n	80028d4 <f_rs485_fsm+0x13c>
					}

					*_flag_rx_callback = 1;
 80028f8:	4b19      	ldr	r3, [pc, #100]	; (8002960 <f_rs485_fsm+0x1c8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]
					*_rx_size_callback = _receive_index;
 8002900:	4b16      	ldr	r3, [pc, #88]	; (800295c <f_rs485_fsm+0x1c4>)
 8002902:	781a      	ldrb	r2, [r3, #0]
 8002904:	4b17      	ldr	r3, [pc, #92]	; (8002964 <f_rs485_fsm+0x1cc>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	b292      	uxth	r2, r2
 800290a:	801a      	strh	r2, [r3, #0]
				}

				_f_init_rs485_idle();
 800290c:	f000 f84a 	bl	80029a4 <_f_init_rs485_idle>
				MODBUS485_STATE = RS485_IDLE;
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <f_rs485_fsm+0x1a0>)
 8002912:	2202      	movs	r2, #2
 8002914:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002916:	e009      	b.n	800292c <f_rs485_fsm+0x194>
		default:
			break;
 8002918:	bf00      	nop
 800291a:	e008      	b.n	800292e <f_rs485_fsm+0x196>
			break;
 800291c:	bf00      	nop
 800291e:	e006      	b.n	800292e <f_rs485_fsm+0x196>
			break;
 8002920:	bf00      	nop
 8002922:	e004      	b.n	800292e <f_rs485_fsm+0x196>
			break;
 8002924:	bf00      	nop
 8002926:	e002      	b.n	800292e <f_rs485_fsm+0x196>
			break;
 8002928:	bf00      	nop
 800292a:	e000      	b.n	800292e <f_rs485_fsm+0x196>
			break;
 800292c:	bf00      	nop
	}
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000903 	.word	0x20000903
 800293c:	40020000 	.word	0x40020000
 8002940:	200006e8 	.word	0x200006e8
 8002944:	20000900 	.word	0x20000900
 8002948:	20000800 	.word	0x20000800
 800294c:	20000220 	.word	0x20000220
 8002950:	08008238 	.word	0x08008238
 8002954:	200006ec 	.word	0x200006ec
 8002958:	200006fc 	.word	0x200006fc
 800295c:	200007fc 	.word	0x200007fc
 8002960:	200006f0 	.word	0x200006f0
 8002964:	200006f4 	.word	0x200006f4

08002968 <_f_rs485_super_init>:
	// END DEBUG
	// Do not thing
}

void _f_rs485_super_init()
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
	// Do not thing
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <_f_init_rs485_init>:

void _f_init_rs485_init()
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
	// DEBUG
	if (DEBUG) uart_Rs232SendString((uint8_t*)"S: INIT\n\r");
 800297c:	4804      	ldr	r0, [pc, #16]	; (8002990 <_f_init_rs485_init+0x18>)
 800297e:	f7ff fe0b 	bl	8002598 <uart_Rs232SendString>
	// END DEBUG
	setTimer(TI_RS485_T35_TIMER, TI_RS485_T35_TIME);
 8002982:	2104      	movs	r1, #4
 8002984:	2008      	movs	r0, #8
 8002986:	f000 fb61 	bl	800304c <setTimer>
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	08008258 	.word	0x08008258

08002994 <_f_rs485_init>:

void _f_rs485_init()
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
	// Do not thing
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <_f_init_rs485_idle>:

void _f_init_rs485_idle()
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
	// DEBUG
	if (DEBUG) uart_Rs232SendString((uint8_t*)"S: IDLE\n\r");
 80029a8:	4805      	ldr	r0, [pc, #20]	; (80029c0 <_f_init_rs485_idle+0x1c>)
 80029aa:	f7ff fdf5 	bl	8002598 <uart_Rs232SendString>
	// END DEBUG
	_transmit_flag = 0;
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <_f_init_rs485_idle+0x20>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
	_receive_index = 0;
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <_f_init_rs485_idle+0x24>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	08008264 	.word	0x08008264
 80029c4:	20000905 	.word	0x20000905
 80029c8:	200007fc 	.word	0x200007fc

080029cc <_f_rs485_idle>:

void _f_rs485_idle()
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
	// Do not thing
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <_f_init_rs485_transmit>:

void _f_init_rs485_transmit()
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
	// DEBUG
	if (DEBUG) uart_Rs232SendString((uint8_t*)"S: TRANS\n\r");
 80029e0:	4804      	ldr	r0, [pc, #16]	; (80029f4 <_f_init_rs485_transmit+0x18>)
 80029e2:	f7ff fdd9 	bl	8002598 <uart_Rs232SendString>
	// END DEBUG
	setTimer(TI_RS485_T35_TIMER, TI_RS485_T35_TIME);
 80029e6:	2104      	movs	r1, #4
 80029e8:	2008      	movs	r0, #8
 80029ea:	f000 fb2f 	bl	800304c <setTimer>
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	08008270 	.word	0x08008270

080029f8 <_f_rs485_transmit>:

void _f_rs485_transmit()
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
	// Do not thing
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <_f_init_rs485_receive>:

void _f_init_rs485_receive()
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
	// DEBUG
	if (DEBUG) uart_Rs232SendString((uint8_t*)"S: RECEI\n\r");
 8002a0c:	4806      	ldr	r0, [pc, #24]	; (8002a28 <_f_init_rs485_receive+0x20>)
 8002a0e:	f7ff fdc3 	bl	8002598 <uart_Rs232SendString>
	// END DEBUG
	setTimer(TI_RS485_T35_TIMER, TI_RS485_T35_TIME);
 8002a12:	2104      	movs	r1, #4
 8002a14:	2008      	movs	r0, #8
 8002a16:	f000 fb19 	bl	800304c <setTimer>
	setTimer(TI_RS485_T15_TIMER, TI_RS485_T15_TIME);
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	2007      	movs	r0, #7
 8002a1e:	f000 fb15 	bl	800304c <setTimer>
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	0800827c 	.word	0x0800827c

08002a2c <_f_rs485_receive>:

void _f_rs485_receive()
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
	// Do not thing
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
	...

08002a3c <_f_init_rs485_waiting_control>:

void _f_init_rs485_waiting_control()
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
	// DEBUG
	if (DEBUG) uart_Rs232SendString((uint8_t*)"S: WAIT\n\r");
 8002a40:	4803      	ldr	r0, [pc, #12]	; (8002a50 <_f_init_rs485_waiting_control+0x14>)
 8002a42:	f7ff fda9 	bl	8002598 <uart_Rs232SendString>
	// END DEBUG
	_isCRCChecking = 0;
 8002a46:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <_f_init_rs485_waiting_control+0x18>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	08008288 	.word	0x08008288
 8002a54:	20000902 	.word	0x20000902

08002a58 <_f_rs485_waiting_control>:

void _f_rs485_waiting_control()
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
	if (_is_character_received())
 8002a5c:	f7ff fdb8 	bl	80025d0 <_is_character_received>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <_f_rs485_waiting_control+0x14>
	{
		FRAME_STATUS = FRAME_NOT_OK;
 8002a66:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <_f_rs485_waiting_control+0x48>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
	}

	if (_isCRCChecking == 0)
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <_f_rs485_waiting_control+0x4c>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d112      	bne.n	8002a9a <_f_rs485_waiting_control+0x42>
	{
		// CHECK SLAVE ADDRESS if needed
		if (_crc_checking())
 8002a74:	f7ff fdd4 	bl	8002620 <_crc_checking>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <_f_rs485_waiting_control+0x2e>
		{
			FRAME_STATUS = FRAME_OK;
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <_f_rs485_waiting_control+0x48>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
 8002a84:	e002      	b.n	8002a8c <_f_rs485_waiting_control+0x34>
		}
		else
		{
			FRAME_STATUS = FRAME_NOT_OK;
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <_f_rs485_waiting_control+0x48>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	701a      	strb	r2, [r3, #0]
		}
		_frame_size = _receive_index;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <_f_rs485_waiting_control+0x50>)
 8002a8e:	781a      	ldrb	r2, [r3, #0]
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <_f_rs485_waiting_control+0x54>)
 8002a92:	701a      	strb	r2, [r3, #0]
		_isCRCChecking = 1;
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <_f_rs485_waiting_control+0x4c>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
	}
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000220 	.word	0x20000220
 8002aa4:	20000902 	.word	0x20000902
 8002aa8:	200007fc 	.word	0x200007fc
 8002aac:	20000901 	.word	0x20000901

08002ab0 <RS485_UART_Callback>:

void RS485_UART_Callback(UART_HandleTypeDef *huart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a10      	ldr	r2, [pc, #64]	; (8002b00 <RS485_UART_Callback+0x50>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d119      	bne.n	8002af6 <RS485_UART_Callback+0x46>
	{
		_receive_buffer[_receive_index++] = _receive_byte_buffer;
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <RS485_UART_Callback+0x54>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	b2d1      	uxtb	r1, r2
 8002aca:	4a0e      	ldr	r2, [pc, #56]	; (8002b04 <RS485_UART_Callback+0x54>)
 8002acc:	7011      	strb	r1, [r2, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <RS485_UART_Callback+0x58>)
 8002ad2:	7819      	ldrb	r1, [r3, #0]
 8002ad4:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <RS485_UART_Callback+0x5c>)
 8002ad6:	5499      	strb	r1, [r3, r2]
		_character_received_flag = 1;
 8002ad8:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <RS485_UART_Callback+0x60>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
		// DEBUG
		HAL_UART_Transmit(&huart1, &_receive_byte_buffer, 1, HAL_MAX_DELAY);
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4908      	ldr	r1, [pc, #32]	; (8002b08 <RS485_UART_Callback+0x58>)
 8002ae6:	480b      	ldr	r0, [pc, #44]	; (8002b14 <RS485_UART_Callback+0x64>)
 8002ae8:	f003 fdd8 	bl	800669c <HAL_UART_Transmit>
		// END DEBUG

		HAL_UART_Receive_IT(&huart3, &_receive_byte_buffer, 1);
 8002aec:	2201      	movs	r2, #1
 8002aee:	4906      	ldr	r1, [pc, #24]	; (8002b08 <RS485_UART_Callback+0x58>)
 8002af0:	4809      	ldr	r0, [pc, #36]	; (8002b18 <RS485_UART_Callback+0x68>)
 8002af2:	f003 fe5e 	bl	80067b2 <HAL_UART_Receive_IT>
	}
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40004800 	.word	0x40004800
 8002b04:	200007fc 	.word	0x200007fc
 8002b08:	200006f8 	.word	0x200006f8
 8002b0c:	200006fc 	.word	0x200006fc
 8002b10:	20000904 	.word	0x20000904
 8002b14:	20000a08 	.word	0x20000a08
 8002b18:	20000a98 	.word	0x20000a98

08002b1c <sensor_init>:

/* Variables */
uint16_t adc_receive[5];

/* Functions */
void sensor_init() {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (void*) adc_receive, 5);
 8002b20:	2205      	movs	r2, #5
 8002b22:	4903      	ldr	r1, [pc, #12]	; (8002b30 <sensor_init+0x14>)
 8002b24:	4803      	ldr	r0, [pc, #12]	; (8002b34 <sensor_init+0x18>)
 8002b26:	f000 fd2d 	bl	8003584 <HAL_ADC_Start_DMA>
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000908 	.word	0x20000908
 8002b34:	200004bc 	.word	0x200004bc

08002b38 <sensor_read>:

void sensor_read() {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_receive, 5);
 8002b3c:	2205      	movs	r2, #5
 8002b3e:	4903      	ldr	r1, [pc, #12]	; (8002b4c <sensor_read+0x14>)
 8002b40:	4803      	ldr	r0, [pc, #12]	; (8002b50 <sensor_read+0x18>)
 8002b42:	f000 fd1f 	bl	8003584 <HAL_ADC_Start_DMA>
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000908 	.word	0x20000908
 8002b50:	200004bc 	.word	0x200004bc

08002b54 <sensor_get_light>:

uint16_t sensor_get_light() {
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8002b58:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <sensor_get_light+0x14>)
 8002b5a:	889b      	ldrh	r3, [r3, #4]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	20000908 	.word	0x20000908

08002b6c <sensor_get_potentiometer>:

uint16_t sensor_get_potentiometer() {
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <sensor_get_potentiometer+0x14>)
 8002b72:	88db      	ldrh	r3, [r3, #6]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20000908 	.word	0x20000908
 8002b84:	00000000 	.word	0x00000000

08002b88 <sensor_get_voltage>:

float sensor_get_voltage() {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
	return ((float) adc_receive[0] * 3.3 * 12) / (4095 * 1.565);
 8002b8c:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <sensor_get_voltage+0x70>)
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	ee07 3a90 	vmov	s15, r3
 8002b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b98:	ee17 0a90 	vmov	r0, s15
 8002b9c:	f7fd fccc 	bl	8000538 <__aeabi_f2d>
 8002ba0:	a311      	add	r3, pc, #68	; (adr r3, 8002be8 <sensor_get_voltage+0x60>)
 8002ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba6:	f7fd fd1f 	bl	80005e8 <__aeabi_dmul>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <sensor_get_voltage+0x74>)
 8002bb8:	f7fd fd16 	bl	80005e8 <__aeabi_dmul>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	a30a      	add	r3, pc, #40	; (adr r3, 8002bf0 <sensor_get_voltage+0x68>)
 8002bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bca:	f7fd fe37 	bl	800083c <__aeabi_ddiv>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f7fd ff19 	bl	8000a0c <__aeabi_d2f>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	ee07 3a90 	vmov	s15, r3
}
 8002be0:	eeb0 0a67 	vmov.f32	s0, s15
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	66666666 	.word	0x66666666
 8002bec:	400a6666 	.word	0x400a6666
 8002bf0:	cccccccd 	.word	0xcccccccd
 8002bf4:	40b908ac 	.word	0x40b908ac
 8002bf8:	20000908 	.word	0x20000908
 8002bfc:	40280000 	.word	0x40280000

08002c00 <sensor_get_current>:

float sensor_get_current() {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
	return (((float) adc_receive[1] * 3.3 * 1000) / (4095 * 0.647) - 2.5) * 5
 8002c04:	4b28      	ldr	r3, [pc, #160]	; (8002ca8 <sensor_get_current+0xa8>)
 8002c06:	885b      	ldrh	r3, [r3, #2]
 8002c08:	ee07 3a90 	vmov	s15, r3
 8002c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c10:	ee17 0a90 	vmov	r0, s15
 8002c14:	f7fd fc90 	bl	8000538 <__aeabi_f2d>
 8002c18:	a31f      	add	r3, pc, #124	; (adr r3, 8002c98 <sensor_get_current+0x98>)
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	f7fd fce3 	bl	80005e8 <__aeabi_dmul>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	4b1f      	ldr	r3, [pc, #124]	; (8002cac <sensor_get_current+0xac>)
 8002c30:	f7fd fcda 	bl	80005e8 <__aeabi_dmul>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	a318      	add	r3, pc, #96	; (adr r3, 8002ca0 <sensor_get_current+0xa0>)
 8002c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c42:	f7fd fdfb 	bl	800083c <__aeabi_ddiv>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <sensor_get_current+0xb0>)
 8002c54:	f7fd fb10 	bl	8000278 <__aeabi_dsub>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <sensor_get_current+0xb4>)
 8002c66:	f7fd fcbf 	bl	80005e8 <__aeabi_dmul>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4610      	mov	r0, r2
 8002c70:	4619      	mov	r1, r3
			/ 2.5;
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <sensor_get_current+0xb0>)
 8002c78:	f7fd fde0 	bl	800083c <__aeabi_ddiv>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	f7fd fec2 	bl	8000a0c <__aeabi_d2f>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	ee07 3a90 	vmov	s15, r3
}
 8002c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	f3af 8000 	nop.w
 8002c98:	66666666 	.word	0x66666666
 8002c9c:	400a6666 	.word	0x400a6666
 8002ca0:	147ae148 	.word	0x147ae148
 8002ca4:	40a4b2ee 	.word	0x40a4b2ee
 8002ca8:	20000908 	.word	0x20000908
 8002cac:	408f4000 	.word	0x408f4000
 8002cb0:	40040000 	.word	0x40040000
 8002cb4:	40140000 	.word	0x40140000

08002cb8 <sensor_get_temperature>:

float sensor_get_temperature() {
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
	return ((float) adc_receive[4] * 330) / (4095);
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <sensor_get_temperature+0x30>)
 8002cbe:	891b      	ldrh	r3, [r3, #8]
 8002cc0:	ee07 3a90 	vmov	s15, r3
 8002cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002cec <sensor_get_temperature+0x34>
 8002ccc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cd0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002cf0 <sensor_get_temperature+0x38>
 8002cd4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002cd8:	eef0 7a66 	vmov.f32	s15, s13
}
 8002cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	20000908 	.word	0x20000908
 8002cec:	43a50000 	.word	0x43a50000
 8002cf0:	457ff000 	.word	0x457ff000

08002cf4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002cf8:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <MX_SPI1_Init+0x64>)
 8002cfa:	4a18      	ldr	r2, [pc, #96]	; (8002d5c <MX_SPI1_Init+0x68>)
 8002cfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cfe:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <MX_SPI1_Init+0x64>)
 8002d00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d06:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <MX_SPI1_Init+0x64>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <MX_SPI1_Init+0x64>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <MX_SPI1_Init+0x64>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <MX_SPI1_Init+0x64>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <MX_SPI1_Init+0x64>)
 8002d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d26:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <MX_SPI1_Init+0x64>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <MX_SPI1_Init+0x64>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <MX_SPI1_Init+0x64>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <MX_SPI1_Init+0x64>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <MX_SPI1_Init+0x64>)
 8002d40:	220a      	movs	r2, #10
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d44:	4804      	ldr	r0, [pc, #16]	; (8002d58 <MX_SPI1_Init+0x64>)
 8002d46:	f002 fb0d 	bl	8005364 <HAL_SPI_Init>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d50:	f7ff fc1c 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d54:	bf00      	nop
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20000914 	.word	0x20000914
 8002d5c:	40013000 	.word	0x40013000

08002d60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <HAL_SPI_MspInit+0x84>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d12b      	bne.n	8002dda <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <HAL_SPI_MspInit+0x88>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	4a17      	ldr	r2, [pc, #92]	; (8002de8 <HAL_SPI_MspInit+0x88>)
 8002d8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d90:	6453      	str	r3, [r2, #68]	; 0x44
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <HAL_SPI_MspInit+0x88>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_SPI_MspInit+0x88>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <HAL_SPI_MspInit+0x88>)
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HAL_SPI_MspInit+0x88>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002dba:	2338      	movs	r3, #56	; 0x38
 8002dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002dca:	2305      	movs	r3, #5
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dce:	f107 0314 	add.w	r3, r7, #20
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4805      	ldr	r0, [pc, #20]	; (8002dec <HAL_SPI_MspInit+0x8c>)
 8002dd6:	f001 fcb7 	bl	8004748 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002dda:	bf00      	nop
 8002ddc:	3728      	adds	r7, #40	; 0x28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40013000 	.word	0x40013000
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40020400 	.word	0x40020400

08002df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	607b      	str	r3, [r7, #4]
 8002dfa:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <HAL_MspInit+0x4c>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	4a0f      	ldr	r2, [pc, #60]	; (8002e3c <HAL_MspInit+0x4c>)
 8002e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e04:	6453      	str	r3, [r2, #68]	; 0x44
 8002e06:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <HAL_MspInit+0x4c>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0e:	607b      	str	r3, [r7, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	603b      	str	r3, [r7, #0]
 8002e16:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <HAL_MspInit+0x4c>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	4a08      	ldr	r2, [pc, #32]	; (8002e3c <HAL_MspInit+0x4c>)
 8002e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e20:	6413      	str	r3, [r2, #64]	; 0x40
 8002e22:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <HAL_MspInit+0x4c>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800

08002e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e44:	e7fe      	b.n	8002e44 <NMI_Handler+0x4>

08002e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e4a:	e7fe      	b.n	8002e4a <HardFault_Handler+0x4>

08002e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e50:	e7fe      	b.n	8002e50 <MemManage_Handler+0x4>

08002e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e56:	e7fe      	b.n	8002e56 <BusFault_Handler+0x4>

08002e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e5c:	e7fe      	b.n	8002e5c <UsageFault_Handler+0x4>

08002e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e62:	bf00      	nop
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e8c:	f000 faf2 	bl	8003474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e90:	bf00      	nop
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e98:	4802      	ldr	r0, [pc, #8]	; (8002ea4 <TIM3_IRQHandler+0x10>)
 8002e9a:	f002 fff9 	bl	8005e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000970 	.word	0x20000970

08002ea8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002eac:	4802      	ldr	r0, [pc, #8]	; (8002eb8 <USART3_IRQHandler+0x10>)
 8002eae:	f003 fca5 	bl	80067fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000a98 	.word	0x20000a98

08002ebc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ec0:	4802      	ldr	r0, [pc, #8]	; (8002ecc <DMA2_Stream0_IRQHandler+0x10>)
 8002ec2:	f001 f9d7 	bl	8004274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000504 	.word	0x20000504

08002ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ed8:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <_sbrk+0x5c>)
 8002eda:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <_sbrk+0x60>)
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ee4:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <_sbrk+0x64>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d102      	bne.n	8002ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <_sbrk+0x64>)
 8002eee:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <_sbrk+0x68>)
 8002ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ef2:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <_sbrk+0x64>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4413      	add	r3, r2
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d207      	bcs.n	8002f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f00:	f004 fcd2 	bl	80078a8 <__errno>
 8002f04:	4603      	mov	r3, r0
 8002f06:	220c      	movs	r2, #12
 8002f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0e:	e009      	b.n	8002f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <_sbrk+0x64>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f16:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <_sbrk+0x64>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	4a05      	ldr	r2, [pc, #20]	; (8002f34 <_sbrk+0x64>)
 8002f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f22:	68fb      	ldr	r3, [r7, #12]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20020000 	.word	0x20020000
 8002f30:	00000400 	.word	0x00000400
 8002f34:	2000096c 	.word	0x2000096c
 8002f38:	20000c30 	.word	0x20000c30

08002f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <SystemInit+0x20>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f46:	4a05      	ldr	r2, [pc, #20]	; (8002f5c <SystemInit+0x20>)
 8002f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f66:	f107 0308 	add.w	r3, r7, #8
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	609a      	str	r2, [r3, #8]
 8002f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f74:	463b      	mov	r3, r7
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <MX_TIM3_Init+0x94>)
 8002f7e:	4a1e      	ldr	r2, [pc, #120]	; (8002ff8 <MX_TIM3_Init+0x98>)
 8002f80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8002f82:	4b1c      	ldr	r3, [pc, #112]	; (8002ff4 <MX_TIM3_Init+0x94>)
 8002f84:	f240 3247 	movw	r2, #839	; 0x347
 8002f88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <MX_TIM3_Init+0x94>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002f90:	4b18      	ldr	r3, [pc, #96]	; (8002ff4 <MX_TIM3_Init+0x94>)
 8002f92:	2263      	movs	r2, #99	; 0x63
 8002f94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f96:	4b17      	ldr	r3, [pc, #92]	; (8002ff4 <MX_TIM3_Init+0x94>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f9c:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <MX_TIM3_Init+0x94>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002fa2:	4814      	ldr	r0, [pc, #80]	; (8002ff4 <MX_TIM3_Init+0x94>)
 8002fa4:	f002 feb4 	bl	8005d10 <HAL_TIM_Base_Init>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002fae:	f7ff faed 	bl	800258c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002fb8:	f107 0308 	add.w	r3, r7, #8
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	480d      	ldr	r0, [pc, #52]	; (8002ff4 <MX_TIM3_Init+0x94>)
 8002fc0:	f003 f856 	bl	8006070 <HAL_TIM_ConfigClockSource>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002fca:	f7ff fadf 	bl	800258c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fd6:	463b      	mov	r3, r7
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4806      	ldr	r0, [pc, #24]	; (8002ff4 <MX_TIM3_Init+0x94>)
 8002fdc:	f003 fa7e 	bl	80064dc <HAL_TIMEx_MasterConfigSynchronization>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002fe6:	f7ff fad1 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002fea:	bf00      	nop
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000970 	.word	0x20000970
 8002ff8:	40000400 	.word	0x40000400

08002ffc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0e      	ldr	r2, [pc, #56]	; (8003044 <HAL_TIM_Base_MspInit+0x48>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d115      	bne.n	800303a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <HAL_TIM_Base_MspInit+0x4c>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	4a0c      	ldr	r2, [pc, #48]	; (8003048 <HAL_TIM_Base_MspInit+0x4c>)
 8003018:	f043 0302 	orr.w	r3, r3, #2
 800301c:	6413      	str	r3, [r2, #64]	; 0x40
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <HAL_TIM_Base_MspInit+0x4c>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800302a:	2200      	movs	r2, #0
 800302c:	2100      	movs	r1, #0
 800302e:	201d      	movs	r0, #29
 8003030:	f000 ff51 	bl	8003ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003034:	201d      	movs	r0, #29
 8003036:	f000 ff6a 	bl	8003f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800303a:	bf00      	nop
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40000400 	.word	0x40000400
 8003048:	40023800 	.word	0x40023800

0800304c <setTimer>:
#include "timer.h"

struct TimerStruct timer[10];

void setTimer(int idx, int counter)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
	timer[idx].counter = counter / TICK;
 8003056:	4908      	ldr	r1, [pc, #32]	; (8003078 <setTimer+0x2c>)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	timer[idx].flag = 0;
 8003060:	4a05      	ldr	r2, [pc, #20]	; (8003078 <setTimer+0x2c>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4413      	add	r3, r2
 8003068:	2200      	movs	r2, #0
 800306a:	605a      	str	r2, [r3, #4]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	200009b8 	.word	0x200009b8

0800307c <timerRun>:

void timerRun()
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; ++i)
 8003082:	2300      	movs	r3, #0
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	e01d      	b.n	80030c4 <timerRun+0x48>
	{
		if (timer[i].counter > 0)
 8003088:	4a13      	ldr	r2, [pc, #76]	; (80030d8 <timerRun+0x5c>)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003090:	2b00      	cmp	r3, #0
 8003092:	dd14      	ble.n	80030be <timerRun+0x42>
		{
			--timer[i].counter;
 8003094:	4a10      	ldr	r2, [pc, #64]	; (80030d8 <timerRun+0x5c>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800309c:	1e5a      	subs	r2, r3, #1
 800309e:	490e      	ldr	r1, [pc, #56]	; (80030d8 <timerRun+0x5c>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			if (timer[i].counter <= 0)
 80030a6:	4a0c      	ldr	r2, [pc, #48]	; (80030d8 <timerRun+0x5c>)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	dc05      	bgt.n	80030be <timerRun+0x42>
			{
				timer[i].flag = 1;
 80030b2:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <timerRun+0x5c>)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	2201      	movs	r2, #1
 80030bc:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 10; ++i)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3301      	adds	r3, #1
 80030c2:	607b      	str	r3, [r7, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b09      	cmp	r3, #9
 80030c8:	ddde      	ble.n	8003088 <timerRun+0xc>
			}
		}
	}
}
 80030ca:	bf00      	nop
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	200009b8 	.word	0x200009b8

080030dc <isFlag>:

int isFlag(int idx)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
	if (timer[idx].flag)
 80030e4:	4a07      	ldr	r2, [pc, #28]	; (8003104 <isFlag+0x28>)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <isFlag+0x1a>
	{
		return 1;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <isFlag+0x1c>
	}
	return 0;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	200009b8 	.word	0x200009b8

08003108 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800310c:	4b11      	ldr	r3, [pc, #68]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 800310e:	4a12      	ldr	r2, [pc, #72]	; (8003158 <MX_USART1_UART_Init+0x50>)
 8003110:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 8003114:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003118:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800311a:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 8003122:	2200      	movs	r2, #0
 8003124:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 800312e:	220c      	movs	r2, #12
 8003130:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 800313a:	2200      	movs	r2, #0
 800313c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800313e:	4805      	ldr	r0, [pc, #20]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 8003140:	f003 fa5c 	bl	80065fc <HAL_UART_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800314a:	f7ff fa1f 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000a08 	.word	0x20000a08
 8003158:	40011000 	.word	0x40011000

0800315c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003160:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <MX_USART2_UART_Init+0x4c>)
 8003162:	4a12      	ldr	r2, [pc, #72]	; (80031ac <MX_USART2_UART_Init+0x50>)
 8003164:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003166:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <MX_USART2_UART_Init+0x4c>)
 8003168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800316c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800316e:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <MX_USART2_UART_Init+0x4c>)
 8003170:	2200      	movs	r2, #0
 8003172:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <MX_USART2_UART_Init+0x4c>)
 8003176:	2200      	movs	r2, #0
 8003178:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800317a:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <MX_USART2_UART_Init+0x4c>)
 800317c:	2200      	movs	r2, #0
 800317e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003180:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <MX_USART2_UART_Init+0x4c>)
 8003182:	220c      	movs	r2, #12
 8003184:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003186:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <MX_USART2_UART_Init+0x4c>)
 8003188:	2200      	movs	r2, #0
 800318a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800318c:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <MX_USART2_UART_Init+0x4c>)
 800318e:	2200      	movs	r2, #0
 8003190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003192:	4805      	ldr	r0, [pc, #20]	; (80031a8 <MX_USART2_UART_Init+0x4c>)
 8003194:	f003 fa32 	bl	80065fc <HAL_UART_Init>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800319e:	f7ff f9f5 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000a50 	.word	0x20000a50
 80031ac:	40004400 	.word	0x40004400

080031b0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80031b4:	4b11      	ldr	r3, [pc, #68]	; (80031fc <MX_USART3_UART_Init+0x4c>)
 80031b6:	4a12      	ldr	r2, [pc, #72]	; (8003200 <MX_USART3_UART_Init+0x50>)
 80031b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80031ba:	4b10      	ldr	r3, [pc, #64]	; (80031fc <MX_USART3_UART_Init+0x4c>)
 80031bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80031c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031c2:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <MX_USART3_UART_Init+0x4c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <MX_USART3_UART_Init+0x4c>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031ce:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <MX_USART3_UART_Init+0x4c>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031d4:	4b09      	ldr	r3, [pc, #36]	; (80031fc <MX_USART3_UART_Init+0x4c>)
 80031d6:	220c      	movs	r2, #12
 80031d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <MX_USART3_UART_Init+0x4c>)
 80031dc:	2200      	movs	r2, #0
 80031de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <MX_USART3_UART_Init+0x4c>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031e6:	4805      	ldr	r0, [pc, #20]	; (80031fc <MX_USART3_UART_Init+0x4c>)
 80031e8:	f003 fa08 	bl	80065fc <HAL_UART_Init>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80031f2:	f7ff f9cb 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000a98 	.word	0x20000a98
 8003200:	40004800 	.word	0x40004800

08003204 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08e      	sub	sp, #56	; 0x38
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a50      	ldr	r2, [pc, #320]	; (8003364 <HAL_UART_MspInit+0x160>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d12d      	bne.n	8003282 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	623b      	str	r3, [r7, #32]
 800322a:	4b4f      	ldr	r3, [pc, #316]	; (8003368 <HAL_UART_MspInit+0x164>)
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	4a4e      	ldr	r2, [pc, #312]	; (8003368 <HAL_UART_MspInit+0x164>)
 8003230:	f043 0310 	orr.w	r3, r3, #16
 8003234:	6453      	str	r3, [r2, #68]	; 0x44
 8003236:	4b4c      	ldr	r3, [pc, #304]	; (8003368 <HAL_UART_MspInit+0x164>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	623b      	str	r3, [r7, #32]
 8003240:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	61fb      	str	r3, [r7, #28]
 8003246:	4b48      	ldr	r3, [pc, #288]	; (8003368 <HAL_UART_MspInit+0x164>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	4a47      	ldr	r2, [pc, #284]	; (8003368 <HAL_UART_MspInit+0x164>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6313      	str	r3, [r2, #48]	; 0x30
 8003252:	4b45      	ldr	r3, [pc, #276]	; (8003368 <HAL_UART_MspInit+0x164>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800325e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003264:	2302      	movs	r3, #2
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800326c:	2303      	movs	r3, #3
 800326e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003270:	2307      	movs	r3, #7
 8003272:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003278:	4619      	mov	r1, r3
 800327a:	483c      	ldr	r0, [pc, #240]	; (800336c <HAL_UART_MspInit+0x168>)
 800327c:	f001 fa64 	bl	8004748 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003280:	e06b      	b.n	800335a <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART2)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a3a      	ldr	r2, [pc, #232]	; (8003370 <HAL_UART_MspInit+0x16c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d12c      	bne.n	80032e6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800328c:	2300      	movs	r3, #0
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	4b35      	ldr	r3, [pc, #212]	; (8003368 <HAL_UART_MspInit+0x164>)
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	4a34      	ldr	r2, [pc, #208]	; (8003368 <HAL_UART_MspInit+0x164>)
 8003296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800329a:	6413      	str	r3, [r2, #64]	; 0x40
 800329c:	4b32      	ldr	r3, [pc, #200]	; (8003368 <HAL_UART_MspInit+0x164>)
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_UART_MspInit+0x164>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	4a2d      	ldr	r2, [pc, #180]	; (8003368 <HAL_UART_MspInit+0x164>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	6313      	str	r3, [r2, #48]	; 0x30
 80032b8:	4b2b      	ldr	r3, [pc, #172]	; (8003368 <HAL_UART_MspInit+0x164>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80032c4:	230c      	movs	r3, #12
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c8:	2302      	movs	r3, #2
 80032ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d0:	2303      	movs	r3, #3
 80032d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032d4:	2307      	movs	r3, #7
 80032d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032dc:	4619      	mov	r1, r3
 80032de:	4823      	ldr	r0, [pc, #140]	; (800336c <HAL_UART_MspInit+0x168>)
 80032e0:	f001 fa32 	bl	8004748 <HAL_GPIO_Init>
}
 80032e4:	e039      	b.n	800335a <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART3)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a22      	ldr	r2, [pc, #136]	; (8003374 <HAL_UART_MspInit+0x170>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d134      	bne.n	800335a <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032f0:	2300      	movs	r3, #0
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <HAL_UART_MspInit+0x164>)
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	4a1b      	ldr	r2, [pc, #108]	; (8003368 <HAL_UART_MspInit+0x164>)
 80032fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003300:	4b19      	ldr	r3, [pc, #100]	; (8003368 <HAL_UART_MspInit+0x164>)
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	4b15      	ldr	r3, [pc, #84]	; (8003368 <HAL_UART_MspInit+0x164>)
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	4a14      	ldr	r2, [pc, #80]	; (8003368 <HAL_UART_MspInit+0x164>)
 8003316:	f043 0304 	orr.w	r3, r3, #4
 800331a:	6313      	str	r3, [r2, #48]	; 0x30
 800331c:	4b12      	ldr	r3, [pc, #72]	; (8003368 <HAL_UART_MspInit+0x164>)
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003328:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332e:	2302      	movs	r3, #2
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003336:	2303      	movs	r3, #3
 8003338:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800333a:	2307      	movs	r3, #7
 800333c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800333e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003342:	4619      	mov	r1, r3
 8003344:	480c      	ldr	r0, [pc, #48]	; (8003378 <HAL_UART_MspInit+0x174>)
 8003346:	f001 f9ff 	bl	8004748 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800334a:	2200      	movs	r2, #0
 800334c:	2100      	movs	r1, #0
 800334e:	2027      	movs	r0, #39	; 0x27
 8003350:	f000 fdc1 	bl	8003ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003354:	2027      	movs	r0, #39	; 0x27
 8003356:	f000 fdda 	bl	8003f0e <HAL_NVIC_EnableIRQ>
}
 800335a:	bf00      	nop
 800335c:	3738      	adds	r7, #56	; 0x38
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40011000 	.word	0x40011000
 8003368:	40023800 	.word	0x40023800
 800336c:	40020000 	.word	0x40020000
 8003370:	40004400 	.word	0x40004400
 8003374:	40004800 	.word	0x40004800
 8003378:	40020800 	.word	0x40020800

0800337c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800337c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003380:	f7ff fddc 	bl	8002f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003384:	480c      	ldr	r0, [pc, #48]	; (80033b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003386:	490d      	ldr	r1, [pc, #52]	; (80033bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003388:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800338a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800338c:	e002      	b.n	8003394 <LoopCopyDataInit>

0800338e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800338e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003392:	3304      	adds	r3, #4

08003394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003398:	d3f9      	bcc.n	800338e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800339a:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800339c:	4c0a      	ldr	r4, [pc, #40]	; (80033c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800339e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033a0:	e001      	b.n	80033a6 <LoopFillZerobss>

080033a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033a4:	3204      	adds	r2, #4

080033a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033a8:	d3fb      	bcc.n	80033a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033aa:	f004 fa83 	bl	80078b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ae:	f7fe ff7f 	bl	80022b0 <main>
  bx  lr    
 80033b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80033b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033bc:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 80033c0:	0800b278 	.word	0x0800b278
  ldr r2, =_sbss
 80033c4:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 80033c8:	20000c2c 	.word	0x20000c2c

080033cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033cc:	e7fe      	b.n	80033cc <ADC_IRQHandler>
	...

080033d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033d4:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <HAL_Init+0x40>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a0d      	ldr	r2, [pc, #52]	; (8003410 <HAL_Init+0x40>)
 80033da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_Init+0x40>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <HAL_Init+0x40>)
 80033e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033ec:	4b08      	ldr	r3, [pc, #32]	; (8003410 <HAL_Init+0x40>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a07      	ldr	r2, [pc, #28]	; (8003410 <HAL_Init+0x40>)
 80033f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033f8:	2003      	movs	r0, #3
 80033fa:	f000 fd61 	bl	8003ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033fe:	200f      	movs	r0, #15
 8003400:	f000 f808 	bl	8003414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003404:	f7ff fcf4 	bl	8002df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40023c00 	.word	0x40023c00

08003414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800341c:	4b12      	ldr	r3, [pc, #72]	; (8003468 <HAL_InitTick+0x54>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <HAL_InitTick+0x58>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	4619      	mov	r1, r3
 8003426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800342a:	fbb3 f3f1 	udiv	r3, r3, r1
 800342e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fd79 	bl	8003f2a <HAL_SYSTICK_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e00e      	b.n	8003460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b0f      	cmp	r3, #15
 8003446:	d80a      	bhi.n	800345e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003448:	2200      	movs	r2, #0
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	f04f 30ff 	mov.w	r0, #4294967295
 8003450:	f000 fd41 	bl	8003ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003454:	4a06      	ldr	r2, [pc, #24]	; (8003470 <HAL_InitTick+0x5c>)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	e000      	b.n	8003460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000224 	.word	0x20000224
 800346c:	2000022c 	.word	0x2000022c
 8003470:	20000228 	.word	0x20000228

08003474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <HAL_IncTick+0x20>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_IncTick+0x24>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4413      	add	r3, r2
 8003484:	4a04      	ldr	r2, [pc, #16]	; (8003498 <HAL_IncTick+0x24>)
 8003486:	6013      	str	r3, [r2, #0]
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	2000022c 	.word	0x2000022c
 8003498:	20000ae0 	.word	0x20000ae0

0800349c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  return uwTick;
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <HAL_GetTick+0x14>)
 80034a2:	681b      	ldr	r3, [r3, #0]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	20000ae0 	.word	0x20000ae0

080034b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034bc:	f7ff ffee 	bl	800349c <HAL_GetTick>
 80034c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034cc:	d005      	beq.n	80034da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034ce:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <HAL_Delay+0x44>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4413      	add	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034da:	bf00      	nop
 80034dc:	f7ff ffde 	bl	800349c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d8f7      	bhi.n	80034dc <HAL_Delay+0x28>
  {
  }
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	2000022c 	.word	0x2000022c

080034fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e033      	b.n	800357a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fd fe88 	bl	8001230 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b00      	cmp	r3, #0
 8003538:	d118      	bne.n	800356c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003542:	f023 0302 	bic.w	r3, r3, #2
 8003546:	f043 0202 	orr.w	r2, r3, #2
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fa68 	bl	8003a24 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f023 0303 	bic.w	r3, r3, #3
 8003562:	f043 0201 	orr.w	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	641a      	str	r2, [r3, #64]	; 0x40
 800356a:	e001      	b.n	8003570 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003578:	7bfb      	ldrb	r3, [r7, #15]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_ADC_Start_DMA+0x1e>
 800359e:	2302      	movs	r3, #2
 80035a0:	e0e9      	b.n	8003776 <HAL_ADC_Start_DMA+0x1f2>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d018      	beq.n	80035ea <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035c8:	4b6d      	ldr	r3, [pc, #436]	; (8003780 <HAL_ADC_Start_DMA+0x1fc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a6d      	ldr	r2, [pc, #436]	; (8003784 <HAL_ADC_Start_DMA+0x200>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	0c9a      	lsrs	r2, r3, #18
 80035d4:	4613      	mov	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80035dc:	e002      	b.n	80035e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	3b01      	subs	r3, #1
 80035e2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f9      	bne.n	80035de <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f8:	d107      	bne.n	800360a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003608:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	f040 80a1 	bne.w	800375c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003644:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003658:	d106      	bne.n	8003668 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f023 0206 	bic.w	r2, r3, #6
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	645a      	str	r2, [r3, #68]	; 0x44
 8003666:	e002      	b.n	800366e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003676:	4b44      	ldr	r3, [pc, #272]	; (8003788 <HAL_ADC_Start_DMA+0x204>)
 8003678:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	4a43      	ldr	r2, [pc, #268]	; (800378c <HAL_ADC_Start_DMA+0x208>)
 8003680:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	4a42      	ldr	r2, [pc, #264]	; (8003790 <HAL_ADC_Start_DMA+0x20c>)
 8003688:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	4a41      	ldr	r2, [pc, #260]	; (8003794 <HAL_ADC_Start_DMA+0x210>)
 8003690:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800369a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80036aa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ba:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	334c      	adds	r3, #76	; 0x4c
 80036c6:	4619      	mov	r1, r3
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f000 fce8 	bl	80040a0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d12a      	bne.n	8003732 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a2d      	ldr	r2, [pc, #180]	; (8003798 <HAL_ADC_Start_DMA+0x214>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d015      	beq.n	8003712 <HAL_ADC_Start_DMA+0x18e>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a2c      	ldr	r2, [pc, #176]	; (800379c <HAL_ADC_Start_DMA+0x218>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d105      	bne.n	80036fc <HAL_ADC_Start_DMA+0x178>
 80036f0:	4b25      	ldr	r3, [pc, #148]	; (8003788 <HAL_ADC_Start_DMA+0x204>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a27      	ldr	r2, [pc, #156]	; (80037a0 <HAL_ADC_Start_DMA+0x21c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d136      	bne.n	8003774 <HAL_ADC_Start_DMA+0x1f0>
 8003706:	4b20      	ldr	r3, [pc, #128]	; (8003788 <HAL_ADC_Start_DMA+0x204>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	2b00      	cmp	r3, #0
 8003710:	d130      	bne.n	8003774 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d129      	bne.n	8003774 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	e020      	b.n	8003774 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a18      	ldr	r2, [pc, #96]	; (8003798 <HAL_ADC_Start_DMA+0x214>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d11b      	bne.n	8003774 <HAL_ADC_Start_DMA+0x1f0>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d114      	bne.n	8003774 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003758:	609a      	str	r2, [r3, #8]
 800375a:	e00b      	b.n	8003774 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	f043 0210 	orr.w	r2, r3, #16
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	f043 0201 	orr.w	r2, r3, #1
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000224 	.word	0x20000224
 8003784:	431bde83 	.word	0x431bde83
 8003788:	40012300 	.word	0x40012300
 800378c:	08003c1d 	.word	0x08003c1d
 8003790:	08003cd7 	.word	0x08003cd7
 8003794:	08003cf3 	.word	0x08003cf3
 8003798:	40012000 	.word	0x40012000
 800379c:	40012100 	.word	0x40012100
 80037a0:	40012200 	.word	0x40012200

080037a4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x1c>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e105      	b.n	8003a08 <HAL_ADC_ConfigChannel+0x228>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b09      	cmp	r3, #9
 800380a:	d925      	bls.n	8003858 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68d9      	ldr	r1, [r3, #12]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	b29b      	uxth	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	4613      	mov	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4413      	add	r3, r2
 8003820:	3b1e      	subs	r3, #30
 8003822:	2207      	movs	r2, #7
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43da      	mvns	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	400a      	ands	r2, r1
 8003830:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68d9      	ldr	r1, [r3, #12]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	b29b      	uxth	r3, r3
 8003842:	4618      	mov	r0, r3
 8003844:	4603      	mov	r3, r0
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	4403      	add	r3, r0
 800384a:	3b1e      	subs	r3, #30
 800384c:	409a      	lsls	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	60da      	str	r2, [r3, #12]
 8003856:	e022      	b.n	800389e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6919      	ldr	r1, [r3, #16]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	b29b      	uxth	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	4613      	mov	r3, r2
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	4413      	add	r3, r2
 800386c:	2207      	movs	r2, #7
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43da      	mvns	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	400a      	ands	r2, r1
 800387a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6919      	ldr	r1, [r3, #16]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	b29b      	uxth	r3, r3
 800388c:	4618      	mov	r0, r3
 800388e:	4603      	mov	r3, r0
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	4403      	add	r3, r0
 8003894:	409a      	lsls	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b06      	cmp	r3, #6
 80038a4:	d824      	bhi.n	80038f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	3b05      	subs	r3, #5
 80038b8:	221f      	movs	r2, #31
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43da      	mvns	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	400a      	ands	r2, r1
 80038c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	4618      	mov	r0, r3
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	3b05      	subs	r3, #5
 80038e2:	fa00 f203 	lsl.w	r2, r0, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	635a      	str	r2, [r3, #52]	; 0x34
 80038ee:	e04c      	b.n	800398a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b0c      	cmp	r3, #12
 80038f6:	d824      	bhi.n	8003942 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	3b23      	subs	r3, #35	; 0x23
 800390a:	221f      	movs	r2, #31
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	43da      	mvns	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	400a      	ands	r2, r1
 8003918:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	b29b      	uxth	r3, r3
 8003926:	4618      	mov	r0, r3
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	3b23      	subs	r3, #35	; 0x23
 8003934:	fa00 f203 	lsl.w	r2, r0, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
 8003940:	e023      	b.n	800398a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	3b41      	subs	r3, #65	; 0x41
 8003954:	221f      	movs	r2, #31
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43da      	mvns	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	400a      	ands	r2, r1
 8003962:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	b29b      	uxth	r3, r3
 8003970:	4618      	mov	r0, r3
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	3b41      	subs	r3, #65	; 0x41
 800397e:	fa00 f203 	lsl.w	r2, r0, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800398a:	4b22      	ldr	r3, [pc, #136]	; (8003a14 <HAL_ADC_ConfigChannel+0x234>)
 800398c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a21      	ldr	r2, [pc, #132]	; (8003a18 <HAL_ADC_ConfigChannel+0x238>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d109      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x1cc>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b12      	cmp	r3, #18
 800399e:	d105      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a19      	ldr	r2, [pc, #100]	; (8003a18 <HAL_ADC_ConfigChannel+0x238>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d123      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x21e>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b10      	cmp	r3, #16
 80039bc:	d003      	beq.n	80039c6 <HAL_ADC_ConfigChannel+0x1e6>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b11      	cmp	r3, #17
 80039c4:	d11b      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b10      	cmp	r3, #16
 80039d8:	d111      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039da:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <HAL_ADC_ConfigChannel+0x23c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a10      	ldr	r2, [pc, #64]	; (8003a20 <HAL_ADC_ConfigChannel+0x240>)
 80039e0:	fba2 2303 	umull	r2, r3, r2, r3
 80039e4:	0c9a      	lsrs	r2, r3, #18
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039f0:	e002      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	3b01      	subs	r3, #1
 80039f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f9      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	40012300 	.word	0x40012300
 8003a18:	40012000 	.word	0x40012000
 8003a1c:	20000224 	.word	0x20000224
 8003a20:	431bde83 	.word	0x431bde83

08003a24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a2c:	4b79      	ldr	r3, [pc, #484]	; (8003c14 <ADC_Init+0x1f0>)
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	431a      	orrs	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6859      	ldr	r1, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	021a      	lsls	r2, r3, #8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6859      	ldr	r1, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6899      	ldr	r1, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab6:	4a58      	ldr	r2, [pc, #352]	; (8003c18 <ADC_Init+0x1f4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d022      	beq.n	8003b02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003aca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6899      	ldr	r1, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003aec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6899      	ldr	r1, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	609a      	str	r2, [r3, #8]
 8003b00:	e00f      	b.n	8003b22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b20:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0202 	bic.w	r2, r2, #2
 8003b30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6899      	ldr	r1, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	7e1b      	ldrb	r3, [r3, #24]
 8003b3c:	005a      	lsls	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d01b      	beq.n	8003b88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b5e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6859      	ldr	r1, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	035a      	lsls	r2, r3, #13
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
 8003b86:	e007      	b.n	8003b98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b96:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	051a      	lsls	r2, r3, #20
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6899      	ldr	r1, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bda:	025a      	lsls	r2, r3, #9
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6899      	ldr	r1, [r3, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	029a      	lsls	r2, r3, #10
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	609a      	str	r2, [r3, #8]
}
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	40012300 	.word	0x40012300
 8003c18:	0f000001 	.word	0x0f000001

08003c1c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d13c      	bne.n	8003cb0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d12b      	bne.n	8003ca8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d127      	bne.n	8003ca8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d006      	beq.n	8003c74 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d119      	bne.n	8003ca8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0220 	bic.w	r2, r2, #32
 8003c82:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d105      	bne.n	8003ca8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f043 0201 	orr.w	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f7ff fd7b 	bl	80037a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003cae:	e00e      	b.n	8003cce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f7ff fd85 	bl	80037cc <HAL_ADC_ErrorCallback>
}
 8003cc2:	e004      	b.n	8003cce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	4798      	blx	r3
}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b084      	sub	sp, #16
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f7ff fd67 	bl	80037b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cea:	bf00      	nop
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2240      	movs	r2, #64	; 0x40
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	f043 0204 	orr.w	r2, r3, #4
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f7ff fd5a 	bl	80037cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d18:	bf00      	nop
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <__NVIC_SetPriorityGrouping+0x44>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d52:	4a04      	ldr	r2, [pc, #16]	; (8003d64 <__NVIC_SetPriorityGrouping+0x44>)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	60d3      	str	r3, [r2, #12]
}
 8003d58:	bf00      	nop
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	e000ed00 	.word	0xe000ed00

08003d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d6c:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <__NVIC_GetPriorityGrouping+0x18>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	0a1b      	lsrs	r3, r3, #8
 8003d72:	f003 0307 	and.w	r3, r3, #7
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	e000ed00 	.word	0xe000ed00

08003d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	db0b      	blt.n	8003dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	f003 021f 	and.w	r2, r3, #31
 8003d9c:	4907      	ldr	r1, [pc, #28]	; (8003dbc <__NVIC_EnableIRQ+0x38>)
 8003d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	2001      	movs	r0, #1
 8003da6:	fa00 f202 	lsl.w	r2, r0, r2
 8003daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	e000e100 	.word	0xe000e100

08003dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	6039      	str	r1, [r7, #0]
 8003dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	db0a      	blt.n	8003dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	490c      	ldr	r1, [pc, #48]	; (8003e0c <__NVIC_SetPriority+0x4c>)
 8003dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dde:	0112      	lsls	r2, r2, #4
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	440b      	add	r3, r1
 8003de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003de8:	e00a      	b.n	8003e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	4908      	ldr	r1, [pc, #32]	; (8003e10 <__NVIC_SetPriority+0x50>)
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	3b04      	subs	r3, #4
 8003df8:	0112      	lsls	r2, r2, #4
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	761a      	strb	r2, [r3, #24]
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	e000e100 	.word	0xe000e100
 8003e10:	e000ed00 	.word	0xe000ed00

08003e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b089      	sub	sp, #36	; 0x24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f1c3 0307 	rsb	r3, r3, #7
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	bf28      	it	cs
 8003e32:	2304      	movcs	r3, #4
 8003e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	2b06      	cmp	r3, #6
 8003e3c:	d902      	bls.n	8003e44 <NVIC_EncodePriority+0x30>
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	3b03      	subs	r3, #3
 8003e42:	e000      	b.n	8003e46 <NVIC_EncodePriority+0x32>
 8003e44:	2300      	movs	r3, #0
 8003e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e48:	f04f 32ff 	mov.w	r2, #4294967295
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	43da      	mvns	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	401a      	ands	r2, r3
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	fa01 f303 	lsl.w	r3, r1, r3
 8003e66:	43d9      	mvns	r1, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e6c:	4313      	orrs	r3, r2
         );
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3724      	adds	r7, #36	; 0x24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
	...

08003e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e8c:	d301      	bcc.n	8003e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e00f      	b.n	8003eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e92:	4a0a      	ldr	r2, [pc, #40]	; (8003ebc <SysTick_Config+0x40>)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e9a:	210f      	movs	r1, #15
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea0:	f7ff ff8e 	bl	8003dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <SysTick_Config+0x40>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eaa:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <SysTick_Config+0x40>)
 8003eac:	2207      	movs	r2, #7
 8003eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	e000e010 	.word	0xe000e010

08003ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff ff29 	bl	8003d20 <__NVIC_SetPriorityGrouping>
}
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b086      	sub	sp, #24
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	4603      	mov	r3, r0
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	607a      	str	r2, [r7, #4]
 8003ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ee8:	f7ff ff3e 	bl	8003d68 <__NVIC_GetPriorityGrouping>
 8003eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	68b9      	ldr	r1, [r7, #8]
 8003ef2:	6978      	ldr	r0, [r7, #20]
 8003ef4:	f7ff ff8e 	bl	8003e14 <NVIC_EncodePriority>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003efe:	4611      	mov	r1, r2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff ff5d 	bl	8003dc0 <__NVIC_SetPriority>
}
 8003f06:	bf00      	nop
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	4603      	mov	r3, r0
 8003f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff ff31 	bl	8003d84 <__NVIC_EnableIRQ>
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff ffa2 	bl	8003e7c <SysTick_Config>
 8003f38:	4603      	mov	r3, r0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f50:	f7ff faa4 	bl	800349c <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e099      	b.n	8004094 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0201 	bic.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f80:	e00f      	b.n	8003fa2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f82:	f7ff fa8b 	bl	800349c <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b05      	cmp	r3, #5
 8003f8e:	d908      	bls.n	8003fa2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2203      	movs	r2, #3
 8003f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e078      	b.n	8004094 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e8      	bne.n	8003f82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4b38      	ldr	r3, [pc, #224]	; (800409c <HAL_DMA_Init+0x158>)
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fe6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d107      	bne.n	800400c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	4313      	orrs	r3, r2
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f023 0307 	bic.w	r3, r3, #7
 8004022:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	2b04      	cmp	r3, #4
 8004034:	d117      	bne.n	8004066 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00e      	beq.n	8004066 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 fb01 	bl	8004650 <DMA_CheckFifoParam>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2240      	movs	r2, #64	; 0x40
 8004058:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004062:	2301      	movs	r3, #1
 8004064:	e016      	b.n	8004094 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fab8 	bl	80045e4 <DMA_CalcBaseAndBitshift>
 8004074:	4603      	mov	r3, r0
 8004076:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407c:	223f      	movs	r2, #63	; 0x3f
 800407e:	409a      	lsls	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	f010803f 	.word	0xf010803f

080040a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_DMA_Start_IT+0x26>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e040      	b.n	8004148 <HAL_DMA_Start_IT+0xa8>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d12f      	bne.n	800413a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2202      	movs	r2, #2
 80040de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fa4a 	bl	8004588 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f8:	223f      	movs	r2, #63	; 0x3f
 80040fa:	409a      	lsls	r2, r3
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0216 	orr.w	r2, r2, #22
 800410e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	d007      	beq.n	8004128 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0208 	orr.w	r2, r2, #8
 8004126:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0201 	orr.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	e005      	b.n	8004146 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004142:	2302      	movs	r3, #2
 8004144:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004146:	7dfb      	ldrb	r3, [r7, #23]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800415e:	f7ff f99d 	bl	800349c <HAL_GetTick>
 8004162:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d008      	beq.n	8004182 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2280      	movs	r2, #128	; 0x80
 8004174:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e052      	b.n	8004228 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0216 	bic.w	r2, r2, #22
 8004190:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695a      	ldr	r2, [r3, #20]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d103      	bne.n	80041b2 <HAL_DMA_Abort+0x62>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0208 	bic.w	r2, r2, #8
 80041c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0201 	bic.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041d2:	e013      	b.n	80041fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041d4:	f7ff f962 	bl	800349c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b05      	cmp	r3, #5
 80041e0:	d90c      	bls.n	80041fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2220      	movs	r2, #32
 80041e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2203      	movs	r2, #3
 80041ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e015      	b.n	8004228 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e4      	bne.n	80041d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420e:	223f      	movs	r2, #63	; 0x3f
 8004210:	409a      	lsls	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d004      	beq.n	800424e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2280      	movs	r2, #128	; 0x80
 8004248:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e00c      	b.n	8004268 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2205      	movs	r2, #5
 8004252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004280:	4b8e      	ldr	r3, [pc, #568]	; (80044bc <HAL_DMA_IRQHandler+0x248>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a8e      	ldr	r2, [pc, #568]	; (80044c0 <HAL_DMA_IRQHandler+0x24c>)
 8004286:	fba2 2303 	umull	r2, r3, r2, r3
 800428a:	0a9b      	lsrs	r3, r3, #10
 800428c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429e:	2208      	movs	r2, #8
 80042a0:	409a      	lsls	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d01a      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d013      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0204 	bic.w	r2, r2, #4
 80042c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042cc:	2208      	movs	r2, #8
 80042ce:	409a      	lsls	r2, r3
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d8:	f043 0201 	orr.w	r2, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e4:	2201      	movs	r2, #1
 80042e6:	409a      	lsls	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4013      	ands	r3, r2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d012      	beq.n	8004316 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00b      	beq.n	8004316 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004302:	2201      	movs	r2, #1
 8004304:	409a      	lsls	r2, r3
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430e:	f043 0202 	orr.w	r2, r3, #2
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431a:	2204      	movs	r2, #4
 800431c:	409a      	lsls	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4013      	ands	r3, r2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d012      	beq.n	800434c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00b      	beq.n	800434c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004338:	2204      	movs	r2, #4
 800433a:	409a      	lsls	r2, r3
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004344:	f043 0204 	orr.w	r2, r3, #4
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004350:	2210      	movs	r2, #16
 8004352:	409a      	lsls	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4013      	ands	r3, r2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d043      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d03c      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436e:	2210      	movs	r2, #16
 8004370:	409a      	lsls	r2, r3
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d018      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d108      	bne.n	80043a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d024      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
 80043a2:	e01f      	b.n	80043e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d01b      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	4798      	blx	r3
 80043b4:	e016      	b.n	80043e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d107      	bne.n	80043d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0208 	bic.w	r2, r2, #8
 80043d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e8:	2220      	movs	r2, #32
 80043ea:	409a      	lsls	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 808f 	beq.w	8004514 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 8087 	beq.w	8004514 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440a:	2220      	movs	r2, #32
 800440c:	409a      	lsls	r2, r3
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b05      	cmp	r3, #5
 800441c:	d136      	bne.n	800448c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0216 	bic.w	r2, r2, #22
 800442c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695a      	ldr	r2, [r3, #20]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800443c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d103      	bne.n	800444e <HAL_DMA_IRQHandler+0x1da>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444a:	2b00      	cmp	r3, #0
 800444c:	d007      	beq.n	800445e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0208 	bic.w	r2, r2, #8
 800445c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004462:	223f      	movs	r2, #63	; 0x3f
 8004464:	409a      	lsls	r2, r3
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447e:	2b00      	cmp	r3, #0
 8004480:	d07e      	beq.n	8004580 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	4798      	blx	r3
        }
        return;
 800448a:	e079      	b.n	8004580 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d01d      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10d      	bne.n	80044c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d031      	beq.n	8004514 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4798      	blx	r3
 80044b8:	e02c      	b.n	8004514 <HAL_DMA_IRQHandler+0x2a0>
 80044ba:	bf00      	nop
 80044bc:	20000224 	.word	0x20000224
 80044c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d023      	beq.n	8004514 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	4798      	blx	r3
 80044d4:	e01e      	b.n	8004514 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10f      	bne.n	8004504 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0210 	bic.w	r2, r2, #16
 80044f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004518:	2b00      	cmp	r3, #0
 800451a:	d032      	beq.n	8004582 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d022      	beq.n	800456e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2205      	movs	r2, #5
 800452c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0201 	bic.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	3301      	adds	r3, #1
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	429a      	cmp	r2, r3
 800454a:	d307      	bcc.n	800455c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f2      	bne.n	8004540 <HAL_DMA_IRQHandler+0x2cc>
 800455a:	e000      	b.n	800455e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800455c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	4798      	blx	r3
 800457e:	e000      	b.n	8004582 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004580:	bf00      	nop
    }
  }
}
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b40      	cmp	r3, #64	; 0x40
 80045b4:	d108      	bne.n	80045c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045c6:	e007      	b.n	80045d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]
}
 80045d8:	bf00      	nop
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	3b10      	subs	r3, #16
 80045f4:	4a14      	ldr	r2, [pc, #80]	; (8004648 <DMA_CalcBaseAndBitshift+0x64>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	091b      	lsrs	r3, r3, #4
 80045fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045fe:	4a13      	ldr	r2, [pc, #76]	; (800464c <DMA_CalcBaseAndBitshift+0x68>)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	461a      	mov	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b03      	cmp	r3, #3
 8004610:	d909      	bls.n	8004626 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800461a:	f023 0303 	bic.w	r3, r3, #3
 800461e:	1d1a      	adds	r2, r3, #4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	659a      	str	r2, [r3, #88]	; 0x58
 8004624:	e007      	b.n	8004636 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800462e:	f023 0303 	bic.w	r3, r3, #3
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	aaaaaaab 	.word	0xaaaaaaab
 800464c:	0800b22c 	.word	0x0800b22c

08004650 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d11f      	bne.n	80046aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b03      	cmp	r3, #3
 800466e:	d856      	bhi.n	800471e <DMA_CheckFifoParam+0xce>
 8004670:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <DMA_CheckFifoParam+0x28>)
 8004672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004676:	bf00      	nop
 8004678:	08004689 	.word	0x08004689
 800467c:	0800469b 	.word	0x0800469b
 8004680:	08004689 	.word	0x08004689
 8004684:	0800471f 	.word	0x0800471f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d046      	beq.n	8004722 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004698:	e043      	b.n	8004722 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046a2:	d140      	bne.n	8004726 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046a8:	e03d      	b.n	8004726 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046b2:	d121      	bne.n	80046f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d837      	bhi.n	800472a <DMA_CheckFifoParam+0xda>
 80046ba:	a201      	add	r2, pc, #4	; (adr r2, 80046c0 <DMA_CheckFifoParam+0x70>)
 80046bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c0:	080046d1 	.word	0x080046d1
 80046c4:	080046d7 	.word	0x080046d7
 80046c8:	080046d1 	.word	0x080046d1
 80046cc:	080046e9 	.word	0x080046e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	73fb      	strb	r3, [r7, #15]
      break;
 80046d4:	e030      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d025      	beq.n	800472e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e6:	e022      	b.n	800472e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046f0:	d11f      	bne.n	8004732 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046f6:	e01c      	b.n	8004732 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d903      	bls.n	8004706 <DMA_CheckFifoParam+0xb6>
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d003      	beq.n	800470c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004704:	e018      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
      break;
 800470a:	e015      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00e      	beq.n	8004736 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	73fb      	strb	r3, [r7, #15]
      break;
 800471c:	e00b      	b.n	8004736 <DMA_CheckFifoParam+0xe6>
      break;
 800471e:	bf00      	nop
 8004720:	e00a      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      break;
 8004722:	bf00      	nop
 8004724:	e008      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      break;
 8004726:	bf00      	nop
 8004728:	e006      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      break;
 800472a:	bf00      	nop
 800472c:	e004      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      break;
 800472e:	bf00      	nop
 8004730:	e002      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      break;   
 8004732:	bf00      	nop
 8004734:	e000      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
      break;
 8004736:	bf00      	nop
    }
  } 
  
  return status; 
 8004738:	7bfb      	ldrb	r3, [r7, #15]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop

08004748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004748:	b480      	push	{r7}
 800474a:	b089      	sub	sp, #36	; 0x24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004756:	2300      	movs	r3, #0
 8004758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800475a:	2300      	movs	r3, #0
 800475c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	e16b      	b.n	8004a3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004764:	2201      	movs	r2, #1
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4013      	ands	r3, r2
 8004776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	429a      	cmp	r2, r3
 800477e:	f040 815a 	bne.w	8004a36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	2b01      	cmp	r3, #1
 800478c:	d005      	beq.n	800479a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004796:	2b02      	cmp	r3, #2
 8004798:	d130      	bne.n	80047fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	2203      	movs	r2, #3
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	43db      	mvns	r3, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4013      	ands	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047d0:	2201      	movs	r2, #1
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	43db      	mvns	r3, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	f003 0201 	and.w	r2, r3, #1
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	2b03      	cmp	r3, #3
 8004806:	d017      	beq.n	8004838 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	2203      	movs	r2, #3
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	43db      	mvns	r3, r3
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4013      	ands	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4313      	orrs	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d123      	bne.n	800488c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	08da      	lsrs	r2, r3, #3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3208      	adds	r2, #8
 800484c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	220f      	movs	r2, #15
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4013      	ands	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	08da      	lsrs	r2, r3, #3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3208      	adds	r2, #8
 8004886:	69b9      	ldr	r1, [r7, #24]
 8004888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	2203      	movs	r2, #3
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	43db      	mvns	r3, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4013      	ands	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 0203 	and.w	r2, r3, #3
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80b4 	beq.w	8004a36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	4b60      	ldr	r3, [pc, #384]	; (8004a54 <HAL_GPIO_Init+0x30c>)
 80048d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d6:	4a5f      	ldr	r2, [pc, #380]	; (8004a54 <HAL_GPIO_Init+0x30c>)
 80048d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048dc:	6453      	str	r3, [r2, #68]	; 0x44
 80048de:	4b5d      	ldr	r3, [pc, #372]	; (8004a54 <HAL_GPIO_Init+0x30c>)
 80048e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048ea:	4a5b      	ldr	r2, [pc, #364]	; (8004a58 <HAL_GPIO_Init+0x310>)
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	089b      	lsrs	r3, r3, #2
 80048f0:	3302      	adds	r3, #2
 80048f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	220f      	movs	r2, #15
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43db      	mvns	r3, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4013      	ands	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a52      	ldr	r2, [pc, #328]	; (8004a5c <HAL_GPIO_Init+0x314>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d02b      	beq.n	800496e <HAL_GPIO_Init+0x226>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a51      	ldr	r2, [pc, #324]	; (8004a60 <HAL_GPIO_Init+0x318>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d025      	beq.n	800496a <HAL_GPIO_Init+0x222>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a50      	ldr	r2, [pc, #320]	; (8004a64 <HAL_GPIO_Init+0x31c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d01f      	beq.n	8004966 <HAL_GPIO_Init+0x21e>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a4f      	ldr	r2, [pc, #316]	; (8004a68 <HAL_GPIO_Init+0x320>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d019      	beq.n	8004962 <HAL_GPIO_Init+0x21a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a4e      	ldr	r2, [pc, #312]	; (8004a6c <HAL_GPIO_Init+0x324>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <HAL_GPIO_Init+0x216>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a4d      	ldr	r2, [pc, #308]	; (8004a70 <HAL_GPIO_Init+0x328>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00d      	beq.n	800495a <HAL_GPIO_Init+0x212>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a4c      	ldr	r2, [pc, #304]	; (8004a74 <HAL_GPIO_Init+0x32c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d007      	beq.n	8004956 <HAL_GPIO_Init+0x20e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a4b      	ldr	r2, [pc, #300]	; (8004a78 <HAL_GPIO_Init+0x330>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d101      	bne.n	8004952 <HAL_GPIO_Init+0x20a>
 800494e:	2307      	movs	r3, #7
 8004950:	e00e      	b.n	8004970 <HAL_GPIO_Init+0x228>
 8004952:	2308      	movs	r3, #8
 8004954:	e00c      	b.n	8004970 <HAL_GPIO_Init+0x228>
 8004956:	2306      	movs	r3, #6
 8004958:	e00a      	b.n	8004970 <HAL_GPIO_Init+0x228>
 800495a:	2305      	movs	r3, #5
 800495c:	e008      	b.n	8004970 <HAL_GPIO_Init+0x228>
 800495e:	2304      	movs	r3, #4
 8004960:	e006      	b.n	8004970 <HAL_GPIO_Init+0x228>
 8004962:	2303      	movs	r3, #3
 8004964:	e004      	b.n	8004970 <HAL_GPIO_Init+0x228>
 8004966:	2302      	movs	r3, #2
 8004968:	e002      	b.n	8004970 <HAL_GPIO_Init+0x228>
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <HAL_GPIO_Init+0x228>
 800496e:	2300      	movs	r3, #0
 8004970:	69fa      	ldr	r2, [r7, #28]
 8004972:	f002 0203 	and.w	r2, r2, #3
 8004976:	0092      	lsls	r2, r2, #2
 8004978:	4093      	lsls	r3, r2
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4313      	orrs	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004980:	4935      	ldr	r1, [pc, #212]	; (8004a58 <HAL_GPIO_Init+0x310>)
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	089b      	lsrs	r3, r3, #2
 8004986:	3302      	adds	r3, #2
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800498e:	4b3b      	ldr	r3, [pc, #236]	; (8004a7c <HAL_GPIO_Init+0x334>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	43db      	mvns	r3, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049b2:	4a32      	ldr	r2, [pc, #200]	; (8004a7c <HAL_GPIO_Init+0x334>)
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049b8:	4b30      	ldr	r3, [pc, #192]	; (8004a7c <HAL_GPIO_Init+0x334>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049dc:	4a27      	ldr	r2, [pc, #156]	; (8004a7c <HAL_GPIO_Init+0x334>)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049e2:	4b26      	ldr	r3, [pc, #152]	; (8004a7c <HAL_GPIO_Init+0x334>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	43db      	mvns	r3, r3
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	4013      	ands	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a06:	4a1d      	ldr	r2, [pc, #116]	; (8004a7c <HAL_GPIO_Init+0x334>)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a0c:	4b1b      	ldr	r3, [pc, #108]	; (8004a7c <HAL_GPIO_Init+0x334>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	43db      	mvns	r3, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a30:	4a12      	ldr	r2, [pc, #72]	; (8004a7c <HAL_GPIO_Init+0x334>)
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	61fb      	str	r3, [r7, #28]
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	2b0f      	cmp	r3, #15
 8004a40:	f67f ae90 	bls.w	8004764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	3724      	adds	r7, #36	; 0x24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	40023800 	.word	0x40023800
 8004a58:	40013800 	.word	0x40013800
 8004a5c:	40020000 	.word	0x40020000
 8004a60:	40020400 	.word	0x40020400
 8004a64:	40020800 	.word	0x40020800
 8004a68:	40020c00 	.word	0x40020c00
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	40021400 	.word	0x40021400
 8004a74:	40021800 	.word	0x40021800
 8004a78:	40021c00 	.word	0x40021c00
 8004a7c:	40013c00 	.word	0x40013c00

08004a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	807b      	strh	r3, [r7, #2]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a90:	787b      	ldrb	r3, [r7, #1]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a96:	887a      	ldrh	r2, [r7, #2]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a9c:	e003      	b.n	8004aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a9e:	887b      	ldrh	r3, [r7, #2]
 8004aa0:	041a      	lsls	r2, r3, #16
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	619a      	str	r2, [r3, #24]
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
	...

08004ab4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e267      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d075      	beq.n	8004bbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ad2:	4b88      	ldr	r3, [pc, #544]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 030c 	and.w	r3, r3, #12
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d00c      	beq.n	8004af8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ade:	4b85      	ldr	r3, [pc, #532]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d112      	bne.n	8004b10 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aea:	4b82      	ldr	r3, [pc, #520]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004af6:	d10b      	bne.n	8004b10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af8:	4b7e      	ldr	r3, [pc, #504]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d05b      	beq.n	8004bbc <HAL_RCC_OscConfig+0x108>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d157      	bne.n	8004bbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e242      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b18:	d106      	bne.n	8004b28 <HAL_RCC_OscConfig+0x74>
 8004b1a:	4b76      	ldr	r3, [pc, #472]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a75      	ldr	r2, [pc, #468]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	e01d      	b.n	8004b64 <HAL_RCC_OscConfig+0xb0>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b30:	d10c      	bne.n	8004b4c <HAL_RCC_OscConfig+0x98>
 8004b32:	4b70      	ldr	r3, [pc, #448]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a6f      	ldr	r2, [pc, #444]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	4b6d      	ldr	r3, [pc, #436]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a6c      	ldr	r2, [pc, #432]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	e00b      	b.n	8004b64 <HAL_RCC_OscConfig+0xb0>
 8004b4c:	4b69      	ldr	r3, [pc, #420]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a68      	ldr	r2, [pc, #416]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	4b66      	ldr	r3, [pc, #408]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a65      	ldr	r2, [pc, #404]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d013      	beq.n	8004b94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6c:	f7fe fc96 	bl	800349c <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b74:	f7fe fc92 	bl	800349c <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b64      	cmp	r3, #100	; 0x64
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e207      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	4b5b      	ldr	r3, [pc, #364]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0xc0>
 8004b92:	e014      	b.n	8004bbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b94:	f7fe fc82 	bl	800349c <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b9c:	f7fe fc7e 	bl	800349c <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b64      	cmp	r3, #100	; 0x64
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e1f3      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bae:	4b51      	ldr	r3, [pc, #324]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0xe8>
 8004bba:	e000      	b.n	8004bbe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d063      	beq.n	8004c92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004bca:	4b4a      	ldr	r3, [pc, #296]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00b      	beq.n	8004bee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bd6:	4b47      	ldr	r3, [pc, #284]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d11c      	bne.n	8004c1c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004be2:	4b44      	ldr	r3, [pc, #272]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d116      	bne.n	8004c1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bee:	4b41      	ldr	r3, [pc, #260]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d005      	beq.n	8004c06 <HAL_RCC_OscConfig+0x152>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d001      	beq.n	8004c06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e1c7      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c06:	4b3b      	ldr	r3, [pc, #236]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	4937      	ldr	r1, [pc, #220]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c1a:	e03a      	b.n	8004c92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d020      	beq.n	8004c66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c24:	4b34      	ldr	r3, [pc, #208]	; (8004cf8 <HAL_RCC_OscConfig+0x244>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2a:	f7fe fc37 	bl	800349c <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c32:	f7fe fc33 	bl	800349c <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e1a8      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c44:	4b2b      	ldr	r3, [pc, #172]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0f0      	beq.n	8004c32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c50:	4b28      	ldr	r3, [pc, #160]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	4925      	ldr	r1, [pc, #148]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	600b      	str	r3, [r1, #0]
 8004c64:	e015      	b.n	8004c92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c66:	4b24      	ldr	r3, [pc, #144]	; (8004cf8 <HAL_RCC_OscConfig+0x244>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6c:	f7fe fc16 	bl	800349c <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c74:	f7fe fc12 	bl	800349c <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e187      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c86:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f0      	bne.n	8004c74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d036      	beq.n	8004d0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d016      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ca6:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <HAL_RCC_OscConfig+0x248>)
 8004ca8:	2201      	movs	r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cac:	f7fe fbf6 	bl	800349c <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cb4:	f7fe fbf2 	bl	800349c <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e167      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <HAL_RCC_OscConfig+0x240>)
 8004cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x200>
 8004cd2:	e01b      	b.n	8004d0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cd4:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <HAL_RCC_OscConfig+0x248>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cda:	f7fe fbdf 	bl	800349c <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce0:	e00e      	b.n	8004d00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ce2:	f7fe fbdb 	bl	800349c <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d907      	bls.n	8004d00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e150      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	42470000 	.word	0x42470000
 8004cfc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d00:	4b88      	ldr	r3, [pc, #544]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1ea      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 8097 	beq.w	8004e48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d1e:	4b81      	ldr	r3, [pc, #516]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10f      	bne.n	8004d4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60bb      	str	r3, [r7, #8]
 8004d2e:	4b7d      	ldr	r3, [pc, #500]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	4a7c      	ldr	r2, [pc, #496]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d38:	6413      	str	r3, [r2, #64]	; 0x40
 8004d3a:	4b7a      	ldr	r3, [pc, #488]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d42:	60bb      	str	r3, [r7, #8]
 8004d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d46:	2301      	movs	r3, #1
 8004d48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4a:	4b77      	ldr	r3, [pc, #476]	; (8004f28 <HAL_RCC_OscConfig+0x474>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d118      	bne.n	8004d88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d56:	4b74      	ldr	r3, [pc, #464]	; (8004f28 <HAL_RCC_OscConfig+0x474>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a73      	ldr	r2, [pc, #460]	; (8004f28 <HAL_RCC_OscConfig+0x474>)
 8004d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d62:	f7fe fb9b 	bl	800349c <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d6a:	f7fe fb97 	bl	800349c <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e10c      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7c:	4b6a      	ldr	r3, [pc, #424]	; (8004f28 <HAL_RCC_OscConfig+0x474>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0f0      	beq.n	8004d6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d106      	bne.n	8004d9e <HAL_RCC_OscConfig+0x2ea>
 8004d90:	4b64      	ldr	r3, [pc, #400]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d94:	4a63      	ldr	r2, [pc, #396]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004d96:	f043 0301 	orr.w	r3, r3, #1
 8004d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d9c:	e01c      	b.n	8004dd8 <HAL_RCC_OscConfig+0x324>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2b05      	cmp	r3, #5
 8004da4:	d10c      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x30c>
 8004da6:	4b5f      	ldr	r3, [pc, #380]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004daa:	4a5e      	ldr	r2, [pc, #376]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004dac:	f043 0304 	orr.w	r3, r3, #4
 8004db0:	6713      	str	r3, [r2, #112]	; 0x70
 8004db2:	4b5c      	ldr	r3, [pc, #368]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db6:	4a5b      	ldr	r2, [pc, #364]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004db8:	f043 0301 	orr.w	r3, r3, #1
 8004dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dbe:	e00b      	b.n	8004dd8 <HAL_RCC_OscConfig+0x324>
 8004dc0:	4b58      	ldr	r3, [pc, #352]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	4a57      	ldr	r2, [pc, #348]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	6713      	str	r3, [r2, #112]	; 0x70
 8004dcc:	4b55      	ldr	r3, [pc, #340]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	4a54      	ldr	r2, [pc, #336]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004dd2:	f023 0304 	bic.w	r3, r3, #4
 8004dd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d015      	beq.n	8004e0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de0:	f7fe fb5c 	bl	800349c <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de6:	e00a      	b.n	8004dfe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de8:	f7fe fb58 	bl	800349c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e0cb      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfe:	4b49      	ldr	r3, [pc, #292]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0ee      	beq.n	8004de8 <HAL_RCC_OscConfig+0x334>
 8004e0a:	e014      	b.n	8004e36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e0c:	f7fe fb46 	bl	800349c <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e12:	e00a      	b.n	8004e2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e14:	f7fe fb42 	bl	800349c <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e0b5      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e2a:	4b3e      	ldr	r3, [pc, #248]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1ee      	bne.n	8004e14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e36:	7dfb      	ldrb	r3, [r7, #23]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d105      	bne.n	8004e48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e3c:	4b39      	ldr	r3, [pc, #228]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	4a38      	ldr	r2, [pc, #224]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 80a1 	beq.w	8004f94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e52:	4b34      	ldr	r3, [pc, #208]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 030c 	and.w	r3, r3, #12
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d05c      	beq.n	8004f18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d141      	bne.n	8004eea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e66:	4b31      	ldr	r3, [pc, #196]	; (8004f2c <HAL_RCC_OscConfig+0x478>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6c:	f7fe fb16 	bl	800349c <HAL_GetTick>
 8004e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e74:	f7fe fb12 	bl	800349c <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e087      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e86:	4b27      	ldr	r3, [pc, #156]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1f0      	bne.n	8004e74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69da      	ldr	r2, [r3, #28]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	019b      	lsls	r3, r3, #6
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	085b      	lsrs	r3, r3, #1
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	041b      	lsls	r3, r3, #16
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	061b      	lsls	r3, r3, #24
 8004eb6:	491b      	ldr	r1, [pc, #108]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ebc:	4b1b      	ldr	r3, [pc, #108]	; (8004f2c <HAL_RCC_OscConfig+0x478>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec2:	f7fe faeb 	bl	800349c <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eca:	f7fe fae7 	bl	800349c <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e05c      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004edc:	4b11      	ldr	r3, [pc, #68]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0f0      	beq.n	8004eca <HAL_RCC_OscConfig+0x416>
 8004ee8:	e054      	b.n	8004f94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eea:	4b10      	ldr	r3, [pc, #64]	; (8004f2c <HAL_RCC_OscConfig+0x478>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef0:	f7fe fad4 	bl	800349c <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef8:	f7fe fad0 	bl	800349c <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e045      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0a:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <HAL_RCC_OscConfig+0x470>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f0      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x444>
 8004f16:	e03d      	b.n	8004f94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d107      	bne.n	8004f30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e038      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
 8004f24:	40023800 	.word	0x40023800
 8004f28:	40007000 	.word	0x40007000
 8004f2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f30:	4b1b      	ldr	r3, [pc, #108]	; (8004fa0 <HAL_RCC_OscConfig+0x4ec>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d028      	beq.n	8004f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d121      	bne.n	8004f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d11a      	bne.n	8004f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f60:	4013      	ands	r3, r2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d111      	bne.n	8004f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d107      	bne.n	8004f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d001      	beq.n	8004f94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e000      	b.n	8004f96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40023800 	.word	0x40023800

08004fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e0cc      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb8:	4b68      	ldr	r3, [pc, #416]	; (800515c <HAL_RCC_ClockConfig+0x1b8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d90c      	bls.n	8004fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc6:	4b65      	ldr	r3, [pc, #404]	; (800515c <HAL_RCC_ClockConfig+0x1b8>)
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fce:	4b63      	ldr	r3, [pc, #396]	; (800515c <HAL_RCC_ClockConfig+0x1b8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0b8      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d020      	beq.n	800502e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ff8:	4b59      	ldr	r3, [pc, #356]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	4a58      	ldr	r2, [pc, #352]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005002:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005010:	4b53      	ldr	r3, [pc, #332]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	4a52      	ldr	r2, [pc, #328]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005016:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800501a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800501c:	4b50      	ldr	r3, [pc, #320]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	494d      	ldr	r1, [pc, #308]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	4313      	orrs	r3, r2
 800502c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d044      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d107      	bne.n	8005052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005042:	4b47      	ldr	r3, [pc, #284]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d119      	bne.n	8005082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e07f      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d003      	beq.n	8005062 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800505e:	2b03      	cmp	r3, #3
 8005060:	d107      	bne.n	8005072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005062:	4b3f      	ldr	r3, [pc, #252]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d109      	bne.n	8005082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e06f      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005072:	4b3b      	ldr	r3, [pc, #236]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e067      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005082:	4b37      	ldr	r3, [pc, #220]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f023 0203 	bic.w	r2, r3, #3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	4934      	ldr	r1, [pc, #208]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005090:	4313      	orrs	r3, r2
 8005092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005094:	f7fe fa02 	bl	800349c <HAL_GetTick>
 8005098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509a:	e00a      	b.n	80050b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800509c:	f7fe f9fe 	bl	800349c <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e04f      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b2:	4b2b      	ldr	r3, [pc, #172]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 020c 	and.w	r2, r3, #12
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d1eb      	bne.n	800509c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050c4:	4b25      	ldr	r3, [pc, #148]	; (800515c <HAL_RCC_ClockConfig+0x1b8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d20c      	bcs.n	80050ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d2:	4b22      	ldr	r3, [pc, #136]	; (800515c <HAL_RCC_ClockConfig+0x1b8>)
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050da:	4b20      	ldr	r3, [pc, #128]	; (800515c <HAL_RCC_ClockConfig+0x1b8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d001      	beq.n	80050ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e032      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050f8:	4b19      	ldr	r3, [pc, #100]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	4916      	ldr	r1, [pc, #88]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005106:	4313      	orrs	r3, r2
 8005108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d009      	beq.n	800512a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005116:	4b12      	ldr	r3, [pc, #72]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	490e      	ldr	r1, [pc, #56]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	4313      	orrs	r3, r2
 8005128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800512a:	f000 f821 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 800512e:	4602      	mov	r2, r0
 8005130:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	091b      	lsrs	r3, r3, #4
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	490a      	ldr	r1, [pc, #40]	; (8005164 <HAL_RCC_ClockConfig+0x1c0>)
 800513c:	5ccb      	ldrb	r3, [r1, r3]
 800513e:	fa22 f303 	lsr.w	r3, r2, r3
 8005142:	4a09      	ldr	r2, [pc, #36]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005146:	4b09      	ldr	r3, [pc, #36]	; (800516c <HAL_RCC_ClockConfig+0x1c8>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f7fe f962 	bl	8003414 <HAL_InitTick>

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40023c00 	.word	0x40023c00
 8005160:	40023800 	.word	0x40023800
 8005164:	0800b214 	.word	0x0800b214
 8005168:	20000224 	.word	0x20000224
 800516c:	20000228 	.word	0x20000228

08005170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005174:	b090      	sub	sp, #64	; 0x40
 8005176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005188:	4b59      	ldr	r3, [pc, #356]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 030c 	and.w	r3, r3, #12
 8005190:	2b08      	cmp	r3, #8
 8005192:	d00d      	beq.n	80051b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005194:	2b08      	cmp	r3, #8
 8005196:	f200 80a1 	bhi.w	80052dc <HAL_RCC_GetSysClockFreq+0x16c>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <HAL_RCC_GetSysClockFreq+0x34>
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d003      	beq.n	80051aa <HAL_RCC_GetSysClockFreq+0x3a>
 80051a2:	e09b      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051a4:	4b53      	ldr	r3, [pc, #332]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80051a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051a8:	e09b      	b.n	80052e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051aa:	4b53      	ldr	r3, [pc, #332]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80051ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051ae:	e098      	b.n	80052e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051b0:	4b4f      	ldr	r3, [pc, #316]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051ba:	4b4d      	ldr	r3, [pc, #308]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d028      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c6:	4b4a      	ldr	r3, [pc, #296]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	099b      	lsrs	r3, r3, #6
 80051cc:	2200      	movs	r2, #0
 80051ce:	623b      	str	r3, [r7, #32]
 80051d0:	627a      	str	r2, [r7, #36]	; 0x24
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80051d8:	2100      	movs	r1, #0
 80051da:	4b47      	ldr	r3, [pc, #284]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80051dc:	fb03 f201 	mul.w	r2, r3, r1
 80051e0:	2300      	movs	r3, #0
 80051e2:	fb00 f303 	mul.w	r3, r0, r3
 80051e6:	4413      	add	r3, r2
 80051e8:	4a43      	ldr	r2, [pc, #268]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80051ea:	fba0 1202 	umull	r1, r2, r0, r2
 80051ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051f0:	460a      	mov	r2, r1
 80051f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80051f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f6:	4413      	add	r3, r2
 80051f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fc:	2200      	movs	r2, #0
 80051fe:	61bb      	str	r3, [r7, #24]
 8005200:	61fa      	str	r2, [r7, #28]
 8005202:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005206:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800520a:	f7fb fc4f 	bl	8000aac <__aeabi_uldivmod>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4613      	mov	r3, r2
 8005214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005216:	e053      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005218:	4b35      	ldr	r3, [pc, #212]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	099b      	lsrs	r3, r3, #6
 800521e:	2200      	movs	r2, #0
 8005220:	613b      	str	r3, [r7, #16]
 8005222:	617a      	str	r2, [r7, #20]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800522a:	f04f 0b00 	mov.w	fp, #0
 800522e:	4652      	mov	r2, sl
 8005230:	465b      	mov	r3, fp
 8005232:	f04f 0000 	mov.w	r0, #0
 8005236:	f04f 0100 	mov.w	r1, #0
 800523a:	0159      	lsls	r1, r3, #5
 800523c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005240:	0150      	lsls	r0, r2, #5
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	ebb2 080a 	subs.w	r8, r2, sl
 800524a:	eb63 090b 	sbc.w	r9, r3, fp
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800525a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800525e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005262:	ebb2 0408 	subs.w	r4, r2, r8
 8005266:	eb63 0509 	sbc.w	r5, r3, r9
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	00eb      	lsls	r3, r5, #3
 8005274:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005278:	00e2      	lsls	r2, r4, #3
 800527a:	4614      	mov	r4, r2
 800527c:	461d      	mov	r5, r3
 800527e:	eb14 030a 	adds.w	r3, r4, sl
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	eb45 030b 	adc.w	r3, r5, fp
 8005288:	607b      	str	r3, [r7, #4]
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	f04f 0300 	mov.w	r3, #0
 8005292:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005296:	4629      	mov	r1, r5
 8005298:	028b      	lsls	r3, r1, #10
 800529a:	4621      	mov	r1, r4
 800529c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052a0:	4621      	mov	r1, r4
 80052a2:	028a      	lsls	r2, r1, #10
 80052a4:	4610      	mov	r0, r2
 80052a6:	4619      	mov	r1, r3
 80052a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052aa:	2200      	movs	r2, #0
 80052ac:	60bb      	str	r3, [r7, #8]
 80052ae:	60fa      	str	r2, [r7, #12]
 80052b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052b4:	f7fb fbfa 	bl	8000aac <__aeabi_uldivmod>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4613      	mov	r3, r2
 80052be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	0c1b      	lsrs	r3, r3, #16
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	3301      	adds	r3, #1
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80052d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80052da:	e002      	b.n	80052e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052dc:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80052de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80052e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3740      	adds	r7, #64	; 0x40
 80052e8:	46bd      	mov	sp, r7
 80052ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ee:	bf00      	nop
 80052f0:	40023800 	.word	0x40023800
 80052f4:	00f42400 	.word	0x00f42400
 80052f8:	017d7840 	.word	0x017d7840

080052fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005300:	4b03      	ldr	r3, [pc, #12]	; (8005310 <HAL_RCC_GetHCLKFreq+0x14>)
 8005302:	681b      	ldr	r3, [r3, #0]
}
 8005304:	4618      	mov	r0, r3
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	20000224 	.word	0x20000224

08005314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005318:	f7ff fff0 	bl	80052fc <HAL_RCC_GetHCLKFreq>
 800531c:	4602      	mov	r2, r0
 800531e:	4b05      	ldr	r3, [pc, #20]	; (8005334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	0a9b      	lsrs	r3, r3, #10
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	4903      	ldr	r1, [pc, #12]	; (8005338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800532a:	5ccb      	ldrb	r3, [r1, r3]
 800532c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005330:	4618      	mov	r0, r3
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40023800 	.word	0x40023800
 8005338:	0800b224 	.word	0x0800b224

0800533c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005340:	f7ff ffdc 	bl	80052fc <HAL_RCC_GetHCLKFreq>
 8005344:	4602      	mov	r2, r0
 8005346:	4b05      	ldr	r3, [pc, #20]	; (800535c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	0b5b      	lsrs	r3, r3, #13
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	4903      	ldr	r1, [pc, #12]	; (8005360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005352:	5ccb      	ldrb	r3, [r1, r3]
 8005354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005358:	4618      	mov	r0, r3
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40023800 	.word	0x40023800
 8005360:	0800b224 	.word	0x0800b224

08005364 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e07b      	b.n	800546e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	2b00      	cmp	r3, #0
 800537c:	d108      	bne.n	8005390 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005386:	d009      	beq.n	800539c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	61da      	str	r2, [r3, #28]
 800538e:	e005      	b.n	800539c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fd fcd2 	bl	8002d60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800540c:	431a      	orrs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005420:	ea42 0103 	orr.w	r1, r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005428:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	0c1b      	lsrs	r3, r3, #16
 800543a:	f003 0104 	and.w	r1, r3, #4
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	f003 0210 	and.w	r2, r3, #16
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800545c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b088      	sub	sp, #32
 800547a:	af02      	add	r7, sp, #8
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	603b      	str	r3, [r7, #0]
 8005482:	4613      	mov	r3, r2
 8005484:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b01      	cmp	r3, #1
 8005490:	d001      	beq.n	8005496 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005492:	2302      	movs	r3, #2
 8005494:	e104      	b.n	80056a0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800549e:	d112      	bne.n	80054c6 <HAL_SPI_Receive+0x50>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10e      	bne.n	80054c6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2204      	movs	r2, #4
 80054ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054b0:	88fa      	ldrh	r2, [r7, #6]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	4613      	mov	r3, r2
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	68b9      	ldr	r1, [r7, #8]
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f8f3 	bl	80056a8 <HAL_SPI_TransmitReceive>
 80054c2:	4603      	mov	r3, r0
 80054c4:	e0ec      	b.n	80056a0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054c6:	f7fd ffe9 	bl	800349c <HAL_GetTick>
 80054ca:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <HAL_SPI_Receive+0x62>
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e0e1      	b.n	80056a0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_SPI_Receive+0x74>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e0da      	b.n	80056a0 <HAL_SPI_Receive+0x22a>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2204      	movs	r2, #4
 80054f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	88fa      	ldrh	r2, [r7, #6]
 800550a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	88fa      	ldrh	r2, [r7, #6]
 8005510:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005538:	d10f      	bne.n	800555a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005548:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005558:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005564:	2b40      	cmp	r3, #64	; 0x40
 8005566:	d007      	beq.n	8005578 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005576:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d170      	bne.n	8005662 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005580:	e035      	b.n	80055ee <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b01      	cmp	r3, #1
 800558e:	d115      	bne.n	80055bc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f103 020c 	add.w	r2, r3, #12
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	7812      	ldrb	r2, [r2, #0]
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	1c5a      	adds	r2, r3, #1
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055ba:	e018      	b.n	80055ee <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055bc:	f7fd ff6e 	bl	800349c <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d803      	bhi.n	80055d4 <HAL_SPI_Receive+0x15e>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d2:	d102      	bne.n	80055da <HAL_SPI_Receive+0x164>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d109      	bne.n	80055ee <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e058      	b.n	80056a0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1c4      	bne.n	8005582 <HAL_SPI_Receive+0x10c>
 80055f8:	e038      	b.n	800566c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b01      	cmp	r3, #1
 8005606:	d113      	bne.n	8005630 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	b292      	uxth	r2, r2
 8005614:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	1c9a      	adds	r2, r3, #2
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800562e:	e018      	b.n	8005662 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005630:	f7fd ff34 	bl	800349c <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d803      	bhi.n	8005648 <HAL_SPI_Receive+0x1d2>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005646:	d102      	bne.n	800564e <HAL_SPI_Receive+0x1d8>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e01e      	b.n	80056a0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1c6      	bne.n	80055fa <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	6839      	ldr	r1, [r7, #0]
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 fa4b 	bl	8005b0c <SPI_EndRxTransaction>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2220      	movs	r2, #32
 8005680:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800569e:	2300      	movs	r3, #0
  }
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08a      	sub	sp, #40	; 0x28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056b6:	2301      	movs	r3, #1
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056ba:	f7fd feef 	bl	800349c <HAL_GetTick>
 80056be:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056c6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80056ce:	887b      	ldrh	r3, [r7, #2]
 80056d0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056d2:	7ffb      	ldrb	r3, [r7, #31]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d00c      	beq.n	80056f2 <HAL_SPI_TransmitReceive+0x4a>
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056de:	d106      	bne.n	80056ee <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d102      	bne.n	80056ee <HAL_SPI_TransmitReceive+0x46>
 80056e8:	7ffb      	ldrb	r3, [r7, #31]
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d001      	beq.n	80056f2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80056ee:	2302      	movs	r3, #2
 80056f0:	e17f      	b.n	80059f2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <HAL_SPI_TransmitReceive+0x5c>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <HAL_SPI_TransmitReceive+0x5c>
 80056fe:	887b      	ldrh	r3, [r7, #2]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e174      	b.n	80059f2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <HAL_SPI_TransmitReceive+0x6e>
 8005712:	2302      	movs	r3, #2
 8005714:	e16d      	b.n	80059f2 <HAL_SPI_TransmitReceive+0x34a>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b04      	cmp	r3, #4
 8005728:	d003      	beq.n	8005732 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2205      	movs	r2, #5
 800572e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	887a      	ldrh	r2, [r7, #2]
 8005742:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	887a      	ldrh	r2, [r7, #2]
 8005748:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	887a      	ldrh	r2, [r7, #2]
 8005754:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	887a      	ldrh	r2, [r7, #2]
 800575a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005772:	2b40      	cmp	r3, #64	; 0x40
 8005774:	d007      	beq.n	8005786 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005784:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800578e:	d17e      	bne.n	800588e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_SPI_TransmitReceive+0xf6>
 8005798:	8afb      	ldrh	r3, [r7, #22]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d16c      	bne.n	8005878 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a2:	881a      	ldrh	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	1c9a      	adds	r2, r3, #2
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057c2:	e059      	b.n	8005878 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d11b      	bne.n	800580a <HAL_SPI_TransmitReceive+0x162>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d016      	beq.n	800580a <HAL_SPI_TransmitReceive+0x162>
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d113      	bne.n	800580a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e6:	881a      	ldrh	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f2:	1c9a      	adds	r2, r3, #2
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b01      	cmp	r3, #1
 8005816:	d119      	bne.n	800584c <HAL_SPI_TransmitReceive+0x1a4>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d014      	beq.n	800584c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	b292      	uxth	r2, r2
 800582e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	1c9a      	adds	r2, r3, #2
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800583e:	b29b      	uxth	r3, r3
 8005840:	3b01      	subs	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005848:	2301      	movs	r3, #1
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800584c:	f7fd fe26 	bl	800349c <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005858:	429a      	cmp	r2, r3
 800585a:	d80d      	bhi.n	8005878 <HAL_SPI_TransmitReceive+0x1d0>
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005862:	d009      	beq.n	8005878 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e0bc      	b.n	80059f2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1a0      	bne.n	80057c4 <HAL_SPI_TransmitReceive+0x11c>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005886:	b29b      	uxth	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d19b      	bne.n	80057c4 <HAL_SPI_TransmitReceive+0x11c>
 800588c:	e082      	b.n	8005994 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <HAL_SPI_TransmitReceive+0x1f4>
 8005896:	8afb      	ldrh	r3, [r7, #22]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d171      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	330c      	adds	r3, #12
 80058a6:	7812      	ldrb	r2, [r2, #0]
 80058a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058c2:	e05d      	b.n	8005980 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d11c      	bne.n	800590c <HAL_SPI_TransmitReceive+0x264>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d017      	beq.n	800590c <HAL_SPI_TransmitReceive+0x264>
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d114      	bne.n	800590c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	330c      	adds	r3, #12
 80058ec:	7812      	ldrb	r2, [r2, #0]
 80058ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b01      	cmp	r3, #1
 8005918:	d119      	bne.n	800594e <HAL_SPI_TransmitReceive+0x2a6>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d014      	beq.n	800594e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800594a:	2301      	movs	r3, #1
 800594c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800594e:	f7fd fda5 	bl	800349c <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800595a:	429a      	cmp	r2, r3
 800595c:	d803      	bhi.n	8005966 <HAL_SPI_TransmitReceive+0x2be>
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005964:	d102      	bne.n	800596c <HAL_SPI_TransmitReceive+0x2c4>
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	2b00      	cmp	r3, #0
 800596a:	d109      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e038      	b.n	80059f2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d19c      	bne.n	80058c4 <HAL_SPI_TransmitReceive+0x21c>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598e:	b29b      	uxth	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d197      	bne.n	80058c4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005994:	6a3a      	ldr	r2, [r7, #32]
 8005996:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f91d 	bl	8005bd8 <SPI_EndRxTxTransaction>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d008      	beq.n	80059b6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2220      	movs	r2, #32
 80059a8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e01d      	b.n	80059f2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10a      	bne.n	80059d4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059be:	2300      	movs	r3, #0
 80059c0:	613b      	str	r3, [r7, #16]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	613b      	str	r3, [r7, #16]
 80059d2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e000      	b.n	80059f2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80059f0:	2300      	movs	r3, #0
  }
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3728      	adds	r7, #40	; 0x28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b088      	sub	sp, #32
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	603b      	str	r3, [r7, #0]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a0c:	f7fd fd46 	bl	800349c <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	1a9b      	subs	r3, r3, r2
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	4413      	add	r3, r2
 8005a1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a1c:	f7fd fd3e 	bl	800349c <HAL_GetTick>
 8005a20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a22:	4b39      	ldr	r3, [pc, #228]	; (8005b08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	015b      	lsls	r3, r3, #5
 8005a28:	0d1b      	lsrs	r3, r3, #20
 8005a2a:	69fa      	ldr	r2, [r7, #28]
 8005a2c:	fb02 f303 	mul.w	r3, r2, r3
 8005a30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a32:	e054      	b.n	8005ade <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3a:	d050      	beq.n	8005ade <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a3c:	f7fd fd2e 	bl	800349c <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	69fa      	ldr	r2, [r7, #28]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d902      	bls.n	8005a52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d13d      	bne.n	8005ace <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a6a:	d111      	bne.n	8005a90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a74:	d004      	beq.n	8005a80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a7e:	d107      	bne.n	8005a90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a98:	d10f      	bne.n	8005aba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ab8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e017      	b.n	8005afe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	bf0c      	ite	eq
 8005aee:	2301      	moveq	r3, #1
 8005af0:	2300      	movne	r3, #0
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	79fb      	ldrb	r3, [r7, #7]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d19b      	bne.n	8005a34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3720      	adds	r7, #32
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20000224 	.word	0x20000224

08005b0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af02      	add	r7, sp, #8
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b20:	d111      	bne.n	8005b46 <SPI_EndRxTransaction+0x3a>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b2a:	d004      	beq.n	8005b36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b34:	d107      	bne.n	8005b46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b44:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b4e:	d12a      	bne.n	8005ba6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b58:	d012      	beq.n	8005b80 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2200      	movs	r2, #0
 8005b62:	2180      	movs	r1, #128	; 0x80
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f7ff ff49 	bl	80059fc <SPI_WaitFlagStateUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d02d      	beq.n	8005bcc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b74:	f043 0220 	orr.w	r2, r3, #32
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e026      	b.n	8005bce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2200      	movs	r2, #0
 8005b88:	2101      	movs	r1, #1
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f7ff ff36 	bl	80059fc <SPI_WaitFlagStateUntilTimeout>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d01a      	beq.n	8005bcc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9a:	f043 0220 	orr.w	r2, r3, #32
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e013      	b.n	8005bce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2200      	movs	r2, #0
 8005bae:	2101      	movs	r1, #1
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7ff ff23 	bl	80059fc <SPI_WaitFlagStateUntilTimeout>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d007      	beq.n	8005bcc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc0:	f043 0220 	orr.w	r2, r3, #32
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e000      	b.n	8005bce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af02      	add	r7, sp, #8
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2201      	movs	r2, #1
 8005bec:	2102      	movs	r1, #2
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f7ff ff04 	bl	80059fc <SPI_WaitFlagStateUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfe:	f043 0220 	orr.w	r2, r3, #32
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e032      	b.n	8005c70 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c0a:	4b1b      	ldr	r3, [pc, #108]	; (8005c78 <SPI_EndRxTxTransaction+0xa0>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a1b      	ldr	r2, [pc, #108]	; (8005c7c <SPI_EndRxTxTransaction+0xa4>)
 8005c10:	fba2 2303 	umull	r2, r3, r2, r3
 8005c14:	0d5b      	lsrs	r3, r3, #21
 8005c16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c1a:	fb02 f303 	mul.w	r3, r2, r3
 8005c1e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c28:	d112      	bne.n	8005c50 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2200      	movs	r2, #0
 8005c32:	2180      	movs	r1, #128	; 0x80
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f7ff fee1 	bl	80059fc <SPI_WaitFlagStateUntilTimeout>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d016      	beq.n	8005c6e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c44:	f043 0220 	orr.w	r2, r3, #32
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e00f      	b.n	8005c70 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00a      	beq.n	8005c6c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c66:	2b80      	cmp	r3, #128	; 0x80
 8005c68:	d0f2      	beq.n	8005c50 <SPI_EndRxTxTransaction+0x78>
 8005c6a:	e000      	b.n	8005c6e <SPI_EndRxTxTransaction+0x96>
        break;
 8005c6c:	bf00      	nop
  }

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	20000224 	.word	0x20000224
 8005c7c:	165e9f81 	.word	0x165e9f81

08005c80 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e038      	b.n	8005d08 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d106      	bne.n	8005cb0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f7fb fd56 	bl	800175c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	3308      	adds	r3, #8
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4610      	mov	r0, r2
 8005cbc:	f001 fcf4 	bl	80076a8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6818      	ldr	r0, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	68b9      	ldr	r1, [r7, #8]
 8005ccc:	f001 fd56 	bl	800777c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6858      	ldr	r0, [r3, #4]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	f001 fd83 	bl	80077e8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	6892      	ldr	r2, [r2, #8]
 8005cea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	6892      	ldr	r2, [r2, #8]
 8005cf6:	f041 0101 	orr.w	r1, r1, #1
 8005cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e041      	b.n	8005da6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d106      	bne.n	8005d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7fd f960 	bl	8002ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	f000 fa7e 	bl	8006250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d001      	beq.n	8005dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e04e      	b.n	8005e66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0201 	orr.w	r2, r2, #1
 8005dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a23      	ldr	r2, [pc, #140]	; (8005e74 <HAL_TIM_Base_Start_IT+0xc4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d022      	beq.n	8005e30 <HAL_TIM_Base_Start_IT+0x80>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df2:	d01d      	beq.n	8005e30 <HAL_TIM_Base_Start_IT+0x80>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a1f      	ldr	r2, [pc, #124]	; (8005e78 <HAL_TIM_Base_Start_IT+0xc8>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d018      	beq.n	8005e30 <HAL_TIM_Base_Start_IT+0x80>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a1e      	ldr	r2, [pc, #120]	; (8005e7c <HAL_TIM_Base_Start_IT+0xcc>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d013      	beq.n	8005e30 <HAL_TIM_Base_Start_IT+0x80>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1c      	ldr	r2, [pc, #112]	; (8005e80 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00e      	beq.n	8005e30 <HAL_TIM_Base_Start_IT+0x80>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a1b      	ldr	r2, [pc, #108]	; (8005e84 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d009      	beq.n	8005e30 <HAL_TIM_Base_Start_IT+0x80>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a19      	ldr	r2, [pc, #100]	; (8005e88 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d004      	beq.n	8005e30 <HAL_TIM_Base_Start_IT+0x80>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a18      	ldr	r2, [pc, #96]	; (8005e8c <HAL_TIM_Base_Start_IT+0xdc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d111      	bne.n	8005e54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b06      	cmp	r3, #6
 8005e40:	d010      	beq.n	8005e64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0201 	orr.w	r2, r2, #1
 8005e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e52:	e007      	b.n	8005e64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0201 	orr.w	r2, r2, #1
 8005e62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40010000 	.word	0x40010000
 8005e78:	40000400 	.word	0x40000400
 8005e7c:	40000800 	.word	0x40000800
 8005e80:	40000c00 	.word	0x40000c00
 8005e84:	40010400 	.word	0x40010400
 8005e88:	40014000 	.word	0x40014000
 8005e8c:	40001800 	.word	0x40001800

08005e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d020      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d01b      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0202 	mvn.w	r2, #2
 8005ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f999 	bl	8006212 <HAL_TIM_IC_CaptureCallback>
 8005ee0:	e005      	b.n	8005eee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f98b 	bl	80061fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f99c 	bl	8006226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d020      	beq.n	8005f40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01b      	beq.n	8005f40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0204 	mvn.w	r2, #4
 8005f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2202      	movs	r2, #2
 8005f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f973 	bl	8006212 <HAL_TIM_IC_CaptureCallback>
 8005f2c:	e005      	b.n	8005f3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f965 	bl	80061fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f976 	bl	8006226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d020      	beq.n	8005f8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f003 0308 	and.w	r3, r3, #8
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d01b      	beq.n	8005f8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f06f 0208 	mvn.w	r2, #8
 8005f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2204      	movs	r2, #4
 8005f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f94d 	bl	8006212 <HAL_TIM_IC_CaptureCallback>
 8005f78:	e005      	b.n	8005f86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f93f 	bl	80061fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f950 	bl	8006226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f003 0310 	and.w	r3, r3, #16
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d020      	beq.n	8005fd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f003 0310 	and.w	r3, r3, #16
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01b      	beq.n	8005fd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f06f 0210 	mvn.w	r2, #16
 8005fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2208      	movs	r2, #8
 8005fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f927 	bl	8006212 <HAL_TIM_IC_CaptureCallback>
 8005fc4:	e005      	b.n	8005fd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f919 	bl	80061fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f92a 	bl	8006226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00c      	beq.n	8005ffc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d007      	beq.n	8005ffc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f06f 0201 	mvn.w	r2, #1
 8005ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7fc f93c 	bl	8002274 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00c      	beq.n	8006020 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600c:	2b00      	cmp	r3, #0
 800600e:	d007      	beq.n	8006020 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fae4 	bl	80065e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00c      	beq.n	8006044 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d007      	beq.n	8006044 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800603c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f8fb 	bl	800623a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00c      	beq.n	8006068 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0220 	mvn.w	r2, #32
 8006060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fab6 	bl	80065d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006068:	bf00      	nop
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800607a:	2300      	movs	r3, #0
 800607c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_TIM_ConfigClockSource+0x1c>
 8006088:	2302      	movs	r3, #2
 800608a:	e0b4      	b.n	80061f6 <HAL_TIM_ConfigClockSource+0x186>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2202      	movs	r2, #2
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c4:	d03e      	beq.n	8006144 <HAL_TIM_ConfigClockSource+0xd4>
 80060c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ca:	f200 8087 	bhi.w	80061dc <HAL_TIM_ConfigClockSource+0x16c>
 80060ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d2:	f000 8086 	beq.w	80061e2 <HAL_TIM_ConfigClockSource+0x172>
 80060d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060da:	d87f      	bhi.n	80061dc <HAL_TIM_ConfigClockSource+0x16c>
 80060dc:	2b70      	cmp	r3, #112	; 0x70
 80060de:	d01a      	beq.n	8006116 <HAL_TIM_ConfigClockSource+0xa6>
 80060e0:	2b70      	cmp	r3, #112	; 0x70
 80060e2:	d87b      	bhi.n	80061dc <HAL_TIM_ConfigClockSource+0x16c>
 80060e4:	2b60      	cmp	r3, #96	; 0x60
 80060e6:	d050      	beq.n	800618a <HAL_TIM_ConfigClockSource+0x11a>
 80060e8:	2b60      	cmp	r3, #96	; 0x60
 80060ea:	d877      	bhi.n	80061dc <HAL_TIM_ConfigClockSource+0x16c>
 80060ec:	2b50      	cmp	r3, #80	; 0x50
 80060ee:	d03c      	beq.n	800616a <HAL_TIM_ConfigClockSource+0xfa>
 80060f0:	2b50      	cmp	r3, #80	; 0x50
 80060f2:	d873      	bhi.n	80061dc <HAL_TIM_ConfigClockSource+0x16c>
 80060f4:	2b40      	cmp	r3, #64	; 0x40
 80060f6:	d058      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0x13a>
 80060f8:	2b40      	cmp	r3, #64	; 0x40
 80060fa:	d86f      	bhi.n	80061dc <HAL_TIM_ConfigClockSource+0x16c>
 80060fc:	2b30      	cmp	r3, #48	; 0x30
 80060fe:	d064      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x15a>
 8006100:	2b30      	cmp	r3, #48	; 0x30
 8006102:	d86b      	bhi.n	80061dc <HAL_TIM_ConfigClockSource+0x16c>
 8006104:	2b20      	cmp	r3, #32
 8006106:	d060      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x15a>
 8006108:	2b20      	cmp	r3, #32
 800610a:	d867      	bhi.n	80061dc <HAL_TIM_ConfigClockSource+0x16c>
 800610c:	2b00      	cmp	r3, #0
 800610e:	d05c      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x15a>
 8006110:	2b10      	cmp	r3, #16
 8006112:	d05a      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x15a>
 8006114:	e062      	b.n	80061dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006126:	f000 f9b9 	bl	800649c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	609a      	str	r2, [r3, #8]
      break;
 8006142:	e04f      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006154:	f000 f9a2 	bl	800649c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006166:	609a      	str	r2, [r3, #8]
      break;
 8006168:	e03c      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006176:	461a      	mov	r2, r3
 8006178:	f000 f916 	bl	80063a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2150      	movs	r1, #80	; 0x50
 8006182:	4618      	mov	r0, r3
 8006184:	f000 f96f 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 8006188:	e02c      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006196:	461a      	mov	r2, r3
 8006198:	f000 f935 	bl	8006406 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2160      	movs	r1, #96	; 0x60
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 f95f 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 80061a8:	e01c      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b6:	461a      	mov	r2, r3
 80061b8:	f000 f8f6 	bl	80063a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2140      	movs	r1, #64	; 0x40
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 f94f 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 80061c8:	e00c      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4619      	mov	r1, r3
 80061d4:	4610      	mov	r0, r2
 80061d6:	f000 f946 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 80061da:	e003      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	73fb      	strb	r3, [r7, #15]
      break;
 80061e0:	e000      	b.n	80061e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800622e:	bf00      	nop
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
	...

08006250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a46      	ldr	r2, [pc, #280]	; (800637c <TIM_Base_SetConfig+0x12c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d013      	beq.n	8006290 <TIM_Base_SetConfig+0x40>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800626e:	d00f      	beq.n	8006290 <TIM_Base_SetConfig+0x40>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a43      	ldr	r2, [pc, #268]	; (8006380 <TIM_Base_SetConfig+0x130>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00b      	beq.n	8006290 <TIM_Base_SetConfig+0x40>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a42      	ldr	r2, [pc, #264]	; (8006384 <TIM_Base_SetConfig+0x134>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d007      	beq.n	8006290 <TIM_Base_SetConfig+0x40>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a41      	ldr	r2, [pc, #260]	; (8006388 <TIM_Base_SetConfig+0x138>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d003      	beq.n	8006290 <TIM_Base_SetConfig+0x40>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a40      	ldr	r2, [pc, #256]	; (800638c <TIM_Base_SetConfig+0x13c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d108      	bne.n	80062a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a35      	ldr	r2, [pc, #212]	; (800637c <TIM_Base_SetConfig+0x12c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d02b      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b0:	d027      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a32      	ldr	r2, [pc, #200]	; (8006380 <TIM_Base_SetConfig+0x130>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d023      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a31      	ldr	r2, [pc, #196]	; (8006384 <TIM_Base_SetConfig+0x134>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d01f      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a30      	ldr	r2, [pc, #192]	; (8006388 <TIM_Base_SetConfig+0x138>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d01b      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a2f      	ldr	r2, [pc, #188]	; (800638c <TIM_Base_SetConfig+0x13c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d017      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a2e      	ldr	r2, [pc, #184]	; (8006390 <TIM_Base_SetConfig+0x140>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d013      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a2d      	ldr	r2, [pc, #180]	; (8006394 <TIM_Base_SetConfig+0x144>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00f      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a2c      	ldr	r2, [pc, #176]	; (8006398 <TIM_Base_SetConfig+0x148>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00b      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a2b      	ldr	r2, [pc, #172]	; (800639c <TIM_Base_SetConfig+0x14c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d007      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a2a      	ldr	r2, [pc, #168]	; (80063a0 <TIM_Base_SetConfig+0x150>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d003      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a29      	ldr	r2, [pc, #164]	; (80063a4 <TIM_Base_SetConfig+0x154>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d108      	bne.n	8006314 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a10      	ldr	r2, [pc, #64]	; (800637c <TIM_Base_SetConfig+0x12c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d003      	beq.n	8006348 <TIM_Base_SetConfig+0xf8>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a12      	ldr	r2, [pc, #72]	; (800638c <TIM_Base_SetConfig+0x13c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d103      	bne.n	8006350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b01      	cmp	r3, #1
 8006360:	d105      	bne.n	800636e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f023 0201 	bic.w	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	611a      	str	r2, [r3, #16]
  }
}
 800636e:	bf00      	nop
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40010000 	.word	0x40010000
 8006380:	40000400 	.word	0x40000400
 8006384:	40000800 	.word	0x40000800
 8006388:	40000c00 	.word	0x40000c00
 800638c:	40010400 	.word	0x40010400
 8006390:	40014000 	.word	0x40014000
 8006394:	40014400 	.word	0x40014400
 8006398:	40014800 	.word	0x40014800
 800639c:	40001800 	.word	0x40001800
 80063a0:	40001c00 	.word	0x40001c00
 80063a4:	40002000 	.word	0x40002000

080063a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	f023 0201 	bic.w	r2, r3, #1
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f023 030a 	bic.w	r3, r3, #10
 80063e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	621a      	str	r2, [r3, #32]
}
 80063fa:	bf00      	nop
 80063fc:	371c      	adds	r7, #28
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006406:	b480      	push	{r7}
 8006408:	b087      	sub	sp, #28
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	f023 0210 	bic.w	r2, r3, #16
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006430:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	031b      	lsls	r3, r3, #12
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006442:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	011b      	lsls	r3, r3, #4
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006466:	b480      	push	{r7}
 8006468:	b085      	sub	sp, #20
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4313      	orrs	r3, r2
 8006484:	f043 0307 	orr.w	r3, r3, #7
 8006488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	609a      	str	r2, [r3, #8]
}
 8006490:	bf00      	nop
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	021a      	lsls	r2, r3, #8
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	431a      	orrs	r2, r3
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	609a      	str	r2, [r3, #8]
}
 80064d0:	bf00      	nop
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064f0:	2302      	movs	r3, #2
 80064f2:	e05a      	b.n	80065aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a21      	ldr	r2, [pc, #132]	; (80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d022      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006540:	d01d      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a1d      	ldr	r2, [pc, #116]	; (80065bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d018      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a1b      	ldr	r2, [pc, #108]	; (80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d013      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a1a      	ldr	r2, [pc, #104]	; (80065c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d00e      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a18      	ldr	r2, [pc, #96]	; (80065c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d009      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a17      	ldr	r2, [pc, #92]	; (80065cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d004      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a15      	ldr	r2, [pc, #84]	; (80065d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d10c      	bne.n	8006598 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006584:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	4313      	orrs	r3, r2
 800658e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40010000 	.word	0x40010000
 80065bc:	40000400 	.word	0x40000400
 80065c0:	40000800 	.word	0x40000800
 80065c4:	40000c00 	.word	0x40000c00
 80065c8:	40010400 	.word	0x40010400
 80065cc:	40014000 	.word	0x40014000
 80065d0:	40001800 	.word	0x40001800

080065d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e042      	b.n	8006694 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d106      	bne.n	8006628 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7fc fdee 	bl	8003204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2224      	movs	r2, #36	; 0x24
 800662c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800663e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fdbd 	bl	80071c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	695a      	ldr	r2, [r3, #20]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006664:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006674:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2220      	movs	r2, #32
 8006688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b08a      	sub	sp, #40	; 0x28
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	4613      	mov	r3, r2
 80066aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b20      	cmp	r3, #32
 80066ba:	d175      	bne.n	80067a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <HAL_UART_Transmit+0x2c>
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e06e      	b.n	80067aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2221      	movs	r2, #33	; 0x21
 80066d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066da:	f7fc fedf 	bl	800349c <HAL_GetTick>
 80066de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	88fa      	ldrh	r2, [r7, #6]
 80066e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	88fa      	ldrh	r2, [r7, #6]
 80066ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f4:	d108      	bne.n	8006708 <HAL_UART_Transmit+0x6c>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d104      	bne.n	8006708 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80066fe:	2300      	movs	r3, #0
 8006700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	61bb      	str	r3, [r7, #24]
 8006706:	e003      	b.n	8006710 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800670c:	2300      	movs	r3, #0
 800670e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006710:	e02e      	b.n	8006770 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2200      	movs	r2, #0
 800671a:	2180      	movs	r1, #128	; 0x80
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 fb1f 	bl	8006d60 <UART_WaitOnFlagUntilTimeout>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d005      	beq.n	8006734 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2220      	movs	r2, #32
 800672c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e03a      	b.n	80067aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10b      	bne.n	8006752 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006748:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	3302      	adds	r3, #2
 800674e:	61bb      	str	r3, [r7, #24]
 8006750:	e007      	b.n	8006762 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	781a      	ldrb	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	3301      	adds	r3, #1
 8006760:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006766:	b29b      	uxth	r3, r3
 8006768:	3b01      	subs	r3, #1
 800676a:	b29a      	uxth	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006774:	b29b      	uxth	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1cb      	bne.n	8006712 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2200      	movs	r2, #0
 8006782:	2140      	movs	r1, #64	; 0x40
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 faeb 	bl	8006d60 <UART_WaitOnFlagUntilTimeout>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d005      	beq.n	800679c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2220      	movs	r2, #32
 8006794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e006      	b.n	80067aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2220      	movs	r2, #32
 80067a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	e000      	b.n	80067aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80067a8:	2302      	movs	r3, #2
  }
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3720      	adds	r7, #32
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	4613      	mov	r3, r2
 80067be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b20      	cmp	r3, #32
 80067ca:	d112      	bne.n	80067f2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <HAL_UART_Receive_IT+0x26>
 80067d2:	88fb      	ldrh	r3, [r7, #6]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e00b      	b.n	80067f4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	461a      	mov	r2, r3
 80067e6:	68b9      	ldr	r1, [r7, #8]
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 fb12 	bl	8006e12 <UART_Start_Receive_IT>
 80067ee:	4603      	mov	r3, r0
 80067f0:	e000      	b.n	80067f4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80067f2:	2302      	movs	r3, #2
  }
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b0ba      	sub	sp, #232	; 0xe8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006822:	2300      	movs	r3, #0
 8006824:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006828:	2300      	movs	r3, #0
 800682a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006832:	f003 030f 	and.w	r3, r3, #15
 8006836:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800683a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10f      	bne.n	8006862 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006846:	f003 0320 	and.w	r3, r3, #32
 800684a:	2b00      	cmp	r3, #0
 800684c:	d009      	beq.n	8006862 <HAL_UART_IRQHandler+0x66>
 800684e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006852:	f003 0320 	and.w	r3, r3, #32
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fbf2 	bl	8007044 <UART_Receive_IT>
      return;
 8006860:	e25b      	b.n	8006d1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 80de 	beq.w	8006a28 <HAL_UART_IRQHandler+0x22c>
 800686c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d106      	bne.n	8006886 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800687c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 80d1 	beq.w	8006a28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00b      	beq.n	80068aa <HAL_UART_IRQHandler+0xae>
 8006892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689a:	2b00      	cmp	r3, #0
 800689c:	d005      	beq.n	80068aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a2:	f043 0201 	orr.w	r2, r3, #1
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ae:	f003 0304 	and.w	r3, r3, #4
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00b      	beq.n	80068ce <HAL_UART_IRQHandler+0xd2>
 80068b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d005      	beq.n	80068ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c6:	f043 0202 	orr.w	r2, r3, #2
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00b      	beq.n	80068f2 <HAL_UART_IRQHandler+0xf6>
 80068da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d005      	beq.n	80068f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ea:	f043 0204 	orr.w	r2, r3, #4
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f6:	f003 0308 	and.w	r3, r3, #8
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d011      	beq.n	8006922 <HAL_UART_IRQHandler+0x126>
 80068fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b00      	cmp	r3, #0
 8006908:	d105      	bne.n	8006916 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800690a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d005      	beq.n	8006922 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691a:	f043 0208 	orr.w	r2, r3, #8
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 81f2 	beq.w	8006d10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800692c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006930:	f003 0320 	and.w	r3, r3, #32
 8006934:	2b00      	cmp	r3, #0
 8006936:	d008      	beq.n	800694a <HAL_UART_IRQHandler+0x14e>
 8006938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800693c:	f003 0320 	and.w	r3, r3, #32
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fb7d 	bl	8007044 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006954:	2b40      	cmp	r3, #64	; 0x40
 8006956:	bf0c      	ite	eq
 8006958:	2301      	moveq	r3, #1
 800695a:	2300      	movne	r3, #0
 800695c:	b2db      	uxtb	r3, r3
 800695e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006966:	f003 0308 	and.w	r3, r3, #8
 800696a:	2b00      	cmp	r3, #0
 800696c:	d103      	bne.n	8006976 <HAL_UART_IRQHandler+0x17a>
 800696e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006972:	2b00      	cmp	r3, #0
 8006974:	d04f      	beq.n	8006a16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fa85 	bl	8006e86 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006986:	2b40      	cmp	r3, #64	; 0x40
 8006988:	d141      	bne.n	8006a0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3314      	adds	r3, #20
 8006990:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3314      	adds	r3, #20
 80069b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069c6:	e841 2300 	strex	r3, r2, [r1]
 80069ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1d9      	bne.n	800698a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d013      	beq.n	8006a06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e2:	4a7e      	ldr	r2, [pc, #504]	; (8006bdc <HAL_UART_IRQHandler+0x3e0>)
 80069e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fd fc20 	bl	8004230 <HAL_DMA_Abort_IT>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d016      	beq.n	8006a24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a00:	4610      	mov	r0, r2
 8006a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a04:	e00e      	b.n	8006a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f994 	bl	8006d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a0c:	e00a      	b.n	8006a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f990 	bl	8006d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a14:	e006      	b.n	8006a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f98c 	bl	8006d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006a22:	e175      	b.n	8006d10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a24:	bf00      	nop
    return;
 8006a26:	e173      	b.n	8006d10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	f040 814f 	bne.w	8006cd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a36:	f003 0310 	and.w	r3, r3, #16
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 8148 	beq.w	8006cd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a44:	f003 0310 	and.w	r3, r3, #16
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8141 	beq.w	8006cd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60bb      	str	r3, [r7, #8]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	60bb      	str	r3, [r7, #8]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	60bb      	str	r3, [r7, #8]
 8006a62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6e:	2b40      	cmp	r3, #64	; 0x40
 8006a70:	f040 80b6 	bne.w	8006be0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8145 	beq.w	8006d14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a92:	429a      	cmp	r2, r3
 8006a94:	f080 813e 	bcs.w	8006d14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a9e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aaa:	f000 8088 	beq.w	8006bbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	330c      	adds	r3, #12
 8006ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006acc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	330c      	adds	r3, #12
 8006ad6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ada:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ade:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ae6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1d9      	bne.n	8006aae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3314      	adds	r3, #20
 8006b00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b0c:	f023 0301 	bic.w	r3, r3, #1
 8006b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3314      	adds	r3, #20
 8006b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e1      	bne.n	8006afa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3314      	adds	r3, #20
 8006b3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3314      	adds	r3, #20
 8006b56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e3      	bne.n	8006b36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	330c      	adds	r3, #12
 8006b82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b8e:	f023 0310 	bic.w	r3, r3, #16
 8006b92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	330c      	adds	r3, #12
 8006b9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ba0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ba2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ba6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e3      	bne.n	8006b7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7fd fac9 	bl	8004150 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f8b7 	bl	8006d48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bda:	e09b      	b.n	8006d14 <HAL_UART_IRQHandler+0x518>
 8006bdc:	08006f4d 	.word	0x08006f4d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 808e 	beq.w	8006d18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 8089 	beq.w	8006d18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c10:	e853 3f00 	ldrex	r3, [r3]
 8006c14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	330c      	adds	r3, #12
 8006c26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c2a:	647a      	str	r2, [r7, #68]	; 0x44
 8006c2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c32:	e841 2300 	strex	r3, r2, [r1]
 8006c36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e3      	bne.n	8006c06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3314      	adds	r3, #20
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	f023 0301 	bic.w	r3, r3, #1
 8006c54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3314      	adds	r3, #20
 8006c5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c62:	633a      	str	r2, [r7, #48]	; 0x30
 8006c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e3      	bne.n	8006c3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	330c      	adds	r3, #12
 8006c8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	e853 3f00 	ldrex	r3, [r3]
 8006c92:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f023 0310 	bic.w	r3, r3, #16
 8006c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	330c      	adds	r3, #12
 8006ca4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ca8:	61fa      	str	r2, [r7, #28]
 8006caa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	69b9      	ldr	r1, [r7, #24]
 8006cae:	69fa      	ldr	r2, [r7, #28]
 8006cb0:	e841 2300 	strex	r3, r2, [r1]
 8006cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e3      	bne.n	8006c84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f83d 	bl	8006d48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cce:	e023      	b.n	8006d18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d009      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x4f4>
 8006cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f943 	bl	8006f74 <UART_Transmit_IT>
    return;
 8006cee:	e014      	b.n	8006d1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00e      	beq.n	8006d1a <HAL_UART_IRQHandler+0x51e>
 8006cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d008      	beq.n	8006d1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f983 	bl	8007014 <UART_EndTransmit_IT>
    return;
 8006d0e:	e004      	b.n	8006d1a <HAL_UART_IRQHandler+0x51e>
    return;
 8006d10:	bf00      	nop
 8006d12:	e002      	b.n	8006d1a <HAL_UART_IRQHandler+0x51e>
      return;
 8006d14:	bf00      	nop
 8006d16:	e000      	b.n	8006d1a <HAL_UART_IRQHandler+0x51e>
      return;
 8006d18:	bf00      	nop
  }
}
 8006d1a:	37e8      	adds	r7, #232	; 0xe8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	603b      	str	r3, [r7, #0]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d70:	e03b      	b.n	8006dea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d78:	d037      	beq.n	8006dea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d7a:	f7fc fb8f 	bl	800349c <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	6a3a      	ldr	r2, [r7, #32]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d302      	bcc.n	8006d90 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e03a      	b.n	8006e0a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	f003 0304 	and.w	r3, r3, #4
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d023      	beq.n	8006dea <UART_WaitOnFlagUntilTimeout+0x8a>
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b80      	cmp	r3, #128	; 0x80
 8006da6:	d020      	beq.n	8006dea <UART_WaitOnFlagUntilTimeout+0x8a>
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b40      	cmp	r3, #64	; 0x40
 8006dac:	d01d      	beq.n	8006dea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0308 	and.w	r3, r3, #8
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d116      	bne.n	8006dea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	617b      	str	r3, [r7, #20]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	617b      	str	r3, [r7, #20]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	617b      	str	r3, [r7, #20]
 8006dd0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 f857 	bl	8006e86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2208      	movs	r2, #8
 8006ddc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e00f      	b.n	8006e0a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	4013      	ands	r3, r2
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	bf0c      	ite	eq
 8006dfa:	2301      	moveq	r3, #1
 8006dfc:	2300      	movne	r3, #0
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	461a      	mov	r2, r3
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d0b4      	beq.n	8006d72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3718      	adds	r7, #24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b085      	sub	sp, #20
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	60f8      	str	r0, [r7, #12]
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	88fa      	ldrh	r2, [r7, #6]
 8006e2a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	88fa      	ldrh	r2, [r7, #6]
 8006e30:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2222      	movs	r2, #34	; 0x22
 8006e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d007      	beq.n	8006e58 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e56:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	695a      	ldr	r2, [r3, #20]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0201 	orr.w	r2, r2, #1
 8006e66:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f042 0220 	orr.w	r2, r2, #32
 8006e76:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b095      	sub	sp, #84	; 0x54
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	330c      	adds	r3, #12
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	330c      	adds	r3, #12
 8006eac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006eae:	643a      	str	r2, [r7, #64]	; 0x40
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006eb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1e5      	bne.n	8006e8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3314      	adds	r3, #20
 8006ec8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	e853 3f00 	ldrex	r3, [r3]
 8006ed0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f023 0301 	bic.w	r3, r3, #1
 8006ed8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3314      	adds	r3, #20
 8006ee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ee4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eea:	e841 2300 	strex	r3, r2, [r1]
 8006eee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1e5      	bne.n	8006ec2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d119      	bne.n	8006f32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	330c      	adds	r3, #12
 8006f04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	e853 3f00 	ldrex	r3, [r3]
 8006f0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	f023 0310 	bic.w	r3, r3, #16
 8006f14:	647b      	str	r3, [r7, #68]	; 0x44
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	330c      	adds	r3, #12
 8006f1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f1e:	61ba      	str	r2, [r7, #24]
 8006f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f22:	6979      	ldr	r1, [r7, #20]
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	e841 2300 	strex	r3, r2, [r1]
 8006f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1e5      	bne.n	8006efe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2220      	movs	r2, #32
 8006f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f40:	bf00      	nop
 8006f42:	3754      	adds	r7, #84	; 0x54
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f7ff fee4 	bl	8006d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f6c:	bf00      	nop
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b21      	cmp	r3, #33	; 0x21
 8006f86:	d13e      	bne.n	8007006 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f90:	d114      	bne.n	8006fbc <UART_Transmit_IT+0x48>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d110      	bne.n	8006fbc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	1c9a      	adds	r2, r3, #2
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	621a      	str	r2, [r3, #32]
 8006fba:	e008      	b.n	8006fce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	1c59      	adds	r1, r3, #1
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6211      	str	r1, [r2, #32]
 8006fc6:	781a      	ldrb	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	4619      	mov	r1, r3
 8006fdc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10f      	bne.n	8007002 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68da      	ldr	r2, [r3, #12]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ff0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68da      	ldr	r2, [r3, #12]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007000:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	e000      	b.n	8007008 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007006:	2302      	movs	r3, #2
  }
}
 8007008:	4618      	mov	r0, r3
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800702a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2220      	movs	r2, #32
 8007030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7ff fe73 	bl	8006d20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b08c      	sub	sp, #48	; 0x30
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b22      	cmp	r3, #34	; 0x22
 8007056:	f040 80ae 	bne.w	80071b6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007062:	d117      	bne.n	8007094 <UART_Receive_IT+0x50>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d113      	bne.n	8007094 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800706c:	2300      	movs	r3, #0
 800706e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007074:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	b29b      	uxth	r3, r3
 800707e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007082:	b29a      	uxth	r2, r3
 8007084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007086:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708c:	1c9a      	adds	r2, r3, #2
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	629a      	str	r2, [r3, #40]	; 0x28
 8007092:	e026      	b.n	80070e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007098:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a6:	d007      	beq.n	80070b8 <UART_Receive_IT+0x74>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10a      	bne.n	80070c6 <UART_Receive_IT+0x82>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d106      	bne.n	80070c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c2:	701a      	strb	r2, [r3, #0]
 80070c4:	e008      	b.n	80070d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070dc:	1c5a      	adds	r2, r3, #1
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	3b01      	subs	r3, #1
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	4619      	mov	r1, r3
 80070f0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d15d      	bne.n	80071b2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0220 	bic.w	r2, r2, #32
 8007104:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68da      	ldr	r2, [r3, #12]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007114:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	695a      	ldr	r2, [r3, #20]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f022 0201 	bic.w	r2, r2, #1
 8007124:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2220      	movs	r2, #32
 800712a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007138:	2b01      	cmp	r3, #1
 800713a:	d135      	bne.n	80071a8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	330c      	adds	r3, #12
 8007148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	e853 3f00 	ldrex	r3, [r3]
 8007150:	613b      	str	r3, [r7, #16]
   return(result);
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	f023 0310 	bic.w	r3, r3, #16
 8007158:	627b      	str	r3, [r7, #36]	; 0x24
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	330c      	adds	r3, #12
 8007160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007162:	623a      	str	r2, [r7, #32]
 8007164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007166:	69f9      	ldr	r1, [r7, #28]
 8007168:	6a3a      	ldr	r2, [r7, #32]
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1e5      	bne.n	8007142 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0310 	and.w	r3, r3, #16
 8007180:	2b10      	cmp	r3, #16
 8007182:	d10a      	bne.n	800719a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007184:	2300      	movs	r3, #0
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	60fb      	str	r3, [r7, #12]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff fdd1 	bl	8006d48 <HAL_UARTEx_RxEventCallback>
 80071a6:	e002      	b.n	80071ae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7fb f875 	bl	8002298 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	e002      	b.n	80071b8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	e000      	b.n	80071b8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80071b6:	2302      	movs	r3, #2
  }
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3730      	adds	r7, #48	; 0x30
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071c4:	b0c0      	sub	sp, #256	; 0x100
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80071d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071dc:	68d9      	ldr	r1, [r3, #12]
 80071de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	ea40 0301 	orr.w	r3, r0, r1
 80071e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	431a      	orrs	r2, r3
 80071f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	431a      	orrs	r2, r3
 8007200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	4313      	orrs	r3, r2
 8007208:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800720c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007218:	f021 010c 	bic.w	r1, r1, #12
 800721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007226:	430b      	orrs	r3, r1
 8007228:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800722a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800723a:	6999      	ldr	r1, [r3, #24]
 800723c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	ea40 0301 	orr.w	r3, r0, r1
 8007246:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	4b8f      	ldr	r3, [pc, #572]	; (800748c <UART_SetConfig+0x2cc>)
 8007250:	429a      	cmp	r2, r3
 8007252:	d005      	beq.n	8007260 <UART_SetConfig+0xa0>
 8007254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	4b8d      	ldr	r3, [pc, #564]	; (8007490 <UART_SetConfig+0x2d0>)
 800725c:	429a      	cmp	r2, r3
 800725e:	d104      	bne.n	800726a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007260:	f7fe f86c 	bl	800533c <HAL_RCC_GetPCLK2Freq>
 8007264:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007268:	e003      	b.n	8007272 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800726a:	f7fe f853 	bl	8005314 <HAL_RCC_GetPCLK1Freq>
 800726e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800727c:	f040 810c 	bne.w	8007498 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007284:	2200      	movs	r2, #0
 8007286:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800728a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800728e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007292:	4622      	mov	r2, r4
 8007294:	462b      	mov	r3, r5
 8007296:	1891      	adds	r1, r2, r2
 8007298:	65b9      	str	r1, [r7, #88]	; 0x58
 800729a:	415b      	adcs	r3, r3
 800729c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800729e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80072a2:	4621      	mov	r1, r4
 80072a4:	eb12 0801 	adds.w	r8, r2, r1
 80072a8:	4629      	mov	r1, r5
 80072aa:	eb43 0901 	adc.w	r9, r3, r1
 80072ae:	f04f 0200 	mov.w	r2, #0
 80072b2:	f04f 0300 	mov.w	r3, #0
 80072b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072c2:	4690      	mov	r8, r2
 80072c4:	4699      	mov	r9, r3
 80072c6:	4623      	mov	r3, r4
 80072c8:	eb18 0303 	adds.w	r3, r8, r3
 80072cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072d0:	462b      	mov	r3, r5
 80072d2:	eb49 0303 	adc.w	r3, r9, r3
 80072d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80072ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80072ee:	460b      	mov	r3, r1
 80072f0:	18db      	adds	r3, r3, r3
 80072f2:	653b      	str	r3, [r7, #80]	; 0x50
 80072f4:	4613      	mov	r3, r2
 80072f6:	eb42 0303 	adc.w	r3, r2, r3
 80072fa:	657b      	str	r3, [r7, #84]	; 0x54
 80072fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007300:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007304:	f7f9 fbd2 	bl	8000aac <__aeabi_uldivmod>
 8007308:	4602      	mov	r2, r0
 800730a:	460b      	mov	r3, r1
 800730c:	4b61      	ldr	r3, [pc, #388]	; (8007494 <UART_SetConfig+0x2d4>)
 800730e:	fba3 2302 	umull	r2, r3, r3, r2
 8007312:	095b      	lsrs	r3, r3, #5
 8007314:	011c      	lsls	r4, r3, #4
 8007316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800731a:	2200      	movs	r2, #0
 800731c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007320:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007324:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007328:	4642      	mov	r2, r8
 800732a:	464b      	mov	r3, r9
 800732c:	1891      	adds	r1, r2, r2
 800732e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007330:	415b      	adcs	r3, r3
 8007332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007334:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007338:	4641      	mov	r1, r8
 800733a:	eb12 0a01 	adds.w	sl, r2, r1
 800733e:	4649      	mov	r1, r9
 8007340:	eb43 0b01 	adc.w	fp, r3, r1
 8007344:	f04f 0200 	mov.w	r2, #0
 8007348:	f04f 0300 	mov.w	r3, #0
 800734c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007350:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007358:	4692      	mov	sl, r2
 800735a:	469b      	mov	fp, r3
 800735c:	4643      	mov	r3, r8
 800735e:	eb1a 0303 	adds.w	r3, sl, r3
 8007362:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007366:	464b      	mov	r3, r9
 8007368:	eb4b 0303 	adc.w	r3, fp, r3
 800736c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800737c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007380:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007384:	460b      	mov	r3, r1
 8007386:	18db      	adds	r3, r3, r3
 8007388:	643b      	str	r3, [r7, #64]	; 0x40
 800738a:	4613      	mov	r3, r2
 800738c:	eb42 0303 	adc.w	r3, r2, r3
 8007390:	647b      	str	r3, [r7, #68]	; 0x44
 8007392:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007396:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800739a:	f7f9 fb87 	bl	8000aac <__aeabi_uldivmod>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4611      	mov	r1, r2
 80073a4:	4b3b      	ldr	r3, [pc, #236]	; (8007494 <UART_SetConfig+0x2d4>)
 80073a6:	fba3 2301 	umull	r2, r3, r3, r1
 80073aa:	095b      	lsrs	r3, r3, #5
 80073ac:	2264      	movs	r2, #100	; 0x64
 80073ae:	fb02 f303 	mul.w	r3, r2, r3
 80073b2:	1acb      	subs	r3, r1, r3
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80073ba:	4b36      	ldr	r3, [pc, #216]	; (8007494 <UART_SetConfig+0x2d4>)
 80073bc:	fba3 2302 	umull	r2, r3, r3, r2
 80073c0:	095b      	lsrs	r3, r3, #5
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073c8:	441c      	add	r4, r3
 80073ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80073d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80073dc:	4642      	mov	r2, r8
 80073de:	464b      	mov	r3, r9
 80073e0:	1891      	adds	r1, r2, r2
 80073e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80073e4:	415b      	adcs	r3, r3
 80073e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073ec:	4641      	mov	r1, r8
 80073ee:	1851      	adds	r1, r2, r1
 80073f0:	6339      	str	r1, [r7, #48]	; 0x30
 80073f2:	4649      	mov	r1, r9
 80073f4:	414b      	adcs	r3, r1
 80073f6:	637b      	str	r3, [r7, #52]	; 0x34
 80073f8:	f04f 0200 	mov.w	r2, #0
 80073fc:	f04f 0300 	mov.w	r3, #0
 8007400:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007404:	4659      	mov	r1, fp
 8007406:	00cb      	lsls	r3, r1, #3
 8007408:	4651      	mov	r1, sl
 800740a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800740e:	4651      	mov	r1, sl
 8007410:	00ca      	lsls	r2, r1, #3
 8007412:	4610      	mov	r0, r2
 8007414:	4619      	mov	r1, r3
 8007416:	4603      	mov	r3, r0
 8007418:	4642      	mov	r2, r8
 800741a:	189b      	adds	r3, r3, r2
 800741c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007420:	464b      	mov	r3, r9
 8007422:	460a      	mov	r2, r1
 8007424:	eb42 0303 	adc.w	r3, r2, r3
 8007428:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800742c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007438:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800743c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007440:	460b      	mov	r3, r1
 8007442:	18db      	adds	r3, r3, r3
 8007444:	62bb      	str	r3, [r7, #40]	; 0x28
 8007446:	4613      	mov	r3, r2
 8007448:	eb42 0303 	adc.w	r3, r2, r3
 800744c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800744e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007452:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007456:	f7f9 fb29 	bl	8000aac <__aeabi_uldivmod>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4b0d      	ldr	r3, [pc, #52]	; (8007494 <UART_SetConfig+0x2d4>)
 8007460:	fba3 1302 	umull	r1, r3, r3, r2
 8007464:	095b      	lsrs	r3, r3, #5
 8007466:	2164      	movs	r1, #100	; 0x64
 8007468:	fb01 f303 	mul.w	r3, r1, r3
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	00db      	lsls	r3, r3, #3
 8007470:	3332      	adds	r3, #50	; 0x32
 8007472:	4a08      	ldr	r2, [pc, #32]	; (8007494 <UART_SetConfig+0x2d4>)
 8007474:	fba2 2303 	umull	r2, r3, r2, r3
 8007478:	095b      	lsrs	r3, r3, #5
 800747a:	f003 0207 	and.w	r2, r3, #7
 800747e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4422      	add	r2, r4
 8007486:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007488:	e106      	b.n	8007698 <UART_SetConfig+0x4d8>
 800748a:	bf00      	nop
 800748c:	40011000 	.word	0x40011000
 8007490:	40011400 	.word	0x40011400
 8007494:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800749c:	2200      	movs	r2, #0
 800749e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80074a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80074aa:	4642      	mov	r2, r8
 80074ac:	464b      	mov	r3, r9
 80074ae:	1891      	adds	r1, r2, r2
 80074b0:	6239      	str	r1, [r7, #32]
 80074b2:	415b      	adcs	r3, r3
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
 80074b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074ba:	4641      	mov	r1, r8
 80074bc:	1854      	adds	r4, r2, r1
 80074be:	4649      	mov	r1, r9
 80074c0:	eb43 0501 	adc.w	r5, r3, r1
 80074c4:	f04f 0200 	mov.w	r2, #0
 80074c8:	f04f 0300 	mov.w	r3, #0
 80074cc:	00eb      	lsls	r3, r5, #3
 80074ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074d2:	00e2      	lsls	r2, r4, #3
 80074d4:	4614      	mov	r4, r2
 80074d6:	461d      	mov	r5, r3
 80074d8:	4643      	mov	r3, r8
 80074da:	18e3      	adds	r3, r4, r3
 80074dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074e0:	464b      	mov	r3, r9
 80074e2:	eb45 0303 	adc.w	r3, r5, r3
 80074e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074fa:	f04f 0200 	mov.w	r2, #0
 80074fe:	f04f 0300 	mov.w	r3, #0
 8007502:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007506:	4629      	mov	r1, r5
 8007508:	008b      	lsls	r3, r1, #2
 800750a:	4621      	mov	r1, r4
 800750c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007510:	4621      	mov	r1, r4
 8007512:	008a      	lsls	r2, r1, #2
 8007514:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007518:	f7f9 fac8 	bl	8000aac <__aeabi_uldivmod>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	4b60      	ldr	r3, [pc, #384]	; (80076a4 <UART_SetConfig+0x4e4>)
 8007522:	fba3 2302 	umull	r2, r3, r3, r2
 8007526:	095b      	lsrs	r3, r3, #5
 8007528:	011c      	lsls	r4, r3, #4
 800752a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800752e:	2200      	movs	r2, #0
 8007530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007534:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007538:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800753c:	4642      	mov	r2, r8
 800753e:	464b      	mov	r3, r9
 8007540:	1891      	adds	r1, r2, r2
 8007542:	61b9      	str	r1, [r7, #24]
 8007544:	415b      	adcs	r3, r3
 8007546:	61fb      	str	r3, [r7, #28]
 8007548:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800754c:	4641      	mov	r1, r8
 800754e:	1851      	adds	r1, r2, r1
 8007550:	6139      	str	r1, [r7, #16]
 8007552:	4649      	mov	r1, r9
 8007554:	414b      	adcs	r3, r1
 8007556:	617b      	str	r3, [r7, #20]
 8007558:	f04f 0200 	mov.w	r2, #0
 800755c:	f04f 0300 	mov.w	r3, #0
 8007560:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007564:	4659      	mov	r1, fp
 8007566:	00cb      	lsls	r3, r1, #3
 8007568:	4651      	mov	r1, sl
 800756a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800756e:	4651      	mov	r1, sl
 8007570:	00ca      	lsls	r2, r1, #3
 8007572:	4610      	mov	r0, r2
 8007574:	4619      	mov	r1, r3
 8007576:	4603      	mov	r3, r0
 8007578:	4642      	mov	r2, r8
 800757a:	189b      	adds	r3, r3, r2
 800757c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007580:	464b      	mov	r3, r9
 8007582:	460a      	mov	r2, r1
 8007584:	eb42 0303 	adc.w	r3, r2, r3
 8007588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800758c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	67bb      	str	r3, [r7, #120]	; 0x78
 8007596:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007598:	f04f 0200 	mov.w	r2, #0
 800759c:	f04f 0300 	mov.w	r3, #0
 80075a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80075a4:	4649      	mov	r1, r9
 80075a6:	008b      	lsls	r3, r1, #2
 80075a8:	4641      	mov	r1, r8
 80075aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075ae:	4641      	mov	r1, r8
 80075b0:	008a      	lsls	r2, r1, #2
 80075b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80075b6:	f7f9 fa79 	bl	8000aac <__aeabi_uldivmod>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4611      	mov	r1, r2
 80075c0:	4b38      	ldr	r3, [pc, #224]	; (80076a4 <UART_SetConfig+0x4e4>)
 80075c2:	fba3 2301 	umull	r2, r3, r3, r1
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	2264      	movs	r2, #100	; 0x64
 80075ca:	fb02 f303 	mul.w	r3, r2, r3
 80075ce:	1acb      	subs	r3, r1, r3
 80075d0:	011b      	lsls	r3, r3, #4
 80075d2:	3332      	adds	r3, #50	; 0x32
 80075d4:	4a33      	ldr	r2, [pc, #204]	; (80076a4 <UART_SetConfig+0x4e4>)
 80075d6:	fba2 2303 	umull	r2, r3, r2, r3
 80075da:	095b      	lsrs	r3, r3, #5
 80075dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075e0:	441c      	add	r4, r3
 80075e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075e6:	2200      	movs	r2, #0
 80075e8:	673b      	str	r3, [r7, #112]	; 0x70
 80075ea:	677a      	str	r2, [r7, #116]	; 0x74
 80075ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80075f0:	4642      	mov	r2, r8
 80075f2:	464b      	mov	r3, r9
 80075f4:	1891      	adds	r1, r2, r2
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	415b      	adcs	r3, r3
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007600:	4641      	mov	r1, r8
 8007602:	1851      	adds	r1, r2, r1
 8007604:	6039      	str	r1, [r7, #0]
 8007606:	4649      	mov	r1, r9
 8007608:	414b      	adcs	r3, r1
 800760a:	607b      	str	r3, [r7, #4]
 800760c:	f04f 0200 	mov.w	r2, #0
 8007610:	f04f 0300 	mov.w	r3, #0
 8007614:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007618:	4659      	mov	r1, fp
 800761a:	00cb      	lsls	r3, r1, #3
 800761c:	4651      	mov	r1, sl
 800761e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007622:	4651      	mov	r1, sl
 8007624:	00ca      	lsls	r2, r1, #3
 8007626:	4610      	mov	r0, r2
 8007628:	4619      	mov	r1, r3
 800762a:	4603      	mov	r3, r0
 800762c:	4642      	mov	r2, r8
 800762e:	189b      	adds	r3, r3, r2
 8007630:	66bb      	str	r3, [r7, #104]	; 0x68
 8007632:	464b      	mov	r3, r9
 8007634:	460a      	mov	r2, r1
 8007636:	eb42 0303 	adc.w	r3, r2, r3
 800763a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800763c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	663b      	str	r3, [r7, #96]	; 0x60
 8007646:	667a      	str	r2, [r7, #100]	; 0x64
 8007648:	f04f 0200 	mov.w	r2, #0
 800764c:	f04f 0300 	mov.w	r3, #0
 8007650:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007654:	4649      	mov	r1, r9
 8007656:	008b      	lsls	r3, r1, #2
 8007658:	4641      	mov	r1, r8
 800765a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800765e:	4641      	mov	r1, r8
 8007660:	008a      	lsls	r2, r1, #2
 8007662:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007666:	f7f9 fa21 	bl	8000aac <__aeabi_uldivmod>
 800766a:	4602      	mov	r2, r0
 800766c:	460b      	mov	r3, r1
 800766e:	4b0d      	ldr	r3, [pc, #52]	; (80076a4 <UART_SetConfig+0x4e4>)
 8007670:	fba3 1302 	umull	r1, r3, r3, r2
 8007674:	095b      	lsrs	r3, r3, #5
 8007676:	2164      	movs	r1, #100	; 0x64
 8007678:	fb01 f303 	mul.w	r3, r1, r3
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	011b      	lsls	r3, r3, #4
 8007680:	3332      	adds	r3, #50	; 0x32
 8007682:	4a08      	ldr	r2, [pc, #32]	; (80076a4 <UART_SetConfig+0x4e4>)
 8007684:	fba2 2303 	umull	r2, r3, r2, r3
 8007688:	095b      	lsrs	r3, r3, #5
 800768a:	f003 020f 	and.w	r2, r3, #15
 800768e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4422      	add	r2, r4
 8007696:	609a      	str	r2, [r3, #8]
}
 8007698:	bf00      	nop
 800769a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800769e:	46bd      	mov	sp, r7
 80076a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076a4:	51eb851f 	.word	0x51eb851f

080076a8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	6812      	ldr	r2, [r2, #0]
 80076c0:	f023 0101 	bic.w	r1, r3, #1
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	2b08      	cmp	r3, #8
 80076d0:	d102      	bne.n	80076d8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80076d2:	2340      	movs	r3, #64	; 0x40
 80076d4:	617b      	str	r3, [r7, #20]
 80076d6:	e001      	b.n	80076dc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80076d8:	2300      	movs	r3, #0
 80076da:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80076e8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80076ee:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80076f4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80076fa:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8007700:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8007706:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800770c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8007712:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8007718:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800771e:	4313      	orrs	r3, r2
 8007720:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	4313      	orrs	r3, r2
 800772a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8007736:	4b10      	ldr	r3, [pc, #64]	; (8007778 <FSMC_NORSRAM_Init+0xd0>)
 8007738:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007740:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007748:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	43db      	mvns	r3, r3
 8007758:	ea02 0103 	and.w	r1, r2, r3
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	4319      	orrs	r1, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	371c      	adds	r7, #28
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr
 8007778:	0008fb7f 	.word	0x0008fb7f

0800777c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007792:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	011b      	lsls	r3, r3, #4
 80077a0:	431a      	orrs	r2, r3
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	021b      	lsls	r3, r3, #8
 80077a8:	431a      	orrs	r2, r3
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	041b      	lsls	r3, r3, #16
 80077b0:	431a      	orrs	r2, r3
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	3b01      	subs	r3, #1
 80077b8:	051b      	lsls	r3, r3, #20
 80077ba:	431a      	orrs	r2, r3
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	3b02      	subs	r3, #2
 80077c2:	061b      	lsls	r3, r3, #24
 80077c4:	431a      	orrs	r2, r3
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	3201      	adds	r2, #1
 80077d0:	4319      	orrs	r1, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
	...

080077e8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077fc:	d11d      	bne.n	800783a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007806:	4b13      	ldr	r3, [pc, #76]	; (8007854 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007808:	4013      	ands	r3, r2
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	6811      	ldr	r1, [r2, #0]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	6852      	ldr	r2, [r2, #4]
 8007812:	0112      	lsls	r2, r2, #4
 8007814:	4311      	orrs	r1, r2
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	6892      	ldr	r2, [r2, #8]
 800781a:	0212      	lsls	r2, r2, #8
 800781c:	4311      	orrs	r1, r2
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	6992      	ldr	r2, [r2, #24]
 8007822:	4311      	orrs	r1, r2
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	68d2      	ldr	r2, [r2, #12]
 8007828:	0412      	lsls	r2, r2, #16
 800782a:	430a      	orrs	r2, r1
 800782c:	ea43 0102 	orr.w	r1, r3, r2
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007838:	e005      	b.n	8007846 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	cff00000 	.word	0xcff00000

08007858 <siprintf>:
 8007858:	b40e      	push	{r1, r2, r3}
 800785a:	b500      	push	{lr}
 800785c:	b09c      	sub	sp, #112	; 0x70
 800785e:	ab1d      	add	r3, sp, #116	; 0x74
 8007860:	9002      	str	r0, [sp, #8]
 8007862:	9006      	str	r0, [sp, #24]
 8007864:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007868:	4809      	ldr	r0, [pc, #36]	; (8007890 <siprintf+0x38>)
 800786a:	9107      	str	r1, [sp, #28]
 800786c:	9104      	str	r1, [sp, #16]
 800786e:	4909      	ldr	r1, [pc, #36]	; (8007894 <siprintf+0x3c>)
 8007870:	f853 2b04 	ldr.w	r2, [r3], #4
 8007874:	9105      	str	r1, [sp, #20]
 8007876:	6800      	ldr	r0, [r0, #0]
 8007878:	9301      	str	r3, [sp, #4]
 800787a:	a902      	add	r1, sp, #8
 800787c:	f000 f992 	bl	8007ba4 <_svfiprintf_r>
 8007880:	9b02      	ldr	r3, [sp, #8]
 8007882:	2200      	movs	r2, #0
 8007884:	701a      	strb	r2, [r3, #0]
 8007886:	b01c      	add	sp, #112	; 0x70
 8007888:	f85d eb04 	ldr.w	lr, [sp], #4
 800788c:	b003      	add	sp, #12
 800788e:	4770      	bx	lr
 8007890:	2000027c 	.word	0x2000027c
 8007894:	ffff0208 	.word	0xffff0208

08007898 <memset>:
 8007898:	4402      	add	r2, r0
 800789a:	4603      	mov	r3, r0
 800789c:	4293      	cmp	r3, r2
 800789e:	d100      	bne.n	80078a2 <memset+0xa>
 80078a0:	4770      	bx	lr
 80078a2:	f803 1b01 	strb.w	r1, [r3], #1
 80078a6:	e7f9      	b.n	800789c <memset+0x4>

080078a8 <__errno>:
 80078a8:	4b01      	ldr	r3, [pc, #4]	; (80078b0 <__errno+0x8>)
 80078aa:	6818      	ldr	r0, [r3, #0]
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	2000027c 	.word	0x2000027c

080078b4 <__libc_init_array>:
 80078b4:	b570      	push	{r4, r5, r6, lr}
 80078b6:	4d0d      	ldr	r5, [pc, #52]	; (80078ec <__libc_init_array+0x38>)
 80078b8:	4c0d      	ldr	r4, [pc, #52]	; (80078f0 <__libc_init_array+0x3c>)
 80078ba:	1b64      	subs	r4, r4, r5
 80078bc:	10a4      	asrs	r4, r4, #2
 80078be:	2600      	movs	r6, #0
 80078c0:	42a6      	cmp	r6, r4
 80078c2:	d109      	bne.n	80078d8 <__libc_init_array+0x24>
 80078c4:	4d0b      	ldr	r5, [pc, #44]	; (80078f4 <__libc_init_array+0x40>)
 80078c6:	4c0c      	ldr	r4, [pc, #48]	; (80078f8 <__libc_init_array+0x44>)
 80078c8:	f000 fc6a 	bl	80081a0 <_init>
 80078cc:	1b64      	subs	r4, r4, r5
 80078ce:	10a4      	asrs	r4, r4, #2
 80078d0:	2600      	movs	r6, #0
 80078d2:	42a6      	cmp	r6, r4
 80078d4:	d105      	bne.n	80078e2 <__libc_init_array+0x2e>
 80078d6:	bd70      	pop	{r4, r5, r6, pc}
 80078d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80078dc:	4798      	blx	r3
 80078de:	3601      	adds	r6, #1
 80078e0:	e7ee      	b.n	80078c0 <__libc_init_array+0xc>
 80078e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80078e6:	4798      	blx	r3
 80078e8:	3601      	adds	r6, #1
 80078ea:	e7f2      	b.n	80078d2 <__libc_init_array+0x1e>
 80078ec:	0800b270 	.word	0x0800b270
 80078f0:	0800b270 	.word	0x0800b270
 80078f4:	0800b270 	.word	0x0800b270
 80078f8:	0800b274 	.word	0x0800b274

080078fc <__retarget_lock_acquire_recursive>:
 80078fc:	4770      	bx	lr

080078fe <__retarget_lock_release_recursive>:
 80078fe:	4770      	bx	lr

08007900 <_free_r>:
 8007900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007902:	2900      	cmp	r1, #0
 8007904:	d044      	beq.n	8007990 <_free_r+0x90>
 8007906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800790a:	9001      	str	r0, [sp, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	f1a1 0404 	sub.w	r4, r1, #4
 8007912:	bfb8      	it	lt
 8007914:	18e4      	addlt	r4, r4, r3
 8007916:	f000 f8df 	bl	8007ad8 <__malloc_lock>
 800791a:	4a1e      	ldr	r2, [pc, #120]	; (8007994 <_free_r+0x94>)
 800791c:	9801      	ldr	r0, [sp, #4]
 800791e:	6813      	ldr	r3, [r2, #0]
 8007920:	b933      	cbnz	r3, 8007930 <_free_r+0x30>
 8007922:	6063      	str	r3, [r4, #4]
 8007924:	6014      	str	r4, [r2, #0]
 8007926:	b003      	add	sp, #12
 8007928:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800792c:	f000 b8da 	b.w	8007ae4 <__malloc_unlock>
 8007930:	42a3      	cmp	r3, r4
 8007932:	d908      	bls.n	8007946 <_free_r+0x46>
 8007934:	6825      	ldr	r5, [r4, #0]
 8007936:	1961      	adds	r1, r4, r5
 8007938:	428b      	cmp	r3, r1
 800793a:	bf01      	itttt	eq
 800793c:	6819      	ldreq	r1, [r3, #0]
 800793e:	685b      	ldreq	r3, [r3, #4]
 8007940:	1949      	addeq	r1, r1, r5
 8007942:	6021      	streq	r1, [r4, #0]
 8007944:	e7ed      	b.n	8007922 <_free_r+0x22>
 8007946:	461a      	mov	r2, r3
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	b10b      	cbz	r3, 8007950 <_free_r+0x50>
 800794c:	42a3      	cmp	r3, r4
 800794e:	d9fa      	bls.n	8007946 <_free_r+0x46>
 8007950:	6811      	ldr	r1, [r2, #0]
 8007952:	1855      	adds	r5, r2, r1
 8007954:	42a5      	cmp	r5, r4
 8007956:	d10b      	bne.n	8007970 <_free_r+0x70>
 8007958:	6824      	ldr	r4, [r4, #0]
 800795a:	4421      	add	r1, r4
 800795c:	1854      	adds	r4, r2, r1
 800795e:	42a3      	cmp	r3, r4
 8007960:	6011      	str	r1, [r2, #0]
 8007962:	d1e0      	bne.n	8007926 <_free_r+0x26>
 8007964:	681c      	ldr	r4, [r3, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	6053      	str	r3, [r2, #4]
 800796a:	440c      	add	r4, r1
 800796c:	6014      	str	r4, [r2, #0]
 800796e:	e7da      	b.n	8007926 <_free_r+0x26>
 8007970:	d902      	bls.n	8007978 <_free_r+0x78>
 8007972:	230c      	movs	r3, #12
 8007974:	6003      	str	r3, [r0, #0]
 8007976:	e7d6      	b.n	8007926 <_free_r+0x26>
 8007978:	6825      	ldr	r5, [r4, #0]
 800797a:	1961      	adds	r1, r4, r5
 800797c:	428b      	cmp	r3, r1
 800797e:	bf04      	itt	eq
 8007980:	6819      	ldreq	r1, [r3, #0]
 8007982:	685b      	ldreq	r3, [r3, #4]
 8007984:	6063      	str	r3, [r4, #4]
 8007986:	bf04      	itt	eq
 8007988:	1949      	addeq	r1, r1, r5
 800798a:	6021      	streq	r1, [r4, #0]
 800798c:	6054      	str	r4, [r2, #4]
 800798e:	e7ca      	b.n	8007926 <_free_r+0x26>
 8007990:	b003      	add	sp, #12
 8007992:	bd30      	pop	{r4, r5, pc}
 8007994:	20000c24 	.word	0x20000c24

08007998 <sbrk_aligned>:
 8007998:	b570      	push	{r4, r5, r6, lr}
 800799a:	4e0e      	ldr	r6, [pc, #56]	; (80079d4 <sbrk_aligned+0x3c>)
 800799c:	460c      	mov	r4, r1
 800799e:	6831      	ldr	r1, [r6, #0]
 80079a0:	4605      	mov	r5, r0
 80079a2:	b911      	cbnz	r1, 80079aa <sbrk_aligned+0x12>
 80079a4:	f000 fba6 	bl	80080f4 <_sbrk_r>
 80079a8:	6030      	str	r0, [r6, #0]
 80079aa:	4621      	mov	r1, r4
 80079ac:	4628      	mov	r0, r5
 80079ae:	f000 fba1 	bl	80080f4 <_sbrk_r>
 80079b2:	1c43      	adds	r3, r0, #1
 80079b4:	d00a      	beq.n	80079cc <sbrk_aligned+0x34>
 80079b6:	1cc4      	adds	r4, r0, #3
 80079b8:	f024 0403 	bic.w	r4, r4, #3
 80079bc:	42a0      	cmp	r0, r4
 80079be:	d007      	beq.n	80079d0 <sbrk_aligned+0x38>
 80079c0:	1a21      	subs	r1, r4, r0
 80079c2:	4628      	mov	r0, r5
 80079c4:	f000 fb96 	bl	80080f4 <_sbrk_r>
 80079c8:	3001      	adds	r0, #1
 80079ca:	d101      	bne.n	80079d0 <sbrk_aligned+0x38>
 80079cc:	f04f 34ff 	mov.w	r4, #4294967295
 80079d0:	4620      	mov	r0, r4
 80079d2:	bd70      	pop	{r4, r5, r6, pc}
 80079d4:	20000c28 	.word	0x20000c28

080079d8 <_malloc_r>:
 80079d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079dc:	1ccd      	adds	r5, r1, #3
 80079de:	f025 0503 	bic.w	r5, r5, #3
 80079e2:	3508      	adds	r5, #8
 80079e4:	2d0c      	cmp	r5, #12
 80079e6:	bf38      	it	cc
 80079e8:	250c      	movcc	r5, #12
 80079ea:	2d00      	cmp	r5, #0
 80079ec:	4607      	mov	r7, r0
 80079ee:	db01      	blt.n	80079f4 <_malloc_r+0x1c>
 80079f0:	42a9      	cmp	r1, r5
 80079f2:	d905      	bls.n	8007a00 <_malloc_r+0x28>
 80079f4:	230c      	movs	r3, #12
 80079f6:	603b      	str	r3, [r7, #0]
 80079f8:	2600      	movs	r6, #0
 80079fa:	4630      	mov	r0, r6
 80079fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ad4 <_malloc_r+0xfc>
 8007a04:	f000 f868 	bl	8007ad8 <__malloc_lock>
 8007a08:	f8d8 3000 	ldr.w	r3, [r8]
 8007a0c:	461c      	mov	r4, r3
 8007a0e:	bb5c      	cbnz	r4, 8007a68 <_malloc_r+0x90>
 8007a10:	4629      	mov	r1, r5
 8007a12:	4638      	mov	r0, r7
 8007a14:	f7ff ffc0 	bl	8007998 <sbrk_aligned>
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	d155      	bne.n	8007aca <_malloc_r+0xf2>
 8007a1e:	f8d8 4000 	ldr.w	r4, [r8]
 8007a22:	4626      	mov	r6, r4
 8007a24:	2e00      	cmp	r6, #0
 8007a26:	d145      	bne.n	8007ab4 <_malloc_r+0xdc>
 8007a28:	2c00      	cmp	r4, #0
 8007a2a:	d048      	beq.n	8007abe <_malloc_r+0xe6>
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	4631      	mov	r1, r6
 8007a30:	4638      	mov	r0, r7
 8007a32:	eb04 0903 	add.w	r9, r4, r3
 8007a36:	f000 fb5d 	bl	80080f4 <_sbrk_r>
 8007a3a:	4581      	cmp	r9, r0
 8007a3c:	d13f      	bne.n	8007abe <_malloc_r+0xe6>
 8007a3e:	6821      	ldr	r1, [r4, #0]
 8007a40:	1a6d      	subs	r5, r5, r1
 8007a42:	4629      	mov	r1, r5
 8007a44:	4638      	mov	r0, r7
 8007a46:	f7ff ffa7 	bl	8007998 <sbrk_aligned>
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	d037      	beq.n	8007abe <_malloc_r+0xe6>
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	442b      	add	r3, r5
 8007a52:	6023      	str	r3, [r4, #0]
 8007a54:	f8d8 3000 	ldr.w	r3, [r8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d038      	beq.n	8007ace <_malloc_r+0xf6>
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	42a2      	cmp	r2, r4
 8007a60:	d12b      	bne.n	8007aba <_malloc_r+0xe2>
 8007a62:	2200      	movs	r2, #0
 8007a64:	605a      	str	r2, [r3, #4]
 8007a66:	e00f      	b.n	8007a88 <_malloc_r+0xb0>
 8007a68:	6822      	ldr	r2, [r4, #0]
 8007a6a:	1b52      	subs	r2, r2, r5
 8007a6c:	d41f      	bmi.n	8007aae <_malloc_r+0xd6>
 8007a6e:	2a0b      	cmp	r2, #11
 8007a70:	d917      	bls.n	8007aa2 <_malloc_r+0xca>
 8007a72:	1961      	adds	r1, r4, r5
 8007a74:	42a3      	cmp	r3, r4
 8007a76:	6025      	str	r5, [r4, #0]
 8007a78:	bf18      	it	ne
 8007a7a:	6059      	strne	r1, [r3, #4]
 8007a7c:	6863      	ldr	r3, [r4, #4]
 8007a7e:	bf08      	it	eq
 8007a80:	f8c8 1000 	streq.w	r1, [r8]
 8007a84:	5162      	str	r2, [r4, r5]
 8007a86:	604b      	str	r3, [r1, #4]
 8007a88:	4638      	mov	r0, r7
 8007a8a:	f104 060b 	add.w	r6, r4, #11
 8007a8e:	f000 f829 	bl	8007ae4 <__malloc_unlock>
 8007a92:	f026 0607 	bic.w	r6, r6, #7
 8007a96:	1d23      	adds	r3, r4, #4
 8007a98:	1af2      	subs	r2, r6, r3
 8007a9a:	d0ae      	beq.n	80079fa <_malloc_r+0x22>
 8007a9c:	1b9b      	subs	r3, r3, r6
 8007a9e:	50a3      	str	r3, [r4, r2]
 8007aa0:	e7ab      	b.n	80079fa <_malloc_r+0x22>
 8007aa2:	42a3      	cmp	r3, r4
 8007aa4:	6862      	ldr	r2, [r4, #4]
 8007aa6:	d1dd      	bne.n	8007a64 <_malloc_r+0x8c>
 8007aa8:	f8c8 2000 	str.w	r2, [r8]
 8007aac:	e7ec      	b.n	8007a88 <_malloc_r+0xb0>
 8007aae:	4623      	mov	r3, r4
 8007ab0:	6864      	ldr	r4, [r4, #4]
 8007ab2:	e7ac      	b.n	8007a0e <_malloc_r+0x36>
 8007ab4:	4634      	mov	r4, r6
 8007ab6:	6876      	ldr	r6, [r6, #4]
 8007ab8:	e7b4      	b.n	8007a24 <_malloc_r+0x4c>
 8007aba:	4613      	mov	r3, r2
 8007abc:	e7cc      	b.n	8007a58 <_malloc_r+0x80>
 8007abe:	230c      	movs	r3, #12
 8007ac0:	603b      	str	r3, [r7, #0]
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	f000 f80e 	bl	8007ae4 <__malloc_unlock>
 8007ac8:	e797      	b.n	80079fa <_malloc_r+0x22>
 8007aca:	6025      	str	r5, [r4, #0]
 8007acc:	e7dc      	b.n	8007a88 <_malloc_r+0xb0>
 8007ace:	605b      	str	r3, [r3, #4]
 8007ad0:	deff      	udf	#255	; 0xff
 8007ad2:	bf00      	nop
 8007ad4:	20000c24 	.word	0x20000c24

08007ad8 <__malloc_lock>:
 8007ad8:	4801      	ldr	r0, [pc, #4]	; (8007ae0 <__malloc_lock+0x8>)
 8007ada:	f7ff bf0f 	b.w	80078fc <__retarget_lock_acquire_recursive>
 8007ade:	bf00      	nop
 8007ae0:	20000c20 	.word	0x20000c20

08007ae4 <__malloc_unlock>:
 8007ae4:	4801      	ldr	r0, [pc, #4]	; (8007aec <__malloc_unlock+0x8>)
 8007ae6:	f7ff bf0a 	b.w	80078fe <__retarget_lock_release_recursive>
 8007aea:	bf00      	nop
 8007aec:	20000c20 	.word	0x20000c20

08007af0 <__ssputs_r>:
 8007af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007af4:	688e      	ldr	r6, [r1, #8]
 8007af6:	461f      	mov	r7, r3
 8007af8:	42be      	cmp	r6, r7
 8007afa:	680b      	ldr	r3, [r1, #0]
 8007afc:	4682      	mov	sl, r0
 8007afe:	460c      	mov	r4, r1
 8007b00:	4690      	mov	r8, r2
 8007b02:	d82c      	bhi.n	8007b5e <__ssputs_r+0x6e>
 8007b04:	898a      	ldrh	r2, [r1, #12]
 8007b06:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b0a:	d026      	beq.n	8007b5a <__ssputs_r+0x6a>
 8007b0c:	6965      	ldr	r5, [r4, #20]
 8007b0e:	6909      	ldr	r1, [r1, #16]
 8007b10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b14:	eba3 0901 	sub.w	r9, r3, r1
 8007b18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b1c:	1c7b      	adds	r3, r7, #1
 8007b1e:	444b      	add	r3, r9
 8007b20:	106d      	asrs	r5, r5, #1
 8007b22:	429d      	cmp	r5, r3
 8007b24:	bf38      	it	cc
 8007b26:	461d      	movcc	r5, r3
 8007b28:	0553      	lsls	r3, r2, #21
 8007b2a:	d527      	bpl.n	8007b7c <__ssputs_r+0x8c>
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	f7ff ff53 	bl	80079d8 <_malloc_r>
 8007b32:	4606      	mov	r6, r0
 8007b34:	b360      	cbz	r0, 8007b90 <__ssputs_r+0xa0>
 8007b36:	6921      	ldr	r1, [r4, #16]
 8007b38:	464a      	mov	r2, r9
 8007b3a:	f000 faeb 	bl	8008114 <memcpy>
 8007b3e:	89a3      	ldrh	r3, [r4, #12]
 8007b40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b48:	81a3      	strh	r3, [r4, #12]
 8007b4a:	6126      	str	r6, [r4, #16]
 8007b4c:	6165      	str	r5, [r4, #20]
 8007b4e:	444e      	add	r6, r9
 8007b50:	eba5 0509 	sub.w	r5, r5, r9
 8007b54:	6026      	str	r6, [r4, #0]
 8007b56:	60a5      	str	r5, [r4, #8]
 8007b58:	463e      	mov	r6, r7
 8007b5a:	42be      	cmp	r6, r7
 8007b5c:	d900      	bls.n	8007b60 <__ssputs_r+0x70>
 8007b5e:	463e      	mov	r6, r7
 8007b60:	6820      	ldr	r0, [r4, #0]
 8007b62:	4632      	mov	r2, r6
 8007b64:	4641      	mov	r1, r8
 8007b66:	f000 faab 	bl	80080c0 <memmove>
 8007b6a:	68a3      	ldr	r3, [r4, #8]
 8007b6c:	1b9b      	subs	r3, r3, r6
 8007b6e:	60a3      	str	r3, [r4, #8]
 8007b70:	6823      	ldr	r3, [r4, #0]
 8007b72:	4433      	add	r3, r6
 8007b74:	6023      	str	r3, [r4, #0]
 8007b76:	2000      	movs	r0, #0
 8007b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b7c:	462a      	mov	r2, r5
 8007b7e:	f000 fad7 	bl	8008130 <_realloc_r>
 8007b82:	4606      	mov	r6, r0
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d1e0      	bne.n	8007b4a <__ssputs_r+0x5a>
 8007b88:	6921      	ldr	r1, [r4, #16]
 8007b8a:	4650      	mov	r0, sl
 8007b8c:	f7ff feb8 	bl	8007900 <_free_r>
 8007b90:	230c      	movs	r3, #12
 8007b92:	f8ca 3000 	str.w	r3, [sl]
 8007b96:	89a3      	ldrh	r3, [r4, #12]
 8007b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b9c:	81a3      	strh	r3, [r4, #12]
 8007b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba2:	e7e9      	b.n	8007b78 <__ssputs_r+0x88>

08007ba4 <_svfiprintf_r>:
 8007ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba8:	4698      	mov	r8, r3
 8007baa:	898b      	ldrh	r3, [r1, #12]
 8007bac:	061b      	lsls	r3, r3, #24
 8007bae:	b09d      	sub	sp, #116	; 0x74
 8007bb0:	4607      	mov	r7, r0
 8007bb2:	460d      	mov	r5, r1
 8007bb4:	4614      	mov	r4, r2
 8007bb6:	d50e      	bpl.n	8007bd6 <_svfiprintf_r+0x32>
 8007bb8:	690b      	ldr	r3, [r1, #16]
 8007bba:	b963      	cbnz	r3, 8007bd6 <_svfiprintf_r+0x32>
 8007bbc:	2140      	movs	r1, #64	; 0x40
 8007bbe:	f7ff ff0b 	bl	80079d8 <_malloc_r>
 8007bc2:	6028      	str	r0, [r5, #0]
 8007bc4:	6128      	str	r0, [r5, #16]
 8007bc6:	b920      	cbnz	r0, 8007bd2 <_svfiprintf_r+0x2e>
 8007bc8:	230c      	movs	r3, #12
 8007bca:	603b      	str	r3, [r7, #0]
 8007bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd0:	e0d0      	b.n	8007d74 <_svfiprintf_r+0x1d0>
 8007bd2:	2340      	movs	r3, #64	; 0x40
 8007bd4:	616b      	str	r3, [r5, #20]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8007bda:	2320      	movs	r3, #32
 8007bdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007be0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007be4:	2330      	movs	r3, #48	; 0x30
 8007be6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007d8c <_svfiprintf_r+0x1e8>
 8007bea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bee:	f04f 0901 	mov.w	r9, #1
 8007bf2:	4623      	mov	r3, r4
 8007bf4:	469a      	mov	sl, r3
 8007bf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bfa:	b10a      	cbz	r2, 8007c00 <_svfiprintf_r+0x5c>
 8007bfc:	2a25      	cmp	r2, #37	; 0x25
 8007bfe:	d1f9      	bne.n	8007bf4 <_svfiprintf_r+0x50>
 8007c00:	ebba 0b04 	subs.w	fp, sl, r4
 8007c04:	d00b      	beq.n	8007c1e <_svfiprintf_r+0x7a>
 8007c06:	465b      	mov	r3, fp
 8007c08:	4622      	mov	r2, r4
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	4638      	mov	r0, r7
 8007c0e:	f7ff ff6f 	bl	8007af0 <__ssputs_r>
 8007c12:	3001      	adds	r0, #1
 8007c14:	f000 80a9 	beq.w	8007d6a <_svfiprintf_r+0x1c6>
 8007c18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c1a:	445a      	add	r2, fp
 8007c1c:	9209      	str	r2, [sp, #36]	; 0x24
 8007c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 80a1 	beq.w	8007d6a <_svfiprintf_r+0x1c6>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c32:	f10a 0a01 	add.w	sl, sl, #1
 8007c36:	9304      	str	r3, [sp, #16]
 8007c38:	9307      	str	r3, [sp, #28]
 8007c3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c3e:	931a      	str	r3, [sp, #104]	; 0x68
 8007c40:	4654      	mov	r4, sl
 8007c42:	2205      	movs	r2, #5
 8007c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c48:	4850      	ldr	r0, [pc, #320]	; (8007d8c <_svfiprintf_r+0x1e8>)
 8007c4a:	f7f8 fac1 	bl	80001d0 <memchr>
 8007c4e:	9a04      	ldr	r2, [sp, #16]
 8007c50:	b9d8      	cbnz	r0, 8007c8a <_svfiprintf_r+0xe6>
 8007c52:	06d0      	lsls	r0, r2, #27
 8007c54:	bf44      	itt	mi
 8007c56:	2320      	movmi	r3, #32
 8007c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c5c:	0711      	lsls	r1, r2, #28
 8007c5e:	bf44      	itt	mi
 8007c60:	232b      	movmi	r3, #43	; 0x2b
 8007c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c66:	f89a 3000 	ldrb.w	r3, [sl]
 8007c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c6c:	d015      	beq.n	8007c9a <_svfiprintf_r+0xf6>
 8007c6e:	9a07      	ldr	r2, [sp, #28]
 8007c70:	4654      	mov	r4, sl
 8007c72:	2000      	movs	r0, #0
 8007c74:	f04f 0c0a 	mov.w	ip, #10
 8007c78:	4621      	mov	r1, r4
 8007c7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c7e:	3b30      	subs	r3, #48	; 0x30
 8007c80:	2b09      	cmp	r3, #9
 8007c82:	d94d      	bls.n	8007d20 <_svfiprintf_r+0x17c>
 8007c84:	b1b0      	cbz	r0, 8007cb4 <_svfiprintf_r+0x110>
 8007c86:	9207      	str	r2, [sp, #28]
 8007c88:	e014      	b.n	8007cb4 <_svfiprintf_r+0x110>
 8007c8a:	eba0 0308 	sub.w	r3, r0, r8
 8007c8e:	fa09 f303 	lsl.w	r3, r9, r3
 8007c92:	4313      	orrs	r3, r2
 8007c94:	9304      	str	r3, [sp, #16]
 8007c96:	46a2      	mov	sl, r4
 8007c98:	e7d2      	b.n	8007c40 <_svfiprintf_r+0x9c>
 8007c9a:	9b03      	ldr	r3, [sp, #12]
 8007c9c:	1d19      	adds	r1, r3, #4
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	9103      	str	r1, [sp, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	bfbb      	ittet	lt
 8007ca6:	425b      	neglt	r3, r3
 8007ca8:	f042 0202 	orrlt.w	r2, r2, #2
 8007cac:	9307      	strge	r3, [sp, #28]
 8007cae:	9307      	strlt	r3, [sp, #28]
 8007cb0:	bfb8      	it	lt
 8007cb2:	9204      	strlt	r2, [sp, #16]
 8007cb4:	7823      	ldrb	r3, [r4, #0]
 8007cb6:	2b2e      	cmp	r3, #46	; 0x2e
 8007cb8:	d10c      	bne.n	8007cd4 <_svfiprintf_r+0x130>
 8007cba:	7863      	ldrb	r3, [r4, #1]
 8007cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8007cbe:	d134      	bne.n	8007d2a <_svfiprintf_r+0x186>
 8007cc0:	9b03      	ldr	r3, [sp, #12]
 8007cc2:	1d1a      	adds	r2, r3, #4
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	9203      	str	r2, [sp, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	bfb8      	it	lt
 8007ccc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cd0:	3402      	adds	r4, #2
 8007cd2:	9305      	str	r3, [sp, #20]
 8007cd4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007d9c <_svfiprintf_r+0x1f8>
 8007cd8:	7821      	ldrb	r1, [r4, #0]
 8007cda:	2203      	movs	r2, #3
 8007cdc:	4650      	mov	r0, sl
 8007cde:	f7f8 fa77 	bl	80001d0 <memchr>
 8007ce2:	b138      	cbz	r0, 8007cf4 <_svfiprintf_r+0x150>
 8007ce4:	9b04      	ldr	r3, [sp, #16]
 8007ce6:	eba0 000a 	sub.w	r0, r0, sl
 8007cea:	2240      	movs	r2, #64	; 0x40
 8007cec:	4082      	lsls	r2, r0
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	3401      	adds	r4, #1
 8007cf2:	9304      	str	r3, [sp, #16]
 8007cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cf8:	4825      	ldr	r0, [pc, #148]	; (8007d90 <_svfiprintf_r+0x1ec>)
 8007cfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cfe:	2206      	movs	r2, #6
 8007d00:	f7f8 fa66 	bl	80001d0 <memchr>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	d038      	beq.n	8007d7a <_svfiprintf_r+0x1d6>
 8007d08:	4b22      	ldr	r3, [pc, #136]	; (8007d94 <_svfiprintf_r+0x1f0>)
 8007d0a:	bb1b      	cbnz	r3, 8007d54 <_svfiprintf_r+0x1b0>
 8007d0c:	9b03      	ldr	r3, [sp, #12]
 8007d0e:	3307      	adds	r3, #7
 8007d10:	f023 0307 	bic.w	r3, r3, #7
 8007d14:	3308      	adds	r3, #8
 8007d16:	9303      	str	r3, [sp, #12]
 8007d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d1a:	4433      	add	r3, r6
 8007d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d1e:	e768      	b.n	8007bf2 <_svfiprintf_r+0x4e>
 8007d20:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d24:	460c      	mov	r4, r1
 8007d26:	2001      	movs	r0, #1
 8007d28:	e7a6      	b.n	8007c78 <_svfiprintf_r+0xd4>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	3401      	adds	r4, #1
 8007d2e:	9305      	str	r3, [sp, #20]
 8007d30:	4619      	mov	r1, r3
 8007d32:	f04f 0c0a 	mov.w	ip, #10
 8007d36:	4620      	mov	r0, r4
 8007d38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d3c:	3a30      	subs	r2, #48	; 0x30
 8007d3e:	2a09      	cmp	r2, #9
 8007d40:	d903      	bls.n	8007d4a <_svfiprintf_r+0x1a6>
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d0c6      	beq.n	8007cd4 <_svfiprintf_r+0x130>
 8007d46:	9105      	str	r1, [sp, #20]
 8007d48:	e7c4      	b.n	8007cd4 <_svfiprintf_r+0x130>
 8007d4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d4e:	4604      	mov	r4, r0
 8007d50:	2301      	movs	r3, #1
 8007d52:	e7f0      	b.n	8007d36 <_svfiprintf_r+0x192>
 8007d54:	ab03      	add	r3, sp, #12
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	462a      	mov	r2, r5
 8007d5a:	4b0f      	ldr	r3, [pc, #60]	; (8007d98 <_svfiprintf_r+0x1f4>)
 8007d5c:	a904      	add	r1, sp, #16
 8007d5e:	4638      	mov	r0, r7
 8007d60:	f3af 8000 	nop.w
 8007d64:	1c42      	adds	r2, r0, #1
 8007d66:	4606      	mov	r6, r0
 8007d68:	d1d6      	bne.n	8007d18 <_svfiprintf_r+0x174>
 8007d6a:	89ab      	ldrh	r3, [r5, #12]
 8007d6c:	065b      	lsls	r3, r3, #25
 8007d6e:	f53f af2d 	bmi.w	8007bcc <_svfiprintf_r+0x28>
 8007d72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d74:	b01d      	add	sp, #116	; 0x74
 8007d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7a:	ab03      	add	r3, sp, #12
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	462a      	mov	r2, r5
 8007d80:	4b05      	ldr	r3, [pc, #20]	; (8007d98 <_svfiprintf_r+0x1f4>)
 8007d82:	a904      	add	r1, sp, #16
 8007d84:	4638      	mov	r0, r7
 8007d86:	f000 f879 	bl	8007e7c <_printf_i>
 8007d8a:	e7eb      	b.n	8007d64 <_svfiprintf_r+0x1c0>
 8007d8c:	0800b234 	.word	0x0800b234
 8007d90:	0800b23e 	.word	0x0800b23e
 8007d94:	00000000 	.word	0x00000000
 8007d98:	08007af1 	.word	0x08007af1
 8007d9c:	0800b23a 	.word	0x0800b23a

08007da0 <_printf_common>:
 8007da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007da4:	4616      	mov	r6, r2
 8007da6:	4699      	mov	r9, r3
 8007da8:	688a      	ldr	r2, [r1, #8]
 8007daa:	690b      	ldr	r3, [r1, #16]
 8007dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007db0:	4293      	cmp	r3, r2
 8007db2:	bfb8      	it	lt
 8007db4:	4613      	movlt	r3, r2
 8007db6:	6033      	str	r3, [r6, #0]
 8007db8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007dbc:	4607      	mov	r7, r0
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	b10a      	cbz	r2, 8007dc6 <_printf_common+0x26>
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	6033      	str	r3, [r6, #0]
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	0699      	lsls	r1, r3, #26
 8007dca:	bf42      	ittt	mi
 8007dcc:	6833      	ldrmi	r3, [r6, #0]
 8007dce:	3302      	addmi	r3, #2
 8007dd0:	6033      	strmi	r3, [r6, #0]
 8007dd2:	6825      	ldr	r5, [r4, #0]
 8007dd4:	f015 0506 	ands.w	r5, r5, #6
 8007dd8:	d106      	bne.n	8007de8 <_printf_common+0x48>
 8007dda:	f104 0a19 	add.w	sl, r4, #25
 8007dde:	68e3      	ldr	r3, [r4, #12]
 8007de0:	6832      	ldr	r2, [r6, #0]
 8007de2:	1a9b      	subs	r3, r3, r2
 8007de4:	42ab      	cmp	r3, r5
 8007de6:	dc26      	bgt.n	8007e36 <_printf_common+0x96>
 8007de8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007dec:	1e13      	subs	r3, r2, #0
 8007dee:	6822      	ldr	r2, [r4, #0]
 8007df0:	bf18      	it	ne
 8007df2:	2301      	movne	r3, #1
 8007df4:	0692      	lsls	r2, r2, #26
 8007df6:	d42b      	bmi.n	8007e50 <_printf_common+0xb0>
 8007df8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dfc:	4649      	mov	r1, r9
 8007dfe:	4638      	mov	r0, r7
 8007e00:	47c0      	blx	r8
 8007e02:	3001      	adds	r0, #1
 8007e04:	d01e      	beq.n	8007e44 <_printf_common+0xa4>
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	6922      	ldr	r2, [r4, #16]
 8007e0a:	f003 0306 	and.w	r3, r3, #6
 8007e0e:	2b04      	cmp	r3, #4
 8007e10:	bf02      	ittt	eq
 8007e12:	68e5      	ldreq	r5, [r4, #12]
 8007e14:	6833      	ldreq	r3, [r6, #0]
 8007e16:	1aed      	subeq	r5, r5, r3
 8007e18:	68a3      	ldr	r3, [r4, #8]
 8007e1a:	bf0c      	ite	eq
 8007e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e20:	2500      	movne	r5, #0
 8007e22:	4293      	cmp	r3, r2
 8007e24:	bfc4      	itt	gt
 8007e26:	1a9b      	subgt	r3, r3, r2
 8007e28:	18ed      	addgt	r5, r5, r3
 8007e2a:	2600      	movs	r6, #0
 8007e2c:	341a      	adds	r4, #26
 8007e2e:	42b5      	cmp	r5, r6
 8007e30:	d11a      	bne.n	8007e68 <_printf_common+0xc8>
 8007e32:	2000      	movs	r0, #0
 8007e34:	e008      	b.n	8007e48 <_printf_common+0xa8>
 8007e36:	2301      	movs	r3, #1
 8007e38:	4652      	mov	r2, sl
 8007e3a:	4649      	mov	r1, r9
 8007e3c:	4638      	mov	r0, r7
 8007e3e:	47c0      	blx	r8
 8007e40:	3001      	adds	r0, #1
 8007e42:	d103      	bne.n	8007e4c <_printf_common+0xac>
 8007e44:	f04f 30ff 	mov.w	r0, #4294967295
 8007e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e4c:	3501      	adds	r5, #1
 8007e4e:	e7c6      	b.n	8007dde <_printf_common+0x3e>
 8007e50:	18e1      	adds	r1, r4, r3
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	2030      	movs	r0, #48	; 0x30
 8007e56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e5a:	4422      	add	r2, r4
 8007e5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e64:	3302      	adds	r3, #2
 8007e66:	e7c7      	b.n	8007df8 <_printf_common+0x58>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	4622      	mov	r2, r4
 8007e6c:	4649      	mov	r1, r9
 8007e6e:	4638      	mov	r0, r7
 8007e70:	47c0      	blx	r8
 8007e72:	3001      	adds	r0, #1
 8007e74:	d0e6      	beq.n	8007e44 <_printf_common+0xa4>
 8007e76:	3601      	adds	r6, #1
 8007e78:	e7d9      	b.n	8007e2e <_printf_common+0x8e>
	...

08007e7c <_printf_i>:
 8007e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e80:	7e0f      	ldrb	r7, [r1, #24]
 8007e82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e84:	2f78      	cmp	r7, #120	; 0x78
 8007e86:	4691      	mov	r9, r2
 8007e88:	4680      	mov	r8, r0
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	469a      	mov	sl, r3
 8007e8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e92:	d807      	bhi.n	8007ea4 <_printf_i+0x28>
 8007e94:	2f62      	cmp	r7, #98	; 0x62
 8007e96:	d80a      	bhi.n	8007eae <_printf_i+0x32>
 8007e98:	2f00      	cmp	r7, #0
 8007e9a:	f000 80d4 	beq.w	8008046 <_printf_i+0x1ca>
 8007e9e:	2f58      	cmp	r7, #88	; 0x58
 8007ea0:	f000 80c0 	beq.w	8008024 <_printf_i+0x1a8>
 8007ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ea8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007eac:	e03a      	b.n	8007f24 <_printf_i+0xa8>
 8007eae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007eb2:	2b15      	cmp	r3, #21
 8007eb4:	d8f6      	bhi.n	8007ea4 <_printf_i+0x28>
 8007eb6:	a101      	add	r1, pc, #4	; (adr r1, 8007ebc <_printf_i+0x40>)
 8007eb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ebc:	08007f15 	.word	0x08007f15
 8007ec0:	08007f29 	.word	0x08007f29
 8007ec4:	08007ea5 	.word	0x08007ea5
 8007ec8:	08007ea5 	.word	0x08007ea5
 8007ecc:	08007ea5 	.word	0x08007ea5
 8007ed0:	08007ea5 	.word	0x08007ea5
 8007ed4:	08007f29 	.word	0x08007f29
 8007ed8:	08007ea5 	.word	0x08007ea5
 8007edc:	08007ea5 	.word	0x08007ea5
 8007ee0:	08007ea5 	.word	0x08007ea5
 8007ee4:	08007ea5 	.word	0x08007ea5
 8007ee8:	0800802d 	.word	0x0800802d
 8007eec:	08007f55 	.word	0x08007f55
 8007ef0:	08007fe7 	.word	0x08007fe7
 8007ef4:	08007ea5 	.word	0x08007ea5
 8007ef8:	08007ea5 	.word	0x08007ea5
 8007efc:	0800804f 	.word	0x0800804f
 8007f00:	08007ea5 	.word	0x08007ea5
 8007f04:	08007f55 	.word	0x08007f55
 8007f08:	08007ea5 	.word	0x08007ea5
 8007f0c:	08007ea5 	.word	0x08007ea5
 8007f10:	08007fef 	.word	0x08007fef
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	1d1a      	adds	r2, r3, #4
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	602a      	str	r2, [r5, #0]
 8007f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f24:	2301      	movs	r3, #1
 8007f26:	e09f      	b.n	8008068 <_printf_i+0x1ec>
 8007f28:	6820      	ldr	r0, [r4, #0]
 8007f2a:	682b      	ldr	r3, [r5, #0]
 8007f2c:	0607      	lsls	r7, r0, #24
 8007f2e:	f103 0104 	add.w	r1, r3, #4
 8007f32:	6029      	str	r1, [r5, #0]
 8007f34:	d501      	bpl.n	8007f3a <_printf_i+0xbe>
 8007f36:	681e      	ldr	r6, [r3, #0]
 8007f38:	e003      	b.n	8007f42 <_printf_i+0xc6>
 8007f3a:	0646      	lsls	r6, r0, #25
 8007f3c:	d5fb      	bpl.n	8007f36 <_printf_i+0xba>
 8007f3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007f42:	2e00      	cmp	r6, #0
 8007f44:	da03      	bge.n	8007f4e <_printf_i+0xd2>
 8007f46:	232d      	movs	r3, #45	; 0x2d
 8007f48:	4276      	negs	r6, r6
 8007f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f4e:	485a      	ldr	r0, [pc, #360]	; (80080b8 <_printf_i+0x23c>)
 8007f50:	230a      	movs	r3, #10
 8007f52:	e012      	b.n	8007f7a <_printf_i+0xfe>
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	6820      	ldr	r0, [r4, #0]
 8007f58:	1d19      	adds	r1, r3, #4
 8007f5a:	6029      	str	r1, [r5, #0]
 8007f5c:	0605      	lsls	r5, r0, #24
 8007f5e:	d501      	bpl.n	8007f64 <_printf_i+0xe8>
 8007f60:	681e      	ldr	r6, [r3, #0]
 8007f62:	e002      	b.n	8007f6a <_printf_i+0xee>
 8007f64:	0641      	lsls	r1, r0, #25
 8007f66:	d5fb      	bpl.n	8007f60 <_printf_i+0xe4>
 8007f68:	881e      	ldrh	r6, [r3, #0]
 8007f6a:	4853      	ldr	r0, [pc, #332]	; (80080b8 <_printf_i+0x23c>)
 8007f6c:	2f6f      	cmp	r7, #111	; 0x6f
 8007f6e:	bf0c      	ite	eq
 8007f70:	2308      	moveq	r3, #8
 8007f72:	230a      	movne	r3, #10
 8007f74:	2100      	movs	r1, #0
 8007f76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f7a:	6865      	ldr	r5, [r4, #4]
 8007f7c:	60a5      	str	r5, [r4, #8]
 8007f7e:	2d00      	cmp	r5, #0
 8007f80:	bfa2      	ittt	ge
 8007f82:	6821      	ldrge	r1, [r4, #0]
 8007f84:	f021 0104 	bicge.w	r1, r1, #4
 8007f88:	6021      	strge	r1, [r4, #0]
 8007f8a:	b90e      	cbnz	r6, 8007f90 <_printf_i+0x114>
 8007f8c:	2d00      	cmp	r5, #0
 8007f8e:	d04b      	beq.n	8008028 <_printf_i+0x1ac>
 8007f90:	4615      	mov	r5, r2
 8007f92:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f96:	fb03 6711 	mls	r7, r3, r1, r6
 8007f9a:	5dc7      	ldrb	r7, [r0, r7]
 8007f9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007fa0:	4637      	mov	r7, r6
 8007fa2:	42bb      	cmp	r3, r7
 8007fa4:	460e      	mov	r6, r1
 8007fa6:	d9f4      	bls.n	8007f92 <_printf_i+0x116>
 8007fa8:	2b08      	cmp	r3, #8
 8007faa:	d10b      	bne.n	8007fc4 <_printf_i+0x148>
 8007fac:	6823      	ldr	r3, [r4, #0]
 8007fae:	07de      	lsls	r6, r3, #31
 8007fb0:	d508      	bpl.n	8007fc4 <_printf_i+0x148>
 8007fb2:	6923      	ldr	r3, [r4, #16]
 8007fb4:	6861      	ldr	r1, [r4, #4]
 8007fb6:	4299      	cmp	r1, r3
 8007fb8:	bfde      	ittt	le
 8007fba:	2330      	movle	r3, #48	; 0x30
 8007fbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007fc4:	1b52      	subs	r2, r2, r5
 8007fc6:	6122      	str	r2, [r4, #16]
 8007fc8:	f8cd a000 	str.w	sl, [sp]
 8007fcc:	464b      	mov	r3, r9
 8007fce:	aa03      	add	r2, sp, #12
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	f7ff fee4 	bl	8007da0 <_printf_common>
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d14a      	bne.n	8008072 <_printf_i+0x1f6>
 8007fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe0:	b004      	add	sp, #16
 8007fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	f043 0320 	orr.w	r3, r3, #32
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	4833      	ldr	r0, [pc, #204]	; (80080bc <_printf_i+0x240>)
 8007ff0:	2778      	movs	r7, #120	; 0x78
 8007ff2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	6829      	ldr	r1, [r5, #0]
 8007ffa:	061f      	lsls	r7, r3, #24
 8007ffc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008000:	d402      	bmi.n	8008008 <_printf_i+0x18c>
 8008002:	065f      	lsls	r7, r3, #25
 8008004:	bf48      	it	mi
 8008006:	b2b6      	uxthmi	r6, r6
 8008008:	07df      	lsls	r7, r3, #31
 800800a:	bf48      	it	mi
 800800c:	f043 0320 	orrmi.w	r3, r3, #32
 8008010:	6029      	str	r1, [r5, #0]
 8008012:	bf48      	it	mi
 8008014:	6023      	strmi	r3, [r4, #0]
 8008016:	b91e      	cbnz	r6, 8008020 <_printf_i+0x1a4>
 8008018:	6823      	ldr	r3, [r4, #0]
 800801a:	f023 0320 	bic.w	r3, r3, #32
 800801e:	6023      	str	r3, [r4, #0]
 8008020:	2310      	movs	r3, #16
 8008022:	e7a7      	b.n	8007f74 <_printf_i+0xf8>
 8008024:	4824      	ldr	r0, [pc, #144]	; (80080b8 <_printf_i+0x23c>)
 8008026:	e7e4      	b.n	8007ff2 <_printf_i+0x176>
 8008028:	4615      	mov	r5, r2
 800802a:	e7bd      	b.n	8007fa8 <_printf_i+0x12c>
 800802c:	682b      	ldr	r3, [r5, #0]
 800802e:	6826      	ldr	r6, [r4, #0]
 8008030:	6961      	ldr	r1, [r4, #20]
 8008032:	1d18      	adds	r0, r3, #4
 8008034:	6028      	str	r0, [r5, #0]
 8008036:	0635      	lsls	r5, r6, #24
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	d501      	bpl.n	8008040 <_printf_i+0x1c4>
 800803c:	6019      	str	r1, [r3, #0]
 800803e:	e002      	b.n	8008046 <_printf_i+0x1ca>
 8008040:	0670      	lsls	r0, r6, #25
 8008042:	d5fb      	bpl.n	800803c <_printf_i+0x1c0>
 8008044:	8019      	strh	r1, [r3, #0]
 8008046:	2300      	movs	r3, #0
 8008048:	6123      	str	r3, [r4, #16]
 800804a:	4615      	mov	r5, r2
 800804c:	e7bc      	b.n	8007fc8 <_printf_i+0x14c>
 800804e:	682b      	ldr	r3, [r5, #0]
 8008050:	1d1a      	adds	r2, r3, #4
 8008052:	602a      	str	r2, [r5, #0]
 8008054:	681d      	ldr	r5, [r3, #0]
 8008056:	6862      	ldr	r2, [r4, #4]
 8008058:	2100      	movs	r1, #0
 800805a:	4628      	mov	r0, r5
 800805c:	f7f8 f8b8 	bl	80001d0 <memchr>
 8008060:	b108      	cbz	r0, 8008066 <_printf_i+0x1ea>
 8008062:	1b40      	subs	r0, r0, r5
 8008064:	6060      	str	r0, [r4, #4]
 8008066:	6863      	ldr	r3, [r4, #4]
 8008068:	6123      	str	r3, [r4, #16]
 800806a:	2300      	movs	r3, #0
 800806c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008070:	e7aa      	b.n	8007fc8 <_printf_i+0x14c>
 8008072:	6923      	ldr	r3, [r4, #16]
 8008074:	462a      	mov	r2, r5
 8008076:	4649      	mov	r1, r9
 8008078:	4640      	mov	r0, r8
 800807a:	47d0      	blx	sl
 800807c:	3001      	adds	r0, #1
 800807e:	d0ad      	beq.n	8007fdc <_printf_i+0x160>
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	079b      	lsls	r3, r3, #30
 8008084:	d413      	bmi.n	80080ae <_printf_i+0x232>
 8008086:	68e0      	ldr	r0, [r4, #12]
 8008088:	9b03      	ldr	r3, [sp, #12]
 800808a:	4298      	cmp	r0, r3
 800808c:	bfb8      	it	lt
 800808e:	4618      	movlt	r0, r3
 8008090:	e7a6      	b.n	8007fe0 <_printf_i+0x164>
 8008092:	2301      	movs	r3, #1
 8008094:	4632      	mov	r2, r6
 8008096:	4649      	mov	r1, r9
 8008098:	4640      	mov	r0, r8
 800809a:	47d0      	blx	sl
 800809c:	3001      	adds	r0, #1
 800809e:	d09d      	beq.n	8007fdc <_printf_i+0x160>
 80080a0:	3501      	adds	r5, #1
 80080a2:	68e3      	ldr	r3, [r4, #12]
 80080a4:	9903      	ldr	r1, [sp, #12]
 80080a6:	1a5b      	subs	r3, r3, r1
 80080a8:	42ab      	cmp	r3, r5
 80080aa:	dcf2      	bgt.n	8008092 <_printf_i+0x216>
 80080ac:	e7eb      	b.n	8008086 <_printf_i+0x20a>
 80080ae:	2500      	movs	r5, #0
 80080b0:	f104 0619 	add.w	r6, r4, #25
 80080b4:	e7f5      	b.n	80080a2 <_printf_i+0x226>
 80080b6:	bf00      	nop
 80080b8:	0800b245 	.word	0x0800b245
 80080bc:	0800b256 	.word	0x0800b256

080080c0 <memmove>:
 80080c0:	4288      	cmp	r0, r1
 80080c2:	b510      	push	{r4, lr}
 80080c4:	eb01 0402 	add.w	r4, r1, r2
 80080c8:	d902      	bls.n	80080d0 <memmove+0x10>
 80080ca:	4284      	cmp	r4, r0
 80080cc:	4623      	mov	r3, r4
 80080ce:	d807      	bhi.n	80080e0 <memmove+0x20>
 80080d0:	1e43      	subs	r3, r0, #1
 80080d2:	42a1      	cmp	r1, r4
 80080d4:	d008      	beq.n	80080e8 <memmove+0x28>
 80080d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080de:	e7f8      	b.n	80080d2 <memmove+0x12>
 80080e0:	4402      	add	r2, r0
 80080e2:	4601      	mov	r1, r0
 80080e4:	428a      	cmp	r2, r1
 80080e6:	d100      	bne.n	80080ea <memmove+0x2a>
 80080e8:	bd10      	pop	{r4, pc}
 80080ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080f2:	e7f7      	b.n	80080e4 <memmove+0x24>

080080f4 <_sbrk_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	4d06      	ldr	r5, [pc, #24]	; (8008110 <_sbrk_r+0x1c>)
 80080f8:	2300      	movs	r3, #0
 80080fa:	4604      	mov	r4, r0
 80080fc:	4608      	mov	r0, r1
 80080fe:	602b      	str	r3, [r5, #0]
 8008100:	f7fa fee6 	bl	8002ed0 <_sbrk>
 8008104:	1c43      	adds	r3, r0, #1
 8008106:	d102      	bne.n	800810e <_sbrk_r+0x1a>
 8008108:	682b      	ldr	r3, [r5, #0]
 800810a:	b103      	cbz	r3, 800810e <_sbrk_r+0x1a>
 800810c:	6023      	str	r3, [r4, #0]
 800810e:	bd38      	pop	{r3, r4, r5, pc}
 8008110:	20000c1c 	.word	0x20000c1c

08008114 <memcpy>:
 8008114:	440a      	add	r2, r1
 8008116:	4291      	cmp	r1, r2
 8008118:	f100 33ff 	add.w	r3, r0, #4294967295
 800811c:	d100      	bne.n	8008120 <memcpy+0xc>
 800811e:	4770      	bx	lr
 8008120:	b510      	push	{r4, lr}
 8008122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800812a:	4291      	cmp	r1, r2
 800812c:	d1f9      	bne.n	8008122 <memcpy+0xe>
 800812e:	bd10      	pop	{r4, pc}

08008130 <_realloc_r>:
 8008130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008134:	4680      	mov	r8, r0
 8008136:	4614      	mov	r4, r2
 8008138:	460e      	mov	r6, r1
 800813a:	b921      	cbnz	r1, 8008146 <_realloc_r+0x16>
 800813c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008140:	4611      	mov	r1, r2
 8008142:	f7ff bc49 	b.w	80079d8 <_malloc_r>
 8008146:	b92a      	cbnz	r2, 8008154 <_realloc_r+0x24>
 8008148:	f7ff fbda 	bl	8007900 <_free_r>
 800814c:	4625      	mov	r5, r4
 800814e:	4628      	mov	r0, r5
 8008150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008154:	f000 f81b 	bl	800818e <_malloc_usable_size_r>
 8008158:	4284      	cmp	r4, r0
 800815a:	4607      	mov	r7, r0
 800815c:	d802      	bhi.n	8008164 <_realloc_r+0x34>
 800815e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008162:	d812      	bhi.n	800818a <_realloc_r+0x5a>
 8008164:	4621      	mov	r1, r4
 8008166:	4640      	mov	r0, r8
 8008168:	f7ff fc36 	bl	80079d8 <_malloc_r>
 800816c:	4605      	mov	r5, r0
 800816e:	2800      	cmp	r0, #0
 8008170:	d0ed      	beq.n	800814e <_realloc_r+0x1e>
 8008172:	42bc      	cmp	r4, r7
 8008174:	4622      	mov	r2, r4
 8008176:	4631      	mov	r1, r6
 8008178:	bf28      	it	cs
 800817a:	463a      	movcs	r2, r7
 800817c:	f7ff ffca 	bl	8008114 <memcpy>
 8008180:	4631      	mov	r1, r6
 8008182:	4640      	mov	r0, r8
 8008184:	f7ff fbbc 	bl	8007900 <_free_r>
 8008188:	e7e1      	b.n	800814e <_realloc_r+0x1e>
 800818a:	4635      	mov	r5, r6
 800818c:	e7df      	b.n	800814e <_realloc_r+0x1e>

0800818e <_malloc_usable_size_r>:
 800818e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008192:	1f18      	subs	r0, r3, #4
 8008194:	2b00      	cmp	r3, #0
 8008196:	bfbc      	itt	lt
 8008198:	580b      	ldrlt	r3, [r1, r0]
 800819a:	18c0      	addlt	r0, r0, r3
 800819c:	4770      	bx	lr
	...

080081a0 <_init>:
 80081a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a2:	bf00      	nop
 80081a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081a6:	bc08      	pop	{r3}
 80081a8:	469e      	mov	lr, r3
 80081aa:	4770      	bx	lr

080081ac <_fini>:
 80081ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ae:	bf00      	nop
 80081b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081b2:	bc08      	pop	{r3}
 80081b4:	469e      	mov	lr, r3
 80081b6:	4770      	bx	lr
